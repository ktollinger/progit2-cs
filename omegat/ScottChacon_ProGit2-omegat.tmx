<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="O aplikaci OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.5.3_0_r7969:7974" segtype="sentence" srclang="EN"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN">
        <seg>!</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143157Z" creationid="Prikryl" creationdate="20160115T143157Z">
        <seg>!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#
# Changes to be committed:
#	modified:   index.html
#
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081201Z" creationid="Prikryl" creationdate="20151120T081201Z">
        <seg>#
# Changes to be committed:
#	modified:   index.html
#
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081141Z" creationid="Prikryl" creationdate="20151120T081141Z">
        <seg># If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># On branch master
# All conflicts fixed but you are still merging.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081155Z" creationid="Prikryl" creationdate="20151120T081155Z">
        <seg># On branch master
# All conflicts fixed but you are still merging.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T222112Z" creationid="Prikryl" creationdate="20151031T222112Z">
        <seg># On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Please enter the commit message for your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205659Z" creationid="Prikryl" creationdate="20151022T205659Z">
        <seg># Please enter the commit message for your changes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># This is the 2nd commit message:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222816Z" creationid="Prikryl" creationdate="20151023T222816Z">
        <seg># This is the 2nd commit message:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># This is the 3rd commit message:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222926Z" creationid="Prikryl" creationdate="20151023T222926Z">
        <seg># This is the 3rd commit message:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># [ insert acl_access_data method from above ]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090915Z" creationid="Prikryl" creationdate="20151024T090915Z">
        <seg># [ insert acl_access_data method from above ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># but do track lib.a, even though you're ignoring .a files above
!lib.a</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T202741Z" creationid="Prikryl" creationdate="20151029T202741Z">
        <seg># ale sleduj lib.a i přes to, že se výše uvedeným pravidlem mají .a ignorovat
!lib.a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># ignore all .pdf files in the doc/ directory
doc/**/*.pdf
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T120444Z" creationid="Prikryl" creationdate="20151107T120712Z">
        <seg># ignoruj všechny .pdf soubory v adresáři doc/
doc/**/*.pdf
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># ignore all files in the build/ directory
build/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T202936Z" creationid="Prikryl" creationdate="20151029T202936Z">
        <seg># ignoruj všechny soubory v adresáři build/
build/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T203000Z" creationid="Prikryl" creationdate="20151029T203000Z">
        <seg># ignoruje doc/notes.txt, ale ne doc/server/arch.txt
doc/*.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># only ignore the TODO file in the current directory, not subdir/TODO
/TODO</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T202909Z" creationid="Prikryl" creationdate="20151029T202909Z">
        <seg># soubor TODO ignoruj jen tomto adresáři, ale neignoruj subdir/TODO
/TODO</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#!</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090717Z" creationid="Prikryl" creationdate="20151024T090717Z">
        <seg>#!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>## Starter Projects</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T093626Z" creationid="Prikryl" creationdate="20151030T093626Z">
        <seg>## Starter Projects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd ticgit
$ git remote
origin
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T164531Z" creationid="Prikryl" creationdate="20151101T164531Z">
        <seg>$ cd ticgit
$ git remote
origin
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show v1.2
tag v1.2
Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Feb 9 15:32:16 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224441Z" creationid="Prikryl" creationdate="20151107T224441Z">
        <seg>$ git show v1.2
tag v1.2
Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Feb 9 15:32:16 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$regex = /\[ref: (\d+)\]/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090836Z" creationid="Prikryl" creationdate="20151024T090836Z">
        <seg>$regex = /\[ref: (\d+)\]/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$user    = ENV['USER']</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090914Z" creationid="Prikryl" creationdate="20151024T090914Z">
        <seg>$user    = ENV['USER']</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T075222Z" creationid="Prikryl" creationdate="20151120T075222Z">
        <seg>'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T184324Z" creationid="Prikryl" creationdate="20151026T184324Z">
        <seg>Tento koncept správy verzí byl po dlouhá léta považován za standard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((Linux, installing)))
If you want to install the basic Git tools on Linux via a binary installer, you can generally do so through the basic package-management tool that comes with your distribution.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T134315Z" creationid="Prikryl" creationdate="20151115T134315Z">
        <seg>(((Linux, instalace)))
Chcete-li nainstalovat Git v Linuxu pomocí binárního instalátoru, většinou tak můžete učinit pomocí základního nástroje pro správu balíčků, který je součástí vaší distribuce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((Mac, installing)))
There are several ways to install Git on a Mac.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T205731Z" creationid="Prikryl" creationdate="20151027T205449Z">
        <seg>(((Mac, instalace)))
Na počítačích Mac můžeme Git instalovat několika způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((aliases)))
Before we finish this chapter on basic Git, there's just one little tip that can make your Git experience simpler, easier, and more familiar: aliases.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T135910Z" creationid="Prikryl" creationdate="20151107T135910Z">
        <seg>(((aliases)))
Než ukončíme tuto kapitolu věnovanou základům práce s Gitem, máme tu ještě jeden malý tip, který může učinit vaši práci s Gitem jednodušší, snazší a osobnější: aliasy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches)))
Nearly every VCS has some form of branching support.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151105T153629Z" creationid="Prikryl" creationdate="20151105T152952Z">
        <seg>(((branches)))
Nějakou formu větvení podporují téměř všechny systémy pro správu verzí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, basic workflow)))
First, let's say you're working on your project and have a couple of commits already.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153338Z" creationid="Prikryl" creationdate="20151111T153338Z">
        <seg>(((větve, základní postup)))
Řekněme, že pracujete na projektu a už jste vytvořili několik revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, creating)))
What happens if you create a new branch?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150840Z" creationid="Prikryl" creationdate="20151108T150840Z">
        <seg>(((větve, vytváření)))
Co se stane, když vytvoříte novou větev?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, deleting remote)))
Suppose you're done with a remote branch – say you and your collaborators are finished with a feature and have merged it into your remote's `master` branch (or whatever branch your stable codeline is in).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T074743Z" creationid="Prikryl" creationdate="20151214T074743Z">
        <seg>(((větve, mazání vzdálených)))
Dejme tomu, že máte vzdálenou větev hotovou -- řekněme, že jste se spolupracovníky dokončili nějakou funkčnost a začlenili ji do větve `master` vašeho vzdáleného repozitáře (nebo do jiné větve, do které umísťujete stabilní kód).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, long-running)))
Because Git uses a simple three-way merge, merging from one branch into another multiple times over a long period is generally easy to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T144954Z" creationid="Prikryl" creationdate="20151209T085931Z">
        <seg>(((větve, dlouhotrvající)))
Protože Git používá jednoduché třícestné slučování, je opakované začleňování jedné větve do druhé velmi snadné i v průběhu delšího času.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, managing)))
Now that you've created, merged, and deleted some branches, let's look at some branch-management tools that will come in handy when you begin using branches all the time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T205716Z" creationid="Prikryl" creationdate="20151124T205716Z">
        <seg>Když už jste vytvořili, sloučili a odstranili nějaké větve, podívejme se na pár nástrojů pro správu větví, které se vám při soustavném používání větví budou hodit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, merging)))(((merging)))
Suppose you've decided that your issue #53 work is complete and ready to be merged into your `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T125205Z" creationid="Prikryl" creationdate="20151115T153021Z">
        <seg>(((větve, slučování)))(((slučování)))
Předpokládejme, že jste se rozhodli, že práce na problému #53 je hotová a lze ji začlenit do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, remote)))(((references, remote)))
Remote references are references (pointers) in your remote repositories, including branches, tags, and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T103747Z" creationid="Prikryl" creationdate="20151210T081137Z">
        <seg>(((větve, vzdálené)))(((reference, vzdálené)))
Vzdálené reference jsou odkazy (ukazatelé) ve vašich vzdálených repozitářích a zahrnují větve, značky (tag) a další. </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, switching)))
To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
Let's switch to the new `testing` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164020Z" creationid="Prikryl" creationdate="20151108T164020Z">
        <seg>(((větve, přepínání)))
Chcete-li přepnout na existující větev, spusťte příkaz `git checkout`.(((git příkazy, checkout)))
Přepněme se na novou větev `testing`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, topic)))
Topic branches, however, are useful in projects of any size.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T141910Z" creationid="Prikryl" creationdate="20151209T141910Z">
        <seg>(((větve, tématické)))
Naproti tomu tématické větve se hodí v projektech jakékoli velikosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((branches, tracking)))(((branches, upstream)))
Checking out a local branch from a remote-tracking branch automatically creates what is called a ``tracking branch'' (or sometimes an ``upstream branch'').</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T112320Z" creationid="Prikryl" creationdate="20151213T111829Z">
        <seg>(((větve, sledující)))(((větve, upstream)))
Přepnutím (checkout) na lokální větev při odvození od vzdáleně sledované větve automaticky vzniká to, čemu se říká „sledující větev“ (nebo někdy „upstream větev“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((contributing)))
The main difficulty with describing how to contribute to a project is that there are a huge number of variations on how it's done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T111253Z" creationid="Prikryl" creationdate="20160110T111253Z">
        <seg>(((přispívání)))
Hlavní potíž při popisu způsobu přispívání do projektu spočívá v tom, že existuje obrovské množství variací, jak se to dá udělat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((contributing, private managed team)))
In this next scenario, you'll look at contributor roles in a larger private group.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T110736Z" creationid="Prikryl" creationdate="20160118T110736Z">
        <seg>(((přispívání, soukromý řízený tým)))
V následujícím scénáři se podíváme na role přispěvatelů ve větší soukromé skupině.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((contributing, private small team)))
The simplest setup you're likely to encounter is a private project with one or two other developers.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142000Z" creationid="Prikryl" creationdate="20160115T142000Z">
        <seg>(((přispívání, malý soukromý tým)))
Nejjednodušší situaci, s kterou se asi setkáte, je soukromý projekt s jedním nebo pár dalšími vývojáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((contributing, public large project)))
Many projects have established procedures for accepting patches – you'll need to check the specific rules for each project, because they will differ.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T205732Z" creationid="Prikryl" creationdate="20160122T205732Z">
        <seg>Mnoho projektů si vytvořilo vlastní procedury pro přijímání záplat. Konkrétní pravidla si u každého projektu budete muset zjistit, protože budou odlišná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((contributing, public small project)))
Contributing to public projects is a bit different.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T170448Z" creationid="Prikryl" creationdate="20160121T170448Z">
        <seg>(((přispívání, veřejný malý projekt)))
Přispívání do veřejných projektů je trochu odlišné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((distributed git)))
Now that you have a remote Git repository set up as a point for all the developers to share their code, and you're familiar with basic Git commands in a local workflow, you'll look at how to utilize some of the distributed workflows that Git affords you.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T170118Z" creationid="Prikryl" creationdate="20160107T211801Z">
        <seg>(((distribuovaný git)))
Máte vytvořen vzdálený gitový repozitář, který je nastaven tak, aby mohli všichni vývojáři sdílet svůj zdrojový kód, a znáte základní příkazy Gitu pro práci v lokálním prostředí. Nastal čas, abychom se podívali na využití některých distribuovaných pracovních postupů, které vám Git nabízí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230706Z" creationid="Prikryl" creationdate="20151031T230527Z">
        <seg>(((soubory, přesouvání)))
Na rozdíl od ostatních systémů pro správu verzí, Git nesleduje přesouvání souborů přímo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T102939Z" creationid="Prikryl" creationdate="20151031T224238Z">
        <seg>(((soubory, odstranění)))
Chcete-li soubor z Gitu odstranit, musíte ho odstranit ze sledovaných souborů (přesněji řečeno, musíte ho odstranit z oblasti připravených změn) a poté zapsat revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((forking)))
This is a very common workflow with hub-based tools like GitHub or GitLab, where it's easy to fork a project and push your changes into your fork for everyone to see.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T171452Z" creationid="Prikryl" creationdate="20160109T230059Z">
        <seg>(((odštěpení)))
Tento pracovní postup je velmi běžný, pokud se pracuje centralizačními nástroji{empty}footnote:[hub-based tools] jako je GitHub nebo GitLab. Projekt se zde dá snadno odštěpit a změny se pak odesílají do vlastní, odštěpené části, kde se na ně může každý podívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((git commands, diff, check)))
First, you don't want to submit any whitespace errors.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T193245Z" creationid="Prikryl" creationdate="20160110T123613Z">
        <seg>(((git příkazy, diff, check)))
Především nechcete odesílat chybně použité prázdné znaky (whitespace).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((git commands, merge, squash)))
[source,console]
----
$ git checkout -b featureBv2 origin/master
$ git merge --squash featureB
# (change implementation)
$ git commit
$ git push myfork featureBv2
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T191822Z" creationid="Prikryl" creationdate="20160122T191822Z">
        <seg>(((git commands, merge, squash)))
[source,console]
----
$ git checkout -b featureBv2 origin/master
$ git merge --squash featureB
# (změníte implementaci)
$ git commit
$ git push myfork featureBv2
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((git commands, request-pull)))
When your work has been pushed up to your fork, you need to notify the maintainer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T194203Z" creationid="Prikryl" creationdate="20160121T194203Z">
        <seg>(((git příkazy, request-pull)))
Pokud jste práci odeslali do odštěpeného repozitáře, musíte to správci oznámit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((merging, conflicts)))
Occasionally, this process doesn't go smoothly.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T072503Z" creationid="Prikryl" creationdate="20151120T072503Z">
        <seg>(((slučování, konflikty)))
Občas se stane, že tento proces neproběhne hladce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((protocols, local)))
The most basic is the _Local protocol_, in which the remote repository is in another directory on disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T192241Z" creationid="Prikryl" creationdate="20151219T192241Z">
        <seg>Nejzákladnějším z nich je _lokální protokol_, kdy je vzdálený repozitář uložen v jiném adresáři na disku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((pulling)))
While the `git fetch` command will fetch down all the changes on the server that you don't have yet, it will not modify your working directory at all.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T071810Z" creationid="Prikryl" creationdate="20151214T071810Z">
        <seg>(((pulling)))
Příkaz `git fetch` sice vyzvedne všechny změny ze serveru, které ještě nemáte, ale nijak nezmění obsah vašeho pracovního adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((pushing)))
When you want to share a branch with the world, you need to push it up to a remote that you have write access to.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110250Z" creationid="Prikryl" creationdate="20151210T123514Z">
        <seg>(((odesílání)))
Chcete-li svou větev sdílet s okolním světem, musíte ji odeslat (push) do vzdáleného repozitáře, k němuž máte oprávnění pro zápis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((rebasing)))
In Git, there are two main ways to integrate changes from one branch into another: the `merge` and the `rebase`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T082232Z" creationid="Prikryl" creationdate="20151214T081953Z">
        <seg>(((přeskládání)))
V Gitu existují dva základní způsoby, jak integrovat změny z jedné větve do druhé: `merge` (sloučení, začlenění) a `rebase` (přeskládání).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((rebasing, perils of)))
Ahh, but the bliss of rebasing isn't without its drawbacks, which can be summed up in a single line:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T133936Z" creationid="Prikryl" creationdate="20151214T133708Z">
        <seg>(((přeskládání, rizika)))
Ale slastné přeskládání má i stinné stránky, které se dají shrnout do jednoho řádku:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which one is better.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T204906Z" creationid="Prikryl" creationdate="20151214T204906Z">
        <seg>(((přeskládání, vs. slučování)))(((slučování, vs. přeskládání)))
Když jste teď přeskládání a slučování viděli v akci, možná by vás zajímalo, které z nich je lepší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((serving repositories)))
At this point, you should be able to do most of the day-to-day tasks for which you'll be using Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T141124Z" creationid="Prikryl" creationdate="20151218T140355Z">
        <seg>(((obsluha repozitářů)))
V tomto okamžiku už byste měli zvládat většinu každodenních úkonů, pro které budete Git používat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T094650Z" creationid="Prikryl" creationdate="20151031T223825Z">
        <seg>(((oblast připravených změn, přeskočení)))
Oblast připravených změn může být úžasně užitečným nástrojem pro vytváření chtěné posloupnosti revizí, ale při určitém způsobu práce někdy představuje zbytečnou komplikaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((tags)))
Like most VCSs, Git has the ability to tag specific points in history as being important.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T222932Z" creationid="Prikryl" creationdate="20151107T144817Z">
        <seg>(((značky)))
Stejně jako většina systémů pro správu verzí nabízí i Git možnost označovat v historii určitá místa, jež považujete za důležitá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((tags, annotated)))
Creating an annotated tag in Git is simple.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150135Z" creationid="Prikryl" creationdate="20151107T150135Z">
        <seg>(((značky, anotované)))
Anotovaná značka se v Gitu vytváří jednoduše.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((tags, lightweight)))
Another way to tag commits is with a lightweight tag.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223337Z" creationid="Prikryl" creationdate="20151107T223337Z">
        <seg>(((značky, prosté)))
Další možností, jak označit revizi, je prostá značka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((version control)))
What is "version control", and why should you care?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T174910Z" creationid="Prikryl" creationdate="20151026T174910Z">
        <seg>(((správa verzí)))
Co je to správa verzí a proč by vás měla zajímat?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T183612Z" creationid="Prikryl" creationdate="20151026T183612Z">
        <seg>(((správa verzí, centralizovaná)))
Dalším velkým problémem, s nímž se uživatelé potýkají, je potřeba spolupráce s vývojáři pracujícími na jiných počítačích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T191931Z" creationid="Prikryl" creationdate="20151026T191931Z">
        <seg>V tomto místě přicházejí ke slovu distribuované systémy správy verzí (DVCS z anglického Distributed Version Control System).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((version control,local)))
Many people's version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they're clever).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T181915Z" creationid="Prikryl" creationdate="20151026T181915Z">
        <seg>(((správa verzí, lokální)))
Mnoho uživatelů realizuje správu verzí tak, že zkopírují soubory do jiného adresáře (pokud jsou chytří, dají adresáři jméno podle data a času).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((workflows)))
Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T170630Z" creationid="Prikryl" creationdate="20160108T215348Z">
        <seg>(((pracovní postupy)))
Na rozdíl od centralizovaných systémů pro správu verzí, distribuovaný charakter systému Git umožňuje vývojářům mnohem větší pružnost ve způsobech spolupráce na projektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((workflows, centralized)))
In centralized systems, there is generally a single collaboration model–the centralized workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T152157Z" creationid="Prikryl" creationdate="20160109T152157Z">
        <seg>(((pracovní postupy, centralizovaný)))
V centralizovaných systémech je většinou možný pouze jediný model, tzv. centralizovaný pracovní postup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((workflows, dictator and lieutenants)))
This is a variant of a multiple-repository workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T230604Z" creationid="Prikryl" creationdate="20160109T230604Z">
        <seg>(((pracovní postupy, diktátor a poručíci)))
Jedná se o variantu pracovního postupu s více repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(((workflows, integration manager)))
Because Git allows you to have multiple remote repositories, it's possible to have a workflow where each developer has write access to their own public repository and read access to everyone else's.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T155107Z" creationid="Prikryl" creationdate="20160109T155107Z">
        <seg>(((pracovní postupy, integrační manažer)))
Protože Git umožňuje práci s více vzdálenými repozitáři, lze využít pracovní postup, kdy má každý vývojář přiděleno právo zápisu do svého vlastního veřejného repozitáře a oprávnění pro čtení k repozitářům všech ostatních.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T222450Z" creationid="Prikryl" creationdate="20151031T222334Z">
        <seg>(Chcete-li si ještě podrobněji připomenout, co jste měnili, můžete k příkazu `git commit` přidat parametr `-v`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T215220Z" creationid="Prikryl" creationdate="20151103T201645Z">
        <seg>(Pokud chcete předepsat současnou platnost voleb `--author` a `--grep`, musíte přidat `--all-match`, jinak příkaz propustí revize vyhovující i jedné z nich.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(See &lt;&lt;_git_internals&gt;&gt; for more information about exactly what files are contained in the `.git` directory you just created.)(((git commands, init)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T210826Z" creationid="Prikryl" creationdate="20151028T210826Z">
        <seg>(Více informací o tom, jaké soubory obsahuje právě vytvořený adresář `.git`, naleznete v kapitole &lt;&lt;_git_internals&gt;&gt;.)(((git příkazy, init)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(The protocol messages have been replaced with `...` in these examples to shorten them somewhat.)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142847Z" creationid="Prikryl" creationdate="20160115T142847Z">
        <seg>(V následujících příkladech byly zprávy protokolů nahrazeny třemi tečkami, abych je trochu zkrátil.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in &lt;&lt;_getting_started&gt;&gt;).(((editor, changing default)))(((git commands, config)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T095746Z" creationid="Prikryl" creationdate="20151030T095746Z">
        <seg>(Ten je nastaven proměnnou prostředí `$EDITOR` vašeho shellu. Obvykle je to vim nebo emacs, ale příkazem `git config --global core.editor` můžete nastavit libovolný jiný -- jak jsme viděli v kapitole &lt;&lt;_getting_started&gt;&gt;).(((editor, změna výchozího)))(((git příkazy, config)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(We'll go over what branches are and how to use them in much more detail in &lt;&lt;_git_branching&gt;&gt;.)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T141238Z" creationid="Prikryl" creationdate="20151101T170616Z">
        <seg>(Podrobněji se budeme větvím a jejich použití věnovat v kapitole &lt;&lt;_git_branching&gt;&gt;.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(fix conflicts and run "git commit")</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073012Z" creationid="Prikryl" creationdate="20151120T073012Z">
        <seg>(fix conflicts and run "git commit")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(use "git add &lt;file&gt;..." to include in what will be committed)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110828Z" creationid="Prikryl" creationdate="20151029T110828Z">
        <seg>(use "git add &lt;file&gt;..." to include in what will be committed)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(use "git add &lt;file&gt;..." to mark resolution)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073016Z" creationid="Prikryl" creationdate="20151120T073016Z">
        <seg>(use "git add &lt;file&gt;..." to mark resolution)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(use "git add &lt;file&gt;..." to update what will be committed)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120905Z" creationid="Prikryl" creationdate="20151029T120905Z">
        <seg>(use "git add &lt;file&gt;..." to update what will be committed)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(use "git add/rm &lt;file&gt;..." to update what will be committed)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224538Z" creationid="Prikryl" creationdate="20151031T224538Z">
        <seg>(use "git add/rm &lt;file&gt;..." to update what will be committed)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120907Z" creationid="Prikryl" creationdate="20151029T120907Z">
        <seg>(use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(use "git commit" to conclude merge)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T080731Z" creationid="Prikryl" creationdate="20151120T080731Z">
        <seg>(use "git commit" to conclude merge)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(use "git reset HEAD &lt;file&gt;..." to unstage)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120131Z" creationid="Prikryl" creationdate="20151029T120131Z">
        <seg>(use "git reset HEAD &lt;file&gt;..." to unstage)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*  Blank lines or lines starting with `#` are ignored.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T201622Z" creationid="Prikryl" creationdate="20151029T201622Z">
        <seg>*  Prázdné řádky nebo řádky začínající znakem `#` budou ignorovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*  Speed
*  Simple design
*  Strong support for non-linear development (thousands of parallel branches)
*  Fully distributed
*  Able to handle large projects like the Linux kernel efficiently (speed and data size)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T073500Z" creationid="Prikryl" creationdate="20151027T073500Z">
        <seg>*  Rychlost,
*  jednoduchý návrh,
*  silná podpora nelineárního vývoje (tisíce paralelních větví),
*  plně distribuovaný,
*  schopnost efektivně spravovat velké projekty, jako je linuxové jádro (rychlost a objem dat).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*  Standard glob patterns work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T201732Z" creationid="Prikryl" creationdate="20151029T201732Z">
        <seg>*  Používají se standardní masky souborů (glob patterns).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*  You can end patterns with a forward slash (`/`) to specify a directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T202001Z" creationid="Prikryl" creationdate="20151029T202001Z">
        <seg>*  Masku můžete ukončit lomítkem (`/`) a tím vyjádříte, že jde o adresář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*  You can negate a pattern by starting it with an exclamation point (`!`).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T202108Z" creationid="Prikryl" creationdate="20151029T202108Z">
        <seg>*  Masku můžete negovat tím, že na začátku použijete vykřičník (`!`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*  You can start patterns with a forward slash (`/`) to avoid recursivity.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T201858Z" creationid="Prikryl" creationdate="20151029T201858Z">
        <seg>*  Masku můžete zahájit lomítkem (`/`) a tím potlačíte rekurzivitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T151342Z" creationid="Prikryl" creationdate="20151214T151342Z">
        <seg>* Určí, jaká práce je pro naši větev jedinečná (C2, C3, C4, C6, C7).
* Určí, co z toho nejsou body sloučení (C2, C3, C4).
* Určí, které z nich nebyly do cílové větve zapsány znovu (jsou to jen C2 a C3, protože C4 představuje stejnou záplatu jako C4').
* Na `teamone/master` aplikuje jen určené revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new branch]      featureA -&gt; featureA
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111739Z" creationid="Prikryl" creationdate="20160118T111739Z">
        <seg>* [new branch]      featureA -&gt; featureA
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new branch]      featureBee -&gt; origin/featureBee
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112253Z" creationid="Prikryl" creationdate="20160118T112253Z">
        <seg>* [new branch]      featureBee -&gt; origin/featureBee
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new branch]      master     -&gt; pb/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170414Z" creationid="Prikryl" creationdate="20151101T170414Z">
        <seg>* [new branch]      master     -&gt; pb/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new branch]      serverfix    -&gt; origin/serverfix
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144123Z" creationid="Prikryl" creationdate="20151210T144123Z">
        <seg>* [new branch]      serverfix    -&gt; origin/serverfix
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new branch]      serverfix -&gt; serverfix
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T124224Z" creationid="Prikryl" creationdate="20151210T124224Z">
        <seg>* [new branch]      serverfix -&gt; serverfix
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new branch]      ticgit     -&gt; pb/ticgit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170416Z" creationid="Prikryl" creationdate="20151101T170416Z">
        <seg>* [new branch]      ticgit     -&gt; pb/ticgit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new tag]         v1.4 -&gt; v1.4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T225232Z" creationid="Prikryl" creationdate="20151107T225232Z">
        <seg>* [new tag]         v1.4 -&gt; v1.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new tag]         v1.4-lw -&gt; v1.4-lw
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T225234Z" creationid="Prikryl" creationdate="20151107T225234Z">
        <seg>* [new tag]         v1.4-lw -&gt; v1.4-lw
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* [new tag]         v1.5 -&gt; v1.5
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224911Z" creationid="Prikryl" creationdate="20151107T224911Z">
        <seg>* [new tag]         v1.5 -&gt; v1.5
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T213236Z" creationid="Prikryl" creationdate="20151102T213236Z">
        <seg>* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Do not rebase commits that exist outside your repository.*</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T134057Z" creationid="Prikryl" creationdate="20151214T134057Z">
        <seg>*Neprovádějte přeskládání pro revize, které existují mimo váš repozitář.*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+ 049d078...fbff5bc master     -&gt; origin/master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144509Z" creationid="Prikryl" creationdate="20160115T144509Z">
        <seg>+ 049d078...fbff5bc master     -&gt; origin/master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+# test line
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T093649Z" creationid="Prikryl" creationdate="20151030T093649Z">
        <seg>+# test line
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+merged in.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091830Z" creationid="Prikryl" creationdate="20151030T091830Z">
        <seg>+merged in.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>- Bullet points are okay, too</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215942Z" creationid="Prikryl" creationdate="20151023T215942Z">
        <seg>- Můžete používat i odrážky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>- Typically a hyphen or asterisk is used for the bullet,</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160114T153900Z" creationid="Prikryl" creationdate="20160114T153900Z">
        <seg>- Pro odrážku se typicky používá pomlčka nebo hvězdička,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>- [deleted]         serverfix
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T075101Z" creationid="Prikryl" creationdate="20151214T075101Z">
        <seg>- [deleted]         serverfix
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120136Z" creationid="Prikryl" creationdate="20151029T120136Z">
        <seg>----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T213947Z" creationid="Prikryl" creationdate="20151104T213947Z">
        <seg>--before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152619Z" creationid="Prikryl" creationdate="20151111T152619Z">
        <seg>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090939Z" creationid="Prikryl" creationdate="20151024T090939Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150749Z" creationid="Prikryl" creationdate="20151108T150749Z">
        <seg>.Větev a historie jejích objektů revize
image::images/branch-and-history.png[Větev a historie jejích objektů revize.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.A commit and its tree
image::images/commit-and-tree.png[A commit and its tree.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T145602Z" creationid="Prikryl" creationdate="20151108T145602Z">
        <seg>.Objekt revize a jeho strom
image::images/commit-and-tree.png[Objekt revize a jeho strom.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.A linear view of progressive-stability branching
image::images/lr-branches-1.png[A linear view of progressive-stability branching.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T135737Z" creationid="Prikryl" creationdate="20151209T135737Z">
        <seg>.Lineární pohled na větvení podle stupně stability
image::images/lr-branches-1.png[Lineární pohled na větvení podle stupně stability.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.A merge commit
image::images/basic-merging-2.png[A merge commit.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T154736Z" creationid="Prikryl" creationdate="20151115T154736Z">
        <seg>.Bod sloučení
image::images/basic-merging-2.png[Bod sloučení.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.A simple commit history
image::images/basic-branching-1.png[A simple commit history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153426Z" creationid="Prikryl" creationdate="20151111T153426Z">
        <seg>.Jednoduchá historie revizí
image::images/basic-branching-1.png[Jednoduchá historie revizí.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Adding another server as a remote
image::images/remote-branches-4.png[Adding another server as a remote.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T122815Z" creationid="Prikryl" creationdate="20151210T122815Z">
        <seg>.Přidání dalšího serveru v roli vzdáleného repozitáře
image::images/remote-branches-4.png[Přidání dalšího serveru v roli vzdáleného repozitáře.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Basic sequence of this managed-team workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T150552Z" creationid="Prikryl" creationdate="20160118T150552Z">
        <seg>.Základní posloupnost událostí pracovního postupu řízeného týmu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Centralized version control.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T184338Z" creationid="Prikryl" creationdate="20151026T184338Z">
        <seg>.Centralizovaná správa verzí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Centralized workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T152508Z" creationid="Prikryl" creationdate="20160109T152508Z">
        <seg>.Centralizovaný pracovní postup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it."]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T135244Z" creationid="Prikryl" creationdate="20151214T135244Z">
        <seg>.Naklonování repozitáře a provedení změn
image::images/perils-of-rebasing-1.png[Naklonování repozitáře a provedení změn.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Commit history after `featureBv2` work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T195453Z" creationid="Prikryl" creationdate="20160122T195353Z">
        <seg>.Historie revizí po práci ve větvi `featureBv2`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T145732Z" creationid="Prikryl" creationdate="20151108T145732Z">
        <seg>.Objekty revize a jejich rodiče
image::images/commits-and-parents.png[Objekty revize a jejich rodiče.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Creating a new branch pointer
image::images/basic-branching-2.png[Creating a new branch pointer.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153810Z" creationid="Prikryl" creationdate="20151111T153810Z">
        <seg>.Vytvoření nového ukazatele větve
image::images/basic-branching-2.png[Vytvoření nového ukazatele větve.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Distributed version control.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T193359Z" creationid="Prikryl" creationdate="20151026T193359Z">
        <seg>.Distribuovaný systém pro správu verzí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Fast-forwarding the master branch
image::images/basic-rebase-4.png[Fast-forwarding the master branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T112345Z" creationid="Prikryl" creationdate="20151214T112345Z">
        <seg>.Posunutí větve `master` rychle vpřed
image::images/basic-rebase-4.png[Posunutí větve `master` rychle vpřed.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work."]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T135518Z" creationid="Prikryl" creationdate="20151214T135518Z">
        <seg>.Vyzvednutí (fetch) bodů zápisu a jejich začlenění (merge) do vaší práce
image::images/perils-of-rebasing-2.png[Vyzvednutí (fetch) bodů zápisu a jejich začlenění (merge) do vaší práce.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.General sequence of events for a simple multiple-developer Git workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T221923Z" creationid="Prikryl" creationdate="20160115T221614Z">
        <seg>.Obecná posloupnost událostí pro jednoduchý pracovní postup s více vývojáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Git OS X Installer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T215009Z" creationid="Prikryl" creationdate="20151027T215009Z">
        <seg>.Instalátor Gitu pro OS X.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164821Z" creationid="Prikryl" creationdate="20151108T164821Z">
        <seg>.Při checkout se HEAD přesune
image::images/checkout-master.png[Při checkout se HEAD přesune.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T163230Z" creationid="Prikryl" creationdate="20151108T163230Z">
        <seg>.HEAD ukazující na větev
image::images/head-to-master.png[HEAD ukazující na větev.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164229Z" creationid="Prikryl" creationdate="20151108T164229Z">
        <seg>.HEAD ukazuje na aktuální větev
image::images/head-to-testing.png[HEAD ukazuje na aktuální větev.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.History after merging `dumbidea` and `iss91v2`
image::images/topic-branches-2.png[History after merging `dumbidea` and `iss91v2`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T185621Z" creationid="Prikryl" creationdate="20151209T185621Z">
        <seg>.Historie po začlenění `dumbidea` a `iss91v2`
image::images/topic-branches-2.png[Historie po začlenění `dumbidea` a `iss91v2`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Hotfix branch based on `master`
image::images/basic-branching-4.png[Hotfix branch based on `master`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T214045Z" creationid="Prikryl" creationdate="20151111T214045Z">
        <seg>.Větev pro opravu je odvozená od `master`
image::images/basic-branching-4.png[Větev pro opravu je odvozená od `master`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Initial commit history with `featureB` work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T183546Z" creationid="Prikryl" creationdate="20160122T183546Z">
        <seg>.Počáteční historie revizí s prací na `featureB`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Jessica's history after committing on a feature branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113539Z" creationid="Prikryl" creationdate="20160118T113539Z">
        <seg>.Jessičina historie po zapsání revizí do větve s úkolem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Jessica's history after fetching John's changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145756Z" creationid="Prikryl" creationdate="20160115T145756Z">
        <seg>.Historie Jessicy po vyzvednutí Johnových změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Jessica's history after merging John's changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214314Z" creationid="Prikryl" creationdate="20160115T214314Z">
        <seg>.Jessičina historie po začlenění Johnových změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Jessica's history after merging both her topic branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T114046Z" creationid="Prikryl" creationdate="20160118T114046Z">
        <seg>.Historie Jessicy po začlenění obou jejích tématických větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Jessica's history after pushing all changes back to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214859Z" creationid="Prikryl" creationdate="20160115T214859Z">
        <seg>.Jessičina historie po odeslání všech změn zpět na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Jessica's initial commit history.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112017Z" creationid="Prikryl" creationdate="20160118T112017Z">
        <seg>.Jessičina výchozí historie revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Jessica's topic branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145555Z" creationid="Prikryl" creationdate="20160115T145555Z">
        <seg>.Jessičina tématická větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.John's divergent history.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144712Z" creationid="Prikryl" creationdate="20160115T144712Z">
        <seg>.Johnova odchylující se historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.John's history after pushing to the `origin` server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145308Z" creationid="Prikryl" creationdate="20160115T145308Z">
        <seg>.Johnova historie po odeslání revize na server `origin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.John's repository after merging `origin/master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145040Z" creationid="Prikryl" creationdate="20160115T145040Z">
        <seg>.Johnův repozitář po začlenění `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Local and remote work can diverge
image::images/remote-branches-2.png[Local and remote work can diverge.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T111942Z" creationid="Prikryl" creationdate="20151210T111942Z">
        <seg>.Lokální a vzdálená historie práce se může rozcházet
image::images/remote-branches-2.png[Lokální a vzdálená historie práce se může rozcházet.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Local version control.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T182708Z" creationid="Prikryl" creationdate="20151026T182708Z">
        <seg>.Lokální správa verzí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Merging to integrate diverged work history
image::images/basic-rebase-2.png[Merging to integrate diverged work history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T091112Z" creationid="Prikryl" creationdate="20151214T091112Z">
        <seg>.Spojení rozvětvené historie sloučením
image::images/basic-rebase-2.png[Spojení rozvětvené historie sloučením.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Multiple topic branches
image::images/topic-branches-1.png[Multiple topic branches.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T145343Z" creationid="Prikryl" creationdate="20151209T145343Z">
        <seg>.Více tématických větví
image::images/topic-branches-1.png[Více tématických větví.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Output of `git diff --check`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T123827Z" creationid="Prikryl" creationdate="20160110T123827Z">
        <seg>.Výstup příkazu `git diff --check`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Rebasing a topic branch off another topic branch
image::images/interesting-rebase-2.png[Rebasing a topic branch off another topic branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T081444Z" creationid="Prikryl" creationdate="20151214T130201Z">
        <seg>.Přeskládání tématické větve vzniklé odvětvením z jiné tématické větve
image::images/interesting-rebase-2.png[Přeskládání tématické větve vzniklé odvětvením z jiné tématické větve.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Rebasing the change introduced in `C4` onto `C3`
image::images/basic-rebase-3.png[Rebasing the change introduced in `C4` onto `C3`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T094356Z" creationid="Prikryl" creationdate="20151214T094356Z">
        <seg>.Přeskládání změn vzniklých v `C4` na `C3`
image::images/basic-rebase-3.png[Přeskládání změn vzniklých v `C4` na `C3`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Remote tracking branch for `teamone/master`
image::images/remote-branches-5.png[Remote tracking branch for `teamone/master`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T102643Z" creationid="Prikryl" creationdate="20151210T123400Z">
        <seg>.Vzdáleně sledovaná větev pro `teamone/master`
image::images/remote-branches-5.png[Vzdáleně sledovaná větev pro `teamone/master`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Server and local repositories after cloning
image::images/remote-branches-1.png[Server and local repositories after cloning.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T115112Z" creationid="Prikryl" creationdate="20151210T110258Z">
        <seg>.Repozitář na serveru a lokální repozitář po klonování
image::images/remote-branches-1.png[Repozitář na serveru a lokální repozitář po klonování.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Simple divergent history
image::images/basic-rebase-1.png[Simple divergent history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T082938Z" creationid="Prikryl" creationdate="20151214T082938Z">
        <seg>.Jednoduché rozvětvení historie
image::images/basic-rebase-1.png[Jednoduché rozvětvení historie.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Storing data as changes to a base version of each file.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T081509Z" creationid="Prikryl" creationdate="20151027T081509Z">
        <seg>.Ukládání dat jako změn vůči základní verzi každého souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Storing data as snapshots of the project over time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T084000Z" creationid="Prikryl" creationdate="20151027T084000Z">
        <seg>.Ukládání dat v podobě snímků projektu v daném čase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164431Z" creationid="Prikryl" creationdate="20151108T164431Z">
        <seg>.Větev HEAD se při zápisu revize posune vpřed
image::images/advance-testing.png[Větev HEAD se při zápisu revize posune vpřed.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.The iss53 branch has moved forward with your work
image::images/basic-branching-3.png[The iss53 branch has moved forward with your work.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T154135Z" creationid="Prikryl" creationdate="20151111T154135Z">
        <seg>.Větev iss53 se při práci posunula vpřed
image::images/basic-branching-3.png[Větev iss53 se při práci posunula vpřed.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.The lifecycle of the status of your files.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T105838Z" creationid="Prikryl" creationdate="20151029T105838Z">
        <seg>.Cyklus stavů vašich souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Three snapshots used in a typical merge
image::images/basic-merging-1.png[Three snapshots used in a typical merge.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T154223Z" creationid="Prikryl" creationdate="20151115T154223Z">
        <seg>.Při typickém slučování se používají tři snímky
image::images/basic-merging-1.png[Při typickém slučování se používají tři snímky.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T151212Z" creationid="Prikryl" creationdate="20151108T151212Z">
        <seg>.Dvě větve ukazují na stejnou sérii objektů revize
image::images/two-branches.png[Dvě větve ukazují na stejnou sérii objektů revize.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Work continues on `iss53`
image::images/basic-branching-6.png[Work continues on `iss53`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152456Z" creationid="Prikryl" creationdate="20151115T152456Z">
        <seg>.Pokračuje práce na větvi `iss53`
image::images/basic-branching-6.png[Pokračuje práce na větvi `iss53`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.Working directory, staging area, and Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T115507Z" creationid="Prikryl" creationdate="20151027T115507Z">
        <seg>.Pracovní adresář, oblast připravených změn a adresář Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.`git fetch` updates your remote references
image::images/remote-branches-3.png[`git fetch` updates your remote references.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T112345Z" creationid="Prikryl" creationdate="20151210T112345Z">
        <seg>.`git fetch` aktualizuje reference do vzdáleného repozitáře
image::images/remote-branches-3.png[`git fetch` aktualizuje reference do vzdáleného repozitáře.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>.`master` is fast-forwarded to `hotfix`
image::images/basic-branching-5.png[`master` is fast-forwarded to `hotfix`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T151932Z" creationid="Prikryl" creationdate="20151115T151932Z">
        <seg>.Větev `master` se přesunula „rychle vpřed“ na `hotfix`
image::images/basic-branching-5.png[Větev `master` se přesunula „rychle vpřed“ na `hotfix`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 file changed, 1 insertion(+), 1 deletion(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145528Z" creationid="Prikryl" creationdate="20151102T145528Z">
        <seg>1 file changed, 1 insertion(+), 1 deletion(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 file changed, 2 insertions(+)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T214000Z" creationid="Prikryl" creationdate="20151111T214000Z">
        <seg>1 file changed, 2 insertions(+)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 file changed, 5 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145541Z" creationid="Prikryl" creationdate="20151102T145541Z">
        <seg>1 file changed, 5 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 file changed, 5 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223951Z" creationid="Prikryl" creationdate="20151031T223951Z">
        <seg>1 file changed, 5 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 files changed, 1 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143048Z" creationid="Prikryl" creationdate="20160115T143048Z">
        <seg>1 files changed, 1 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 files changed, 1 insertions(+), 1 deletions(-)
$ git push
...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113327Z" creationid="Prikryl" creationdate="20160118T113327Z">
        <seg>1 files changed, 1 insertions(+), 1 deletions(-)
$ git push
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 files changed, 1 insertions(+), 1 deletions(-)
$ vim lib/simplegit.rb
$ git commit -am 'add ls-files'
[featureB 8512791] add ls-files</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111919Z" creationid="Prikryl" creationdate="20160118T111919Z">
        <seg>1 files changed, 1 insertions(+), 1 deletions(-)
$ vim lib/simplegit.rb
$ git commit -am 'add ls-files'
[featureB 8512791] add ls-files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 files changed, 1 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142856Z" creationid="Prikryl" creationdate="20160115T142856Z">
        <seg>1 files changed, 1 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 files changed, 4 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112323Z" creationid="Prikryl" creationdate="20160118T112323Z">
        <seg>1 files changed, 4 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 files changed, 5 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111921Z" creationid="Prikryl" creationdate="20160118T111921Z">
        <seg>1 files changed, 5 insertions(+), 0 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1 files changed, 9 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T200025Z" creationid="Prikryl" creationdate="20160121T200025Z">
        <seg>1 files changed, 9 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1edee6b..fbff5bc  master -&gt; master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143140Z" creationid="Prikryl" creationdate="20160115T143140Z">
        <seg>1edee6b..fbff5bc  master -&gt; master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>2 files changed, 2 insertions(+)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223008Z" creationid="Prikryl" creationdate="20151031T223008Z">
        <seg>2 files changed, 2 insertions(+)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>2 files changed, 6 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T213241Z" creationid="Prikryl" creationdate="20160115T213241Z">
        <seg>2 files changed, 6 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>3 files changed, 54 insertions(+)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145552Z" creationid="Prikryl" creationdate="20151102T145552Z">
        <seg>3 files changed, 54 insertions(+)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>3.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>3300904..774b3ed  featureA -&gt; featureA
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113332Z" creationid="Prikryl" creationdate="20160118T113332Z">
        <seg>3300904..774b3ed  featureA -&gt; featureA
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>3300904..aad881d  featureA   -&gt; origin/featureA
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113216Z" creationid="Prikryl" creationdate="20160118T113216Z">
        <seg>3300904..aad881d  featureA   -&gt; origin/featureA
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>5.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>6.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>72bbc59..8059c15  master -&gt; master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214607Z" creationid="Prikryl" creationdate="20160115T214607Z">
        <seg>72bbc59..8059c15  master -&gt; master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;&lt;_git_branching&gt;&gt;  will go over branches and references in detail.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110742Z" creationid="Prikryl" creationdate="20151029T110742Z">
        <seg>V kapitole &lt;&lt;_git_branching&gt;&gt; se větvemi a referencemi budeme zabývat podrobně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;&lt;_git_on_the_server&gt;&gt; will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T140407Z" creationid="Prikryl" creationdate="20151028T214430Z">
        <seg>V kapitole &lt;&lt;_git_on_the_server&gt;&gt; budou uvedeny všechny dostupné možnosti, které mohou být na serveru pro přístup do gitového repozitáře nastaveny, včetně jejich předností a nevýhod.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;&lt;_rewriting_history&gt;&gt; describes a number of useful Git tricks for rewriting history and interactively staging files – use these tools to help craft a clean and understandable history before sending the work to someone else.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T125309Z" creationid="Prikryl" creationdate="20160110T125309Z">
        <seg>Podkapitola &lt;&lt;_rewriting_history&gt;&gt; popisuje několik užitečných triků, jak v systému Git přepsat historii a jak interaktivně připravovat soubory k zapsání. Než svou práci odešlete ostatním, použijte tyto nástroje k udržení čisté a srozumitelné historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;&lt;log_options&gt;&gt; lists the options we've covered so far, as well as some other common formatting options that may be useful, along with how they change the output of the log command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T114631Z" creationid="Prikryl" creationdate="20151102T214009Z">
        <seg>Tabulka &lt;&lt;log_options&gt;&gt; uvádí seznam voleb, které jsme zatím probrali, a také pár dalších voleb pro formátování, které se mohou hodit -- spolu s popisem toho, jak mění výstup příkazu `log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;&lt;pretty_format&gt;&gt; lists some of the more useful options that format takes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T152719Z" creationid="Prikryl" creationdate="20151102T150335Z">
        <seg>Tabulka &lt;&lt;pretty_format&gt;&gt; uvádí některé z užitečnějších značek, které předpis `format` akceptuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;p id="out"&gt;...&lt;/p&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221634Z" creationid="Prikryl" creationdate="20151023T221634Z">
        <seg>&lt;p id="out"&gt;...&lt;/p&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git and Other Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Git a ostatní systémy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git on the Server</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Git na serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== A Short History of Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>=== Stručná historie systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== About Version Control</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>=== Správa verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Basic Branching and Merging</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Základy větvení a slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Branching Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151205T121347Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Postupy při práci s větvemi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Contributing to a Project</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Přispívání do projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Debugging with Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Ladění v systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Distributed Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Distribuované pracovní postupy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Attributes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Atributy Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Basics</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>=== Základy systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Daemon</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Démon Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== GitWeb</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== GitWeb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Installing Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Instalace systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Maintaining a Project</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Správa projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Maintenance and Data Recovery</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Správa a obnova dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Packfiles</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Balíčkové soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Recording Changes to the Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Nahrávání změn do repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Summary</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Shrnutí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== The Command Line</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T190203Z" creationid="Prikryl" creationdate="20151027T190203Z">
        <seg>=== Příkazový řádek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== The Protocols</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Protokoly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Transfer Protocols</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Přenosové protokoly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>====</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T204347Z" creationid="Prikryl" creationdate="20151027T204347Z">
        <seg>====</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Adding Collaborators</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přidávání spolupracovníků</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Adding Remote Repositories</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přidávání vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Ancestry References</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Reference podle původu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Basic Client Configuration</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Základní konfigurace klienta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Binary Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Binární soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Centralized Version Control Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Centralizované systémy správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Centralized Workflow</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Centralizovaný pracovní postup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Checking Your Settings</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Kontrola vašeho nastavení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Checking out Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T110317Z" creationid="Prikryl" creationdate="20151108T110317Z">
        <seg>==== Získání označené pracovní kopie</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Client-Side Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zásuvné moduly na straně klienta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Colors in Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Barvy systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Creating Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vytváření značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Creating a Branch from a Stash</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vytvoření větve z odkladu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Creating a New Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vytvoření nového repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Deleting References</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Mazání referencí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Dictator and Lieutenants Workflow</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Pracovní postup s diktátorem a poručíky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Distributed Version Control Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Distribuované systémy správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Exporting Your Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Export repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Forking Projects</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T184241Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odštěpení projektů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Formatting and Whitespace</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Formátování a prázdné znaky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Git Generally Only Adds Data</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T095103Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Git obvykle jen přidává data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Git Has Integrity</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T114127Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Git udržuje integritu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Initializing a Repository in an Existing Directory</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Inicializace repozitáře v existujícím adresáři</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing a Hook</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace zásuvného modulu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing from Source</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace ze zdrojových souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing on Linux</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T204404Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace v Linuxu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing on Mac</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T205702Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace pro Mac</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing on Windows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace v systému Windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Integrating Contributed Work</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Integrace příspěvků</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Issues with Submodules</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Problémy se submoduly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Lightweight Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Prosté značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Limiting Log Output</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Omezení výstupu logu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Listing Your Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T222903Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Výpis značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Local Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Lokální protokol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Local Version Control Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Lokální systémy správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Long-Running Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T090000Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Větve s dlouhou životností</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Merge Strategies</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Strategie slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== More Interesting Rebases</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zajímavější možnosti přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Nearly Every Operation Is Local</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Téměř každá operace je lokální</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Object Storage</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Ukládání objektů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Private Managed Team</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Soukromý řízený tým</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Pulling</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T071604Z" creationid="Prikryl" creationdate="20151214T071604Z">
        <seg>==== Stahování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Rebase vs. Merge</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T204715Z" creationid="Prikryl" creationdate="20151214T204715Z">
        <seg>==== Přeskládání vs. slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Reference na vzdálené repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Removing and Renaming Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odstraňování a přejmenovávání vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Reordering Commits</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Změna pořadí revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Server Configuration</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Konfigurace serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Server-Side Hook</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zásuvný modul na straně serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Server-Side Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zásuvné moduly na straně serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Short Status</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T130354Z" creationid="Prikryl" creationdate="20151029T130354Z">
        <seg>==== Zkrácený výpis stavu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Showing Your Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zobrazení vzdálených serverů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Single Revisions</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Jednotlivé revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Skipping the Staging Area</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přeskočení oblasti připravených změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Small Setups</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Nastavení pro malou skupinu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Snapshots, Not Differences</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Snímky, nikoli rozdíly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Splitting a Commit</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Rozdělení revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Staging Modified Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příprava změněných souborů k zapsání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Staging Patches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příprava záplat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Staging and Unstaging Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příprava souborů k zapsání a jejich vracení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Stashing Your Work</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odložení práce</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Subversion</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Summary</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Shrnutí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tagging Later</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Dodatečné označení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Basic Rebase</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Základní přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Dumb Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Hloupý protokol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Git Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Protokol Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Nuclear Option: filter-branch</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Pitbul mezi příkazy: filter-branch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The SSH Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Protokol SSH</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Smart Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Chytrý protokol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Three States</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Tři stavy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Unmodifying a Modified File</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Rušení změn ve změněných souborech</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Verifying Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Ověřování značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Workflows Summary</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T233429Z" creationid="Prikryl" creationdate="20160109T233429Z">
        <seg>==== Shrnutí pracovních postupů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Working in Topic Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142314Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Práce v tématických větvích</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Your Editor</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Váš editor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Your Identity</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vaše totožnost</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== git svn</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== git svn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=====</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T214601Z" creationid="Prikryl" creationdate="20151106T214601Z">
        <seg>=====</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Applying a Patch with apply</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Aplikace záplaty příkazem „apply“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Committing-Workflow Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Zásuvné moduly k zapisování revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Creating a New SVN Branch</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Vytvoření nové větve SVN</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Diffing Binary Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Nástroj diff pro binární soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Double Dot</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Dvě tečky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Downloading Data</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Stahování dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Enforcing a User-Based ACL System</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Systém ACL podle uživatelů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Identifying Binary Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Identifikace binárních souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Large-Merging Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Pracovní postupy se začleňováním velkého objemu dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Making a Subdirectory the New Root</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Povýšení podadresáře na nový kořenový adresář</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Merging Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Pracovní postupy založené na slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Multiple Points</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Několik bodů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== SSH Access</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== SSH přístup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== The Cons</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Nevýhody</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== The Pros</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Výhody</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Uploading Data</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Upload dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== `color.*`</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== `color.*`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221836Z" creationid="Prikryl" creationdate="20151023T221836Z">
        <seg>?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A SHA-1 hash looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Otisk SHA-1 může vypadat například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A branch in Git is simply a lightweight movable pointer to one of these commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T145824Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev je v Gitu jen snadno přemístitelným ukazatelem na jeden z těchto objektů revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A cherry-pick in Git is like a rebase for a single commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Částečné převzetí lze v systému Git přirovnat k přeskládání jedné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A common issue arises in these scenarios: you want to be able to treat the two projects as separate yet still be able to use one from within the other.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V obou případech se budete potýkat se stejným problémem: oba projekty chcete zachovat samostatné, a přesto potřebujete používat jeden v rámci druhého.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A common switch to use with the `log` command in this case is `--left-right`, which shows you which side of the range each commit is in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepínačem, který se v tomto případě běžně používá v kombinaci s příkazem `log`, je parametr `--left-right`. Příkaz pak zobrazí, na jaké straně intervalu se ta která revize nachází.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A contributor clones that repository and makes changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přispěvatel naklonuje tento repozitář a provede změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A few prebuilt options are available for you to use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K dispozici máte několik přednastavených možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A higher probability exists that every member of your programming team will be attacked and killed by wolves in unrelated incidents on the same night.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To už je pravděpodobnější, že všichni členové vašeho programovacího týmu budou během jedné noci v navzájem nesouvisejících incidentech napadeni a zabiti smečkou vlků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A huge number and variety of options to the `git log` command are available to show you exactly what you're looking for.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T110632Z" creationid="Prikryl" creationdate="20151102T145047Z">
        <seg>Příkaz `git log` disponuje velkým množstvím nejrůznějších voleb, díky nimž můžete zobrazit přesně to, co potřebujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A lightweight tag is very much like a branch that doesn't change – it's just a pointer to a specific commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145739Z" creationid="Prikryl" creationdate="20151107T145739Z">
        <seg>Prostá značka se velmi podobá větvi, která se nemění -- je to pouze ukazatel na konkrétní revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A local repository is fast only if you have fast access to the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Lokální repozitář je rychlý pouze v případě, že máte rychlý přístup k datům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A lot of people become concerned at some point that they will, by random happenstance, have two objects in their repository that hash to the same SHA-1 value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někteří uživatelé bývají zmateni, že mohou mít v repozitáři – shodou okolností – dva objekty, které mají stejnou hodnotu SHA-1 otisku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A number of developers are nodes – consumers of that hub – and synchronize to that one place.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T171530Z" creationid="Prikryl" creationdate="20160109T152458Z">
        <seg>Několik vývojářů představuje uzly -- konzumenty centrálního úložiště --, které se synchronizují se podle tohoto místa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A number of options can help you set the coloring to your preference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S individuálním nastavením barev vám pomůže celá řada možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A remote repository is generally a _bare repository_ – a Git repository that has no working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144356Z" creationid="Prikryl" creationdate="20151218T144356Z">
        <seg>Vzdáleným repozitářem je obvykle _holý repozitář_ (bare repository), tj. gitový repozitář bez pracovního adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Repozitář na NFS je často pomalejší než stejný repozitář nad SSH na tomtéž serveru, který ve všech systémech umožňuje spustit Git z lokálních disků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A second method is to create a single 'git' user on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of your new 'git' user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhým způsobem je vytvořit na počítači jediného uživatele 'git', požádat všechny uživatele, kteří mají mít oprávnění k zápisu, aby vám poslali veřejný SSH klíč, a přidat tento klíč do souboru `~/.ssh/authorized_keys` vašeho nového uživatele 'git'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A simple way to get the commit message from a commit when you have the SHA-1 value is to go to the first blank line and take everything after that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduchým způsobem, jak z revize, k níž máte hodnotu SHA-1, extrahovat její zprávu, je přejít k prvnímu prázdnému řádku a vzít vše, co následuje za ním.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A single tree object contains one or more tree entries, each of which contains a SHA-1 pointer to a blob or subtree with its associated mode, type, and filename.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jeden objekt stromu obsahuje jednu nebo více položek stromu, z nichž každá obsahuje ukazatel SHA-1 na blob nebo podstrom s asociovaným režimem, typem a názvem souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A topic branch is a short-lived branch that you create and use for a single particular feature or related work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142036Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tématická větev (topic branch) je krátkodobá větev, kterou vytvoříte a používáte pro jediný konkrétní účel nebo práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Adding git-svn instructions to the README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091331Z" creationid="Prikryl" creationdate="20151024T091331Z">
        <seg>Adding git-svn instructions to the README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223935Z" creationid="Prikryl" creationdate="20151031T223935Z">
        <seg>Přidáte-li k příkazu `git commit` parametr `-a`, Git do revize automaticky zahrne každý soubor, který je sledován. Odpadá potřeba zadávat příkaz `git add`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Additionally, if you're using Fedora/RHEL/RHEL-derivatives, you need to do this</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120121Z" creationid="Prikryl" creationdate="20151107T120008Z">
        <seg>Pokud používáte Fedora/RHEL/RHEL-deriváty, musíte navíc provést následující příkaz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T185152Z" creationid="Prikryl" creationdate="20151026T185152Z">
        <seg>Administrátoři mají přesnou kontrolu nad tím, co kdo může dělat. A správa centrálního systému pro správu verzí je mnohem jednodušší, než potýkání se s lokálními databázemi na jednotlivých počítačích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After all this is set, if you run diff commands such as this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až dokončíte celé nastavení, můžete spustit příkaz diff, např.:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After it's tested, merge the hotfix branch, and push to production.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153050Z" creationid="Prikryl" creationdate="20151111T153050Z">
        <seg>Po otestování začleníte větev s opravou a odešlete ji do produkce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After that come the line number and the content of the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za tímto údajem následuje číslo řádku a obsah souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After the entire commit process is completed, the `post-commit` hook runs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po dokončení celého procesu zapisování revize se spustí zásuvný modul `post-commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After the integrators merge these branches into the mainline, a fetch will bring down the new merge commit, making the history look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T114018Z" creationid="Prikryl" creationdate="20160118T114018Z">
        <seg>Poté, co integrátoři uvedené větve začlení do hlavní linie, bude možné vyzvednout (fetch) nový bod sloučení (merge commit) a historie revizí bude vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After this comes a Commands section.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za seznamem změn následuje část Commands (Příkazy).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After this is done, you can also get Git via Git itself for updates:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T123741Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po dokončení instalace můžete vyhledat aktualizace Gitu prostřednictvím jeho samého:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After this is done, you can use `git send-email` to send your patches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakmile je to hotové, můžete záplaty odeslat příkazem `git send-email`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T141457Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté byste měli mít k dispozici odkazy na všechny větve tohoto vzdáleného projektu. Od toho okamžiku je můžete kdykoli slučovat (merge) nebo prohlížet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you exit the merge tool, Git asks you if the merge was successful.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T080642Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zavření nástroje pro slučování se vás Git zeptá, zda sloučení proběhlo úspěšně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you have created several commits, or if you have cloned a repository with an existing commit history, you'll probably want to look back to see what has happened.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T110133Z" creationid="Prikryl" creationdate="20151102T144153Z">
        <seg>Po vytvoření několika revizí{empty}footnote:[Pozn. překl.: Znovu připomeňme, že slovem _revize_ je přeložen anglický pojem _commit_ (jako podstatné jméno). Při snaze o vytvoření přesnější představy používám dvouslovný pojem _objekt revize_, který má stejný význam. Uvažujte o něm jako o reprezentantovi výsledku příkazu `git commit`.], nebo pokud jste naklonovali repozitář s existující historií revizí, můžete chtít nahlédnout do historie projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you run a successful `git checkout`, the `post-checkout` hook runs; you can use it to set up your working directory properly for your project environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po úspěšném spuštění příkazu `git checkout` se spustí zásuvný modul `post-checkout`. Ten slouží k nastavení pracovního adresáře podle potřeb prostředí vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T074939Z" creationid="Prikryl" creationdate="20151120T074939Z">
        <seg>Po vyřešení všech označených částí ve všech souborech s konfliktem, spusťte pro každý soubor příkaz `git add`, kterým ho označíte jako vyřešený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After your super-important fix is deployed, you're ready to switch back to the work you were doing before you were interrupted.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T124519Z" creationid="Prikryl" creationdate="20151115T152042Z">
        <seg>Po zveřejnění veledůležité opravy se můžete přepnout zpět na práci, které jste se věnovali před jejím přerušením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, having multiple long-running branches isn't necessary, but it's often helpful, especially when you're dealing with very large or complex projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T141732Z" creationid="Prikryl" creationdate="20151209T141732Z">
        <seg>Zopakujme, že není nutné používat několik dlouhotrvajících větví, ale často to může být užitečné, zejména pokud se jedná o velmi velké nebo složité projekty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, the public keys look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veřejné klíče vypadají opět nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, this generally does nothing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>I tentokrát platí, že příkaz většinou neprovede nic.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, this gives you normal `log` output but shows you only the commit information for those four commits, appearing in the traditional commit date ordering.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstupem příkazu bude běžný výpis příkazu `log`, ale zobrazí se pouze informace o těchto čtyřech revizích, uspořádané v tradičním pořadí podle data zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, this will cause a `git push origin` to push the local `master` branch to the remote `qa/master` branch by default.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Touto hodnotou zajistíte, že bude příkaz `git push origin` odesílat lokální větev `master` do vzdálené větve `qa/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T110942Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Použijete-li parametr `--global`, pak také toto nastavení stačí provést pouze jednou. Git bude používat tyto údaje pro všechny operace, které na daném počítači uděláte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All of these fields are delimited by a pipe (`|`) character.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechna tato pole jsou oddělena svislicí (`|`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the content is stored as tree and blob objects, with trees corresponding to UNIX directory entries and blobs corresponding more or less to inodes or file contents.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veškerý obsah se ukládá v podobě objektů typu strom a blob. Stromy odpovídají položkám v adresáři UNIX a bloby víceméně odpovídají i-uzlům nebo obsahům souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the lieutenants have one integration manager known as the benevolent dictator.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T230935Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všichni poručíci mají jednoho integračního manažera, kterému se říká benevolentní diktátor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All these questions can affect how you contribute effectively to a project and what workflows are preferred or available to you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny tyto otázky mohou mít vliv na efektivní přispívání do projektu a určují, jaký pracovní postup je vůbec možný a který bude upřednostněn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is check out the branch you wish to merge into and then run the `git merge` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T153341Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co pro to musíte udělat, je přepnout na větev, do které chcete tuto větev začlenit, a potom spustit příkaz `git merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is switch back to your `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T211520Z" creationid="Prikryl" creationdate="20151111T211520Z">
        <seg>Vše, co musíte udělat, je přepnout se zpět na větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is tell `fast-import` what the content snapshots are, what commit data points to them, and the order they go in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co tedy musíte udělat, je sdělit příkazu `fast-import`, co je obsahem snímků, jaká data revizí na ně ukazují a pořadí, v němž budou převzaty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is use `-s` instead of `-a`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co pro to musíte udělat, je zadat místo parametru `-a` parametr `-s`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All your branches and tags should be on your new Git server in a nice, clean import.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na novém serveru Git tak nyní máte v úhledném, čistém importu uloženy všechny větve a značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also note the `^4832fe2` commit lines, which designate that those lines were in this file’s original commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si také řádků revize `^4832fe2`, které oznamují, že tyto řádky byly obsaženy v originální revizi tohoto souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also notice the `-u` flag; this is short for `--set-upstream`, which configures the branches for easier pushing and pulling later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113020Z" creationid="Prikryl" creationdate="20160118T113020Z">
        <seg>Všimněte si též příznaku `-u`. Jde o zkratku pro volbu `--set-upstream`, která se používá k nastavení větví pro pozdější zjednodušené odesílání (push) a stahování (pull).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also the `--no-commit` option can be useful to delay the merge commit in case of the default merge process.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T195143Z" creationid="Prikryl" creationdate="20160122T195143Z">
        <seg>V případě základního procesu slučování (merge) může být užitečná i volba `--no-commit`, která oddálí vytvoření bodu sloučení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, although the blob content can be nearly anything, the commit and tree content are very specifically formatted.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A navíc, zatímco obsahem blobu může být téměř cokoliv, obsah revize nebo stromu má velmi specifický formát.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, as long as you stay out of contact with your origin server, your `origin/master` pointer doesn't move.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T111750Z" creationid="Prikryl" creationdate="20151210T111750Z">
        <seg>A dokud nenavážete se serverem `origin` kontakt, nebude se váš ukazatel `origin/master` posunovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T104535Z" creationid="Prikryl" creationdate="20151108T172958Z">
        <seg>A protože při zapisování objektů revize zaznamenáváme i jeho rodiče, probíhá automaticky i vyhledání správných zdrojů pro slučování, které se pak většinou dělá velmi snadno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, if you include instructions in the tag message, running `git show &lt;tag&gt;` will let you give the end user more specific instructions about tag verification.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud navíc zadáte do zprávy značky další instrukce k jejímu ověření, může si je koncový uživatel zobrazit příkazem `git show &lt;tag&gt;`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120805Z" creationid="Prikryl" creationdate="20151107T120805Z">
        <seg>Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, while your choice of graphical client is a matter of personal taste, _all_ users will have the command-line tools installed and available.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T193550Z" creationid="Prikryl" creationdate="20151027T193550Z">
        <seg>A zatímco váš výběr grafického klienta závisí na osobních preferencích, příkazový řádek mají nainstalován a k dispozici _všichni_ uživatelé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alternatively, you can type your commit message inline with the `commit` command by specifying it after a -m flag, like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223003Z" creationid="Prikryl" creationdate="20151031T223003Z">
        <seg>Zprávu k revizi můžete napsat také do řádku k příkazu `commit` tak, že ji uvedete za volbu `-m`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although Subversion automatically does such a merge on the server if different files are edited, in Git you must merge the commits locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144211Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byly upraveny různé soubory, provádí Subversion takové sloučení na serveru automaticky. Ale v Gitu musíte provést sloučení revizí (merge) lokálně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed – the patch, as it were.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T092738Z" creationid="Prikryl" creationdate="20151030T091139Z">
        <seg>Ačkoliv příkaz `git status` vám tyto otázky velmi obecně odpoví, příkaz `git diff` přesně zobrazí přidané a odstraněné řádky -- jakoby v podobě záplaty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although this operation may take only a few minutes, if you try to copy the original repository to another remote repository instead of a local one, the process will take nearly an hour, even though there are fewer than 100 commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato operace bude trvat jen několik minut. Pokud byste se však pokoušeli zkopírovat originální repozitář ne do lokálního, nýbrž do jiného vzdáleného repozitáře, protáhne se proces téměř na hodinu, přestože repozitář obsahuje necelých 100 revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they're working on if you're not careful.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T141059Z" creationid="Prikryl" creationdate="20151218T141059Z">
        <seg>Technicky vzato sice můžete odesílat a stahovat změny z repozitářů jednotlivých spolupracovníků, ale tento přístup se nedoporučuje, protože si při troše neopatrnosti můžete velmi snadno poplést, kdo na čem pracuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although you may have legitimate merge issues, you know where in your history their work is based; a proper three-way merge is the default rather than having to supply a `-3` and hope the patch was generated off a public commit to which you have access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přestože můžete mít oprávněné problémy se slučováním, víte, kde ve své historii můžete hledat příčiny. Řádné třícestné sloučení je vždy lepším řešením, než zadat parametr `-3` a doufat, že byl patch vygenerován z veřejné revize, k níž máte přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Amazing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Úžasné!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An OSX Git installer is maintained and available for download at the Git website, at http://git-scm.com/download/mac[].</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T122704Z" creationid="Prikryl" creationdate="20151027T214927Z">
        <seg>Instalátor Gitu pro OSX se udržuje na webové stránce Gitu http://git-scm.com/download/mac[] a můžete si jej odtud stáhnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An alternative would be to push this new work to a different branch on the server (perhaps called `featureAv2`).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T185202Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhou možností by bylo odeslání nové práce na server do jiné větve (nazvané třeba `featureAv2`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An annotated tag is more complex, however.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Anotovaná značka je už složitější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An asterisk (`*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen(`[0-9]`) matches any character between them (in this case 0 through 9).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T090453Z" creationid="Prikryl" creationdate="20151029T202346Z">
        <seg>Hvězdička (`*`) označuje žádný nebo více znaků; `[abc]` označuje jakýkoli znak uvedený v závorkách (v tomto případě `a`, `b` nebo `c`); otazník (`?`) označuje jeden znak; znaky v hranatých závorkách oddělené pomlčkou (`[0-9]`) označují jakýkoli znak v daném rozmezí (v našem případě 0 až 9).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And if it was changed since it was checked out but has not been staged, it is modified.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T121545Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A pokud byl vůči stavu v databázi upraven, ale nebyl připraven k zapsání, je ve stavu „změněný“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And then define a dummy `ours` merge strategy with:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A potom nadefinujete prázdnou slučovací strategii `ours` příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And what have you staged that you are about to commit?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T090904Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A co jste připravili k zapsání?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And you can specify older commits with this data, as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí těchto dat lze rovněž specifikovat starší revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And you did all that with simple `branch`, `checkout`, and `commit` commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170508Z" creationid="Prikryl" creationdate="20151108T170508Z">
        <seg>To vše jste provedli pomocí jednoduchých příkazů `branch`, `checkout` a `commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Annotated tags, however, are stored as full objects in the Git database.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145753Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naproti tomu anotované značky jsou ukládány jako plné objekty v databázi Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Annotating a file helps if you know where the issue is to begin with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Anotace souboru má smysl, pokud víte, kde problém hledat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another cool thing about Git is that it doesn’t track file renames explicitly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další skvělou věcí na systému Git je, že explicitně nesleduje přejmenování souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another easy way to get Git installed is by installing GitHub for Windows.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T235804Z" creationid="Prikryl" creationdate="20151027T235804Z">
        <seg>Další snadný způsob pro nainstalování Gitu spočívá v nainstalování GitHub for Windows.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another interesting example gets `$Date$` keyword expansion, RCS style.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další zajímavý příklad se týká rozšíření klíčového slova `$Date$` ve stylu RCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another interesting problem you can solve this way involves diffing image files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším zajímavým problémem, který lze tímto způsobem řešit, je výpočet rozdílů u obrázkových souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T212322Z" creationid="Prikryl" creationdate="20151104T212322Z">
        <seg>Dalším opravdu užitečným filtrem je volba `-S`, které zadáme nějaký řetězec. Způsobí, že se zobrazí jen revize se změnami kódu, kdy byl zadaný řetězec přidán nebo odstraněn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another really useful option is `--pretty`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145654Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další opravdu užitečnou volbou je `--pretty`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T104208Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další užitečnou věcí, kterou byste mohli chtít, je možnost zachování souboru v pracovním stromu při současném odstranění z oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another very frequent use of this syntax is to see what you’re about to push to a remote:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato syntaxe se velmi často používá také ke zjištění, co hodláte odeslat do vzdálené větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized authentication source that you may already have set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším možným způsobem je nechat ověřovat SSH přístupy LDAP serveru nebo jinému centralizovanému zdroji ověření, který už možná máte nastavený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Any changes you made to that file are gone – you just copied another file over it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T220331Z" creationid="Prikryl" creationdate="20151106T220331Z">
        <seg>Veškeré změny, které jste v souboru provedli, jsou ztraceny -- soubor jste právě překopírovali jiným souborem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Anything that has merge conflicts and hasn't been resolved is listed as unmerged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073207Z" creationid="Prikryl" creationdate="20151120T073207Z">
        <seg>Vše, u čeho při slučování vznikl konflikt, který nebyl vyřešen, je označeno jako „unmerged“ (nesloučeno).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T094202Z" creationid="Prikryl" creationdate="20151031T223443Z">
        <seg>Vše, co jste nepřipravili k zapsání, zůstane ve stavu změněno na vašem disku. Můžete provést další zápis a přidat to také do vaší historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Applying: added staged command
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T091450Z" creationid="Prikryl" creationdate="20151214T091450Z">
        <seg>Applying: added staged command
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Are all the patches peer-reviewed and approved?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsou všechny záplaty odborně posuzovány a schvalovány?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Are you involved in that process?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jste součástí tohoto procesu?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As I write this introduction, GitHub is announcing our 10 millionth hosted project, with nearly 5 million registered developer accounts and over 230 employees.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T141832Z" creationid="Prikryl" creationdate="20151026T141832Z">
        <seg>V době, kdy píši tuto předmluvu, oznámil GitHub 10milióntý hostovaný projekt s téměř 5 milióny registrovaných vývojářských účtů a s více než 230 zaměstnanci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As a general rule, your messages should start with a single line that's no more than about 50 characters and that describes the changeset concisely, followed by a blank line, followed by a more detailed explanation.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T204313Z" creationid="Prikryl" creationdate="20160110T125953Z">
        <seg>Základním pravidlem je, že by vaše zprávy měly začínat jedním řádkem, který nemá víc než asi 50 znaků a který popisuje sadu provedených změn. Za ním následuje prázdný řádek a potom podrobnější vysvětlení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například zapíšete revizi a potom si uvědomíte, že jste zapomněli připravit k zapsání změny v souboru, který jste chtěli do této revize přidat, můžete provést následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As before, you can set each value separately with a series of `git config` commands, or you can add them manually in the sendemail section in your `~/.gitconfig` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně jako v předchozím případu můžete nastavit sérií příkazů `git config` každou hodnotu zvlášť, nebo je můžete vložit ručně do sekce sendemail souboru `~/.gitconfig`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As in any VCS, you can lose or mess up changes you haven't committed yet; but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T100107Z" creationid="Prikryl" creationdate="20151027T100107Z">
        <seg>Stejně jako v jiných systémech pro správu verzí můžete ztratit nebo poničit úpravy, které ještě nebyly zapsány. Jakmile však snímek zapíšete do Gitu, je téměř nemožné ho ztratit, zvlášť pokud databázi pravidelně odesíláte (push) do jiného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As long as each user can get shell access on the machine, any SSH authentication mechanism you can think of should work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dokud má každý uživatel shellový přístup k počítači, měly by fungovat všechny mechanismy ověřování SSH, které vás jen napadnou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As with many great things in life, Git began with a bit of creative destruction and fiery controversy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T072156Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git se zrodil, stejně jako mnoho velkých věcí v životě, z kreativní destrukce a vášnivého sporu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can see, the `--stat` option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T113419Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, volba `--stat` vypíše pod každým záznamem revize seznam změněných souborů, kolik souborů bylo změněno (changed) a kolik řádků bylo v těchto souborech vloženo (insertions) a smazáno (deletions).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can see, this command lists each commit with its SHA-1 checksum, the author's name and email, the date written, and the commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T132837Z" creationid="Prikryl" creationdate="20151107T132837Z">
        <seg>Jak vidíte, tento příkaz vypíše všechny revize s jejich kontrolním součtem SHA-1, jménem a e-mailem autora, datem zápisu a zprávou o revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can see, when it completes successfully, it gives you a bunch of statistics about what it accomplished.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proběhne-li proces úspěšně, podá vám obsáhlou statistiku o tom, co bylo provedeno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can tell, Git simply replaces the new command with whatever you alias it for.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T145528Z" creationid="Prikryl" creationdate="20151107T143636Z">
        <seg>Jak tušíte, Git jednoduše nahradí nový příkaz čímkoliv, co jste aliasem pojmenovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you edit files, Git sees them as modified, because you've changed them since your last commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T084126Z" creationid="Prikryl" creationdate="20151028T215408Z">
        <seg>Jakmile soubory editujete, začne je Git považovat za změněné, protože jste v nich od posledního zápisu revize provedli změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you go on using Git, you'll probably use other commands frequently as well; don't hesitate to create new aliases.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143418Z" creationid="Prikryl" creationdate="20151107T143418Z">
        <seg>Během používání Gitu budete asi častěji používat i jiné příkazy. Neváhejte a vytvořte si pro ně nové aliasy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you just saw, to get data from your remote projects, you can run:(((git commands, fetch)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170743Z" creationid="Prikryl" creationdate="20151101T170743Z">
        <seg>Jak jste právě viděli, můžete pro získání dat vzdáleného projektu použít příkaz:(((git commands, fetch)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you learn Git, try to clear your mind of the things you may know about other VCSs, such as Subversion and Perforce; doing so will help you avoid subtle confusion when using the tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T123425Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Při seznamování s Gitem se pokuste vyčistit mysl od věcí, které možná znáte z jiných systémů pro správu verzí, jako jsou Subversion a Perforce. Při jeho používání se tím vyhnete určitým zmatkům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you may remember from &lt;&lt;_getting_started&gt;&gt;, Git doesn't store data as a series of changesets or differences, but instead as a series of snapshots.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T135032Z" creationid="Prikryl" creationdate="20151108T135032Z">
        <seg>Jak si možná vzpomínáte z kapitoly &lt;&lt;_getting_started&gt;&gt;, Git neukládá data jako sérii změn nebo rozdílů, ale jako sérii snímků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you may remember, Git is fundamentally a linked list of commit objects that point to a snapshot of content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak si možná vzpomínáte, říkali jsme, že Git je v podstatě seznam odkazů na objekty revizí, které ukazují na určitý snímek obsahu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you start making commits, you're given a `master` branch that points to the last commit you made.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150203Z" creationid="Prikryl" creationdate="20151108T150203Z">
        <seg>Když vytváříte objekt revize, máte k dispozici větev `master`, která ukazuje na váš minulý objekt revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Assuming she already has her repository cloned, she decides to work on `featureA` first.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111404Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože už má naklonovaný repozitář, rozhodne se pracovat nejprve na úkolu `featureA`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Assuming this happens, how can you get your commits back?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se už něco takového stane, jak dostanete své revize zpět?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Assuming you saved the patch at `/tmp/patch-ruby-client.patch`, you can apply the patch like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že jste záplatu uložili jako `/tmp/patch-ruby-client.patch`. Aplikaci pak provedete takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At any stage, you may want to undo something.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T123457Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kdykoli se může stát, že něco chcete vrátit do původního stavu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At some point in your Git journey, you may accidentally lose a commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdy se může stát, že nedopatřením přijdete o revizi Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At some point, you may want to convert your existing project to Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V určitém okamžiku možná budete chtít přepnout svůj existující projekt do systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At that point, anyone who can access the web server under which you put the repository can also clone your repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím je nastavení hotové. V tuto chvíli může každý, kdo má přístup na webový server, kam jste repozitář uložili, tento repozitář naklonovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At that point, everyone will be able to access that machine via the 'git' user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní budou mít všichni přístup k tomuto počítači prostřednictvím uživatele 'git'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At the end of this chapter you should understand why Git is around, why you should use it and you should be all set up to do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T110736Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Na konci kapitoly byste měli rozumět tomu, proč tady Git je, proč byste jej měli používat a měli byste být na jeho používání připraveni.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At the time of publishing there were maybe a few thousand people using the site and just four of us working on it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T141613Z" creationid="Prikryl" creationdate="20151026T141123Z">
        <seg>V době spuštění jej používalo možná pár tisíc lidí a vyvíjeli jsme ho čtyři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, John's local repository looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144540Z" creationid="Prikryl" creationdate="20160115T144540Z">
        <seg>V tomto okamžiku vypadá Johnův lokální repozitář nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, nothing in your project is tracked yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku se z vašeho projektu ještě nic nesleduje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, other users who have SSH access to the same server which has read-access to the `/opt/git` directory can clone your repository by running</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku mohou všichni ostatní, kdo mají SSH přístup k tomuto serveru s oprávněním pro čtení k adresáři `/opt/git`, naklonovat váš repozitář příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, she needs to share her work with John, so she pushes her `featureA` branch commits up to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku potřebuje sdílet svou práci s Johnem, a tak odešle revize své větve `featureA` na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, suppose you remember one little change that you want to make in `CONTRIBUTING.md` before you commit it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T125318Z" creationid="Prikryl" creationdate="20151029T125318Z">
        <seg>Nyní předpokládejme, že jste si vzpomněli na jednu malou změnu, kterou chcete v souboru `CONTRIBUTING.md` provést ještě před zapsáním revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, the others can clone it down and push changes back up just as easily:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ostatní nyní mohou velmi snadno repozitář naklonovat i do něj odesílat změny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can do all the basic local Git operations – creating or cloning a repository, making changes, staging and committing those changes, and viewing the history of all the changes the repository has been through.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T145848Z" creationid="Prikryl" creationdate="20151028T203800Z">
        <seg>V tomto okamžiku už v Gitu umíte provádět všechny základní lokální operace -- vytvořit a klonovat repozitář, provádět změny, připravit je k zapsání, zapsat je a prohlížet si historii všech změn, kterými repozitář prošel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can easily switch branches and do work elsewhere; your changes are stored on your stack.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete bez obav přepnout větve a pracovat na jiném úkolu, vaše změny byly uloženy do zásobníku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can exit the interactive adding script and run `git commit` to commit the partially staged files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku můžete ukončit skript interaktivního přidávání a spustit příkaz `git commit`, jímž zapíšete částečně připravené soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can go back to the `master` branch and do a fast-forward merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T112309Z" creationid="Prikryl" creationdate="20151214T112309Z">
        <seg>V tomto okamžiku můžete přejít zpět na větev `master` a provést sloučení typu „rychle vpřed“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can run your test to see if the issue exists as of this commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete provést testování a vyzkoušet, zda problém existuje i v této revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you have a Git repository with tracked files and an initial commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211130Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této chvíli máte vytvořen gitový repozitář se sledovanými soubory a úvodní revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you should be able to do most of the things in Git that you’ll need on the command line day to day and feel comfortable doing so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této chvíli byste měli v systému Git zvládat většinu úkonů, které se běžně používají na příkazovém řádku, a neměly by vám činit větší potíže.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you should have a valid Git repository that has imported your branches and tags:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku byste tedy měli mít platný repozitář Git s importovanými větvemi a značkami:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T213127Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku vypadá váš pracovní adresář přesně tak, jak vypadal, než jste začali pracovat na problému #53, a vy se nyní můžete soustředit na požadovanou opravu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this stage, you'll receive a call that another issue is critical and you need a hotfix.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152814Z" creationid="Prikryl" creationdate="20151111T152814Z">
        <seg>V tomto okamžiku vám zavolají, že se vyskytla jiná kritická chyba, která vyžaduje rychlou opravu (hotfix).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Basically all this does is remove the pointer from the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T080240Z" creationid="Prikryl" creationdate="20151214T080240Z">
        <seg>V podstatě vše, co to udělá, je jen odstranění odkazu ze serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Be careful, because you can't always undo some of these undos.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151105T214626Z" creationid="Prikryl" creationdate="20151105T214626Z">
        <seg>Ale buďte opatrní, protože ne vždy můžete návrat zpět vrátit zase vpřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because Git is designed to work with nearly any type of project, these tools are pretty generic, but they can often help you hunt for a bug or culprit when things go wrong.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože je Git navržen tak, aby pracoval téměř s jakýmkoli typem projektu, jsou tyto nástroje velmi univerzální. Často vám mohou pomoci odhalit vzniklou chybu nebo problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because Git is very flexible, people can and do work together in many ways, and it's problematic to describe how you should contribute – every project is a bit different.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T111707Z" creationid="Prikryl" creationdate="20160110T111707Z">
        <seg>Git je velmi pružný, lidé mohou spolupracovat různými způsoby (a taky to tak dělají), takže není snadné popsat, jakým způsobem byste měli přispívat. Každý projekt je trochu jiný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T171908Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A protože větev je v Gitu ve skutečnosti obyčejným souborem, který obsahuje 40 znaků kontrolního součtu SHA-1 revize, na kterou větev ukazuje, dají se větve snadno vytvářet i odstraňovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because it contains work that isn't merged in yet, trying to delete it with `git branch -d` will fail:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211613Z" creationid="Prikryl" creationdate="20151124T211613Z">
        <seg>Jelikož obsahuje práci, která ještě nebyla začleněna, bude pokus o její smazání příkazem `git branch -d` neúspěšný:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because that server has a subset of the data your `origin` server has right now, Git fetches no data but sets a remote-tracking branch called `teamone/master` to point to the commit that `teamone` has as its `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132450Z" creationid="Prikryl" creationdate="20151210T123314Z">
        <seg>Protože je tento server podmnožinou dat, která jsou právě na serveru `origin`, Git nevyzvedne žádná data, ale nastaví vzdáleně sledovanou větev (remote-tracking branch) nazvanou `teamone/master` tak, aby ukazovala na stejný objekt revize, na který ukazuje větev `master` na serveru `teamone`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the commit on the branch you're on isn't a direct ancestor of the branch you're merging in, Git has to do some work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T125644Z" creationid="Prikryl" creationdate="20151115T153956Z">
        <seg>Protože objekt revize, na kterém se ve větvi nacházíte, není přímým předkem větve, kterou připojujete, musí s tím Git něco udělat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the commit pointed to by the branch you merged in was directly upstream of the commit you're on, Git simply moves the pointer forward.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T124130Z" creationid="Prikryl" creationdate="20151215T123025Z">
        <seg>Protože byl objekt revize v začleňované větvi přímým následníkem objektu, na kterém jste, Git jednoduše přesune ukazatel vpřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the reflog data is kept in the `.git/logs/` directory, you effectively have no reflog.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se data pro reflog uchovávají v adresáři `.git/logs/`, nemáte evidentně žádný reflog.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it's just the Git data.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144525Z" creationid="Prikryl" creationdate="20151218T144525Z">
        <seg>Protože se repozitář používá pouze jako místo pro spolupráci, není žádný důvod, aby byl na disku načten konkrétní snímek. Jsou zde uložena pouze data pro Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because this is so common, you can replace this entire part with `-s`, which means standard layout and implies all those options.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se jedná o častou situaci, můžete celou tuto část nahradit parametrem `-s`, který označuje standardní layout a implikuje všechny uvedené parametry.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you already merged in `iss53` earlier, you see it in your list.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211036Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jelikož už jste větev `iss53` začlenili, zobrazila se v seznamu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you don't have the permissions to directly update branches on the project, you have to get the work to the maintainers some other way.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T170737Z" creationid="Prikryl" creationdate="20160121T170737Z">
        <seg>Protože nemáte oprávnění k tomu, abyste mohli aktualizovat větve projektu přímo, musíte svou práci správcům doručit nějakým jiným způsobem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Protože máte celou historii projektu uloženou přímo na svém lokálním disku, probíhá většina operací takřka okamžitě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you need to use the same format to specify the file contents later, you create a helper method, `export_data`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože budete stejný formát potřebovat i později, k určení obsahu souboru vytvoříte pomocnou metodu – `export_data`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you only want the `old-file` and `new-file` arguments, you use the wrapper script to pass the ones you need.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože chcete pouze parametry `old-file` a `new-file`, použijete wrapperový skript k zadání těch, které potřebujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you rebased the branch, you have to specify the `-f` to your push command in order to be able to replace the `featureA` branch on the server with a commit that isn't a descendant of it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T184921Z" creationid="Prikryl" creationdate="20160122T184921Z">
        <seg>Protože jste větev přeskládali, musíte u příkazu pro odesílání (push) přidat `-f`, abyste mohli serverové větvi `featureA` podsunout revizi, která není jejím potomkem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you want all your branches and tags to go up, you can now run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože do něj chcete odeslat všechny své větve a značky, můžete použít příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because your starting point is the `ca82a6` commit object you saw in the `info/refs` file, you start by fetching that:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože je vaším výchozím bodem objekt revize `ca82a6`, jak jste zjistili v souboru `info/refs`, začnete vyzvednutím tohoto objektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Before we can answer this, let's step back a bit and talk about what history means.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T205107Z" creationid="Prikryl" creationdate="20151214T205107Z">
        <seg>Než na to budeme moci odpovědět, podívejme se na to s odstupem a proberme si, co rozumíme historií.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Before we start looking at the specific use cases, here's a quick note about commit messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T123059Z" creationid="Prikryl" creationdate="20160110T123059Z">
        <seg>Než se podíváme na konkrétní případy, uveďme rychlou poznámku o zprávách k revizím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Before you start using Git, you have to make it available on your computer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T200257Z" creationid="Prikryl" creationdate="20151027T200257Z">
        <seg>Než začnete Git používat, musíte jej na svém počítači zprovoznit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Behind big corporate firewalls, this obscure port is commonly blocked.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Velkými podnikovými firewally je tento málo rozšířený port většinou blokován.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Better get rid of it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Raději se ho zbavme:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Both files are staged and will go into your next commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oba soubory jsou nyní připraveny k zapsání a budou zahrnuty do příští revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170432Z" creationid="Prikryl" creationdate="20151108T170432Z">
        <seg>Oboje tyto změny jsou oddělené na samostatných větvích. Můžete mezi nimi přepínat tam a zpět, a až uznáte za vhodné, můžete je sloučit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Branches on this list without the `*` in front of them are generally fine to delete with `git branch -d`; you've already incorporated their work into another branch, so you're not going to lose anything.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211327Z" creationid="Prikryl" creationdate="20151124T211327Z">
        <seg>Větve, před kterými v seznamu není `*`, můžeme většinou bez problémů smazat příkazem `git branch -d`. Práci v nich vytvořenou už jste zahrnuli do jiné větve, takže o nic nepřijdete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Branching means you diverge from the main line of development and continue to do work without messing with that main line.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151105T153737Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větvení znamená, že se můžete odloučit od hlavní linie vývoje a pokračovat v práci, aniž byste do hlavní linie zasahovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But because Git was initially a toolkit for a VCS rather than a full user-friendly VCS, it has a bunch of verbs that do low-level work and were designed to be chained together UNIX style or called from scripts.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože však byl Git původně spíš soupravou nástrojů k verzování než plným, uživatelsky přívětivým systémem VCS, zná celou řadu příkazů pracujících na nižších úrovních, které byly původně spojovány ve stylu UNIXu nebo volány ze skriptů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But in Git it's common to create, work on, merge, and delete branches several times a day.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T143036Z" creationid="Prikryl" creationdate="20151209T143036Z">
        <seg>Ale v Gitu je běžné, že se větev vytvoří, pracuje se v ní, sloučí se a odstraní -- to vše i několikrát za den.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default it will prompt you on the terminal for this information so the server can tell if you're allowed to push.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T125455Z" creationid="Prikryl" creationdate="20151210T125455Z">
        <seg>Aby byl schopen zjistit, zda máte právo k odesílání (push), vypíše výzvu k zadání této informace na terminálu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, Git passes the following arguments to the diff program:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Standardně Git předává do nástoje diff tyto parametry:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, the `git push` command doesn't transfer tags to remote servers.(((git commands, push)))
You will have to explicitly push tags to a shared server after you have created them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224720Z" creationid="Prikryl" creationdate="20151107T224720Z">
        <seg>Příkaz `git push` nepřenáší značky na vzdálené servery automaticky.(((git příkazy, push)))
Po vytvoření značky ji musíte na sdílený server poslat explicitně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, with no arguments, `git log` lists the commits made in that repository in reverse chronological order – that is, the most recent commits show up first.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T151839Z" creationid="Prikryl" creationdate="20151102T144957Z">
        <seg>Ve výchozím nastavení a bez dalších parametrů vypíše příkaz `git log` revize daného repozitáře v obráceném chronologickém pořadí -- poslední revize se zobrazí na začátku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By now, you’ve learned most of the day-to-day commands and workflows that you need to manage or maintain a Git repository for your source code control.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do této chvíle jste stačili poznat většinu každodenních příkazů a pracovních postupů, které budete při práci se zdrojovým kódem potřebovat k ovládání a správě repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By the end of the chapter, you should be able to configure and initialize a repository, begin and stop tracking files, and stage and commit changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202729Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po přečtení kapitoly byste měli být schopni nakonfigurovat a inicializovat repozitář, zahájit a ukončit sledování souborů, připravovat soubory k zápisu (stage) a zapisovat revize (commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Calling `git reset` without an option is not dangerous - it only touches your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T214549Z" creationid="Prikryl" creationdate="20151106T214549Z">
        <seg>Volání `git reset` bez dalších parametrů není nebezpečné -- dotkne se jen oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Change the commit message, and exit the editor.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změňte zprávu k revizi a zavřete textový editor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changes not staged for commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120901Z" creationid="Prikryl" creationdate="20151029T120901Z">
        <seg>Changes not staged for commit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T080733Z" creationid="Prikryl" creationdate="20151120T080733Z">
        <seg>Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changes you submit may be rendered obsolete or severely broken by work that is merged in while you were working or while your changes were waiting to be approved or applied.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T192348Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vámi odeslané změny se mohou ukázat jako zastaralé nebo vážně narušené pracemi, které byly do projektu začleněny během vaší práce, nebo v době, kdy vaše změny čekaly na schválení či aplikaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changing your last commit is probably the most common rewriting of history that you’ll do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změna poslední revize je pravděpodobně nejobvyklejším způsobem přepsání historie, který budete provádět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check the tree created by that commit, and you see something interesting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prohlédněte si strom vytvořený touto revizí a uvidíte jednu zajímavou věc:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Checking connectivity... done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101812Z" creationid="Prikryl" creationdate="20151023T101812Z">
        <seg>Checking connectivity... done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T132828Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spolupráce s ostatními uživateli zahrnuje správu těchto vzdálených repozitářů a odesílání (push) a stahování dat (pull) v okamžicích kdy chcete práci sdílet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Committed means that the data is safely stored in your local database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Zapsáno znamená, že jsou data bezpečně uložena ve vaší lokální databázi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (12/12), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224901Z" creationid="Prikryl" creationdate="20151107T224901Z">
        <seg>Compressing objects: 100% (12/12), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (13/13), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091727Z" creationid="Prikryl" creationdate="20151024T091727Z">
        <seg>Compressing objects: 100% (13/13), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (14/14), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104620Z" creationid="Prikryl" creationdate="20151023T104620Z">
        <seg>Compressing objects: 100% (14/14), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (15/15), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T124217Z" creationid="Prikryl" creationdate="20151210T124217Z">
        <seg>Compressing objects: 100% (15/15), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (3/3), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105409Z" creationid="Prikryl" creationdate="20151023T105409Z">
        <seg>Compressing objects: 100% (3/3), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (5/5), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091711Z" creationid="Prikryl" creationdate="20151024T091711Z">
        <seg>Compressing objects: 100% (5/5), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conceptually, most other systems store information as a list of file-based changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T075800Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Většina ostatních systémů ukládá informace jako seznamy změn souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conflicts:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081111Z" creationid="Prikryl" creationdate="20151120T081111Z">
        <seg>Conflicts:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Congratulations on being an effective Git developer!</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160108T190149Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gratulujeme, nyní je z vás efektivní gitový vývojář!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Connection to gitserver closed.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105143Z" creationid="Prikryl" creationdate="20151023T105143Z">
        <seg>Connection to gitserver closed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Consider an example of doing some work (on `master`), branching off for an issue (`iss91`), working on it for a bit, branching off the second branch to try another way of handling the same thing (`iss91v2`), going back to your `master` branch and working there for a while, and then branching off there to do some work that you're not sure is a good idea (`dumbidea` branch).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T145244Z" creationid="Prikryl" creationdate="20151209T145244Z">
        <seg>Uvažujme příklad, kdy něco vytvoříte (v `master`), odvětvíte se kvůli řešení problému (`iss91`), chvíli na něm pracujete, vytvoříte druhou větev, abyste zkusili jiné řešení stejného problému (`iss91v2`). Vrátíte se zpět do větve `master`, kde chvíli pokračujete v práci a vytvoříte další větev, ve které chcete vyzkoušet něco, co by nemusel být dobrý nápad (větev `dumbidea`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Contributors don't have to wait for the project to incorporate their changes – each party can work at their own pace.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T230501Z" creationid="Prikryl" creationdate="20160109T230501Z">
        <seg>Přispěvatelé nemusí čekat, až budou jejich změny začleněny do projektu -- všichni zúčastnění mohou pracovat svým vlastním tempem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Copied properties for revision 1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090932Z" creationid="Prikryl" creationdate="20151024T090932Z">
        <seg>Copied properties for revision 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Copied properties for revision 2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090937Z" creationid="Prikryl" creationdate="20151024T090937Z">
        <seg>Copied properties for revision 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a branch for a new story you're working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152726Z" creationid="Prikryl" creationdate="20151111T152726Z">
        <seg>Vytvoříte větev pro nový případ, na kterém pracujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a branch to add the hotfix.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153100Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte větev pro přidání opravy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a file called `users.txt` that has this mapping in a format like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořte soubor `users.txt`, který bude toto mapování obsahovat v následující podobě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T201846Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořit novou větev je právě tak snadné a rychlé jako zapsat 41 bytů do souboru (40 znaků plus jeden pro nový řádek).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Delta compression using up to 8 threads.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224858Z" creationid="Prikryl" creationdate="20151107T224858Z">
        <seg>Delta compression using up to 8 threads.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Did you mean this?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090233Z" creationid="Prikryl" creationdate="20151024T090233Z">
        <seg>Did you mean this?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Do as we say, not as we do.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T141743Z" creationid="Prikryl" creationdate="20160115T141743Z">
        <seg>Dělejte to, jak říkám, a ne jak to dělám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Do some work in that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152745Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této větvi něco uděláte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Do work on a web site.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracujete na webových stránkách.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Does it even have a policy?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T122056Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je nějaká strategie vůbec určena?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Does the project have a maintainer or integration manager who checks all the patches?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Má projekt svého správce nebo integračního manažera, který kontroluje všechny záplaty?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T093914Z" creationid="Prikryl" creationdate="20151031T222812Z">
        <seg>V editoru se pak zobrazí také výstup rozdílů (diff), takže uvidíte přesně, jaké změny budete zapisovat.) Jakmile editor zavřete, Git vytvoří objekt revize se zprávou, kterou jste napsali (s odstraněnými komentáři, které zobrazovaly rozdíly).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so automatically runs `test-error.sh` on each checked-out commit until Git finds the first broken commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Automaticky se spustí `test-error.sh` na všech načtených revizích, dokud Git nenajde první revizi s chybou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so launches your editor of choice.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zadání příkazu se otevře vámi zvolený editor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so moves the `iss53` branch forward, because you have it checked out (that is, your `HEAD` is pointing to it):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T154026Z" creationid="Prikryl" creationdate="20151111T154026Z">
        <seg>S každou novou revizí se větev `iss53` posune vpřed, protože jste na ni přepnutí (provedli jste `checkout` a `HEAD` na ni ukazuje):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so offers a number of advantages: a hosting site is generally quick to set up and easy to start projects on, and no server maintenance or monitoring is involved.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto řešení vám nabízí celou řadu výhod. Hostingové místo má většinou velmi rychlé nastavení, snadno se na něm zakládají projekty a nevyžaduje od vás správu ani monitoring serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Don't ever use this command unless you absolutely know that you don't want the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T220400Z" creationid="Prikryl" creationdate="20151106T220400Z">
        <seg>Nikdy tento příkaz nepoužívejte, pokud si nejste zcela jisti, že už daný soubor nebudete potřebovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each developer has committed a few times and merged each other's work successfully.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214815Z" creationid="Prikryl" creationdate="20160115T214815Z">
        <seg>Každý z nich provedl několik zápisů (commit) a úspěšně začlenil (merge) práci toho druhého.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každá úroveň je nadřazená hodnotám úrovně předchozí, takže hodnoty v `.git/config` převládnou nad hodnotami v `/etc/gitconfig`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each of the three commit objects points to one of the three snapshot trees you created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny tři tyto objekty revizí ukazují na jeden ze tří stromů snímku, který jste vytvořili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each of these can be set to `true`, `false`, or `always`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každý z příslušných parametrů může nabývat hodnoty na `true` (pravda), `false` (nepravda) nebo `always` (vždy):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each time you commit or change branches, the reflog is updated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vždy když zapíšete revizi nebo změníte větve, je reflog aktualizován.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each time, Git will stop, let you amend the commit, and continue when you’re finished.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git pokaždé zastaví, nechá vás revizi upravit, a až budete hotovi, bude pokračovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see &lt;&lt;_data_recovery&gt;&gt; for data recovery).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T132325Z" creationid="Prikryl" creationdate="20151106T221338Z">
        <seg>Obnovit lze dokonce i objekty revizí na odstraněných větvích nebo objekty revizí, které byly přepsány příkazem `commit --amend` (obnovování dat se věnuje kapitola &lt;&lt;_data_recovery&gt;&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even if it's already installed, it's probably a good idea to update to the latest version.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T200408Z" creationid="Prikryl" creationdate="20151027T200408Z">
        <seg>Dokonce i v případě, kdy už jej máte předinstalovaný, bude dobré, když provedete aktualizaci na poslední verzi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even if you don't commit during the weekend, use the staging area on Monday to split your work into at least one commit per issue, with a useful message per commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T203904Z" creationid="Prikryl" creationdate="20160110T124317Z">
        <seg>Když už během víkendu nebudete zapisovat revize, využijte v pondělí oblasti připravených změn pro rozdělení práce alespoň do stejného počtu revizí, kolik je řešených problémů, a přidejte k nim vysvětlující zprávy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even the popular Mac OS X operating system includes the `rcs` command when you install the Developer Tools.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T182948Z" creationid="Prikryl" creationdate="20151026T182948Z">
        <seg>Dokonce i populární operační systém Mac OS X obsahuje po nainstalování vývojářských nástrojů (Developer Tools) příkaz `rcs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every clone is really a full backup of all the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T202749Z" creationid="Prikryl" creationdate="20151026T193341Z">
        <seg>Každý klon je ve skutečnosti úplnou zálohou všech dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time you commit, it moves forward automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když zapíšete novou revizi, větev se automaticky posune vpřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T113059Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokaždé, když v systému Git zapíšete (commit{empty}footnote:[Pozn. překl.: Anglické slovo _commit_ má v informačních systémech specifický význam _zapsat_ nebo _potvrdit zápis_, jehož jemný odstín se bez kontextu špatně překládá. V této knize bude překládán jako _zápis_. Pokud by měl být zdůrazněn specifický výraz slova _commit_, bude anglický pojem uveden v závorce. Čeština je krásný jazyk, ale technické texty někdy vyžadují nebásnickou přesnost ;)]) stav projektu, v podstatě „vyfotí“, jak vypadají všechny vaše soubory v daném okamžiku, a uloží odkaz na tento snímek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T094228Z" creationid="Prikryl" creationdate="20151031T223541Z">
        <seg>Pokaždé, když provedete příkaz `commit`, nahrajete snímek svého projektu, k němuž se můžete později vrátit nebo ho můžete použít k srovnání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time your branch tip is updated for any reason, Git stores that information for you in this temporary history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když je z nějakého důvodu aktualizován vrchol větve, Git tuto informaci uloží v dočasné historii reflog.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every version of every file for the history of the project is pulled down by default when you run `git clone`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211703Z" creationid="Prikryl" creationdate="20151028T211703Z">
        <seg>Po provedení příkazu `git clone` budou k historii projektu staženy všechny verze všech souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Everything in Git is check-summed before it is stored and is then referred to by that checksum.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T114714Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Než se v Gitu cokoli uloží, nejdříve se z toho vypočítá kontrolní součet, který se pak používá k odkazu na uložená data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Everything merges cleanly, and Jessica's history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214243Z" creationid="Prikryl" creationdate="20160115T214243Z">
        <seg>Začlenění proběhne čistě a Jessičina historie bude vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Exiting non-zero from this hook aborts the commit, although you can bypass it with `git commit --no-verify`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li výstup tohoto zásuvného modulu nenulový, zapisování bude přerušeno. Ale můžete to obejít zadáním příkazu `git commit --no-verify`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Fetch URL: https://github.com/my-org/complex-project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131315Z" creationid="Prikryl" creationdate="20151107T131315Z">
        <seg>Fetch URL: https://github.com/my-org/complex-project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Fetch URL: https://github.com/schacon/ticgit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121511Z" creationid="Prikryl" creationdate="20151107T121511Z">
        <seg>Fetch URL: https://github.com/schacon/ticgit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally we can see that our `testing` branch is not tracking any remote branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T215851Z" creationid="Prikryl" creationdate="20151213T215851Z">
        <seg>A na konci vidíme, že naše větev `testing` nesleduje žádnou vzdálenou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, John's commit history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145222Z" creationid="Prikryl" creationdate="20160115T145222Z">
        <seg>Johnova historie revizí nakonec vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, she merges John's work into her own `featureA` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113259Z" creationid="Prikryl" creationdate="20160118T113259Z">
        <seg>Nakonec začlení Johnovu práci do své vlastní větve `featureA`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, the command tells you which branch you're on and informs you that it has not diverged from the same branch on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110420Z" creationid="Prikryl" creationdate="20151029T110420Z">
        <seg>Příkaz vám dále sděluje, na jaké větvi (branch) se nacházíte, a informuje vás, že se neodchýlila od stejné větve na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, the server responds with a success (or failure) indication:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na závěr procesu server oznámí, zda se akce zdařila, nebo nezdařila:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, you went back to your server branch and did a few more commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T081006Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nakonec jste se vrátili na větev `server` a zapsali dalších pár objektů revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First you have to find it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve ho budete muset najít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First you run `git bisect start` to get things going, and then you use `git bisect bad` to tell the system that the current commit you’re on is broken.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve spustíte příkaz `git bisect start`, jímž celý proces zahájíte, a poté použijete příkaz `git bisect bad`, jímž systému oznámíte, že aktuální revize, na níž se právě nacházíte, obsahuje chybu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, add a large object to your history:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve do historie přidejte velký objekt:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, create a new file and save its contents in your database:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořte nový soubor a uložte jeho obsah do své databáze:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, it works offline, unlike the real `svn log` command, which asks the Subversion server for the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé to, že pracuje i off-line, na rozdíl od skutečného příkazu `svn log`, který si data vyžádá ze serveru Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, she switches back to her master branch to integrate all this work:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T212454Z" creationid="Prikryl" creationdate="20160115T212454Z">
        <seg>Nejdříve se přepne zpět na svou větev `master`, aby do ní mohla vše integrovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you again tell it the scope of the bisect by providing the known bad and good commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve opět zadáte poslední známé revize s chybou a bez ní, jimiž vymezíte pracovní rozsah pro příkaz bisect.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in the file automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První možností je automaticky vložit kontrolní součet SHA-1 blobu do pole `$Id$` v souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you choose which protocols you want your server to communicate with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve určíte, jakými protokoly má váš server komunikovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you initialize a new Git repository and verify that there is nothing in the `objects` directory:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořme nejprve nový repozitář Git. Můžeme se přesvědčit, že je adresář `objects` prázdný:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you need to get the Git source code, which GitWeb comes with, and generate the custom CGI script:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve je třeba získat zdrojový kód systému Git, s nímž je GitWeb distribuován, a vygenerovat uživatelský CGI skript:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you need to require the library and then run `Zlib::Deflate.deflate()` on the content:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve je třeba vyžádat si knihovnu a poté na obsah spustit příkaz `Zlib::Deflate.deflate()`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you see this where the hook starts running.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé si všimněte místa, kde byl spuštěn zásuvný modul.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you'll probably want to clone the main repository, create a topic branch for the patch or patch series you're planning to contribute, and do your work there.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T185916Z" creationid="Prikryl" creationdate="20160121T185916Z">
        <seg>Nejdříve pravděpodobně naklonujete hlavní repozitář, vytvoříte tématickou větev pro záplatu nebo pro posloupnost záplat, kterými chcete přispět, a zde vaši práci zrealizujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see &lt;&lt;_undoing&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T114927Z" creationid="Prikryl" creationdate="20151027T114807Z">
        <seg>Podrobnější informace o tom, jak Git ukládá data a jak lze obnovit zdánlivě ztracenou práci, najdete v podkapitole &lt;&lt;_undoing&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a project with hundreds or thousands of commits, this can literally take hours or even days to finish.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U projektů se stovkami nebo tisíci revizí si můžete bez nadsázky počkat i celé hodiny nebo dny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T093016Z" creationid="Prikryl" creationdate="20151030T093023Z">
        <seg>Další příklad... Pokud jste soubor `CONTRIBUTING.md` připravili k zapsání a poté ho znovu upravili, můžete příkaz `git diff` použít k zobrazení změn v souboru, které byly připraveny k zapsání, a změn, které nejsou připraveny k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For each reference that this push will update, the `send-pack` process tells the `receive-pack` process that information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro každou referenci, která bude tímto odesláním aktualizována, sdělí proces `send-pack` tuto informaci procesu `receive-pack`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, a repository with multiple remotes for working with several collaborators might look something like this.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T165254Z" creationid="Prikryl" creationdate="20151101T165254Z">
        <seg>Repozitář s více vzdálenými servery, který slouží pro spolupráci s více lidmi, může vypadat například takto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, everyone knows to a certain degree what everyone else on the project is doing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T184811Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Všichni například do určité míry vědí, co na projektu dělají ostatní účastníci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you make two changes to your simplegit.rb file and want to stage one of them and not the other, doing so is very easy in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například provedete dvě změny v souboru simplegit.rb a chcete k zapsání připravit pouze jednu z nich, není to v systému Git žádný problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want all but `cr-at-eol` to be set, you can do this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například zapnout všechny funkce kromě `cr-at-eol`, zadejte příkaz v tomto tvaru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to change the last three commit messages, or any of the commit messages in that group, you supply as an argument to `git rebase -i` the parent of the last commit you want to edit, which is `HEAD~2^` or `HEAD~3`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete například změnit zprávy u posledních tří revizí nebo jakoukoli zprávu k revizi z této skupiny, přidejte jako parametr k příkazu `git rebase -i` rodiče poslední revize, kterou chcete upravovat, v tomto případě tedy `HEAD~2^` nebo `HEAD~3`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to fetch all the information that Paul has but that you don't yet have in your repository, you can run `git fetch pb`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170405Z" creationid="Prikryl" creationdate="20151101T170405Z">
        <seg>Pokud například chcete vyzvednout (fetch) všechny informace, které má Paul, ale vy je ještě nemáte ve svém repozitáři, můžete provést příkaz `git fetch pb`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to see some abbreviated stats for each commit, you can use the `--stat` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T113211Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete pro každou revizi zobrazit některé stručné statistiky, použijte volbu `--stat`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano and were not merged in the month of October 2008, you can run something like this:(((log filtering)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T132950Z" creationid="Prikryl" creationdate="20151107T132950Z">
        <seg>Pokud například chcete zjistit, které revize upravující testovací soubory ve zdrojovém kódu Gitu zapsal Junio Hamano v říjnu 2008 (relativně k časové zóně New Yorku) a které přitom nevznikly sloučením (merge), můžete zadat následující příkaz:(((log filtrování)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to submit a second topic of work to the project, don't continue working on the topic branch you just pushed up – start over from the main repository's `master` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T201317Z" creationid="Prikryl" creationdate="20160121T201317Z">
        <seg>Pokud například chcete do projektu odeslat druhé pracovní téma, nepokračujte v práci v tématické větvi, kterou jste právě odeslali. Začněte znovu od začátku z větve `master` hlavního repozitáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you're on a system that has yum (such as Fedora) or apt-get (such as a Debian based system), you can use one of these commands to install the minimal dependencies for compiling and installing the Git binaries:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T001650Z" creationid="Prikryl" creationdate="20151028T001650Z">
        <seg>Pokud používáte systém s nástrojem yum (jako je Fedora) nebo apt-get (například distribuce odvozené od Debianu), můžete k instalaci použít jeden z následujících příkazů, který nainstaluje minimální sadu knihoven, na kterých je Git závislý:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if your contributor sends you two patches and you create a branch called `contrib` and applied those patches there, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vám například přispěvatel pošle dvě záplaty a vy vytvoříte větev s názvem `contrib`, do níž tyto záplaty aplikujete, můžete použít tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, in the history listed earlier, `HEAD~3` would be</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například v historii naznačené výše by `HEAD~3` znamenalo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213836Z" creationid="Prikryl" creationdate="20151106T213836Z">
        <seg>Řekněme například, že jste změnili dva soubory a chcete je zapsat jako dvě oddělené změny, jenže omylem jste zadali příkaz `git add *` a oba soubory jste tím připravili k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, say you run `git push origin master` in your project, and `origin` is defined as a URL that uses the SSH protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme například, že ve svém projektu spustíte příkaz `git push origin master` a `origin` je definován jako URL používající protokol SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, suppose you want to split the middle commit of your three commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že chcete rozdělit třeba prostřední ze svých tří revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, this command gets the list of commits made in the last two weeks:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T121006Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například následující příkaz zobrazí seznam všech revizí pořízených za poslední dva týdny (2 weeks):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to browse the history of the project, Git doesn't need to go out to the server to get the history and display it for you – it simply reads it directly from your local database.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T113847Z" creationid="Prikryl" creationdate="20151027T092836Z">
        <seg>Pokud například chcete procházet historii projektu, Git kvůli tomu nemusí vyhledávat informace na serveru -- načte je jednoduše přímo z vaší lokální databáze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to change your `extDiff` and `extMerge` tools to run the KDiff3 tool instead, all you have to do is edit your `extMerge` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například změnit nástroje `extDiff` a `extMerge`, aby se místo nich spouštěl nástroj KDiff3, jediné, co musíte udělat, je upravit soubor `extMerge`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to clone a local repository, you can run something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T193528Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naklonování lokálního repozitáře můžete provést například spuštěním něčeho takového:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste například narazili na problém s používáním příkazu pro vrácení souboru z oblasti připravených změn, můžete ho vyřešit přidáním vlastního aliasu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to modify only the third commit message, you change the file to look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například změnit pouze zprávu ke třetí revizi, změňte soubor následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to see a specific commit, suppose you run a `git log` command and identify the commit where you added certain functionality:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si chcete například prohlédnout konkrétní revizi, řekněme, že spustíte příkaz `git log` a určíte revizi, do níž jste vložili určitou funkci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to set the meta information in your diff output to blue foreground, black background, and bold text, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li chtít nastavit například meta informace ve výpisu příkazu diff tak, aby měly modré popředí, černé pozadí a tučné písmo, můžete použít příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you can do some simple version control on a file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na souboru můžete například provádět jednoduché verzování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you can get the manpage help for the config command by running(((git commands, help)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T133809Z" creationid="Prikryl" creationdate="20151028T133809Z">
        <seg>Například nápovědu pro příkaz `config` vyvoláte zadáním(((git příkazy, nápověda)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you can start a branch named `recover-branch` at that commit (ab1afef):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na revizi můžete vytvořit například větev `recover-branch` (ab1afef):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if Jessica wants to send John a pull request, and she's done two commits on the topic branch she just pushed up, she can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T195935Z" creationid="Prikryl" creationdate="20160121T195935Z">
        <seg>Pokud chce například Jessica poslat Johnovi požadavek na stažení a vytvořila předtím dvě revize v tématické větvi, kterou právě odeslala, může zadat tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if a documentation author tries to push a commit modifying something in the `lib` directory, they see</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se například autor dokumentace pokusí odeslat revizi, která mění obsah adresáře `lib`, zobrazí se mu upozornění:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you want to see all commits that are reachable from `refA` or `refB` but not from `refC`, you can type one of these:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete zobrazit například všechny revize, které jsou dostupné ve větvi `refA` nebo `refB`, ale nikoli ve větvi `refC`, zadejte jeden z následujících příkazů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you want to show the last commit object on a branch, the following commands are equivalent, assuming that the `topic1` branch points to `ca82a6d`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete například zobrazit objekt poslední revize větve, můžete využít některý z následujících příkazů (za předpokladu, že větev `topic1` ukazuje na `ca82a6d`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T212508Z" creationid="Prikryl" creationdate="20151104T212508Z">
        <seg>Pokud například chcete zjistit poslední revizi, kdy byl přidán nebo odstraněn odkaz na určitou funkci, můžete zavolat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you wanted to see what the `master` branch on your `origin` remote looked like as of the last time you communicated with it, you would check the `origin/master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T104612Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete zjistit, jak vypadala větev `master` ve vašem vzdáleném repozitáři `origin`, když jste s ní naposledy komunikovali, budete hledat větev `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, in the previous scenario, if instead of doing a merge when we're at &lt;&lt;_pre_merge_rebase_work&gt;&gt; we run `git rebase teamone/master`, Git will:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T153339Z" creationid="Prikryl" creationdate="20151214T150446Z">
        <seg>Tak například, pokud se při předchozím scénáři nacházíme v situaci na obrázku &lt;&lt;_pre_merge_rebase_work&gt;&gt; a místo provedení sloučení (merge) spustíme `git rebase teamone/master`, provede Git následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, the Linux kernel recently jumped from 8 to 10 characters to ensure SHA-1 object uniqueness, so older `git describe` output names were invalidated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například jádro Linuxu nyní přešlo z 8 na 10 znaků, aby byla zajištěna jedinečnost objektů SHA-1. Starší výstupy příkazu `git describe` proto už nebudou platné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, to see where your `master` branch was yesterday, you can type</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například zjistit, kde byla vaše větev `master` včera (yesterday), můžete zadat příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, you can add a remote called `origin` and push your `master` branch to it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete například přidat vzdálený repozitář `origin` a odeslat do něj větev `master`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, you might resolve this conflict by replacing the entire block with this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento konflikt můžete vyřešit například nahrazením celého bloku tímto textem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For larger companies or projects, the number of developers could be in the thousands, with hundreds or thousands of commits coming in each day.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T191729Z" creationid="Prikryl" creationdate="20160110T120336Z">
        <seg>U větších společností nebo u větších projektů může počet vývojářů dosahovat tisíců -- při stovkách nebo tisících zápisů revizí (commit) denně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information on the various credential caching options available, see &lt;&lt;_credential_caching&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T130349Z" creationid="Prikryl" creationdate="20151210T130349Z">
        <seg>Více informací o různých volbách pro uchovávání pověřovacích dat naleznete v podkapitole &lt;&lt;_credential_caching&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more options, there are instructions for installing on several different Unix flavors on the Git website, at http://git-scm.com/download/linux[].</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T122148Z" creationid="Prikryl" creationdate="20151027T205157Z">
        <seg>Další možnosti naleznete v instrukcích pro instalaci na několika různých odrůdách Unixu. Nacházejí se na webovém serveru Gitu, na stránce http://git-scm.com/download/linux[].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For now this magic invocation is all you need to know about the `git reset` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T214745Z" creationid="Prikryl" creationdate="20151106T214745Z">
        <seg>Prozatím je tato magická formule vše, co o příkazu `git reset` potřebujete vědět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For now, let's assume you've committed all your changes, so you can switch back to your `master` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T213020Z" creationid="Prikryl" creationdate="20151111T213020Z">
        <seg>Teď předpokládejme, že jste všechny změny zapsali, takže se můžete přepnout zpět do větve `master`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For now, that branch is always ``master'', which is the default; you won't worry about it here.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110700Z" creationid="Prikryl" creationdate="20151029T110700Z">
        <seg>Prozatím budeme uvažovat, že jde o větev `master`, což je výchozí název (zatím se s tím nezatěžujte).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For now, we can see from the output that there is a single commit that John has made that Jessica has not merged in.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T211651Z" creationid="Prikryl" creationdate="20160115T211651Z">
        <seg>Z výstupu vidíme, že existuje jediná revize, kterou zapsal John a kterou Jessica nesloučila se svou prací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For one thing, you should clean up the weird references that `git svn` set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé je nutné vyčistit podivné reference, které vytvořil příkaz `git svn`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For one, the command line is the only place you can run *all* Git commands – most of the GUIs only implement some subset of Git functionality for simplicity.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T192221Z" creationid="Prikryl" creationdate="20151027T191838Z">
        <seg>Především, příkazový řádek je jediným místem, kde můžete spustit *všechny* příkazy Gitu. Většina grafických uživatelských rozhraní pro jednoduchost implementuje jen podmnožinu funkčnosti Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For the examples in this book you will use software source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T175404Z" creationid="Prikryl" creationdate="20151026T175404Z">
        <seg>V této knize jsou jako příklady souborů použity zdrojové texty programů, avšak ve skutečnosti lze správu verzí použít pro libovolný typ souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For this book, we will be using Git on the command line.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T190833Z" creationid="Prikryl" creationdate="20151027T190833Z">
        <seg>V této knize budeme Git používat z příkazového řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From https://github.com/paulboone/ticgit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170413Z" creationid="Prikryl" creationdate="20151101T170413Z">
        <seg>From https://github.com/paulboone/ticgit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From https://github.com/schacon/simplegit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144120Z" creationid="Prikryl" creationdate="20151210T144120Z">
        <seg>From https://github.com/schacon/simplegit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From jessica@githost:simplegit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145629Z" creationid="Prikryl" creationdate="20160115T145629Z">
        <seg>From jessica@githost:simplegit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From john@githost:simplegit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144506Z" creationid="Prikryl" creationdate="20160115T144506Z">
        <seg>From john@githost:simplegit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From that point forward, it should be called.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Od tohoto okamžiku by měl být skript volán.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From the interactive prompt, type `5` or `p` (for patch).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na interaktivní výzvu zadejte příkaz `5` nebo `p` (jako „patch“ – tedy záplata).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T205815Z" creationid="Prikryl" creationdate="20151214T205815Z">
        <seg>Z tohoto pohledu jsou úpravy historie zápisů revizí téměř rouhačstvím; _lžete_ o tom, co se skutečně stalo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Further paragraphs come after blank lines.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215924Z" creationid="Prikryl" creationdate="20151023T215924Z">
        <seg>Další odstavce se oddělují prázdným řádkem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T082811Z" creationid="Prikryl" creationdate="20151214T141725Z">
        <seg>Když navíc odešlete takovou historii zpět na server, znovu na centrálním serveru vzniknou všechny objekty revizí, které vznikly přeskládáním, což vede k dalšímu zmatení lidí okolo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Mnoho z těchto systémů navíc bez větších obtíží pracuje i s několika vzdálenými repozitáři, takže můžete v rámci jednoho projektu různým způsobem spolupracovat s různými skupinami lidí najednou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, what overall workflow do you want to use to maintain your project?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A vůbec, jaký celkový pracovní postup zvolíte ke správě projektu?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, you want your collaborators to be able to access the repository even if your computer is offline – having a more reliable common repository is often useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T141538Z" creationid="Prikryl" creationdate="20151218T141454Z">
        <seg>Navíc chcete, aby měli vaši spolupracovníci do repozitáře přístup, i když je váš počítač vypnutý nebo odpojený. Často bývá spolehlivější, když existuje společný repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>GIT 1.4.2.1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101912Z" creationid="Prikryl" creationdate="20151023T101912Z">
        <seg>GIT 1.4.2.1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally it's better to simply use the `fetch` and `merge` commands explicitly as the magic of `git pull` can often be confusing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T073649Z" creationid="Prikryl" creationdate="20151214T073649Z">
        <seg>Obecně bývá lepší přímo použít příkazy `fetch` a `merge`, protože magie skrytá za `git pull` může být často matoucí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, eight to ten characters are more than enough to be unique within a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Osm až deset znaků většinou bohatě stačí, aby byla hodnota v rámci projektu jednoznačná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou k tomu dochází tak, že násilím smažete větev, která uchovávala část vaší práce, a vy po čase zjistíte, že byste tuto větev přece jen potřebovali. Stejně tak jste mohli provést tvrdý reset větve a tím zavrhnout revize, z nichž nyní něco potřebujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, this script is used for notification or something similar.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento skript se tak většinou používá pro účely oznámení a podobně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, you’ll type `y` or `n` if you want to stage each hunk, but staging all of them in certain files or skipping a hunk decision until later can be helpful too.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li připravit k zapsání jednotlivé komplexy, většinou zadáte `y` nebo `n`. Přesto se vám může někdy hodit i možnost připravit všechny komplexy v určitých souborech nebo přeskočení komplexu, k němuž se vrátíte později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Getting in the habit of creating quality commit messages makes using and collaborating with Git a lot easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T204131Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si zvyknete připisovat k revizím kvalitní zprávy, bude pro vás práce s Gitem a spolupráce s ostatními mnohem jednodušší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git aborts the patch if this script exits non-zero.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li výstup tohoto skriptu nenulový, Git přeruší záplatu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git addresses this issue using submodules.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí jako řešení tohoto problému nástroj submodulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T082917Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git přidává do souborů způsobujících konflikt standardní značky pro označení konfliktů (conflict-resolution markers), takže soubory můžete ručně otevřít a konflikty vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git allows you to do this by using either the `^` character or `--not` before any reference from which you don’t want to see reachable commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git to můžete provést buď zadáním znaku `^` nebo parametru `--not` před referencí, jejíž dostupné revize si nepřejete zobrazit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git allows you to specify specific commits or a range of commits in several ways.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systém Git umožňuje určit jednotlivé revize nebo interval revizí několika způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git also doesn't see any untracked files, or they would be listed here.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110211Z" creationid="Prikryl" creationdate="20151029T110211Z">
        <seg>Git také neví o žádných nesledovaných souborech, jinak by byly ve výčtu uvedeny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git also gives you your own local `master` branch starting at the same place as origin's `master` branch, so you have something to work from.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T105329Z" creationid="Prikryl" creationdate="20151210T105329Z">
        <seg>Git rovněž vytvoří vaši vlastní lokální větev `master`, která bude začínat ve stejném místě jako větev `master` serveru `origin`. Takže máte výchozí bod pro svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git also has a short status flag so you can see your changes in a more compact way.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T130647Z" creationid="Prikryl" creationdate="20151029T130647Z">
        <seg>Git nabízí použití příznaku pro zkrácený výpis stavu, který způsobí zobrazení změn v zhuštěné podobě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git also provides a couple of tools to help you debug issues in your projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git také nabízí několik nástrojů, které vám pomohou ladit problémy v projektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git applies the last commit (`a5f4a0d`) in the script, and your history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git aplikuje poslední revizi (`a5f4a0d`) ve skriptu. Vaše historie bude vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git as a content-addressable filesystem is a very powerful tool that you can easily use as more than just a VCS.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git jakožto obsahově adresovatelný systém souborů je velmi výkonným nástrojem, který snadno využijete i k jiným účelům než jako pouhý systém VCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git attributes offers you two ways to do this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Atributy Git nabízejí dvě možnosti, jak to provést.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git automatically expands the `serverfix` branchname out to `refs/heads/serverfix:refs/heads/serverfix`, which means, ``Take my serverfix local branch and push it to update the remote's serverfix branch.''
We'll go over the `refs/heads/` part in detail in &lt;&lt;_git_internals&gt;&gt;, but you can generally leave it off.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110602Z" creationid="Prikryl" creationdate="20151210T124614Z">
        <seg>Git automaticky rozšíří název větve `serverfix` na `refs/heads/serverfix:refs/heads/serverfix`, což znamená: „Vezmi mou lokální větev `serverfix` a odešli ji do vzdáleného repozitáře, kde aktualizuje tamní větev `serverfix`.“ Částí `refs/heads/` se budeme podrobněji věnovat v kapitole &lt;&lt;_git_internals&gt;&gt;, ale nemusí být pro vás zajímavá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git can figure out a short, unique abbreviation for your SHA-1 values.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git dokáže identifikovat krátkou, jednoznačnou zkratku hodnoty SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git can use four major protocols to transfer data: Local, HTTP, Secure Shell (SSH) and Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T191823Z" creationid="Prikryl" creationdate="20151219T191823Z">
        <seg>Git může k přenosu dat používat čtyři hlavní protokoly: lokální, HTTP, Secure Shell (SSH) a Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git checks for any listed alternates first:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nejprve zjistí, zda jsou k dispozici alternativní repozitáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git checks out a working copy of the `master` branch that was pointed to by the HEAD reference you downloaded at the beginning.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git provede checkout pracovní kopie větve `master`, na niž ukazovala reference HEAD, kterou jste stáhli na začátku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes preset to detect and fix some whitespace issues.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je standardně nastaven na vyhledávání a opravu chyb způsobených prázdnými znaky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes preset to use a number of other merge-resolution tools without your having to set up the cmd configuration.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je standardně přednastaven tak, aby dokázal používat celou řadu různých nástrojů k řešení konfliktů při slučování, aniž byste museli nastavovat konfiguraci příkazu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes with a couple of scripts that make some command-line tasks easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí také celou řadu skriptů, které vám mohou usnadnit provádění příkazů zadávaných v příkazovém řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.(((git commands, config)))
These variables can be stored in three different places:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T104516Z" creationid="Prikryl" creationdate="20151028T104516Z">
        <seg>Součástí Gitu je nástroj zvaný `git config`, který vám umožní nastavit konfigurační proměnné ovlivňující všechny stránky toho, jak Git vypadá a jak pracuje.(((git příkazy, config)))
Tyto proměnné mohou být uloženy na třech různých místech:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git compresses the new content with zlib, which you can do in Ruby with the zlib library.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git zkomprimuje nový obsah metodou zlib, která je obsažena v knihovně zlib.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git concatenates the header and the original content and then calculates the SHA-1 checksum of that new content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vytvoří řetězec ze záhlaví a původního obsahu a vypočítá kontrolní součet SHA-1 tohoto nového obsahu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git constructs a header that starts with the type of the object, in this case a blob.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vytvoří záhlaví, které bude začínat typem objektu, jímž je v našem případě blob.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git does this if you have too many loose objects around, if you run the `git gc` command manually, or if you push to a remote server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git k tomuto kroku přistoupí, pokud máte příliš mnoho volných objektů, pokud ručně spustíte příkaz `git gc` nebo jestliže odesíláte revize na vzdálený server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git doesn't automatically infer your command if you type it in partially.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T145027Z" creationid="Prikryl" creationdate="20151107T142930Z">
        <seg>Jestliže zadáte neúplný příkaz, Git si ho automaticky nedoplní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git doesn't think of or store its data this way.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T081630Z" creationid="Prikryl" creationdate="20151027T081630Z">
        <seg>Git o ukládání dat tímto způsobem neuvažuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git doesn’t have a modify-history tool, but you can use the rebase tool to rebase a series of commits onto the HEAD they were originally based on instead of moving them to another one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nemá zvláštní nástroj k úpravě historie, ale můžete využít nástroje přeskládání, jímž přeskládáte sérii revizí na revizi HEAD, na níž se původně zakládaly. Revize není třeba přesouvat jinam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git figured out that about 12 commits came between the commit you marked as the last good commit (v1.0) and the current bad version, and it checked out the middle one for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git zjistil, že mezi revizí, kterou jste označili jako poslední dobrou (v1.0), a aktuální problémovou verzí je asi 12 revizí, a provedl checkout prostřední revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T231513Z" creationid="Prikryl" creationdate="20151031T231513Z">
        <seg>Git umí zjistit, že jde o přejmenování, a proto nehraje roli, zda přejmenujete soubor tímto způsobem, nebo pomocí příkazu `mv`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git fires up the `send-pack` process, which initiates a connection over SSH to your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git spustí proces `send-pack`, který iniciuje spojení se serverem přes SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has a few configuration options to help with these issues.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git disponuje několika konfiguračními parametry, které vám pomohou tyto problémy vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has a number of different transfer protocols you can use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí celou řadu různých přenosových protokolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has initialized the `objects` directory and created `pack` and `info` subdirectories in it, but there are no regular files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git inicializoval adresář `objects` a vytvořil v něm podadresáře `pack` a `info`, nenajdeme tu však žádné skutečné soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has made incredible progress on Windows, in the explosion of graphical user interfaces to it for all platforms, in IDE support and in business use.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T104711Z" creationid="Prikryl" creationdate="20151026T134231Z">
        <seg>Git učinil neuvěřitelný pokrok ve spojení s Windows, ve vzniku grafických uživatelských rozhraní pro všechny platformy, v podpoře integrovaných vývojových prostředí (IDE) a v použitelnosti pro podnikání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has three main states that your files can reside in: committed, modified, and staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git používá pro spravované soubory tři základní stavy: zapsáno (committed), změněno (modified) a připraveno k zapsání (staged).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git hasn't automatically created a new merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T072934Z" creationid="Prikryl" creationdate="20151120T072934Z">
        <seg>Git automaticky nevytvořil nový bod sloučení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git is a content-addressable filesystem.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je obsahově adresovatelný systém souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T083757Z" creationid="Prikryl" creationdate="20151214T211315Z">
        <seg>Git je mocný nástroj a dovoluje vám s historií provádět mnoho věcí. Ale každý tým a každý projekt se liší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git operates slightly differently if you explicitly specify `file://` at the beginning of the URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T193628Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud na začátek URL explicitně uvedete `file://`, pracuje Git trochu jinak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git provides a safer command to do this if you want to update a reference called `update-ref`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git zná bezpečnější metodu, jak referenci aktualizovat: příkaz `update-ref`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git provides an easy way to check for this – before you commit, run `git diff --check`, which identifies possible whitespace errors and lists them for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T203356Z" creationid="Prikryl" creationdate="20160110T123807Z">
        <seg>Git nabízí snadný způsob, jak tyto chyby zkontrolovat. Před zapsáním revize spusťte `git diff --check`, který zkontroluje prázdné znaky a zobrazí vám je.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git stores and thinks about information much differently than these other systems, even though the user interface is fairly similar, and understanding those differences will help prevent you from becoming confused while using it.(((Subversion)))(((Perforce)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T123515Z" creationid="Prikryl" creationdate="20151027T075404Z">
        <seg>Ačkoli je uživatelské rozhraní velmi podobné jiným systémům, Git uvažuje o ukládaných informacích velmi odlišně. Pochopení těchto rozdílů vám pomůže předejít nejasnostem, které by mohly při používání Gitu vzniknout.(((Subversion)))(((Perforce)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git stores content in a manner similar to a UNIX filesystem, but a bit simplified.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git ukládá obsah podobným způsobem jako systém souborů UNIX, jen trochu jednodušeji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git tells you the original commit where you wrote those lines, even if it was in another file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vám vyhledá původní revizi, kde jste tyto řádky napsali, dokonce i když jsou v jiném souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.(((git commands, commit)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T094712Z" creationid="Prikryl" creationdate="20151108T143659Z">
        <seg>Poté Git vytvoří objekt revize (commit) s metadaty a s ukazatelem na kořen stromu projektu, aby mohl v případě potřeby tento snímek obnovit.(((git příkazy, commit)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git thinks about its data more like a *stream of snapshots*.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T083840Z" creationid="Prikryl" creationdate="20151027T083840Z">
        <seg>Git o svých datech uvažuje spíše jako o *sérii snímků*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git uses two main types of tags: lightweight and annotated.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145619Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git používá dva hlavní typy značek: prosté (lightweight) a anotované (annotated).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will also automatically remove commits that did not affect the subdirectory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git také automaticky odstraní revize, které nemají na podadresář žádný vliv.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will ask you which files you would like to partially stage; then, for each section of the selected files, it will display hunks of the file diff and ask if you would like to stage them, one by one:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git se vás zeptá, které soubory chcete částečně připravit. Pro každou část vybraných souborů pak zobrazí komplexy (hunks) rozdílů diff daného souboru a u každého z nich se vás zeptá, jestli si ho přejete připravit k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will detect these issues when you run a `git diff` command and try to color them so you can possibly fix them before you commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až spustíte příkaz `git diff`, Git se pokusí tyto problémy vyhledat a barevně označit, abyste je mohli případně ještě před zapsáním revize opravit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will move them for the sake of efficiency into a file named `.git/packed-refs` that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je pro zvýšení účinnosti přesune do souboru `.git/packed-refs`, jenž má následující podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will then record each snapshot appropriately:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git pak odpovídajícím způsobem nahraje všechny snímky:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Glob patterns are like simplified regular expressions that shells use.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T090314Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Masky souborů se podobají zjednodušeným regulárním výrazům, které znáte z shellu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Grab the tree object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Načtěte objekt stromu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Great.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výborně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HEAD branch: master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121519Z" creationid="Prikryl" creationdate="20151107T121519Z">
        <seg>HEAD branch: master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T123306Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud stanovíte dobrá pravidla pro vytváření revizí (commit) a pokud se jich budete držet, bude práce s Gitem a spolupráce s ostatními mnohem jednodušší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Having work themes isolated into topic branches also makes it easier for you to rebase your work if the tip of the main repository has moved in the meantime and your commits no longer apply cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T202502Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Izolováním tématických úkolů do tématických větví si také usnadníte přeskládání vaší práce v případě, kdy se vrchol v hlavním repozitáři mezi tím posunul a vaše revize se už nedají čistě aplikovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here are a few commands that give you what Subversion used to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na tomto místě proto uvedu pár příkazů, které jsou podobné jako v systému Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here are all the objects in the example directory now, commented with what they store:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou všechny objekty v ukázkovém adresáři spolu s komentářem k tomu co obsahují:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is a method that gives you an associative array where the key is the user name and the value is an array of paths to which the user has write access:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá se tu metoda asociativních polí, kdy klíč představuje jméno uživatele a hodnotu tvoří sada umístění, k nimž má uživatel oprávnění pro zápis:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is a small Ruby script that does that:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady je malý Ruby skript, který to umí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is an example of adding your server as a remote:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady je příklad, jak můžete váš server přidat jako vzdálený:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is an example pre-rebase script that checks for that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako příklad uvedeme skript pre-rebase, který bude toto pravidlo kontrolovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is another example .gitignore file:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T091239Z" creationid="Prikryl" creationdate="20151029T202546Z">
        <seg>Další příklad souboru `.gitignore`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here we can see the two commits that we have had checked out, however there is not much information here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíme tu obě revize, jichž jsme se zbavili, ale není tu k nim mnoho informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here we'll discuss what they are and in what basic circumstances you would want (or not want) to use them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T192118Z" creationid="Prikryl" creationdate="20151219T192118Z">
        <seg>V této části si probereme, co jsou zač a za jakých základních okolností je budete (nebo nebudete) chtít použít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you can do a number of things, including staging files, unstaging files, staging parts of files, adding untracked files, and seeing diffs of what has been staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady můžete provádět celou řadu věcí, včetně přípravy souborů k zapsání, vracení připravených souborů, přípravy částí souborů, přidávání nesledovaných souborů a prohlížení změn v připravených souborech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you can run `rev-parse` on your branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tehdy můžete na svou větev spustit příkaz `rev-parse`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, we'll review a few basic tools for undoing changes that you've made.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T123753Z" creationid="Prikryl" creationdate="20151105T214254Z">
        <seg>Proto se podíváme na pár základních nástrojů pro vracení změn, které jste udělali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, we'll show you some of the most popular.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145109Z" creationid="Prikryl" creationdate="20151102T145109Z">
        <seg>Ukážeme si některé z nejpoužívanějších možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, you’ll look at a few interactive commands that can help you easily craft your commits to include only certain combinations and parts of files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se podíváme na několik interaktivních příkazů, které vám mohou pomoci snadno určit, na jaké kombinace a části souborů má být omezena konkrétní revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s an example to give you an idea of what it would take to get a SHA-1 collision.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste si udělali představu, jak je nepravděpodobné, že dojde ke kolizi hodnot SHA-1, připojujeme jeden malý příklad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s an example.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uveďme malý příklad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you easily unmodify it – revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215556Z" creationid="Prikryl" creationdate="20151106T215556Z">
        <seg>Jak je můžete snadno zrušit a vrátit soubor zpět do podoby při posledním zápisu revize (nebo při prvním klonování nebo při jakékoliv činnosti, kterou jste soubor dostali do pracovního adresáře)?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you keep your code consistently up to date and your commits valid?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T121602Z" creationid="Prikryl" creationdate="20160110T121602Z">
        <seg>Jak lze dosáhnout neustálé aktuálnosti vašeho kódu a platnosti vašich revizí?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you recover that commit at this point?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak lze tedy v tuto chvíli ztracenou revizi obnovit?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you unstage one of the two?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak lze tyto dva soubory vrátit z oblasti připravených změn?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How does Git do this?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak to Git dělá?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How does Git know what branch you're currently on?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T151224Z" creationid="Prikryl" creationdate="20151108T151224Z">
        <seg>Jak Git pozná, na jaké větvi se právě nacházíte?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How is that possible?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak je tohle možné?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How much work are you contributing at a time?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kolik práce představuje jeden váš příspěvek?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How often do you contribute?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A jak často přispíváte?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230954Z" creationid="Prikryl" creationdate="20151031T230954Z">
        <seg>Nicméně, Git je dost chytrý na to, aby to zjistil. Detekcí přesunu souboru se budeme zabývat později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, anything you lose that was never committed is likely never to be seen again.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T221529Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však dojde ke ztrátě dat, která dosud nebyla součástí žádné revize, už je asi nikdy neuvidíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, because no alternates are listed in this case, your object must be in a packfile.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože však seznam v tomto případě neobsahuje žádné alternativní repozitáře, váš objekt musí být v balíčkovém souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you're checking out, Git won't let you switch branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T212211Z" creationid="Prikryl" creationdate="20151111T212211Z">
        <seg>Ale než tak učiníte, všimněte si, že pokud máte v pracovním adresáři nebo v oblasti připravených změn nezapsané změny, které kolidují s větví, do které se přepínáte, Git vám přepnutí větví nedovolí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, first you'll delete the `hotfix` branch, because you no longer need it – the `master` branch points at the same place.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152141Z" creationid="Prikryl" creationdate="20151115T152141Z">
        <seg>Nejprve však smažete větev `hotfix`, protože už ji nebudete potřebovat -- větev `master` ukazuje na totéž místo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if someone at any point in the history of your project added a single huge file, every clone for all time will be forced to download that large file, even if it was removed from the project in the very next commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je jí fakt, že příkaz `git clone` stáhne vždy celou historii projektu, všechny verze všech souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if someone uploaded a patch file generated via `format-patch` to a ticketing system or something similar, you can save the file locally and then pass that file saved on your disk to `git am` to apply it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však někdo nahrál soubor záplaty vygenerovaný příkazem `format-patch` do tiketového nebo podobného systému, můžete soubor uložit lokálně a poté na tento uložený soubor použít příkaz `git am`. Tímto způsobem záplatu aplikujete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged `git gc` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však identifikuje příliš mnoho volných objektů (objektů nezabalených do balíčkového souboru) nebo balíčkových souborů, spustí Git plnou verzi příkazu `git gc`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if your message contains the proper pattern, Git allows you to commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však zpráva obsahuje správný vzor, Git vám umožní revizi zapsat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, in order to do any collaboration in Git, you'll need to have a remote Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T140643Z" creationid="Prikryl" creationdate="20151218T140643Z">
        <seg>Ale abyste mohli pomocí Gitu spolupracovat s ostatními, budete potřebovat vzdálený gitový repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, it can be helpful sometimes when you need to see what’s really going on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se však hodit, až budete jednou potřebovat zjistit, co se doopravdy odehrává.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, it can be very useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz přesto může být velmi užitečný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, keep in mind that to collaborate with a couple of people on a private project, all you _need_ is an SSH server and a bare repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To však nemění nic na tom, že ke spolupráci se skupinou lidí na soukromém projektu _vystačíte_ s jedním SSH serverem a holým repozitářem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, let's run `git status` one more time:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T125356Z" creationid="Prikryl" creationdate="20151029T125356Z">
        <seg>Spusťme však ještě jednou příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, maybe you want to run an external command, rather than a Git subcommand.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se však stát, že budete chtít spustit externí příkaz, a ne dílčí příkaz Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, that result is of limited use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento výsledek má však omezené použití.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, the time-limiting options such as `--since` and `--until` are very useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T200157Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naopak velmi užitečné jsou volby pro vymezení času, jako `--since` a `--until` („od“ a „do“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, there is a command called `git pull` which is essentially a `git fetch` immediately followed by a `git merge` in most cases.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T072025Z" creationid="Prikryl" creationdate="20151214T072025Z">
        <seg>Ale máme tu příkaz zvaný `git pull`, což je ve většině případů v podstatě `git fetch` bezprostředně následovaný příkazem `git merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, there is another way: you can take the patch of the change that was introduced in `C4` and reapply it on top of `C3`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T091245Z" creationid="Prikryl" creationdate="20151214T091245Z">
        <seg>Existuje však ještě jiný způsob. Můžete vzít záplatu se změnou, která vznikla v revizi `C4`, a aplikovat ji na revizi `C3`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, this is equivalent to running something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výsledek je však stejný, jako byste provedli následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, this setup also has some serious downsides.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Avšak i tato koncepce má závažné nedostatky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, you can set up other tracking branches if you wish – ones that track branches on other remotes, or don't track the `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T112912Z" creationid="Prikryl" creationdate="20151213T112912Z">
        <seg>Ale pokud si to přejete, můžete nastavit i jiné sledující větve -- takové, které budou sledovat větve v jiných vzdálených repozitářích, nebo které nebudou sledovat zrovna větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, you should be aware of how ridiculously unlikely this scenario is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli bychom však také říci, jak moc je nepravděpodobné, že taková situace nastane.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, your reflog and a new set of refs that Git added when you did the `filter-branch` under `.git/refs/original` still do, so you have to remove them and then repack the database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obsahuje ho však stále ještě reflog a v adresáři `.git/refs/original` také nová sada referencí, které Git přidal při spuštění příkazu `filter-branch`. Budete je proto muset odstranit a databázi znovu zabalit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I didn't much like that I was writing what I felt was essentially a community resource and also talking about my company in it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T143017Z" creationid="Prikryl" creationdate="20151026T143017Z">
        <seg>Nesedělo mi, že píši o něčem, co bylo v podstatě komunitním prostředkem, a přitom jsem současně psal o roli své firmy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I had been a developer for several years by then, but this was the right turn that sent me down a much more interesting path than the one I was on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T150939Z" creationid="Prikryl" creationdate="20151026T150939Z">
        <seg>V té době už jsem několik let pracoval jako vývojář, ale tohle byl bod zvratu, který mě nasměroval na mnohem zajímavější cestu, než po které jsem šel před tím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I hope it helps you as much as it did me.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T105241Z" creationid="Prikryl" creationdate="20151026T151659Z">
        <seg>Doufám, že vám pomůže stejně, jako pomohla mně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I hope you enjoy this updated edition of Pro Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T150213Z" creationid="Prikryl" creationdate="20151026T145233Z">
        <seg>Doufám, že se vám aktualizované vydání Pro Git bude líbit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I wrote a small section in the original version of Pro Git about GitHub as an example of hosted Git which I was never very comfortable with.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T142753Z" creationid="Prikryl" creationdate="20151026T142753Z">
        <seg>V původní verzi Pro Git jsem o GitHub napsal malou podkapitolu jako příklad hostování Gitu. Nikdy jsem z toho neměl dobrý pocit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I'm happy that Pro Git has done so well and has also been able to be one of the few technical books on the market that is both quite successful and fully open source.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T105043Z" creationid="Prikryl" creationdate="20151026T145143Z">
        <seg>Mám radost z toho, že si kniha Pro Git vedla tak dobře a že se jako jedna z mála technických publikací na trhu stala poměrně úspěšnou a plně Open Source.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If Git cannot do it cleanly, it will not let you switch at all.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170028Z" creationid="Prikryl" creationdate="20151108T170028Z">
        <seg>Pokud by se to Gitu nemělo podařit čistě, nedovolí vám přepnout vůbec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If a particular version of a file is in the Git directory, it's considered committed.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T122449Z" creationid="Prikryl" creationdate="20151027T121844Z">
        <seg>Nachází-li se konkrétní verze souboru v adresáři Gitu, je soubor ve stavu „zapsaný“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If a user SSHs into a server and has write access to the `/opt/git/my_project.git` directory, they will also automatically have push access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se uživatel dostane přes SSH na server a má oprávnění k zápisu do adresáře `/opt/git/my_project.git`, má automaticky také oprávnění k odesílání dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If all your commit messages look like this, things will be a lot easier for you and the developers you work with.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T140719Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud budou všechny vaše zprávy k revizím vypadat takto, usnadníte tím práci sobě i svým spolupracovníkům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If anyone wants to verify a tag, they can directly import your PGP key by pulling the blob directly out of the database and importing it into GPG:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bude-li chtít značku kdokoli ověřit, může přímo importovat váš klíč PGP tak, že stáhne blob z databáze a naimportuje ho do programu GPG:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If it does, then it was introduced sometime before this middle commit; if it doesn’t, then the problem was introduced sometime after the middle commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ano, vznikla chyba někdy před touto prostřední revizí; pokud ne, pak je problém záležitostí revizí zapsaných až po této prostřední revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If it has been modified and was added to the staging area, it is staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T113808Z" creationid="Prikryl" creationdate="20151107T113808Z">
        <seg>Pokud byl soubor upraven a přidán do oblasti připravených změn, je ve stavu „připraven k zapsání“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If not configured, Git uses your system's default editor, which is system dependant.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T114536Z" creationid="Prikryl" creationdate="20151107T114536Z">
        <seg>Pokud jej nenastavíte, použije Git výchozí editor nastavený v systému, což závisí na systému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If our environment looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T093306Z" creationid="Prikryl" creationdate="20151030T093104Z">
        <seg>Dejme tomu, že situace vypadá následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If she merges `origin/master`, that is the single commit that will modify her local work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T211903Z" creationid="Prikryl" creationdate="20160115T211903Z">
        <seg>Pokud začlení `origin/master`, bude to jediná revize, která změní její lokální práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If some of the changes modify the same file, try to use `git add --patch` to partially stage files (covered in detail in &lt;&lt;_interactive_staging&gt;&gt;).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T124424Z" creationid="Prikryl" creationdate="20160110T124424Z">
        <seg>Pokud některé změny upravují stejný soubor, zkuste použít příkaz `git add --patch` a připravit soubory k zapsání po částech (podrobnosti jsou popsány v kapitole &lt;&lt;_interactive_staging&gt;&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If someone else pushes a change to one file and then you push a change to another file, your `dcommit` will work fine:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže někdo odešle na server změnu v jednom souboru a vy poté odešlete změnu provedenou v jiném souboru, příkaz `dcommit` bude proveden úspěšně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T184052Z" creationid="Prikryl" creationdate="20151214T143316Z">
        <seg>Pokud někdo ve vašem týmu vynutí odeslání změn, které přepíší práci z které vycházíte, pak potřebujete zjistit, co zůstalo vaše a co bylo přepsáno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If someone opens that tarball, they get the latest snapshot of your project under a project directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až někdo tento tarball otevře, získá nejnovější snímek vašeho projektu v projektovém adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that is different, you must set the `$user` variable manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nejsou uživatelé stejní, budete muset ručně nastavit proměnnou `$user`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T185610Z" creationid="Prikryl" creationdate="20151026T185610Z">
        <seg>Pokud takový server na hodinu vypadne, pak během této hodiny nelze spolupracovat vůbec, nebo přinejmenším není možné ukládat změny ve verzích souborů, na nichž uživatelé právě pracují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the QA team wants to push their `master` branch to `qa/master` on the remote server, they can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chce-li QA tým odeslat větev `master` do adresáře `qa/master` na vzdáleném serveru, může použít příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the `git status` command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the `git diff` command.(((git commands, diff)))
We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T090810Z" creationid="Prikryl" creationdate="20151030T090810Z">
        <seg>Pokud je pro vás příkaz `git status` příliš neurčitý -- chcete přesně vědět, co jste změnili, nejen jaké soubory jste změnili --, můžete použít příkaz `git diff`.(((git příkazy, diff)))
Podrobněji se budeme příkazu `git diff` věnovat později, ale nejčastěji ho budete využívat k zodpovězení těchto dvou otázek: Co jste změnili, ale ještě nepřipravili k zapsání?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the apply tries to modify a file that you’ve since modified, you’ll get a merge conflict and will have to try to resolve it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se příkaz apply pokusí změnit soubor, který jste mezitím ručně změnili jinak, dojde ke konfliktu při slučování, který budete muset vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the branch name you're trying to checkout (a) doesn't exist and (b) exactly matches a name on only one remote, Git will create a tracking branch for you:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T113843Z" creationid="Prikryl" creationdate="20151213T113843Z">
        <seg>Pokud jméno větve, na kterou se chcete přepnout (checkout) (a) dosud neexistuje a (b) přesně odpovídá jménu v jediném vzdáleném repozitáři, vytvoří Git sledující větev za vás:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the file didn't exist before, and you run `git status`, you see your untracked file like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110821Z" creationid="Prikryl" creationdate="20151029T110821Z">
        <seg>Pokud soubor dříve neexistoval a vy spustíte příkaz `git status`, bude nesledovaný soubor uveden takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T185859Z" creationid="Prikryl" creationdate="20151026T185859Z">
        <seg>A dojde-li k poruše pevného disku, na němž je uložena centrální databáze, a disk nebyl správně zálohován, ztratíte úplně vše -- celou historii projektu, s výjimkou souborů aktuálních verzí, jež mají uživatelé v lokálních počítačích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the maintainers merge, rebase, or cherry-pick your work, you'll eventually get it back via pulling from their repository anyhow:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T193930Z" creationid="Prikryl" creationdate="20160121T193930Z">
        <seg>Pokud správci provedou sloučení (merge), přeskládání (rebase) nebo částečné převzetí vaší práce (cherry-pick), budete stejně muset stáhnout změny z jejich repozitáře (pull):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the manpages and this book aren't enough and you need in-person help, you can try the `#git` or `#github` channel on the Freenode IRC server (irc.freenode.net).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T134019Z" creationid="Prikryl" creationdate="20151028T134019Z">
        <seg>Pokud nestačí ani manuálová stránka ani tato kniha a uvítali byste osobní pomoc, můžete zkusit kanál `#git` nebo `#github` na IRC serveru Freenode (irc.freenode.net).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the update script exits non-zero, only that reference is rejected; other references can still be updated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li výstup skriptu update nenulový, je zamítnuta pouze tato reference, ostatní mohou být aktualizovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there is no output, then the patch should apply cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se nezobrazí žádný výstup, záplata bude aplikována čistě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If they want Git to do that automatically each time they run `git push origin`, they can add a `push` value to their config file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, aby toto Git provedl automaticky pokaždé, když spustíte příkaz `git push origin`, můžete do konfiguračního souboru vložit hodnotu `push`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If this is better suited to your data, check the `fast-import` man page for details about how to provide your data in this manner.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je pro vaše data tato metoda vhodnější, odkážeme vás na manuálovou stránku `fast-import`, kde najdete podrobnosti o tom, jak zadat data tímto způsobem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If this script exits non-zero, Git aborts the commit process, so you can use it to validate your project state or commit message before allowing a commit to go through.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li návratová hodnota skriptu nenulová, Git přeruší proces zapisování. Skript tak můžete používat k validaci stavu projektu nebo zprávy k revizi, než dovolíte, aby byla revize zapsána.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you *do* find yourself in a situation like this, Git has some further magic that might help you out.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T143057Z" creationid="Prikryl" creationdate="20151214T143057Z">
        <seg>Když už se do takové situace dostanete, má Git v zásobě trochu magie, která vám z toho může pomoci ven.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you add a remote and push to it, Git stores the value you last pushed to that remote for each branch in the `refs/remotes` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte-li vzdálený repozitář a odešlete do něj revize, Git v adresáři `refs/remotes` uloží pro každou větev hodnotu, kterou jste do tohoto repozitáře naposled odesílali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you already have a local branch and want to set it to a remote branch you just pulled down, or want to change the upstream branch you're tracking, you can use the `-u` or `--set-upstream-to` option to `git branch` to explicitly set it at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T213808Z" creationid="Prikryl" creationdate="20151213T213808Z">
        <seg>Pokud už máte lokální větev a chcete ji nastavit na vzdálenou větev, kterou jste právě stáhli (pull), nebo pokud chcete změnit upstream větev, kterou sledujete, můžete pro explicitní nastavení kdykoliv použít příkaz `git branch` s volbou `-u` nebo `--set-upstream-to`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud už máte sdílený systém souborů, k němuž má přístup celý váš tým, je nastavení repozitáře velice jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you and a co-worker are working on the same project and they want you to check something out, running a command like `git pull /home/john/project` is often easier than them pushing to a remote server and you pulling down.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151228T185940Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vy a váš kolega pracujete na společném projektu a máte z něj něco přetáhnout, pak provedení příkazu jako `git pull /home/john/project` je často jednodušší, než aby jej on nejdříve odeslal (push) na vzdálený server a teprve z něho byste práci stahovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T102601Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ve stejnou dobu obsah naklonuje ještě někdo jiný a svou práci odešle na společný server (upstream), vaše později odesílaná práce bude oprávněně odmítnuta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T175915Z" creationid="Prikryl" creationdate="20151026T175915Z">
        <seg>Pokud jste grafik nebo návrhář webů a chcete uchovávat všechny verze obrázku nebo rozložení stránky (což jistě chtít budete), je rozumné, když budete systém pro správu verzí (VCS z anglického Version Control System) používat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T153354Z" creationid="Prikryl" creationdate="20160109T153354Z">
        <seg>Pokud už jste ve své firmě nebo v týmu na centralizovaný pracovní postup zvyklí, můžete v něm snadno pokračovat i při použití Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are going to learn how to use Git then knowing how to use GitHub will help you take part in a huge community, which is valuable no matter which Git host you decide to use for your own code.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T143901Z" creationid="Prikryl" creationdate="20151026T143901Z">
        <seg>Pokud se chcete naučit, jak používat Git, pak znalost toho, jak používat GitHub, vám pomůže stát se součástí obrovské komunity, což je cenné nezávisle na tom, jaký hostovaný Git si vyberete pro váš vlastní kód.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are not familiar with either of these editors, you may need to search for specific instructions for how to set up your favorite editor with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115008Z" creationid="Prikryl" creationdate="20151107T115008Z">
        <seg>Pokud žádný z těchto editorů neznáte, měli byste si najít konkrétní instrukce, jak si můžete pro Git váš oblíbený editor nastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are starting to work on a particular area, feel free to submit a PR</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091835Z" creationid="Prikryl" creationdate="20151030T091835Z">
        <seg>If you are starting to work on a particular area, feel free to submit a PR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are sure you want to delete it, run 'git branch -D testing'.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103357Z" creationid="Prikryl" creationdate="20151023T103357Z">
        <seg>If you are sure you want to delete it, run 'git branch -D testing'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are using Git for Windows 2.x or later, there is also a system-level config file at
`C:\Documents and Settings\All Users\Application Data\Git\config` on Windows XP, and in `C:\ProgramData\Git\config` on Windows Vista and newer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T114142Z" creationid="Prikryl" creationdate="20151107T114142Z">
        <seg>Pokud používáte _Git for Windows_ verze 2.x nebo novější, existuje i konfigurační soubor na úrovni systému `C:\Documents and Settings\All Users\Application Data\Git\config` pro Windows XP a `C:\ProgramData\Git\config` pro Windows Vista a novější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T154224Z" creationid="Prikryl" creationdate="20151214T154224Z">
        <seg>Pokud používáte `git pull` a chcete, aby se z `--rebase` stala výchozí volba, můžete nastavit konfigurační hodnotu `pull.rebase` příkazem jako je `git config --global pull.rebase true`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you can read only one chapter to get going with Git, this is it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T134538Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste si o Gitu měli přečíst jen jednu kapitolu, měla by to být právě tahle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you can, encourage your contributors to use `format-patch` instead of `diff` to generate patches for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete-li, doporučte svým přispěvatelům, aby místo příkazu `diff` používali příkaz `format-patch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you can, try to make your changes digestible – don't code for a whole weekend on five different issues and then submit them all as one massive commit on Monday.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T203738Z" creationid="Prikryl" creationdate="20160110T124214Z">
        <seg>Pokud je to možné, snažte se, aby byly vaše změny stravitelné. Není právě ideální pracovat celý víkend na pěti různých problémech a v pondělí je všechny najednou odeslat formou jedné velké revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you change a previously tracked file called ``CONTRIBUTING.md'' and then run your `git status` command again, you get something that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120850Z" creationid="Prikryl" creationdate="20151029T120850Z">
        <seg>Pokud změníte už dříve sledovaný soubor s názvem `CONTRIBUTING.md` a poté znovu spustíte příkaz `git status`, zobrazí se něco takového:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you change pick to edit on more lines, you can repeat these steps for each commit you change to edit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změníte-li výraz pick na edit na více řádcích, můžete tyto kroky opakovat pro každou revizi, u níž jste změnu provedli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T072617Z" creationid="Prikryl" creationdate="20151120T072617Z">
        <seg>Pokud jste tutéž část stejného souboru změnili odlišně ve dvou větvích, které chcete sloučit, Git je nebude umět sloučit čistě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you check out one and then the other, you can see that they have different project roots:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedete-li checkout jedné a posléze druhé větve, uvidíte, že mají jiné kořenové adresáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you clone a repository, the command automatically adds that remote repository under the name ``origin''.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T171042Z" creationid="Prikryl" creationdate="20151101T171042Z">
        <seg>Pokud vytvoříte klon nějakého repozitáře, příkaz automaticky přidá tento vzdálený repozitář pod názvem `origin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you clone from this, Git's `clone` command automatically names it `origin` for you, pulls down all its data, creates a pointer to where its `master` branch is, and names it `origin/master` locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T105036Z" creationid="Prikryl" creationdate="20151210T105036Z">
        <seg>Pokud z něj naklonujete, příkaz Gitu `clone` ho automaticky pojmenuje `origin`, stáhne z něj všechna data, vytvoří ukazatel, který bude označovat jeho větev `master` a lokálně ji pojmenuje `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you commit at this point, the version of the file at the time you ran `git add` is what will be in the historical snapshot.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120351Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud v tomto okamžiku zapíšete revizi (commit), bude do historického snímku uložena verze souboru z okamžiku, kdy jste spustili příkaz `git add`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you commit now, the version of `CONTRIBUTING.md` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T130021Z" creationid="Prikryl" creationdate="20151029T130021Z">
        <seg>Pokud nyní revizi zapíšete, stane se součástí snímku soubor `CONTRIBUTING.md` s obsahem, jaký měl, když jste naposledy spustili příkaz `git add`, a ne s obsahem, který měl v pracovním adresáři v okamžiku, kdy jste spustili příkaz `git commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you commit those changes and check out the file again, you see the keyword properly substituted:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tyto změny zapíšete a provedete nový checkout souboru, uvidíte, že bylo klíčové slovo správně substituováno:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you create a new branch, add a submodule there, and then switch back to a branch without that submodule, you still have the submodule directory as an untracked directory:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte-li novou větev, přidáte do ní submodul a poté přepnete zpět na větev bez tohoto submodulu, není adresář submodulu stále ještě sledován:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you create an annotated tag, Git creates a tag object and then writes a reference to point to it rather than directly to the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte-li anotovanou značku, Git vytvoří objekt značky a zapíše referenci, která na objekt ukazuje (neukazuje tedy na samotnou revizi).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you created a working directory from the new tree you just wrote, you would get the two files in the top level of the working directory and a subdirectory named `bak` that contained the first version of the test.txt file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste vytvořili pracovní adresář z nového stromu, který jste právě zapsali, dostali byste dva soubory na nejvyšší úrovni pracovního adresáře a podadresář `bak`, obsahující první verzi souboru test.txt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you decide to sign the tag as the maintainer, the tagging may look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se rozhodnete podepsat značku jako správce, bude označení probíhat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you delete the subdirectory and then run `submodule add`, Git yells at you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže odstraníte podadresář a spustíte příkaz `submodule add`, Git vám vynadá:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you did an import from another system or otherwise find that your repository is much larger than it should be, here is how you can find and remove large objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud provedete import do systému Git z jiného systému, nebo jiným způsobem zjistíte, že je váš repozitář výrazně větší, než by měl být, můžete vyhledat a odstranit velké objekty následovně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you didn't want it to be called `serverfix` on the remote, you could instead run `git push origin serverfix:awesomebranch` to push your local `serverfix` branch to the `awesomebranch` branch on the remote project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110822Z" creationid="Prikryl" creationdate="20151210T124956Z">
        <seg>Pokud jste nechtěli, aby se větev ve vzdáleném repozitáři jmenovala `serverfix`, mohli jste místo toho spustit `git push origin serverfix:awesomebranch`. Pak by lokální větev `serverfix` byla odeslána do větve `awesomebranch` vzdáleného projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T141143Z" creationid="Prikryl" creationdate="20151214T141143Z">
        <seg>Pokud provedete `git pull`, vytvoříte bod sloučení (merge commit), který zahrnuje obě historické linie. Váš repozitář bude vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do happen to commit an object that hashes to the same SHA-1 value as a previous object in your repository, Git will see the previous object already in your Git database and assume it was already written.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud náhodou zapíšete objekt, který má stejnou hodnotu SHA-1 otisku jako předchozí objekt ve vašem repozitáři, Git už uvidí předchozí objekt v databázi Git a bude předpokládat, že už byl zapsán.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do sign your tags, you may have the problem of distributing the public PGP key used to sign your tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud své značky podepisujete, můžete mít problémy s distribucí veřejného klíče PGP použitého k podepsání značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do some work on your local `master` branch, and, in the meantime, someone else pushes to `git.ourcompany.com` and updates its `master` branch, then your histories move forward differently.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T150223Z" creationid="Prikryl" creationdate="20151210T110953Z">
        <seg>Pokud budete pracovat v lokální větvi `master` a mezi tím někdo jiný něco odešle na `git.ourcompany.com` -- čímž aktualizuje větev `master` tohoto serveru --{empty}, budou se vaše historie vyvíjet odlišně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do want to install Git from source, you need to have the following libraries that Git depends on: curl, zlib, openssl, expat, and libiconv.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T001253Z" creationid="Prikryl" creationdate="20151028T001253Z">
        <seg>Pokud si chcete Git instalovat ze zdrojových textů, musí váš systém obsahovat následující knihovny, na nichž je Git závislý: curl, zlib, openssl, expat, a libiconv.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don't have it installed already, it will prompt you to install it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T212519Z" creationid="Prikryl" creationdate="20151027T212519Z">
        <seg>Pokud Git ještě není nainstalován, napoví vám, jak jej nainstalovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don't have write access, how does the project prefer to accept contributed work?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T122001Z" creationid="Prikryl" creationdate="20160110T122001Z">
        <seg>Pokud oprávnění k zápisu nemáte, jaké metodě se dává přednost při přijímání příspěvků?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don't know what we're talking about here, you may need to stop and research that quickly so that you can follow the rest of the examples and descriptions in this book.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T194529Z" creationid="Prikryl" creationdate="20151027T194529Z">
        <seg>Pokud nevíte, o čem je řeč, měli byste zde zastavit a rychle si to zjistit, abyste v knize mohli sledovat zbytek příkladů a popisů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don't specify a message for an annotated tag, Git launches your editor so you can type it in.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150255Z" creationid="Prikryl" creationdate="20151107T150255Z">
        <seg>Pokud u anotované značky nezadáte žádnou zprávu, Git spustí textový editor, v němž zprávu zadáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don't want to type it every single time you push, you can set up a ``credential cache''.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T125909Z" creationid="Prikryl" creationdate="20151210T125909Z">
        <seg>Pokud se vám to nechce zadávat při každém odesílání, můžete si nastavit „credential cache“, čili „mezipaměť pro pověřovací informace“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don't want to type the entire text of each of the Git commands, you can easily set up an alias for each command using `git config`.(((git commands, config)))
Here are a couple of examples you may want to set up:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T144928Z" creationid="Prikryl" creationdate="20151107T143144Z">
        <seg>Pokud nechcete zadávat celý text gitových příkazů, můžete pomocí `git config` jednoduše nastavit pro každý příkaz tzv. alias.(((git příkazy, config)))
Tady je pár příkladů, které možná budete chtít nastavit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don't, people will hate you, and you'll be scorned by friends and family.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T134308Z" creationid="Prikryl" creationdate="20151214T134308Z">
        <seg>Pokud ne, lidi vás budou nenávidět, přátelé a rodina vámi budou opovrhovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t have the signer’s public key, you get something like this instead:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud veřejný klíč podepisujícího nemáte, výstup bude vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t know what is breaking, and there have been dozens or hundreds of commits since the last state where you know the code worked, you’ll likely turn to `git bisect` for help.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nemáte ponětí, co může chybu způsobovat, a od posledního zaručeně funkčního stavu kódu byly zapsány desítky nebo stovky revizí, možná budete pomoc hledat raději u příkazu `git bisect`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t specify a stash, Git assumes the most recent stash and tries to apply it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud u příkazu neoznačíte konkrétní odklad, Git se automaticky pokusí aplikovat ten nejnovější:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you download and install the `exiftool` program, you can use it to convert your images into text about the metadata, so at least the diff will show you a textual representation of any changes that happened:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud stáhnete a nainstalujete program `exiftool`, můžete ho použít ke konverzi obrázků na text prostřednictvím metadat, a nástroj diff vám tak přinejmenším zobrazí textovou verzi všech provedených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you ever need help while using Git, there are three ways to get the manual page (manpage) help for any of the Git commands:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T134426Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li někdy při používání Gitu potřebovat pomoc, existují tři způsoby, jak můžete pro libovolný z příkazů Gitu vyvolat manuálovou stránku s nápovědou:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T121354Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si prohlížíte log přeskládané větve, vypadá jako lineární historie. Zdá se, jako kdyby veškeré práce probíhaly postupně, i když původně proběhly paralelně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you follow that guideline, you'll be fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T134139Z" creationid="Prikryl" creationdate="20151214T134139Z">
        <seg>Pokud se budete touto zásadou řídit, budete v pohodě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you follow those guidelines, working with a Subversion server can be more bearable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li dodržovat tato pravidla, bude práce se serverem Subversion snesitelnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you get on an airplane or a train and want to do a little work, you can commit happily until you get to a network connection to upload.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jste-li v letadle nebo ve vlaku a chcete pokračovat v práci, můžete beze všeho zapisovat nové revize. Ty odešlete až po opětovném připojení k síti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you go back to an earlier example from &lt;&lt;_basic_merging&gt;&gt;, you can see that you diverged your work and made commits on two different branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132729Z" creationid="Prikryl" creationdate="20151214T082859Z">
        <seg>Pokud se vrátíte k dřívějšímu příkladu v &lt;&lt;_basic_merging&gt;&gt;, vidíte, že jste se při práci odchýlili a vznikly objekty revize ve dvou různých větvích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you go home and can't get your VPN client working properly, you can still work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T093205Z" creationid="Prikryl" creationdate="20151027T093205Z">
        <seg>Jestliže přijedete domů a zjistíte, že VPN klient nefunguje, stále můžete pracovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you go into the new `libgit2` directory, you'll see the project files in there, ready to be worked on or used.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T212332Z" creationid="Prikryl" creationdate="20151028T212332Z">
        <seg>Přejdete-li do nového adresáře `libgit2`, uvidíte v něm soubory projektu připravené ke zpracování nebo jinému použití.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you had run that instead, you’d have gotten back to your original position:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste spustili příkaz v této podobě, vrátili jste se zpět na svou původní pozici:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a branch named `serverfix` that you want to work on with others, you can push it up the same way you pushed your first branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li větev s názvem `serverfix`, na níž chcete spolupracovat s ostatními, můžete ji odeslat stejným způsobem, jakým jste odesílali svou první větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a branch set up to track a remote branch (see the next section and &lt;&lt;_git_branching&gt;&gt; for more information), you can use the `git pull` command to automatically fetch and then merge a remote branch into your current branch.(((git commands, pull)))
This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T142059Z" creationid="Prikryl" creationdate="20151101T172043Z">
        <seg>Pokud máte větev nastavenou ke sledování vzdálené větve (více informací naleznete v následující podkapitole a v kapitole &lt;&lt;_git_branching&gt;&gt;), můžete použít příkaz `git pull`, který automaticky vyzvedne (fetch) a poté začlení (merge) vzdálenou větev do vaší aktuální větve.(((git příkazy, pull)))
Tento postup pro vás může být snazší a pohodlnější. Standardně přitom příkaz `git clone` automaticky nastaví vaši lokální větev `master` tak, aby sledovala vzdálenou větev `master` (výchozí větev může být i jiná) na serveru, z kterého jste klonovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže používáte komplexní pracovní proces, kdy QA tým odesílá větve, vývojáři odesílají větve a integrační týmy odesílají větve a spolupracují na nich, můžete takto jednoduše využít možností, jež vám jmenný prostor nabízí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T225129Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li značek více a chcete je odeslat všechny najednou, můžete také u příkazu `git push` použít volbu `--tags`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T193038Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li připojený sdílený systém souborů, můžete klonovat, odesílat a stahovat z lokálního souborového repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a tracking branch set up as demonstrated in the last section, either by explicitly setting it or by having it created for you by the `clone` or `checkout` commands, `git pull` will look up what server and branch your current branch is tracking, fetch from that server and then try to merge in that remote branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T073426Z" creationid="Prikryl" creationdate="20151214T072127Z">
        <seg>Pokud máte sledující větev nastavenou podle ukázky z minulé části -- buď explicitním příkazem nebo tím, že byla vytvořena příkazy `clone` nebo `checkout` --, podívá se příkaz `git pull` jaký server a jakou větev vaše současná větev sleduje, vyzvedne změny ze serveru a pokusí se vzdálenou větev začlenit (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have it read the message from the file passed as the first argument and compare that to the pattern, you can force Git to abort the commit if there is no match:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Necháte-li zásuvný modul přečíst zprávu k revizi ze souboru, který zadáte jako první parametr, a srovnat se vzorem, můžete systému Git uložit, aby odmítl revize, které vzoru neodpovídají:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have more than one remote, the command lists them all.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud používáte více než jeden vzdálený repozitář, příkaz je vypíše všechny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have multiple submodules, you’ll have multiple entries in this file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li submodulů více, bude v tomto souboru několik záznamů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have no interest in running your own server, you can skip to the last section of the chapter to see some options for setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of working in a distributed source control environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud víte, že nebudete chtít spravovat vlastní server, můžete přeskočit rovnou na poslední část této kapitoly a podívat se na možnosti nastavení hostovaného účtu. Pak přejděte na následující kapitolu, v níž se dočtete o detailech a záludnostech při práci v prostředí s distribuovanou správou zdrojového kódu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you just specify the path, Git tries to use hardlinks or directly copy the files it needs.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T193921Z" creationid="Prikryl" creationdate="20151219T193846Z">
        <seg>Pokud uvedete pouze cestu, pokouší se Git použít pevné odkazy (hardlink), nebo přímo kopíruje potřebné soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you know how to run the command line version, you can probably also figure out how to run the GUI version, while the opposite is not necessarily true.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T195933Z" creationid="Prikryl" creationdate="20151027T193034Z">
        <seg>Pokud umíte použít verzi z příkazového řádku, pak pravděpodobně umíte zjistit, jak se totéž provede přes grafické uživatelské rozhraní. V opačném směru to nemusí platit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you look at the last commit, you can see the new `git-svn-id` that was added:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se podíváte na poslední revizi, uvidíte nově přidané `git-svn-id`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you look at the resulting tree, you can see the SHA-1 value your repo.rb file got for the blob object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se podíváte na výsledný strom, uvidíte hodnotu SHA-1, kterou soubor repo.rb dostal pro objekt blobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T145705Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže v souborech provedete změny a zapíšete je, další objekt revize uloží ukazatel na bezprostředně přecházející objekt revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you modified the file and added it to the index already, you must force the removal with the `-f` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T225127Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud už jste soubor upravili a už jste ho přidali do indexu, musíte odstranění vynutit přidáním volby `-f` footnote:[Pozn. překl.: *f* jako _force_, čili _vynucení silou_.].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T130118Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud upravíte soubor po provedení příkazu `git add`, je třeba spustit `git add` ještě jednou, aby byla k zápisu připravena aktuální verze souboru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you name your trunk, branches, or tags differently, you can change these options.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pojmenujete svůj kmenový adresář (trunk), větve nebo značky jinak, lze tyto parametry změnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you need to pull it in, you can merge your `master` branch into your `iss53` branch by running `git merge master`, or you can wait to integrate those changes until you decide to pull the `iss53` branch back into `master` later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152743Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud potřebujete tyto změny do větve vtáhnout, můžete začlenit větev `master` do větve `iss53` provedením příkazu `git merge master`, nebo můžete s integrací změn vyčkat a provést ji až ve chvíli, kdy budete chtít větev `iss53` vtáhnout zpět do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you only want to modify your last commit message, it’s very simple:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li pouze změnit zprávu k poslední revizi, je to velmi jednoduché:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T204642Z" creationid="Prikryl" creationdate="20151214T204642Z">
        <seg>Pokud to vy nebo váš partner v určité chvíli považujete za nezbytnost, ujistěte se, že všichni umí spustit `git pull --rebase`, aby poté své utrpení učinili o něco snesitelnějším.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass `--abbrev-commit` to the `git log` command, the output will use shorter values but keep them unique; it defaults to using seven characters but makes them longer if necessary to keep the SHA-1 unambiguous:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li k příkazu `git log` parametr `--abbrev-commit`, výstup bude používat kratší hodnoty, ale pouze v jednoznačném tvaru. Standardně se používá sedm znaků, avšak je-li to kvůli jednoznačnosti hodnoty SHA-1 nezbytné, bude použito znaků více:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass `-C` to `git blame`, Git analyzes the file you’re annotating and tries to figure out where snippets of code within it originally came from if they were copied from elsewhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li k příkazu `git blame` parametr `-C`, Git zanalyzuje soubor, který anotujete, a pokud jednotlivé kousky kódu v něm obsažené pocházejí původně odjinud, pokusí se Git zjistit odkud.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass the option `--system` to `git config`, it reads and writes from this file specifically.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T104837Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li příkazu `git config` parametr `--system`, pak Git čte a zapisuje konkrétně do tohoto souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you place a `^` at the end of a reference, Git resolves it to mean the parent of that commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Umístíte-li na konec reference znak `^`, Git bude referenci chápat tak, že označuje rodiče dané revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you place your data on a hosted server, it's easy to set up and maintain; however, you have to be able to keep your code on someone else's servers, and some organizations don't allow that.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T191526Z" creationid="Prikryl" creationdate="20151219T191526Z">
        <seg>Umístíte-li data na hostovaný server, bude nastavení a správa jednoduchá. Svůj zdrojový kód však v takovém případě ukládáte na cizím serveru, což některé organizace nedovolují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you press Enter after typing nothing at the `Update&gt;&gt;` prompt, Git takes anything selected and stages it for you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže na výzvu `Update&gt;&gt;` nic nezadáte a stisknete klávesu Enter, Git vezme všechny vybrané soubory a připraví je k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132931Z" creationid="Prikryl" creationdate="20151214T153232Z">
        <seg>Pokud si stáhnete práci, která byla přepsána a nad těmito novými objekty revize od spolupracovníka provedete přeskládání, umí často Git úspěšně zjistit, co pochází určitě od vás a aplikovat to na vrchol nové větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132642Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud objekty revize odešlete (push) a ostatní si je stáhnou (pull) a založí na nich svou práci a vy potom tyto revize přepíšete příkazem `git rebase` a znovu je odešlete, vaši spolupracovníci budou muset znovu znovu začleňovat svou práci (merge) a ve věcech zavládne chaos v okamžiku, kdy se pokusíte vtáhnout jejich práci zpět do své.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you really do want to delete the branch and lose that work, you can force it with `-D`, as the helpful message points out.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211840Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud opravdu chcete větev odstranit a zahodit práci, kterou obsahuje, můžete to vynutit parametrem `-D`  -- jak napovídá užitečná zpráva pod chybovým hlášením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T083333Z" creationid="Prikryl" creationdate="20151214T204431Z">
        <seg>Pokud přeskládáte revize, které již byly odeslány do veřejného prostoru a ostatní na těchto revizích (commit) mohli založit další práce, pak se můžete dostat do nepříjemných potíží a stát se předmětem opovržení týmových kolegů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud soubor v systému Git přejmenujete, neuloží se žádná metadata s informací, že jste soubor přejmenovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you replace an image in your project and run `git diff`, you see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nahradíte některý z obrázků ve svém projektu a spustíte příkaz `git diff`, zobrazí se asi toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git add` with the `-i` or `--interactive` option, Git goes into an interactive shell mode, displaying something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git add` s parametrem `-i` nebo `--interactive`, přejde Git do interaktivního režimu shellu a zobrazí zhruba následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git checkout test`, Git updates the file to look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git checkout test`, Git aktualizuje soubor do následující podoby:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git clone -o booyah` instead, then you will have `booyah/master` as your default remote branch.(((origin)))
====</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T110222Z" creationid="Prikryl" creationdate="20151210T110222Z">
        <seg>Pokud místo toho spustíte `git clone -o booyah`, dostanete jako výchozí vzdálenou větev `booyah/master`.(((origin)))
====</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git diff` normally, you only see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git diff` normálně, zobrazí se zhruba toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git diff` on that, you see something interesting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud na ni použijete příkaz `git diff`, uvidíte zajímavou věc:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121031Z" creationid="Prikryl" creationdate="20151107T121031Z">
        <seg>Pokud místo příkazu `git diff` spustíte `git difftool`, můžete si výslednou podobu rozdílů prohlížet v programech jako jsou emerge, vimdiff a další (včetně komerčních produktů).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git gc`, all the objects are in a packfile; you can identify the big objects by running another plumbing command called `git verify-pack` and sorting on the third field in the output, which is file size.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git gc`, všechny objekty jsou v balíčkovém souboru. Velké objekty lze identifikovat spuštěním jiného nízkoúrovňového příkazu, `git verify-pack`, a seřazením podle třetího pole ve výpisu, v němž je uvedena velikost souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T171610Z" creationid="Prikryl" creationdate="20151108T171610Z">
        <seg>Když spustíte `git log --oneline --decorate --graph --all`, zobrazí se historie revizí, která ukazuje polohu ukazatelů na větve a jak se historie rozdělila.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git log`, you can see that all the SHA-1 checksums for the commits have changed, but the `git-p4` strings are no longer in the commit messages:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git log`, uvidíte, že se změnily všechny kontrolní součty revizí SHA-1, zato všechny řetězce `git-p4` ze zpráv k revizím zmizely:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git push --tags`, the `maintainer-pgp-pub` tag will be shared with everyone.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li příkaz `git push --tags`, začnete značku `maintainer-pgp-pub` sdílet s ostatními.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git show` on that tag, you can see your GPG signature attached to it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pro tuto značku spustíte příkaz `git show`, uvidíte k ní připojen svůj podpis GPG:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git status -s` or `git status --short` you get a far more simplified output from the command:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120614Z" creationid="Prikryl" creationdate="20151107T120614Z">
        <seg>Pokud spustíte `git status -s` nebo `git status --short` bude výstup příkazu mnohem jednodušší:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git status`, you can see your dirty state:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git status`, uvidíte neuspořádaný stav svého projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T141452Z" creationid="Prikryl" creationdate="20151214T141452Z">
        <seg>Pokud s takovouto historií spustíte příkaz `git log`, nastane zmatečná situace, kdy se zobrazí dvě revize se stejným autorem, datem a zprávou k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a `git push` and your current branch is tracking `origin/master`, the commits listed by `git log origin/master..HEAD` are the commits that will be transferred to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git push` a vaše aktuální větev sleduje větev `origin/master`, budou na server přesunuty revize, které lze zobrazit příkazem `git log origin/master..HEAD`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a `log`, you see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po spuštění příkazu `log` by se zobrazilo následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run that command before committing, you can tell if you're about to commit whitespace issues that may annoy other developers.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T203557Z" creationid="Prikryl" creationdate="20160110T124025Z">
        <seg>Spustíte-li tento příkaz před zapsáním revize, můžete zjistit, zda se budou zapisovat i problematické prázdné znaky, které by mohly ostatní vývojáře obtěžovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run this instead of setting up the `extMerge` and `extDiff` files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud spustíte tento příkaz místo nastavení souborů `extMerge` a `extDiff`, Git bude používat KDiff3 k řešení konfliktů při slučování a interní nástroj diff systému Git pro výpisy nástroje diff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run your `git status` command, you once again see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091554Z" creationid="Prikryl" creationdate="20151030T091554Z">
        <seg>Pokud provedete příkas `git status`,  uvidíte opět něco takového:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run your status command again, you can see that your README file is now tracked and staged to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120122Z" creationid="Prikryl" creationdate="20151029T120122Z">
        <seg>Když znovu provedete příkaz `git status`, uvidíte, že je nyní soubor `README` sledován a připraven k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tento atribut nastavíte pro soubor nebo sadu souborů, při příštím checkoutu této větve Git nahradí toto pole kontrolním součtem SHA-1 blobu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224529Z" creationid="Prikryl" creationdate="20151031T224529Z">
        <seg>Pokud soubor jednoduše odstraníte z pracovního adresáře, zobrazí se ve výpisu `git status` v části „Changes not staged for commit“ (tedy „Změny nejsou připraveny k zapsání“):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you specify `file://`, Git fires up the processes that it normally uses to transfer data over a network which is generally a lot less efficient method of transferring the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T194250Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud zadáte výraz `file://`, Git spustí procesy, které běžně používá k přenosu dat po síti, což je obecně mnohem méně efektivní metoda přenosu dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T212725Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže zadáte název adresáře nebo souboru, výstup logu omezíte na revize, které provedly změnu v těchto souborech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you stage one part of the file and leave another part unstaged, your status output will look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Připravíte-li k zapsání jednu část souboru a druhou nikoli, bude výstup příkazu status vypadat asi takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže odložíte část své práce, necháte ji určitou dobu v zásobníku a budete pokračovat ve větvi, z níž jste práci odložili, můžete mít problémy s opětovnou aplikací odkladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T165941Z" creationid="Prikryl" creationdate="20151108T165941Z">
        <seg>Pokud se přepnete na starší větev, váš pracovní adresář bude změněn do podoby z doby, kdy jste v oné větvi zapsali poslední revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you tell the script that it was, it stages the file to mark it as resolved for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud skriptu oznámíte, že ano, připraví soubor k zapsání a tím ho označí jako vyřešený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you track down a bug in your code and want to know when it was introduced and why, file annotation is often your best tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zjistíte-li ve svém zdrojovém kódu chybu a chcete vědět, kdy a jak vznikla, je často nejlepším nástrojem anotace souboru (file annotation).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T203939Z" creationid="Prikryl" creationdate="20151214T203939Z">
        <seg>Pokud přeskládání chápete jako způsob úklidu a práce s revizemi před tím, než je odešlete, a pokud přeskládáváte jen revize, které nikdy nebyly veřejně dostupné, pak budete v pohodě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you try to check out that object again at some point, you’ll always get the data of the first object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se někdy v budoucnosti pokusíte znovu provést checkout tohoto objektu, vždy dostanete data prvního objektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you try to merge two branches and subsequently have merge conflicts, you can run the command `git mergetool`; it starts P4Merge to let you resolve the conflicts through that GUI tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže se pokusíte sloučit dvě větve a dojde při tom ke konfliktu, můžete spustit příkaz `git mergetool`. Příkaz spustí program P4Merge, v němž budete moci v grafickém uživatelském rozhraní konflikt vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you type `2` or `u` at the `What now&gt;` prompt, the script prompts you for which files you want to stage:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li na výzvu `What now&gt;` (Co teď) odpověď `2` nebo `u`, skript se vás zeptá, které soubory chcete připravit k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you use the ACL structure returned from the `get_acl_access_data` method and check it against the listed files in each of the commits, you can determine whether the user has access to push all of their commits:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže používáte strukturu ACL získanou metodou `get_acl_access_data` a kontrolujete ji proti seznamu souborů v každé revizi, můžete určit, zda bude mít uživatel oprávnění odesílat všechny své revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want Git instead to pull down only the `master` branch each time, and not every other branch on the remote server, you can change the fetch line to</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ale raději chcete, aby Git pokaždé stáhl pouze větev `master` a nestahoval žádné jiné větve na vzdáleném serveru, změňte řádek příkazu fetch na:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want Git to check object consistency on every push, you can force it to do so by setting `receive.fsckObjects` to true:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, aby Git kontroloval konzistenci objektů při každém odeslání dat, můžete mu to zadat nastavením možnosti `receive.fsckObjects` na hodnotu true:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want Git to try a bit more intelligently to resolve the conflict, you can pass a `-3` option to it, which makes Git attempt a three-way merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, aby se Git pokusil vyřešit konflikt inteligentněji, můžete zadat parametr `-3`. Git se pokusí o třícestné sloučení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want a more up to date version, you can also install it via a binary installer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T214549Z" creationid="Prikryl" creationdate="20151027T214549Z">
        <seg>Pokud chcete aktuálnější verzi, můžete ji nainstalovat pomocí binárního instalátoru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want an `opera` branch that you can work on separately, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li používat větev `opera`, v níž můžete pracovat odděleně, spusťte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want an easier way to test the stashed changes again, you can run `git stash branch`, which creates a new branch for you, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste uvítali jednodušší způsob, jak znovu otestovat odložené změny, můžete spustit příkaz `git stash branch`, který vytvoří novou větev, stáhne do ní revizi, na níž jste se nacházeli při odložení práce, a aplikuje na ni vaši práci. Proběhne-li aplikace úspěšně, Git odklad odstraní:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of the operating system your server runs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete pro své repozitáře nastavit komplexnější správu oprávnění, můžete je opatřit běžnými oprávněními k systému souborů, které vám nabízí operační systém daného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want the history, you can accomplish that as quickly as you can pull the data out of the Subversion server (which may take a while).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Server Subversion můžete úplně přestat používat. Chcete-li získat historii projektu, dostanete ji tak rychle, jak jen dovedete stáhnout data ze serveru Subversion (což ovšem může chvíli trvat).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to apply one of the older stashes, you can specify it by naming it, like this: `git stash apply stash@{2}`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li aplikovat některý ze starších odkladů, můžete ho určit na základě jeho označení, např. `git stash apply stash@{2}`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to back up or clone your repository, copying this single directory elsewhere gives you nearly everything you need.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zazálohovat nebo naklonovat repozitář, zkopírování tohoto jediného adresáře do jiného umístění vám poskytne prakticky vše, co budete potřebovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to be more specific about which commands are colored and how, Git provides verb-specific coloring settings.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste rádi nastavili přesněji jak budou zvýrazněny různé příkazy nebo máte starší verzi, nabízí Git nastavení barev pro jednotlivé příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight server on your system like `lighttpd` or `webrick`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vás zajímá, jak by GitWeb vypadal pro váš projekt, nabízí Git příkaz, jímž lze spustit dočasnou instanci. V systému je třeba mít lehký server typu `lighttpd` nebo `webrick`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zkontrolovat vaše nastavení, použijte příkaz `git config --list`. Git vypíše všechna aktuálně dostupná nastavení:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to clone the repository into a directory named something other than ``libgit2'', you can specify that as the next command-line option:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T212433Z" creationid="Prikryl" creationdate="20151028T212433Z">
        <seg>Pokud chcete naklonovat repozitář do adresáře pojmenovaného jinak než `libgit2`, můžete název zadat jako další parametr na příkazovém řádku:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to delete your `serverfix` branch from the server, you run the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T075017Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ze serveru odstranit větev `serverfix`, můžete provést následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to do something one time, you can specify the refspec on the command line, too.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li nějakou akci provést pouze jednou, můžete použít refspec také na příkazovém řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to get a copy of an existing Git repository – for example, a project you'd like to contribute to – the command you need is `git clone`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211241Z" creationid="Prikryl" creationdate="20151028T211241Z">
        <seg>Chcete-li vytvořit kopii existujícího gitového repozitáře (například u projektu, do nějž chcete začít přispívat), pak příkazem, který hledáte, je `git clone`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to make the `trunk` subdirectory be the new project root for every commit, `filter-branch` can help you do that, too:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li udělat z podadresáře `trunk` nový kořenový adresář projektu pro všechny revize, i s tím vám pomůže příkaz `filter-branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to map this to better Git author data, you need a mapping from the Subversion users to the Git authors.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže vyžadujete podrobnější informace ve stylu systému Git, budete potřebovat mapování z uživatelů Subversion na autory Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T114436Z" creationid="Prikryl" creationdate="20151107T114436Z">
        <seg>Pokud chcete pro konkrétní projekt uživatelské jméno nebo e-mailovou adresu změnit (přebít), můžete příkaz spustit bez volby `--global`. V takovém případě je nutné, abyste se nacházeli v adresáři daného projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to pull commit `e43a6` into your master branch, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li do hlavní větve natáhnout revizi `e43a6`, můžete zadat následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to push from your laptop when you're at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151228T190407Z" creationid="Prikryl" creationdate="20151228T190407Z">
        <seg>Pokud budete chtít odeslat data z notebooku doma, budete muset připojit vzdálený disk, což může být ve srovnání s přístupem prostřednictvím sítě složité a pomalé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to push to both a Git server and a Subversion server, you have to push (`dcommit`) to the Subversion server first, because that action changes your commit data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li revize odeslat jak na server Git, tak na server Subversion, odešlete je nejprve na server Subversion (`dcommit`), protože tím změníte data revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to put a version of your repository in your working directory that looks like a specific tag, you can create a new branch at a specific tag with  `git checkout -b [branchname] [tagname]`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T111123Z" creationid="Prikryl" creationdate="20151108T111123Z">
        <seg>Pokud do pracovního adresáře chcete z repozitáře získat verzi s určitou značkou, můžete pro označkovaný snímek vytvořit novou větev příkazem `git checkout -b [jméno-větve] [jméno-značky]`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to remove a remote for some reason – you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore – you can use `git remote rm`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T132206Z" creationid="Prikryl" creationdate="20151107T132206Z">
        <seg>Chcete-li z nějakého důvodu odstranit referenci (přesunuli jste například server nebo už nepoužíváte dané zrcadlo, nebo třeba přispěvatel přestal přispívat), můžete využít příkaz `git remote rm`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to rename a file in Git, you can run something like:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121149Z" creationid="Prikryl" creationdate="20151107T121149Z">
        <seg>Chcete-li v systému Git přejmenovat soubor, můžete provést něco takového:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to rename a reference you can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131851Z" creationid="Prikryl" creationdate="20151107T131758Z">
        <seg>Pokud chcete odkaz přejmenovat, můžete zkrácené jméno vzdáleného repozitáře změnit příkazem `git remote rename`.(((git příkazy, remote)))
Pokud například chcete přejmenovat `pb` na `paul`, můžete tak učinit příkazem `git remote rename`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see a list of all the options your version of Git recognizes, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vás zajímá seznam parametrů, které vaše verze systému Git rozeznává, můžete si nechat jejich seznam vypsat příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see more information about a particular remote, you can use the `git remote show [remote-name]` command.(((git commands, remote)))
If you run this command with a particular shortname, such as `origin`, you get something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121457Z" creationid="Prikryl" creationdate="20151107T121457Z">
        <seg>Jestliže chcete získat více informací o konkrétním vzdáleném repozitáři, můžete použít příkaz `git remote show [název-vzdáleného-repozitáře]`.(((git příkazy, remote)))
Pokud použijete tento příkaz v kombinaci s konkrétním zkráceným názvem (např. `origin`), bude výstup vypadat zhruba následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud si chcete prohlédnout změny provedené mezi aktuální verzí souboru a týmž souborem před měsícem, Git vyhledá měsíc starý soubor a provede lokální výpočet rozdílů, aniž by o to musel žádat vzdálený server nebo stahovat starší verzi souboru ze vzdáleného serveru a poté provádět lokální výpočet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see the fifth prior value of the HEAD of your repository, you can use the `@{n}` reference that you see in the reflog output:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit pátou poslední hodnotu ukazatele HEAD svého repozitáře, použijte referenci `@{n}` z výstupu reflog:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see what is in `master` or `experiment` but not any common references, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, co je ve větvi `master` nebo `experiment`, ale nechcete vidět jejich společné reference, zadejte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see what tracking branches you have set up, you can use the `-vv` option to `git branch`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214457Z" creationid="Prikryl" creationdate="20151213T214457Z">
        <seg>Pokud chcete vidět, jaké sledující větve máte nastaveny, můžete s příkazem `git branch` použít volbu `-vv`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T092139Z" creationid="Prikryl" creationdate="20151030T092139Z">
        <seg>Chcete-li vidět, co jste připravili a co bude součástí příští revize, použijte příkaz `git diff --staged`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li kdykoli po konfliktu zjistit, které soubory zůstaly nesloučeny, spusťte příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to skip the staging area, Git provides a simple shortcut.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li oblast připravených změn úplně přeskočit, nabízí Git jednoduchou zkratku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T210929Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zahájit správu verzí existujících souborů (a ne jen prázdného adresáře), měli byste pravděpodobně zahájit sledování (tracking) těchto souborů a zapsat první revizi (provést počáteční commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to try that commit again, you can run commit with the `--amend` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213126Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li poslední revizi vytvořit znovu, můžete spustit příkaz `commit` s volbou `--amend`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to try this out, P4Merge works on all major platforms, so you should be able to do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ho chcete vyzkoušet, nemělo by vám v tom nic bránit, P4Merge funguje na všech hlavních platformách.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to unstage the TODO file at this point, you use the `3` or `r` (for revert) option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li v tuto chvíli vrátit soubor TODO z oblasti připravených změn, použijte parametr `3` nebo `r` (jako „revert“ neboli „vrátit“):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to use a different text editor, such as Emacs, you can do the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li používat jiný textový editor, například Emacs, můžete použít následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T083423Z" creationid="Prikryl" creationdate="20151120T075157Z">
        <seg>Chcete-li k vyřešení problémů použít grafický nástroj, můžete použít příkaz `git mergetool`, který spustí příslušný vizuální nástroj pro slučování, a ten vás všemi konflikty provede:(((git příkazy, mergetool)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T083624Z" creationid="Prikryl" creationdate="20151120T080313Z">
        <seg>Chcete-li pro slučování použít jiný než výchozí nástroj (Git v tomto případě vybral `opendiff`, protože byl příkaz spuštěn v systému Mac), naleznete všechny podporované nástroje na začátku výstupu v části „one of the following tools:“ („jeden z možných nástrojů“). Jednoduše napište jméno nástroje, který byste použili raději.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to version-control Word documents, you can stick them in a Git repository and commit every once in a while; but what good does that do?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li verzovat dokumenty Word, můžete je uložit do repozitáře Git a všechny hned zapsat do revize. K čemu to však bude?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to work on more than one branch simultaneously, you can set up local branches to `dcommit` to specific Subversion branches by starting them at the imported Subversion commit for that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li současně pracovat ve více než jedné větvi, můžete nastavit lokální větve tak, abyste příkazem `dcommit` zapisovali revize do konkrétních větví Subversion. Za tímto účelem umístěte začátek větví na importované revizi Subversion pro tuto větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want totally up to date ahead and behind numbers, you'll need to fetch from all your remotes right before running this.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T220552Z" creationid="Prikryl" creationdate="20151213T220552Z">
        <seg>Pokud chcete čerstvá čísla říkající, jak moc velký náskok máte a jak moc jste pozadu, musíte těsně před spuštěním tohoto příkazu vyzvednout data ze všech vzdálených repozitářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want your own `serverfix` branch that you can work on, you can base it off your remote-tracking branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T103007Z" creationid="Prikryl" creationdate="20151210T144959Z">
        <seg>Pokud chcete mít svou vlastní větev `serverfix`, na které byste mohli pracovat, můžete ji odvodit ze vzdáleně sledované větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you were deleting a reference, you would see the opposite: all '0's on the right side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste mazali referenci, viděli byste pravý opak: samé nuly na pravé straně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you were working on an issue with a partner and they pushed up an `iss53` branch, you might have your own local `iss53` branch; but the branch on the server would point to the commit at `origin/iss53`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132412Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pracujete s kolegou na nějakém problému a on odešle (push) větev s názvem `iss53`, může se stát, že i vy máte jednu z lokálních větví pojmenovanou jako `iss53`. Větev na serveru však ukazuje na objekt revize označený jako `origin/iss53`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in &lt;&lt;_git_branching&gt;&gt;; these are generally better ways to go.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T132024Z" creationid="Prikryl" creationdate="20151106T220923Z">
        <seg>Pokud byste chtěli provedené změny souboru uchovat, ale pro tento okamžik je přesto chcete odklidit z cesty, podíváme se později na odkládání (stashing) a v kapitole &lt;&lt;_git_branching&gt;&gt; na větvení. Tyto postupy bývají většinou vhodnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you would prefer to skip this patch, instead run "git am --skip".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221309Z" creationid="Prikryl" creationdate="20151023T221309Z">
        <seg>If you would prefer to skip this patch, instead run "git am --skip".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're familiar with other VCS systems such as Subversion, you'll notice that the command is "clone" and not "checkout".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211259Z" creationid="Prikryl" creationdate="20151028T211259Z">
        <seg>Pokud jste zvyklí pracovat s jinými systémy pro správu verzí, jako je například Subversion, jistě jste si všimli, že příkaz zní `clone`, a nikoli `checkout`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T083931Z" creationid="Prikryl" creationdate="20151120T081035Z">
        <seg>Pokud jste s výsledkem spokojeni a ujistili jste se, že všechny soubory s konfliktem jsou připraveny k zapsání, můžete zadat příkaz `git commit` a dokončit vytvoření bodu sloučení (merge commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're on Fedora for example, you can use yum:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T204529Z" creationid="Prikryl" creationdate="20151027T204529Z">
        <seg>Pokud například používáte distribuci Fedora, můžete použít yum:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're on a Debian-based distribution like Ubuntu, try apt-get:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T204609Z" creationid="Prikryl" creationdate="20151027T204609Z">
        <seg>V distribuci založené na Debianu (jako je například Ubuntu) zkuste použít program apt-get:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're on a tracking branch and type `git pull`, Git automatically knows which server to fetch from and branch to merge into.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T112558Z" creationid="Prikryl" creationdate="20151213T112558Z">
        <seg>Pokud jste na sledující větvi a napíšete `git pull`, Git automaticky ví, z kterého serveru má data vyzvednout (fetch) a do jaké větve je začlenit (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're only interested in looking at the 1.8.5 series, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145550Z" creationid="Prikryl" creationdate="20151107T145550Z">
        <seg>Pokud se chcete podívat jen na sérii k verzi 1.8.5, můžete provést následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're starting to track an existing project in Git, you need to go to the project's directory and type:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T135642Z" creationid="Prikryl" creationdate="20151107T120417Z">
        <seg>Chcete-li v Gitu zahájit sledování existujícího projektu, přejděte do adresáře projektu a napište:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you're used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T092732Z" creationid="Prikryl" creationdate="20151027T092732Z">
        <seg>Pokud jste zvyklí pracovat s centralizovanými systémy správy verzí, kde je většina operací poznamenána latencí sítě, patrně vás při práci s Git napadne, že mu bohové rychlosti dali do vínku nadpřirozené schopnosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you've cloned your repository, you should at least see origin – that is the default name Git gives to the server you cloned from:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T164516Z" creationid="Prikryl" creationdate="20151101T164516Z">
        <seg>Pokud jste repozitář vytvořili klonováním, měli byste v něm vidět přinejmenším `origin` -- jako výchozí název ho Git přidělí serveru, ze kterého jste vytvářeli klon:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you've made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you'll change is your commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213432Z" creationid="Prikryl" creationdate="20151106T213432Z">
        <seg>Pokud jste od poslední revize neprovedli žádné změny (například spustíte tento příkaz bezprostředně po předchozím zápisu), bude snímek vypadat úplně stejně a jediné, co změníte, je zpráva k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your fix for issue #53 modified the same part of a file as the `hotfix`, you'll get a merge conflict that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T072717Z" creationid="Prikryl" creationdate="20151120T072717Z">
        <seg>Pokud se oprava problému #53 týkala stejné části souboru jako větev `hotfix`, dojde ke konfliktu při slučování (merge conflict), který vypadá nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve been tracking files in your project and you want to move them out into a submodule, you must be careful or Git will get angry at you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste ve svém projektu sledovali soubory a chcete je přesunout do submodulu, musíte být velmi opatrní, abyste si Git proti sobě nepoštvali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve committed and then you want to change the snapshot you committed by adding or changing files, possibly because you forgot to add a newly created file when you originally committed, the process works basically the same way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste zapsali revizi a uvědomíte si, že jste např. zapomněli přidat nově vytvořený soubor, a proto byste chtěli zapsaný snímek změnit (tedy přidat nebo změnit soubory), je postup ke změně v podstatě stejný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In 2002, the Linux kernel project began using a proprietary DVCS called BitKeeper.(((BitKeeper)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T072917Z" creationid="Prikryl" creationdate="20151027T072917Z">
        <seg>V roce 2002 začal projekt linuxového jádra využívat komerční distribuovaný systém správy verzí s názvem BitKeeper.(((BitKeeper)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool's free-of-charge status was revoked.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T073217Z" creationid="Prikryl" creationdate="20151027T073217Z">
        <seg>Vztahy mezi komunitou, která vyvíjela jádro Linuxu, a komerční společností, která vyvinula BitKeeper, se v roce 2005 zhoršily a nástroj přestal být poskytován zdarma.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In &lt;&lt;_git_basics_chapter&gt;&gt;, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T123119Z" creationid="Prikryl" creationdate="20151027T123119Z">
        <seg>V kapitole &lt;&lt;_git_basics_chapter&gt;&gt; se o stavech souborů dozvíte více. Naučíte se, jak jich můžete využívat, nebo jak můžete stav „připraven k zapsání“ úplně přeskočit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In &lt;&lt;limit_options&gt;&gt; we'll list these and a few other common options for your reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T212915Z" creationid="Prikryl" creationdate="20151104T212915Z">
        <seg>Tabulka &lt;&lt;limit_options&gt;&gt; uvádí přehled již zmíněných a několika dalších voleb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, however, every developer is potentially both a node and a hub – that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T143306Z" creationid="Prikryl" creationdate="20160109T143306Z">
        <seg>Naproti tomu v Gitu je  každý vývojář potenciálním uzlem i úložištěm. To znamená, že každý vývojář může přispívat kódem do ostatních repozitářů a současně může spravovat veřejný repozitář, z kterého mohou ostatní vycházet při své práci a do kterého mohou přispívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, this is a pointer to the local branch you're currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T151648Z" creationid="Prikryl" creationdate="20151108T151648Z">
        <seg>V Gitu se jedná o ukazatel na lokální větev, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, this is called _rebasing_.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T091312Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V Gitu se to nazývá _přeskládáním_ (rebasing).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Perforce, for example, you can't do much when you aren't connected to the server; and in Subversion and CVS, you can edit files, but you can't commit changes to your database (because your database is offline).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T093308Z" creationid="Prikryl" creationdate="20151027T093308Z">
        <seg>Například v systému Perforce toho lze bez připojení k serveru dělat jen velmi málo. V systémech Subversion a CVS můžete sice upravovat soubory, ale nemůžete zapisovat změny do databáze (neboť ta je offline).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Subversion, each person committing has a user on the system who is recorded in the commit information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V Subversion má každá osoba zapisující revize v systému přiděleného uživatele, který je u zaznamenán informací o revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In `git svn`, it looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V nástroji `git svn` to bude vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T193150Z" creationid="Prikryl" creationdate="20151026T193150Z">
        <seg>V distribuovaných systémech pro správu verzí (jako jsou Git, Mercurial, Bazaar nebo Darcs) klient nestahuje pouze nejnovější verzi souborů (tzv. snímek, anglicky snapshot), ale zrcadlí celý repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T195439Z" creationid="Prikryl" creationdate="20151103T195439Z">
        <seg>Kromě voleb pro formátování výstupu akceptuje příkaz `git log` celou řadu užitečných omezujících voleb -- tj. takových, které umožní zobrazit jen podmnožinu revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to the client-side hooks, you can use a couple of important server-side hooks as a system administrator to enforce nearly any kind of policy for your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vedle zásuvných modulů na straně klienta můžete jako správce systému využívat také několik důležitých zásuvných modulů na straně serveru, které vám pomohou kontrolovat téměř jakýkoli typ standardů stanovených pro daný projekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition, each of these has subsettings you can use to set specific colors for parts of the output, if you want to override each color.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li sami nastavit jednotlivé barvy, mají všechny tyto parametry navíc dílčí nastavení, které můžete použít k určení konkrétních barev pro jednotlivé části výstupu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition, the `short`, `full`, and `fuller` options show the output in roughly the same format but with less or more information, respectively:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T152201Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále se nabízejí hodnoty `short`, `full` a `fuller` (zkrácený, plný, úplný), které zobrazují výstup přibližně ve stejném formátu, avšak s více či méně podrobnými informacemi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition, you get all this for very little overhead.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T181622Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>To vše navíc získáte jen při velmi malém zvýšení režie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In any case, the Git protocol is relatively easy to set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ať tak či tak, na protokolu Git jistě oceníte jeho snadné nastavení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In centralized systems, every developer is a node working more or less equally on a central hub.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T143007Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V centralizovaných systémech představuje každý vývojář samostatný uzel, pracující s centrálním úložištěm více či méně na stejné úrovni.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In essence, you want to treat it like a binary file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z těchto důvodů s ním budete chtít zacházet jako s binárním souborem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, Git stores everything in its database not by file name but by the hash value of its contents.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T095030Z" creationid="Prikryl" creationdate="20151027T095030Z">
        <seg>Git vlastně ve své databázi nic neukládá podle názvu souboru, ale podle otisku jeho obsahu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if you build Git from source code cloned from the Git repository, `git --version` gives you something that looks like this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud sestavujete Git ze zdrojového kódu naklonovaného z repozitáře Git, získáte po spuštění příkazu `git --version` něco, co vypadá zhruba podobně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if you have a script that will exit 0 if the project is good or non-0 if the project is bad, you can fully automate `git bisect`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A máte-li skript, který bude pro správně fungující projekt vracet hodnotu 0 (nula), nebo nenulovou hodnotu, pokud je v projektu chyba, můžete příkaz `git bisect` dokonce plně automatizovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T231324Z" creationid="Prikryl" creationdate="20151031T231324Z">
        <seg>A skutečně, pokud takový příkaz provedete a podíváte se na hlášení o stavu, uvidíte, že Git považuje soubor za přejmenovaný (renamed):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there – see &lt;&lt;_git_on_the_server&gt;&gt; for more details).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211839Z" creationid="Prikryl" creationdate="20151028T211839Z">
        <seg>Pokud by někdy poté došlo k poruše disku serveru, lze použít libovolný z těchto klonů na kterémkoli klientovi a obnovit pomocí něj server zpět do stavu, v němž byl v okamžiku klonování (může dojít ke ztrátě některých zásuvných modulů na straně serveru a podobných věcí, ale všechna verzovaná data budou obnovena. Další podrobnosti naleznete v kapitole &lt;&lt;_git_on_the_server&gt;&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, this is so common that there's even a shortcut for that shortcut.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T113602Z" creationid="Prikryl" creationdate="20151213T113602Z">
        <seg>Ve skutečnosti je to tak běžná operace, že existuje dokonce zkrácená varianta pro tento zkratkový příkaz.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, you can do `-&lt;n&gt;`, where `n` is any integer to show the last `n` commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T195837Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete dokonce zadat `-&lt;n&gt;`, kde `n` je libovolné celé číslo. Povede to k zobrazení posledních `n` revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T212237Z" creationid="Prikryl" creationdate="20151214T212237Z">
        <seg>Obecně můžete nejlepší z obou světů získat tím, že použijete přeskládání vašich lokálních změn, které jste dosud nezveřejnili, abyste příběh vyčistili, než jej zveřejníte. Ale nikdy neprovádějte přeskládání toho, co už bylo někam odesláno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151105T153936Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V mnoha nástrojích pro správu verzí jde o poněkud náročný proces, který často vyžaduje vytvoření nové kopie adresáře se zdrojovým kódem, což může u velkých projektů trvat dlouho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In many instances, you'll have two or three developers with a few commits a day, or possibly less for somewhat dormant projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T120029Z" creationid="Prikryl" creationdate="20160110T120029Z">
        <seg>V mnoha případech budete mít dva nebo tři vývojáře přispívající několika málo revizemi denně. U spících projektů to bude i méně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In many other systems, doing so is either impossible or painful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>V mnoha jiných systémech je takový postup nemožný nebo přinejmenším obtížný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to be able to add the documentation in various formats (doc, html, info), these additional dependencies are required (Note: users of RHEL and RHEL-derivatives like CentOS and Scientific Linux will have to https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F[enable the EPEL repository] to download the `docbook2X` package):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T123558Z" creationid="Prikryl" creationdate="20151107T115836Z">
        <seg>Pokud chcete pracovat s dokumentací v rozličných formátech (doc, html, info), vyžadují se následující závislosti (Poznámka: uživatelé distribuce RHEL a odvozených, jako je CentOS a Scientific Linux, budou muset https://fedoraproject.org/wiki/EPEL#How_can_I_use_these_extra_packages.3F[povolit repozitář EPEL], aby mohli stáhnout balíček `docbook2X`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to begin tracking a new file, you use the command `git add`.(((git commands, add)))
To begin tracking the README file, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120007Z" creationid="Prikryl" creationdate="20151029T120007Z">
        <seg>K zahájení sledování nových souborů se používá příkaz `git add`.(((git příkazy, add)))
Sledování souboru `README` zahájíme takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to do that, you'll merge your `iss53` branch into `master`, much like you merged your `hotfix` branch earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T153258Z" creationid="Prikryl" creationdate="20151115T153258Z">
        <seg>Abychom tak učinili, začleníme větev `iss53` do větve `master` podobně, jako jsme to učinili dříve s větví `hotfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to import a Git directory, you need to review how Git stores its data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li importovat adresář Git, budeme se muset podívat na to, jak Git ukládá svá data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T074052Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vzniklý konflikt vyřešit, musíte buď vybrat jednu z obou možností, nebo je ručně spojit dohromady.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In other words, in this case, you don't have a new `serverfix` branch – you only have an `origin/serverfix` pointer that you can't modify.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144539Z" creationid="Prikryl" creationdate="20151210T144539Z">
        <seg>Jinými slovy, v tomto případě nevznikne nová větev `serverfix`. Získáte jen ukazatel `origin/serverfix`, který nemůžete měnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In other words, use commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jinými slovy, formulujte je jako příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In other words, you may want to keep the file on your hard drive but not have Git track it anymore.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T104234Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jinými slovy, soubor chcete ponechat na disku, ale už nechcete, aby ho Git sledoval.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In reality, we're talking about pointers moving up the line of commits you're making.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T134919Z" creationid="Prikryl" creationdate="20151209T134919Z">
        <seg>Ve skutečnosti hovoříme o ukazatelích pohybujících se vzhůru po linii revizí, které zapisujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T120833Z" creationid="Prikryl" creationdate="20151103T200041Z">
        <seg>Ve skutečnosti ji asi nebudete využívat příliš často, protože Git standardně posílá výstup přes stránkovač, takže se najednou zobrazí jen jedna stránka logu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In some contexts, the first
line is treated as the subject of an email and the rest of
the text as the body.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T140210Z" creationid="Prikryl" creationdate="20160114T153538Z">
        <seg>Někdy se první řádek používá jako předmět
emailu a zbytek textu jako tělo dopisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In such cases, you can create a file listing patterns to match them named `.gitignore`.(((ignoring files)))
Here is an example `.gitignore` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T175501Z" creationid="Prikryl" creationdate="20151029T175501Z">
        <seg>V takových případech můžete vytvořit soubor `.gitignore` se seznamem masek pro ignorované soubory.(((ignorované soubory)))
Zde je příklad souboru `.gitignore`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In that case, the `git am` process will fail and ask you what you want to do:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě proces `git am` neproběhne a Git se vás zeptá, co chcete udělat dál:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In that case, you start the command with a `!` character.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě zadejte na začátek příkazu znak `!`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the Git source code, for example, the maintainer has added their GPG public key as a blob object and then tagged it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve zdrojovém kódu systému Git správce například vložil svůj veřejný klíč GPG jako objekt blobu a ten označil značkou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the current project, this directory contains no files, but it does contain a simple structure:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V aktuálním projektu nejsou v tomto adresáři žádné soubory, zatím tu najdete jen jednoduchou strukturu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the default case that is automatically written by a `git remote add` command, Git fetches all the references under `refs/heads/` on the server and writes them to `refs/remotes/origin/` locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve výchozím případě, který se automaticky zapisuje příkazem `git remote add`, Git vyzvedne všechny reference z adresáře `refs/heads/` na serveru a zapíše je do lokálního adresáře `refs/remotes/origin/`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the early days of Git (mostly pre 1.5), the user interface was much more complex because it emphasized this filesystem rather than a polished VCS.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dávných dobách (zhruba do verze 1.5) bývalo uživatelské rozhraní systému Git podstatně složitější než dnes. Git tehdy spíš než na uhlazené VCS kladl důraz právě na systém souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the following examples, and throughout most of this book, for the sake of brevity this book doesn't have nicely-formatted messages like this; instead, we use the `-m` option to `git commit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T141549Z" creationid="Prikryl" creationdate="20160115T141549Z">
        <seg>V následujících příkladech -- a ve většině ukázek v knize -- se takto pěkně naformátované zprávy nepoužívají kvůli stručnosti. Místo toho budeme používat volbu `-m` za příkazem `git commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the last example output, the unstaged area looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U posledního příkladu vypadá oblast připravených změn takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the meantime, Jessica has been working on a topic branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142045Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica mezitím pracovala na tématické větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the next chapter, you'll learn about how to use the largest and most popular Git hosting service, GitHub.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160108T191319Z" creationid="Prikryl" creationdate="20160108T190548Z">
        <seg>V další kapitole se naučíte, jak se používá největší a nejpopulárnějí služba pro hostování Gitu, známá jako GitHub.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the next section, you'll learn about a few common patterns for contributing to a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T000111Z" creationid="Prikryl" creationdate="20160110T000111Z">
        <seg>V následující podkapitole se dozvíte o několika obvyklých způsobech přispívání do projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the simplest terms, a bare repository is the contents of your project's `.git` directory and nothing else.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144630Z" creationid="Prikryl" creationdate="20151218T144630Z">
        <seg>Když to zjednodušíme, holý repozitář je obsah adresáře `.git` vašeho projektu a nic víc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T154152Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git v tomto případě provádí jednoduché třícestné sloučení, při kterém používá dva snímky, na které ukazují vrcholy větví, a jejich společného předka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, Git uses the last value for each unique key it sees.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T132142Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě Git použije poslední hodnotu pro každý unikátní klíč, který vidí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T172707Z" creationid="Prikryl" creationdate="20151030T095352Z">
        <seg>V tomto případě jste viděli (dejme tomu, když jste naposledy spustili `git status`), že vše bylo připraveno k zapsání, takže jste připraveni k samotnému zápisu.(((git příkazy, status)))
Nejjednodušší způsob spočívá v provedení `git commit`:(((git příkazy, commit)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, the company is using a type of integration-manager workflow where the work of the individual groups is integrated only by certain engineers, and the `master` branch of the main repo can be updated only by those engineers.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111041Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Společnost v tomto případě používá typ pracovního postupu s integračním manažerem, kdy práci jednotlivých skupin integrují pouze někteří inženýři a větev `master` hlavního repozitáře mohou aktualizovat pouze oni.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, two stashes were done previously, so you have access to three different stashed works.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě byly už dříve provedeny dva další odklady, a máte tak k dispozici tři různé odklady.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you already know what file it is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě víte, o jaký soubor se jedná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you can read an existing tree into your staging area as a subtree by using the `--prefix` option to `read-tree`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě můžete načíst existující strom jako podstrom do oblasti připravených změn pomocí parametru `--prefix`, který zadáte k příkazu `read-tree`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you can try to rebase that branch on top of `origin/master`, resolve the conflicts for the maintainer, and then resubmit your changes:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T183913Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě můžete zkusit přeskládat tuto větev na vrchol větve `origin/master`, vyřešit za správce vzniklé konflikty a poté své změny ještě jednou odeslat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you had a clean working directory when you tried to apply the stash, and you tried to apply it on the same branch you saved it from; but having a clean working directory and applying it on the same branch aren’t necessary to successfully apply a stash.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě jste měli čistý pracovní adresář, když jste se pokusili odklad aplikovat. Pokusili jste se ho aplikovat na stejnou větev, z níž jste ho uložili. K úspěšnému odkladu však není nezbytně nutné, aby byl pracovní adresář čistý ani abyste ho aplikovali na stejnou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you have a couple of administrators, some documentation writers with access to the `doc` directory, and one developer who only has access to the `lib` and `tests` directories, and your ACL file looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V našem příkladu máte několik správců, několik tvůrců dokumentace s přístupem do adresáře `doc` a jednoho vývojáře, který má jako jediný přístup do adresářů `lib` a `tests`. Soubor ACL proto bude vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you remove a file called passwords.txt from every snapshot, whether it exists or not.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě odstraníte soubor s názvem passwords.txt ze všech snímků, ať v nich existuje, nebo neexistuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you'd do your work in a branch and then rebase your work onto `origin/master` when you were ready to submit your patches to the main project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T121727Z" creationid="Prikryl" creationdate="20151214T121727Z">
        <seg>V takovém případě budete pracovat ve své větvi, a až budete mít připraveny záplaty k odeslání do hlavního projektu, přeskládáte svou práci na větev `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you're still on `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T163037Z" creationid="Prikryl" creationdate="20151108T163037Z">
        <seg>V tomto případě jsme stále na větvi `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, your development history has diverged from some older point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě se historie vývoje od určitého bodu v minulosti rozbíhala.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this chapter, you'll see how to work with Git in a distributed environment as a contributor and an integrator.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160107T212045Z" creationid="Prikryl" creationdate="20160107T212045Z">
        <seg>V této kapitole uvidíte, jak se v distribuovaném prostředí s Gitem pracuje v roli přispěvatele a v roli integrátora.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this environment, you can follow a workflow similar to what you might do when using Subversion or another centralized system.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142352Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém prostředí můžete uplatnit podobný pracovní postup, na jaký jste možná zvyklí ze systému Subversion nebo z jiného centralizovaného systému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this example, you'd run the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T091443Z" creationid="Prikryl" creationdate="20151214T091443Z">
        <seg>U tohoto příkladu byste provedli následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this scenario, all work is done in team-based branches and pulled together by the integrators later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111130Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto scénáři se veškerá práce provádí ve větvích jednotlivých týmů a později je spojována integrátory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this scenario, you have a `master` branch that contains basically stable code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto scénáři obsahuje vaše větev `master` převážně jen stabilní kód.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this scenario, you have two long-running branches, `master` and `develop`, in which you determine that `master` is updated only when a very stable release is cut and all new code is integrated into the `develop` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto scénáři máte dvě dlouhodobé větve, hlavní větev `master` a větev `develop`. Určíte, že větev `master` bude aktualizována, pouze když je k dispozici velmi stabilní verze a do větve `develop` je integrován veškerý nový kód.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section you'll learn what rebasing is, how to do it, why it's a pretty amazing tool, and in what cases you won't want to use it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T082514Z" creationid="Prikryl" creationdate="20151214T082514Z">
        <seg>V této podkapitole se dozvíte, co to přeskládání je, jak se provádí, proč je to docela úžasný nástroj a v jakých případech ho raději nepoužívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, we'll cover some common workflows that this lightweight branching makes possible, so you can decide if you would like to incorporate it into your own development cycle.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151205T122643Z" creationid="Prikryl" creationdate="20151205T122643Z">
        <seg>V této části se podíváme na některé běžné pracovní postupy, které vám snadné větvení umožňuje, takže se budete moci rozhodnout, zda je nezařadíte do vývojového cyklu svých projektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, we'll cover some of these remote-management skills.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T163932Z" creationid="Prikryl" creationdate="20151101T163932Z">
        <seg>V této podkapitole se budeme zabývat některými z těchto dovedností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, you'll learn how to list the available tags, how to create new tags, and what the different types of tags are.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T222920Z" creationid="Prikryl" creationdate="20151107T144936Z">
        <seg>V této části vysvětlíme, jak pořídíte výpis všech dostupných značek, jak lze vytvářet značky nové a jaké typy značek se vám nabízejí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, you’ll cover how to accomplish these very useful tasks so that you can make your commit history look the way you want before you share it with others.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se dozvíte, jak se tyto velmi užitečné úkony provádějí, abyste mohli svou historii revizí před zveřejněním upravit podle svých představ.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of ``I added tests for'' or ``Adding tests for,'' use ``Add tests for.''
Here is a template originally written by Tim Pope:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160114T153113Z" creationid="Prikryl" creationdate="20160114T153113Z">
        <seg>Místo „Přidal jsem testy pro“ nebo „Přidány testy pro“ použijte „Přidej testy pro“.
Zde je originální (přeložená) šablona, kterou napsal Tim Pope:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of an example of Git hosting, I have decided to turn that part of the book into more deeply describing what GitHub is and how to effectively use it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T143550Z" creationid="Prikryl" creationdate="20151026T143550Z">
        <seg>Rozhodl jsem se, že místo příkladu použití hostovaného systému Git, změním tuto část knihy v podrobnější popis toho, co GitHub je a jak jej efektivně používat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of commits that look like this</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revize už nebudou mít tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T133323Z" creationid="Prikryl" creationdate="20151115T154508Z">
        <seg>Git místo pouhého přesunutí ukazatele větve vpřed, tentokrát vytvoří nový snímek, který je výsledkem třícestného slučování, a automaticky vytvoří nový objekt revize, který jej zachycuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of reading from stdin, this script takes three arguments: the name of the reference (branch), the SHA-1 that reference pointed to before the push, and the SHA-1 the user is trying to push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento skript nenačítá data ze standardního vstupu, místo nich používá tři jiné parametry: název reference (větve), hodnotu SHA-1, na niž reference ukazovala před odesláním, a hodnotu SHA-1, kterou se uživatel pokouší odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of writing your own Atom-generating code, you decide to use a library.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo abyste psali vlastní zdrojový kód ke kanálům Atom, rozhodnete se použít knihovnu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead, Git thinks of its data more like a set of snapshots of a miniature filesystem.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T081924Z" creationid="Prikryl" creationdate="20151027T081924Z">
        <seg>Místo toho Git o datech uvažuje jako o sadě snímků miniaturního systému souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead, you must run `git diff-tree` with the branch you want to compare to:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě je třeba zadat příkaz `git diff-tree` a větev, s níž chcete srovnání provést:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Is a lieutenant system in place, and do you have to submit your work to them first?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsou součástí systému poručíci a musíte všechnu svou práci odesílat nejprve jim?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Is it centralized, with each developer having equal write access to the main codeline?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T192510Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Probíhá vývoj centralizovaně s tím, že každý vývojář má stejné oprávnění pro zápis do hlavní linie kódu?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It adds a section to your `.git/config` file, specifying the name of the remote (`origin`), the URL of the remote repository, and the refspec for fetching:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte tím novou část do souboru `.git/config`, určíte název vzdáleného serveru (`origin`), URL vzdáleného repozitáře a refspec pro vyzvednutí dat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T213754Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Automaticky přidá, odstraní a upraví soubory tak, aby zajistil, že vaše pracovní kopie bude vypadat stejně, jako poslední revize v dané větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T233400Z" creationid="Prikryl" creationdate="20160109T233400Z">
        <seg>Umožňuje vedoucímu projektu (diktátorovi) velkou část práce delegovat a poté na více místech sesbírat velké podmnožiny kódu, které pak dává dohromady.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T181319Z" creationid="Prikryl" creationdate="20151026T181319Z">
        <seg>Umožní vám vrátit soubory zpět do předchozího stavu, vrátit celý projekt do předchozího stavu, porovnávat změny provedené v průběhu času, zjistit, kdo naposledy upravil něco, co nyní možná způsobuje problémy, kdo a kdy vytvořil diskutabilní část a mnoho dalšího.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also lists all the remote references it has pulled down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Součástí výpisu jsou také všechny vzdálené reference, které příkaz stáhl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also puts a summary of the information at the end.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T113529Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na konci výpisu se zároveň objeví souhrn těchto informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple branches that are automatically merged when you run `git pull`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T143543Z" creationid="Prikryl" creationdate="20151107T131524Z">
        <seg>Příkaz vám také ukáže, které vzdálené větve na serveru ještě nemáte, které vzdálené větve máte, ale ze serveru už byly odstraněny, a několik větví, které budou automaticky začleněny (merge), když spustíte příkaz `git pull`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T110650Z" creationid="Prikryl" creationdate="20151028T110650Z">
        <seg>I ve Windows se hledá soubor `/etc/gitconfig`, který je ale umístěn relativně vůči kořenovému adresáři MSys, tedy vůči místu, do kterého jste se po spuštění instalačního programu rozhodli Git nainstalovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also works well with Powershell, and sets up solid credential caching and sane CRLF settings.(((Powershell)))(((CRLF)))(((credential caching)))
We'll learn more about those things a little later, but suffice it to say they're things you want.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T123243Z" creationid="Prikryl" creationdate="20151028T000617Z">
        <seg>Dobře funguje i s PowerShell. Instalátor řádně nastaví mezipaměť pro identifikační údaje a použije rozumné nastavení CRLF.(((Powershell)))(((CRLF)))(((uložení identifikačních údajů)))
Více si o tom řekneme o něco později, ale mělo by vám stačit, že to jsou věci, které chcete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It does this so you don't accidentally begin including generated binary files or other files that you did not mean to include.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T111214Z" creationid="Prikryl" creationdate="20151029T111214Z">
        <seg>Díky tomu se nemůže stát, že budou do revizí nedopatřením zahrnuty vygenerované binární soubory nebo jiné soubory, které si nepřejete zahrnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It essentially rewinds the work you've done in your `testing` branch so you can go in a different direction.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T165420Z" creationid="Prikryl" creationdate="20151108T165420Z">
        <seg>V podstatě vrátíte změny, které jste provedli ve větvi `testing`, takže se můžete vydat jiným směrem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It has paused the process while you resolve the conflict.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prozatím pozastavil celý proces do doby, než konflikt vyřešíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is easy to forget which directory you're in and accidentally write to the wrong file or copy over files you don't mean to.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T182251Z" creationid="Prikryl" creationdate="20151026T182251Z">
        <seg>Člověk snadno zapomene, v kterém adresáři se právě nachází, a nedopatřením začne zapisovat do nesprávného souboru, nebo kopírováním přepíše soubory, které přepsat nechtěl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is hard to get the system to do anything that is not undoable or to make it erase data in any way.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T095336Z" creationid="Prikryl" creationdate="20151027T095336Z">
        <seg>Přimět systém, aby udělal něco, co nelze vzít zpět, nebo aby smazal jakákoli data, je velice obtížné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It keeps a special pointer called `HEAD`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T151257Z" creationid="Prikryl" creationdate="20151108T151244Z">
        <seg>Používá speciální ukazatel zvaný `HEAD`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lets you edit the default message before the commit author sees it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Umožňuje upravit výchozí zprávu dřív, než se zobrazí autorovi revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lists the URL for the remote repository as well as the tracking branch information.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T143110Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bude obsahovat adresu URL vzdáleného repozitáře a informace o sledovaných větvích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lists the changes you’ve staged on the left and unstaged changes on the right.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vypíše všechny změny, které jste připravili k zapsání, na levé straně, nepřipravené změny na pravé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lists the oldest at the top, rather than the newest, because that’s the first one it will replay.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Seznam uvádí nejstarší revizi nahoře z toho důvodu, že to bude první revize, kterou příkaz přehraje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zdá se, že revize úplně dole je hledanou ztracenou revizí. Můžete ji obnovit tak, že na ní vytvoříte novou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vypadá například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T084331Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git díky tomu znovu zkoumá skoro každý aspekt správy verzí, který většina ostatních systémů okopírovala z předchozí generace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It may be easier to remember the `~3` because you’re trying to edit the last three commits; but keep in mind that you’re actually designating four commits ago, the parent of the last commit you want to edit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snazší k zapamatování je varianta s výrazem `~3`, neboť se pokoušíte upravit poslední tři revize. Nezapomeňte ale, že tím ve skutečnosti označujete čtvrtou revizi od konce, tedy rodiče poslední revize, kterou chcete upravit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It may be helpful to think of it more as ``add this content to the next commit'' rather than ``add this file to the project''.(((git commands, add)))
Let's run `git add` now to stage the ``CONTRIBUTING.md'' file, and then run `git status` again:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T125127Z" creationid="Prikryl" creationdate="20151029T125127Z">
        <seg>Možná vám pomůže, když o něm budete uvažovat spíše ve smyslu „přidej tento obsah do dalšího snímku“ než ve smyslu „přidej tento soubor do projektu“.(((git příkazy, add)))
Spusťme nyní příkaz `git add`, abychom soubor `CONTRIBUTING.md` připravili k zapsání, a potom znovu zadejme příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It means that at the core of Git is a simple key-value data store.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znamená to, že v jádru systému Git se nachází jednoduché úložiště dat, ke kterému lze přistupovat pomocí klíčů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It moved the HEAD pointer back to point to the `master` branch, and it reverted the files in your working directory back to the snapshot that `master` points to.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164932Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přemístil ukazatel `HEAD` zpět, takže nyní ukazuje na větev `master`, a vrátil soubory ve vašem pracovním adresáři zpět ke snímku, na který ukazuje větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It often happens that while working on one project, you need to use another project from within it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Často se stává, že pracujete na jednom projektu, ale na chvíli si potřebujete odskočit do jiného.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It performs a three-way merge between the two latest branch snapshots (`C3` and `C4`) and the most recent common ancestor of the two (`C2`), creating a new snapshot (and commit).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T083315Z" creationid="Prikryl" creationdate="20151214T083315Z">
        <seg>Ten provede třícestné sloučení mezi dvěma posledními snímky (C3 a C4) a jejich nejmladším společným předkem (C2), přičemž vytvoří nový snímek (a novou revizi).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It records the snapshots and then tries to figure out what was renamed implicitly, after the fact.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaznamenává snímky a poté se snaží zjistit, co bylo později implicitně přejmenováno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It should be fairly straightforward to determine which solution or combination of solutions is appropriate for you and your organization.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď už byste se měli umět rozhodnout, které řešení nebo jaká kombinace řešení se pro vás a pro vaši organizaci hodí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It shows you a list of your staged files, and you can select the ones for which you would like to see the staged diff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz zobrazí seznam připravených souborů. Můžete vybrat ty soubory, pro něž chcete zobrazit rozdíly připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It shows you that a couple of lines are staged and a couple are unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oznamuje vám, že několik řádků je připravených k zapsání a několik není.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It shows you what commit was the last to modify each line of any file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukáže vám, při které revizi byly jednotlivé řádky každého souboru naposledy změněny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It summarizes all the commits in the range you give it; for example, the following gives you a summary of all the commits since your last release, if your last release was named v1.0.1:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz shrne všechny revize v zadaném rozmezí. Například následující příkaz zobrazí shrnutí všech revizí od posledního vydání (pokud bylo vaše poslední vydání pojmenováno v1.0.1):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes a list of references that are being pushed from stdin; if it exits non-zero, none of them are accepted.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript používá seznam referencí, které jsou odesílány ze standardního vstupu stdin. Je-li návratová hodnota nenulová, nebude ani jedna z nich přijata.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes a single argument: the name of the temporary file that contains the proposed commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá jediný parametr: název dočasného souboru s požadovaným tvarem zprávy k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oba vezmou samotný repozitář Git (bez pracovního adresáře) a vytvoří pro něj samostatný adresář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes the same stdin data as the `pre-receive` hook.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá stejná data ze standardního vstupu jako zásuvný modul `pre-receive`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It tells you pretty explicitly how to discard the changes you've made.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215759Z" creationid="Prikryl" creationdate="20151106T215759Z">
        <seg>Git přímo říká, jak se dají vámi provedené změny zrušit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It tells you the SHA-1 of the first bad commit and show some of the commit information and which files were modified in that commit so you can figure out what happened that may have introduced this bug:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sdělí vám SHA-1 první revize s chybou a zobrazí některé další informace o revizi a o tom, které soubory byly v této revizi změněny. Zjistíte tak, co bylo součástí revize a co může způsobovat hledanou chybu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It tries to run a command on the remote server via an SSH call that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na vzdáleném serveru se pokusí spustit příkaz prostřednictvím volání SSH:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out that Git stages a file exactly as it is when you run the `git add` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Věc se má tak, že Git po spuštění příkazu `git add` připraví soubor k zapsání přesně ve tvaru, v jakém se nachází v daném okamžiku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T130214Z" creationid="Prikryl" creationdate="20151214T143637Z">
        <seg>Věc se má tak, že Git pro objekt revize kromě kontrolního součtu (SHA-1) počítá také kontrolní součet, který vychází pouze ze záplat, které s revizí vznikají.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out that it can.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A podívejme, ono to jde.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out that you can write your own filters for doing substitutions in files on commit/checkout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak zjistíte, můžete pro substituce v souborech určených k zapsání/checkoutu napsat i vlastní filtry.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out there is no issue here, and you tell Git that by typing `git bisect good` and continue your journey:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukáže se, že na této revizi k problému nedochází, a tak to systému Git sdělíte příkazem `git bisect good` a budete v hledání pokračovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out you can do this fairly well using Git attributes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomínejme však na atributy Git, v této situaci vám odvedou nanahraditelnou službu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá stejný mechanismus přenosu dat jako protokol SSH, na rozdíl od něj ale není zpomalován šifrováním a ověřováním identity (autentizací).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It was starting to gain steam in certain communities, but had not reached anywhere near the ubiquity it has today.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T133141Z" creationid="Prikryl" creationdate="20151026T133141Z">
        <seg>V určitých kruzích si začínal získávat jméno, ale zdaleka nedosahoval všudypřítomnosti, jakou můžeme pozorovat nyní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It will also use these values to help you when you apply patches with `git apply`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git se těmito hodnotami řídí také při aplikaci záplat příkazem `git apply`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It will simply get the data for you and let you merge it yourself.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T071842Z" creationid="Prikryl" creationdate="20151214T071842Z">
        <seg>Prostě pro vás jen vyzvedne data a sloučení nechá na vás.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It will start at the commit you specify on the command line (`HEAD~3`) and replay the changes introduced in each of these commits from top to bottom.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začne na revizi, kterou jste označili na příkazovém řádku (`HEAD~3`), a přehraje změny provedené v každé z těchto revizí od shora dolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It works by going to the common ancestor of the two branches (the one you're on and the one you're rebasing onto), getting the diff introduced by each commit of the branch you're on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132053Z" creationid="Prikryl" creationdate="20151214T094251Z">
        <seg>Funguje to tak, že se přejde na společného předka obou větví (větve, na níž se nacházíte, a větve, na kterou přeskládáváte), zjistí se rozdíly pro každý objekt revize ve větvi, na které se nacházíte, zjištěné rozdíly se uloží do dočasných souborů, aktuální větev se nastaví na stejný bod jako větev, na kterou přeskládáváte, a nakonec postupně aplikují všechny změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's also a good idea to use the imperative present tense in these messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160114T125942Z" creationid="Prikryl" creationdate="20160114T125903Z">
        <seg>Doporučuje se také, aby se pro zápis zpráv používal rozkazovací způsob.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's also common to add a `last` command, like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143458Z" creationid="Prikryl" creationdate="20151107T143458Z">
        <seg>Běžně se také přidává příkaz `last`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's been a great pleasure and privilege to work on this book.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T151630Z" creationid="Prikryl" creationdate="20151026T151537Z">
        <seg>Bylo mi velkým potěšením a poctou, že jsem se mohl prací na této knize zúčastnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's been amazing to watch Git grow over the past few years from a relatively obscure version control system to basically dominating commercial and open source version control.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T105027Z" creationid="Prikryl" creationdate="20151026T144613Z">
        <seg>Bylo úžasné pozorovat, jak během několika minulých let Git vyrostl z poměrně obskurního systému v systém pro správu verzí, který v podstatě dominuje vývoji v oblasti komerční i v oblasti Open Source.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's best to have a clean working state when you switch branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T212300Z" creationid="Prikryl" creationdate="20151111T212300Z">
        <seg>Nejlepší je, když máte při přepínání větví čistý pracovní stav.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's easiest to push the topic branch you're working on up to your repository, rather than merging into your master branch and pushing that up.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T192414Z" creationid="Prikryl" creationdate="20160121T192414Z">
        <seg>Lepší bude, když do repozitáře odešlete svou tématickou větev (v které pracujete) než abyste výsledek začlenili (merge) do své větve `master` a odesílali tuto větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's generally a little clearer what the latest version is on the GitHub page, but the kernel.org page also has release signatures if you want to verify your download.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T103705Z" creationid="Prikryl" creationdate="20151028T103142Z">
        <seg>Na stránce GitHub se dá trochu líp poznat, co je poslední verze, ale pokud si chcete stažený archiv zkontrolovat, naleznete na stránce kernel.org navíc k archivu i podpisy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's generally easier to think about them as work silos, where sets of commits graduate to a more stable silo when they're fully tested.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T140351Z" creationid="Prikryl" creationdate="20151209T140351Z">
        <seg>Většinou je jednodušší uvažovat o větvích jako o pracovních zásobnících, kdy sada revizí postupuje do stabilnějšího zásobníku až po úplném otestování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don't want to keep the other information, lightweight tags are available too.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150001Z" creationid="Prikryl" creationdate="20151107T150001Z">
        <seg>Obecně se doporučuje používat v zájmu úplnosti informací spíše anotované značky. Pokud však vytváříte pouze dočasnou značku nebo z nějakého důvodu nechcete zadávat podrobnější informace, můžete využívat i prosté značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T230653Z" creationid="Prikryl" creationdate="20160109T230653Z">
        <seg>Většinou se používá u obřích projektů se stovkami spolupracovníků. Možná nejznámějším příkladem je vývoj jádra Linuxu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T092604Z" creationid="Prikryl" creationdate="20151030T092604Z">
        <seg>Důležité je to, že `git diff` sám o sobě nezobrazí všechny změny provedené od poslední revize, ale jen změny, které zatím nejsou připraveny k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's important to note that the `git fetch` command pulls the data to your local repository – it doesn't automatically merge it with any of your work or modify what you're currently working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T171416Z" creationid="Prikryl" creationdate="20151101T171347Z">
        <seg>Měli bychom zmínit, že příkaz `fetch` stáhne data do vašeho lokálního repozitáře. Neprovede ale automatické sloučení (merge) s vaší prací, ani nezmění nic z toho, na čem právě pracujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's important to note that these numbers are only since the last time you fetched from each server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T220111Z" creationid="Prikryl" creationdate="20151213T220111Z">
        <seg>Měli bychom poznamenat, že tato čísla se vztahují k poslednímu času, kdy jsme z každého serveru vyzvedli data (fetch).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's important to note that when you do a fetch that brings down new remote-tracking branches, you don't automatically have local, editable copies of them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T102844Z" creationid="Prikryl" creationdate="20151210T144346Z">
        <seg>Tady je důležité upozornit, že pokud provedete vyzvednutí (fetch), které získá i nové vzdáleně sledované větve, nezískáváte automaticky i jejich lokální, editovatelné kopie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's important to remember when you're doing all this that these branches are completely local.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T190413Z" creationid="Prikryl" creationdate="20151209T190413Z">
        <seg>Při tom všem, co nyní děláte, je důležité mít na paměti, že všechny tyto větve jsou zcela lokální.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's incredibly fast, it's very efficient with large projects, and it has an incredible branching system for non-linear development (See &lt;&lt;_git_branching&gt;&gt;).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T112251Z" creationid="Prikryl" creationdate="20151027T073640Z">
        <seg>Je extrémně rychlý, velmi efektivně pracuje s velkými projekty a nabízí skvělý systém větvení pro nelineární způsob vývoje (viz kapitola &lt;&lt;_git_branching&gt;&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's now time to learn some Git basics.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T174318Z" creationid="Prikryl" creationdate="20151026T174244Z">
        <seg>Nastal čas, abychom se naučili základům práce s Gitem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why they rebased in the first place.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T142848Z" creationid="Prikryl" creationdate="20151214T142848Z">
        <seg>Dá se předpokládat, že druhý vývojář nechtěl, aby byly `C4` a `C6` součástí historie. To je důvodem, proč přeskládání vůbec prováděl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's sometimes referred to as the ``index'', but it's also common to refer to it as the staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T121018Z" creationid="Prikryl" creationdate="20151027T120826Z">
        <seg>Někdy se setkáme s označením „index“, ale běžně se používá i pojem oblast připravených změn (staging area).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's used to pull in topic branches (short-lived branches, like your earlier `iss53` branch) when they're ready, to make sure they pass all the tests and don't introduce bugs.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T092004Z" creationid="Prikryl" creationdate="20151209T092004Z">
        <seg>Do ní se vtahují tématické větve (ty dočasné, jako byla dřívější větev `iss53`) jakmile jsou připravené -- abychom zajistili, že projdou všemi testy a nezavlečou chyby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's worth mentioning that this changes your remote branch names, too.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131956Z" creationid="Prikryl" creationdate="20151107T131956Z">
        <seg>Za zmínku stojí, že tím změníte také názvy vzdálených větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's worth noting here that the work you did in your `hotfix` branch is not contained in the files in your `iss53` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152522Z" creationid="Prikryl" creationdate="20151115T152522Z">
        <seg>Za zmínku stojí, že práce, kterou jste udělali ve větvi `hotfix`, není obsažena v souborech ve větvi `iss53`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It's worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than older tools like CVS or Subversion (before version 1.5), where the developer doing the merge had to figure out the best merge base for themselves.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T155234Z" creationid="Prikryl" creationdate="20151115T155234Z">
        <seg>Za zmínku stojí, že Git určí nejlepšího společného předka, jako základ pro slučování. Tím se liší od starších nástrojů jako CVS nebo Subversion (před verzí 1.5), kde si musel nejlepší základ pro slučování určit sám vývojář, který sloučení prováděl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also possible for Git to stage certain parts of files and not the rest.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git také může připravit k zapsání pouze určité části souborů a ignorovat jejich zbytek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also possible to take a series of commits and squash them down into a single commit with the interactive rebasing tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další možností, jak lze využít interaktivního nástroje přeskládání, je komprimace série revizí do jediné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s generally a good idea to do this in a testing branch and then hard-reset your master branch after you’ve determined the outcome is what you really want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou se vyplatí provádět toto všechno v testovací větvi a k tvrdému resetu hlavní větve přistoupit až poté, co se ujistíte, že výsledek odpovídá vašim očekáváním.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that these commits are listed in the opposite order than you normally see them using the `log` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady bychom chtěli upozornit, že revize jsou uvedeny v opačném pořadí, než jste zvyklí v případě příkazu `log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that this file is version-controlled with your other files, like your `.gitignore` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za zmínku stojí, že je tento soubor verzován spolu s ostatními soubory, podobně jako třeba soubor `.gitignore`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s pushed and pulled with the rest of your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor se odesílá a stahuje se zbytkem projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica Smith (2):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T200013Z" creationid="Prikryl" creationdate="20160121T200013Z">
        <seg>Jessica Smith (2):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica can now merge this into the work she did with `git merge`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112318Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní může Jessica začlenit tyto změny do své práce příkazem `git merge`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica doesn't have push access to the `master` branch – only the integrators do – so she has to push to another branch in order to collaborate with John:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111732Z" creationid="Prikryl" creationdate="20160118T111732Z">
        <seg>Jessica nemá oprávnění pro odesílání dat (push) do větve `master` (ten mají pouze integrátoři), takže aby mohla s Johnem spolupracovat, musí své revize odeslat do jiné větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica emails John to tell him that she's pushed some work into a branch named `featureA` and he can look at it now.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111829Z" creationid="Prikryl" creationdate="20160118T111829Z">
        <seg>Jessica e-mailem Johnovi sdělí, že odeslala svou práci do větve pojmenované `featureA` a že se na ni může podívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica first needs to merge those changes in with her own before she can push to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Než bude Jessica moci odeslat svou práci na server, bude do ní nejprve muset začlenit práci Josie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica thinks her topic branch is ready, but she wants to know what she has to merge into her work so that she can push.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145926Z" creationid="Prikryl" creationdate="20160115T145926Z">
        <seg>Jessica považuje svou tématickou větev za dokončenou, ale chce zjistit, co by měla do své práce začlenit, aby ji mohla odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica wants to sync up with John, so she fetches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica chce synchronizovat svou práci s Johnem, a proto vyzvedne jeho data:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica wants to tweak something, so she commits again and then pushes this back up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica by ráda něco vylepšila, a proto vytvoří novou revizi a odešle ji zpět na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica's commit history now looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113436Z" creationid="Prikryl" creationdate="20160118T113436Z">
        <seg>Historie revizí Jessicy bude nyní vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica's history now looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145737Z" creationid="Prikryl" creationdate="20160115T145737Z">
        <seg>Historie revizí Jessicy teď vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica's repository looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111949Z" creationid="Prikryl" creationdate="20160118T111949Z">
        <seg>Jessičin repozitář vypadá nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica, Josie, and John inform the integrators that the `featureA` and `featureBee` branches on the server are ready for integration into the mainline.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113615Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica, Josie a John pošlou zprávu integrátorům, že větve `featureA` a `featureBee` jsou na serveru připraveny k integraci do hlavní linie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John Smith (1):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T195945Z" creationid="Prikryl" creationdate="20160121T195945Z">
        <seg>John Smith (1):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John finishes his change and pushes it to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T153640Z" creationid="Prikryl" creationdate="20160109T153640Z">
        <seg>John dokončí své úpravy a odešle je na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John has a reference to the changes Jessica pushed up, but he has to merge them into his own work before he is allowed to push:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144838Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John má k dispozici odkaz na změny, které odeslala Jessica, ale než bude moci sám odeslat svá data, bude muset začlenit její práci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John has to fetch Jessica's changes and merge them in before he will be allowed to push:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144458Z" creationid="Prikryl" creationdate="20160115T144458Z">
        <seg>John musí vyzvednout (fetch) změny, které provedla Jessica, a začlenit je (merge) do své práce. Teprve potom mu bude umožněno je odeslat (push):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John isn't allowed to push because Jessica has pushed in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143430Z" creationid="Prikryl" creationdate="20160115T143430Z">
        <seg>John nemá povoleno odeslat změny, protože mezitím odeslala své změny Jessica.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John tries to push his change up, too:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také John se pokusí odeslat své změny na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just go to http://git-scm.com/download/win[] and the download will start automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T235453Z" creationid="Prikryl" creationdate="20151027T235453Z">
        <seg>Skočte na stránku http://git-scm.com/download/win[] a stahování se zahájí automaticky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just type `git tag`:(((git commands, tag)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145014Z" creationid="Prikryl" creationdate="20151107T145014Z">
        <seg>Napište `git tag`:(((git příkazy, tag)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>LICENSE.txt
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T131230Z" creationid="Prikryl" creationdate="20151029T131230Z">
        <seg>LICENSE.txt
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Last, we'll go over a few hosted options, if you don't mind hosting your code on someone else's server and don't want to go through the hassle of setting up and maintaining your own server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T143620Z" creationid="Prikryl" creationdate="20151218T143620Z">
        <seg>Nakonec se podíváme na několik možností hostování -- pokud vám nevadí, že máte kód umístěný na cizím serveru, a nechcete se otravovat s nastavováním a údržbou svého vlastního serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Lastly, you have this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A na konci stojí následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's change a file that was already tracked.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120746Z" creationid="Prikryl" creationdate="20151029T120746Z">
        <seg>Nyní provedeme změny v souboru, který už byl sledován.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's create a hotfix branch on which to work until it's completed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T213955Z" creationid="Prikryl" creationdate="20151111T213955Z">
        <seg>Vytvořme si pro ni větev, na níž budeme pracovat, dokud nebude oprava hotová:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's do what it says:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215815Z" creationid="Prikryl" creationdate="20151106T215815Z">
        <seg>Uděláme, co nám radí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's follow Jessica's workflow as she works on her two features, collaborating in parallel with two different developers in this environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111205Z" creationid="Prikryl" creationdate="20160118T111205Z">
        <seg>Sledujme pracovní postup Jessicy pracující na dvou úkolech a spolupracující v tomto prostředí paralelně s dvěma různými vývojáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's go through a simple example of branching and merging with a workflow that you might use in the real world.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152607Z" creationid="Prikryl" creationdate="20151111T152430Z">
        <seg>Proberme si jednoduchý příklad větvení a slučování s pracovním postupem, který můžete využít i v reálném životě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's look at an example of how rebasing work that you've made public can cause problems.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T135019Z" creationid="Prikryl" creationdate="20151214T135019Z">
        <seg>Podívejme se na příklad toho, jaké problémy může přeskládání již zveřejněných dat způsobit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's look at one more possible scenario: the maintainer has looked at work in your second branch and likes the concept but would like you to change an implementation detail.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T185359Z" creationid="Prikryl" creationdate="20160122T185359Z">
        <seg>Podívejme se na ještě jeden možný scénář: Správce se podíval na práci ve vaší druhé větvi a tento koncept se mu líbí, ale rád by, abyste změnili jeden implementační detail.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's make a few changes and commit again:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170042Z" creationid="Prikryl" creationdate="20151108T170042Z">
        <seg>Proveďme pár změn a zapišme další revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's say that John and Jessica are working together on one feature, while Jessica and Josie are working on a second.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T110916Z" creationid="Prikryl" creationdate="20160118T110916Z">
        <seg>Řekněme, že John a Jessica spolupracují na jednom úkolu, zatímco Jessica a Josie pracují na jiném.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's say the project maintainer has pulled in a bunch of other patches and tried your first branch, but it no longer cleanly merges.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T183800Z" creationid="Prikryl" creationdate="20160122T183800Z">
        <seg>Řekněme, že správce projektu vtáhl do projektu několik jiných záplat a vyzkoušel vaši první větev, ale ta už se nedá začlenit čistě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's say you add a new file to your project, a simple README file.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110803Z" creationid="Prikryl" creationdate="20151029T110803Z">
        <seg>Řekněme, že nyní přidáte do projektu nový soubor, například soubor `README`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's say you create a new branch called testing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150950Z" creationid="Prikryl" creationdate="20151108T150950Z">
        <seg>Řekněme, že vytvoříte novou větev a nazvete ji testing.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's say you decide to pull in your server branch as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T130526Z" creationid="Prikryl" creationdate="20151214T130526Z">
        <seg>Řekněme, že se později rozhodnete vtáhnout i větev `server`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091441Z" creationid="Prikryl" creationdate="20151030T091441Z">
        <seg>Řekněme, že znovu upravíte a připravíte soubor `README` a poté upravíte soubor `CONTRIBUTING.md`, ale nepřipravíte jej k zápisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's say you have a Git server on your network at `git.ourcompany.com`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T104837Z" creationid="Prikryl" creationdate="20151210T104837Z">
        <seg>Řekněme, že máte v síti gitový server označený `git.ourcompany.com`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's see what it might look like when two developers start to work together with a shared repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142725Z" creationid="Prikryl" creationdate="20160115T142725Z">
        <seg>Podívejme se, jak to může vypadat, když dva vývojáři začnou spolupracovat na projektu se sdíleným repozitářem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's see why you should do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T173457Z" creationid="Prikryl" creationdate="20151108T173457Z">
        <seg>Podívejme se, proč byste to měli dělat také tak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let's switch back to the `master` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164729Z" creationid="Prikryl" creationdate="20151108T164729Z">
        <seg>Přepněme zpět na větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you just pushed out a release of your code to a production environment, you’re getting bug reports about something that wasn’t happening in your development environment, and you can’t imagine why the code is doing that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že jste právě odeslali vydání svého zdrojového kódu do produkčního prostředí, ale dostanete hlášení o chybě, která se ve vašem vývojovém prostředí nevyskytovala, a nemáte tušení, proč kód takto zlobí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Lieutenants merge the developers' topic branches into their `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T232556Z" creationid="Prikryl" creationdate="20160109T232556Z">
        <seg>Poručíci začleňují (merge) tématické větve vývojářů do svých větví `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Limit log functionality to the first 20</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221010Z" creationid="Prikryl" creationdate="20151023T221010Z">
        <seg>Limit log functionality to the first 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Lines starting
# with '#' will be ignored, and an empty message aborts the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T222108Z" creationid="Prikryl" creationdate="20151031T222108Z">
        <seg>Lines starting
# with '#' will be ignored, and an empty message aborts the commit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Listing the available tags in Git is straightforward.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pořízení výpisu dostupných značek (tags) je v systému Git jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T185942Z" creationid="Prikryl" creationdate="20151026T185942Z">
        <seg>Lokální systémy pro správu verzí trpí stejným problémem. Kdykoliv máte celou historii projektu uloženou na jednom místě, riskujete, že přijdete o vše.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local branch configured for 'git pull':</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121536Z" creationid="Prikryl" creationdate="20151107T121536Z">
        <seg>Local branch configured for 'git pull':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local branches configured for 'git pull':</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131339Z" creationid="Prikryl" creationdate="20151107T131339Z">
        <seg>Local branches configured for 'git pull':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local ref configured for 'git push':</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121541Z" creationid="Prikryl" creationdate="20151107T121541Z">
        <seg>Local ref configured for 'git push':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local refs configured for 'git push':</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131347Z" creationid="Prikryl" creationdate="20151107T131347Z">
        <seg>Local refs configured for 'git push':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Looking at your Git status again, you can see that you’ve unstaged the TODO file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se nyní znovu podíváte na stav Git souboru TODO, uvidíte, že už není připraven k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Love it or hate it, GitHub has heavily changed large swaths of the Open Source community in a way that was barely conceivable when I sat down to write the first edition.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T142634Z" creationid="Prikryl" creationdate="20151026T142634Z">
        <seg>Ať už se vám to líbí nebo ne, GitHub významně ovlivnil Open Source komunitu způsobem, který byl v době psaní prvního vydání stěží představitelný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Luckily, Git provides a tool to help you send properly formatted patches via IMAP, which may be easier for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git naštěstí nabízí nástroj, který vám pomůže odeslat správně formátované patche pomocí protokolu IMAP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Luckily, `git status` tells you how to do that, too.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215618Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git status` vám naštěstí i tentokrát řekne, co dělat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
??</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T222039Z" creationid="Prikryl" creationdate="20151031T222039Z">
        <seg>M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
??</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T163755Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při správě vzdálených repozitářů musíte vědět, jak lze přidat vzdálený repozitář, jak odstranit vzdálený repozitář, který už není platný, jak spravovat různé vzdálené větve, jak je určit jako sledované či nesledované a další věci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their `master` branch – possibly only code that has been or will be released.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T091230Z" creationid="Prikryl" creationdate="20151209T091230Z">
        <seg>Řada vývojářů, kteří Git používají, si tento přístup osvojila, takže například ve větvi `master` uchovávají kód, který je zcela stabilní -- kód, který byl nebo bude součástí zveřejněné verze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many groups switch to Git because of this ability to have multiple teams working in parallel, merging the different lines of work late in the process.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T145436Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mnoho skupin přechází na Git právě kvůli této možnosti paralelní spolupráce několika týmů a následného slučování různých linií práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many hosting sites support this (including GitHub, BitBucket, Google Code, repo.or.cz, and others), and many project maintainers expect this style of contribution.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T184648Z" creationid="Prikryl" creationdate="20160121T184457Z">
        <seg>Tento mechanismus podporuje řada hostitelských serverů (včetně GitHub, BitBucket, Google Code, repo.or.cz a dalších) a řada správců projektů takový styl přispívání očekává.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many of the GUI tools will help you do this when you first run them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T132836Z" creationid="Prikryl" creationdate="20151028T111117Z">
        <seg>Mnohé nástroje s grafickým uživatelským rozhraním vám s nastavením při prvním spuštění pomohou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many times, when working with Git, you may want to revise your commit history for some reason.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při práci se systémem Git možná budete z nějakého důvodu čas od času potřebovat poopravit historii revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Merge branch 'experiment'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101853Z" creationid="Prikryl" creationdate="20151023T101853Z">
        <seg>Merge branch 'experiment'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Merge commit 'phedders/rdocs'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221525Z" creationid="Prikryl" creationdate="20151023T221525Z">
        <seg>Merge commit 'phedders/rdocs'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Minor fixes since 1.4.2, including git-mv and git-http with alternates.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101921Z" creationid="Prikryl" creationdate="20151023T101921Z">
        <seg>Minor fixes since 1.4.2, including git-mv and git-http with alternates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Modified means that you have changed the file but have not committed it to your database yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Změněno znamená, že v souboru byly provedeny změny, avšak soubor ještě nebyl zapsán do databáze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>More detailed explanatory text, if necessary.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160114T153230Z" creationid="Prikryl" creationdate="20151023T215518Z">
        <seg>Podrobnější vysvětlující text, pokud je třeba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T105619Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Důležitější je, že můžete použít jakýkoli způsob přejmenování a později, před zapsáním revize, provést příkaz `add`/`rm`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most of the examples in the book have been changed to HTTP from SSH because it's so much simpler.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T144301Z" creationid="Prikryl" creationdate="20151026T144301Z">
        <seg>Většina příkladů v knize byla změněna z použití SSH na použití HTTP, protože je to mnohem jednodušší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most of the time, this command does nothing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve většině případů neprovede tento příkaz vůbec nic.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most operations in Git only need local files and resources to operate – generally no information is needed from another computer on your network.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T092523Z" creationid="Prikryl" creationdate="20151027T092523Z">
        <seg>Většina operací v systému Git vyžaduje ke své činnosti pouze lokální soubory a zdroje. Obecně platí, že informace z jiných počítačů v síti nejsou potřebné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Much as the `git svn log` command simulates the `svn log` command offline, you can get the equivalent of `svn annotate` by running `git svn blame [FILE]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tak jako příkaz `git svn log` simuluje příkaz `svn log` (bez nutnosti připojení), ekvivalentem příkazu `svn annotate` je provedení `git svn blame [SOUBOR]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Name this remote `teamone`, which will be your shortname for that whole URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110026Z" creationid="Prikryl" creationdate="20151210T122711Z">
        <seg>Pojmenujte tento vzdálený repozitář jako `teamone`, což bude zkrácený název pro celou URL adresu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Nevertheless, a more common way is to take advantage of remote-tracking branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T102042Z" creationid="Prikryl" creationdate="20151210T093430Z">
        <seg>Nicméně, běžnější bývá využití vzdáleně sledovaných větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>New files that aren't tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T133536Z" creationid="Prikryl" creationdate="20151029T133536Z">
        <seg>Před novými soubory, které nejsou sledované se zobrazuje `??`, před novými soubory, které byly přidány do oblasti připravených k zapsání se zobrazuje `A`, před upravenými soubory se zobrazuje `M` (jako modified) atd.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next we can see that our `serverfix` branch is tracking the `server-fix-good` branch on our `teamone` server and is ahead by three and behind by one, meaning that there is one commit on the server we haven't merged in yet and three commits locally that we haven't pushed.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132558Z" creationid="Prikryl" creationdate="20151213T215751Z">
        <seg>A dále vidíme, že naše větev `serverfix` sleduje větev `server-fix-good` na serveru `teamone`, má náskok tři a současně je pozadu o jeden, což znamená, že se na serveru nachází jeden objekt revize (commit), který jsme zatím nezačlenili (merge), a tři lokální objekty revize, které jsme zatím neodeslali (push).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, John emails Jessica to say he's pushed some changes to the `featureA` branch and asks her to verify them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113130Z" creationid="Prikryl" creationdate="20160118T113130Z">
        <seg>John poté pošle Jessice e-mail, aby jí sdělil, že odeslal několik změn do větve `featureA`, a poprosí ji, aby je ověřila.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, move the rest of the references under `refs/remotes` to be local branches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ze zbytku referencí vytvořte v repozitáři `refs/remotes` lokální větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T135645Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jenže osoba, která odeslala výsledek sloučení, se rozhodne vrátit zpět a svou práci raději přeskládat. Provede příkaz `git push --force` a přepíše historii na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, try to make each commit a logically separate changeset.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T124110Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále se snažte provádět každý zápis (commit) jako logicky oddělený soubor změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, we'll cover Git's killer feature: its branching model.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T204006Z" creationid="Prikryl" creationdate="20151028T204006Z">
        <seg>V další kapitole se podíváme na exkluzivní vlastnost Gitu -- na model větvení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, we'll cover what you'll need to run your own Git repository-hosting server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T134403Z" creationid="Prikryl" creationdate="20151108T134403Z">
        <seg>V další kapitole si řekneme, co budete potřebovat, abyste mohli provozovat svůj vlastní server pro hostování gitových repozitářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you have a hotfix to make.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T122231Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalším kroku máte provést opravu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you need to push your change upstream.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako další krok tak chcete odeslat provedené změny do vzdáleného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>No commit was completed in that instance.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě nebyla zapsána žádná revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>No problems occur; as you can see it was a simple fast-forward.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214115Z" creationid="Prikryl" creationdate="20160115T214115Z">
        <seg>Nevyskytly se žádné problémy. Jak vidíte, šlo o jednoduchý posun „rychle vpřed“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Normal merge conflict for 'index.html':</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T075225Z" creationid="Prikryl" creationdate="20151120T075225Z">
        <seg>Normal merge conflict for 'index.html':</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Normally, you get as the original commit the commit where you copied the code over, because that is the first time you touched those lines in this file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Normálně se jako původní revize zobrazí ta, kam jste kód zkopírovali, protože to bylo poprvé, kdy jste v daném souboru sáhli do těchto řádků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Not nearly as many configuration options are available for the server side of Git, but there are a few interesting ones you may want to take note of.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na straně serveru není ani zdaleka tolik parametrů konfigurace jako na straně klienta, avšak několik zajímavých si jistě zaslouží vaši pozornost.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Not only does the Author field look a lot better, but the `git-svn-id` is no longer there, either.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejenže teď pole Author vypadá podstatně lépe, ale navíc jste se zbavili i záznamu `git-svn-id`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that someone must shell onto the machine and create a bare repository every time you want to add a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že pokaždé, když chcete vytvořit projekt, musí se k počítači někdo přihlásit a vytvořit holý repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that the snapshot pointed to by the final commit you end up with, whether it's the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot – it's only the history that is different.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132257Z" creationid="Prikryl" creationdate="20151214T122348Z">
        <seg>Všimněte si, že snímek, na který ukazuje poslední objekt revize -- ať už se jedná o poslední revizi vzniklou přeskládáním, nebo poslední bod sloučení po provedení `merge` --, je shodný. Liší se pouze historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T151620Z" creationid="Prikryl" creationdate="20151108T151620Z">
        <seg>Poznamenejme, že tento koncept `HEAD` se velmi liší od těch, na které můžete být zvyklí z jiných systémů pro správu verzí, jako jsou Subversion nebo CVS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that this is a project called Git for Windows, which is separate from Git itself; for more information on it, go to https://git-for-windows.github.io/[].</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115453Z" creationid="Prikryl" creationdate="20151107T115453Z">
        <seg>Povšimněte si, že jde o projekt zvaný Git for Windows, který je od projektu Git oddělen. Více informací je uvedeno na stránce http://msysgit.github.io/[].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note the backslash (`\`) in front of the `*`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230216Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si zpětného lomítka (`\`) před znakem `*`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice how you don't have to run `git add` on the ``CONTRIBUTING.md'' file in this case before you commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224058Z" creationid="Prikryl" creationdate="20151031T224058Z">
        <seg>Povšimněte si, že kvůli souboru `CONTRIBUTING.md` v tomto případě nemusíte před zapsáním revize provádět příkaz `git add`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that the first field is the partial SHA-1 of the commit that last modified that line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že první pole je část hodnoty SHA-1 revize, v níž byl řádek naposled změněn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that the object entry points to the commit SHA-1 value that you tagged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že záznam objektu ukazuje na hodnotu revize SHA-1, k níž jste značku přidali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that these remotes use a variety of protocols; we'll cover more about this in &lt;&lt;_git_on_the_server&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T165757Z" creationid="Prikryl" creationdate="20151101T165757Z">
        <seg>Všimněte si, že tyto vzdálené repozitáře používají různé protokoly. Více se o tom zmíníme v kapitole &lt;&lt;_git_on_the_server&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that you have to tell the command where to find your Git repositories with the `GITWEB_PROJECTROOT` variable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že musíte příkazu pomocí proměnné `GITWEB_PROJECTROOT` sdělit, kde najde repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice the `*` character that prefixes the `master` branch: it indicates the branch that you currently have checked out (i.e., the branch that `HEAD` points to).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210115Z" creationid="Prikryl" creationdate="20151124T210115Z">
        <seg>Všimněte si znaku `*`, který je uveden před větví `master`. Označuje větev, na kterou jste přepnuti (check out; tj. větev, na kterou ukazuje `HEAD`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice the last line of the file, which begins with a `^`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si také posledního řádku souboru, který začíná znakem `^`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice the reverse order.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že se pořadí obrátilo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now Jessica merges in John's work (`origin/master`):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214131Z" creationid="Prikryl" creationdate="20160115T214131Z">
        <seg>Nyní Jessica začlení Johnovu práci (`origin/master`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now `CONTRIBUTING.md` is listed as both staged _and_ unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T125530Z" creationid="Prikryl" creationdate="20151029T125530Z">
        <seg>Soubor `CONTRIBUTING.md` je uveden jak v části připraveno k zapsání (Changes to be committed), tak v části nepřipraveno k zapsání (Changes not staged for commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now `origin/master` is reachable from Jessica's `master` branch, so she should be able to successfully push (assuming John hasn't pushed again in the meantime):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214556Z" creationid="Prikryl" creationdate="20160115T214556Z">
        <seg>Větev `origin/master` je dosažitelná z Jessičiny větve `master`, takže by měla být schopná práci úspěšně odeslat (za předpokladu, že John mezitím neodeslal další revizi):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now all the old branches are real Git branches and all the old tags are real Git tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny staré větve jsou nyní skutečnými větvemi Git a všechny staré značky jsou nyní skutečnými značkami Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now suppose you did that in a branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní předpokládejme, že toto vše se odehrálo ve větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you can (hopefully) determine which workflow combination may work for you, we'll cover some more specific examples of how to accomplish the main roles that make up the different flows.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T191023Z" creationid="Prikryl" creationdate="20160109T235902Z">
        <seg>Teď už si (snad) dokážete vybrat, jaká kombinace by vám mohla vyhovovat. Ukážeme si pár konkrétnějších příkladů toho, jak splnit hlavní role, které různé pracovní postupy vytvářejí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you can specify individual commits, let’s see how to specify ranges of commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když umíte určit jednotlivé revize, podíváme se, jak lze určovat celé intervaly revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have Git on your system, you'll want to do a few things to customize your Git environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T103932Z" creationid="Prikryl" creationdate="20151028T103932Z">
        <seg>Nyní, když máte Git nainstalovaný, budete chtít provést některá uživatelská nastavení jeho prostředí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have a Subversion repository to which you have write access, you can go through a typical workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte repozitář Subversion s oprávněním pro zápis, a proto se můžeme podívat na typický postup práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když máte vytvořenu holou kopii repozitáře, zbývá ji už jen umístit na server a nastavit protokoly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have a working repository, you can do some work on the project and push your commits back upstream, using Git effectively as a SVN client.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte vytvořen pracovní repozitář a můžete se pustit do práce na projektu. Časem ale budete chtít odeslat revize zpět do repozitáře a použít při tom Git jako klienta SVN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have an integer representation of your commit, you need a date for the commit metadata.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní jste označili revizi celým číslem a zbývá stanovit datum pro metadata revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have the basics of branching and merging down, what can or should you do with them?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151205T121847Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když už máte základy větvení a slučování za sebou, jak s nimi můžete -- nebo byste měli -- pracovat?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have the contents of your key in Git, you can create a tag that points directly to it by specifying the new SHA-1 value that the `hash-object` command gave you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte obsah svého klíče v systému Git a můžete vytvořit značku, která bude ukazovat přímo na něj. Zadejte proto novou hodnotu SHA-1, kterou jste získali příkazem `hash-object`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T211724Z" creationid="Prikryl" creationdate="20151214T211724Z">
        <seg>Když teď víte, jak oba přístupy fungují, je jen na vás, který z nich ve vaší konkrétní situaci zvolíte jako nejlepší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your filter is ready, you can test it by setting up a file with your `$Date$` keyword and then setting up a Git attribute for that file that engages the new filter:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když máte filtr hotový, můžete ho otestovat vytvořením souboru s klíčovým slovem `$Date$` a nastavením atributu Git pro tento soubor, jímž nový filtr aktivujete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste zadali své osobní údaje, můžete nastavit výchozí textový editor, který se použije, když po vás Git bude chtít napsat nějakou zprávu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your staging area is set up the way you want it, you can commit your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T172500Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste oblast připravených změn nastavili podle svých představ, můžete začít zapisovat změny (commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your work is merged in, you have no further need for the `iss53` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T155503Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste svou práci začlenili, nebudete už větev `iss53` potřebovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can fast-forward your `master` branch (see &lt;&lt;rbdiag_g&gt;&gt;):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T081653Z" creationid="Prikryl" creationdate="20151214T130244Z">
        <seg>Teď můžete větev `master` posunout „rychle vpřed“ (viz &lt;&lt;rbdiag_g, obrázek&gt;&gt;):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can look at your new commit object with `cat-file`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se můžete podívat na nově vytvořený objekt revize. Použijte příkaz `cat-file`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can revert the file back to the first version</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor nyní můžete vrátit do první verze:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can see how Git has stored your data:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se můžete podívat, jak Git vaše data uložil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can see that the TODO and index.html files are staged and the simplegit.rb file is still unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, soubory TODO a index.html jsou připraveny k zapsání, soubor simplegit.rb nikoli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can send the maintainer a message that you've made the requested changes and they can find those changes in your `featureBv2` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T195310Z" creationid="Prikryl" creationdate="20160122T195310Z">
        <seg>Teď už můžete správci zaslat zprávu, že jste provedli požadované změny a že je najde ve vaší větvi `featureBv2`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can set up your config file to use your custom merge resolution and diff tools.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete nastavit konfigurační soubor k používání vlastních nástrojů diff a nástrojů k řešení slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152337Z" creationid="Prikryl" creationdate="20151115T152337Z">
        <seg>Teď se můžete přepnout zpět na větev s rozdělanou prací a pokračovat na problému #53.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can use `git diff` to see what is still unstaged:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T093128Z" creationid="Prikryl" creationdate="20151107T120938Z">
        <seg>Příkazem `git diff` se teď můžete podívat, co ještě není připraveno k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can use the string `pb` on the command line in lieu of the whole URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řetězec `pb` nyní můžete používat na příkazovém řádku místo kompletní adresy URL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you get the call that there is an issue with the web site, and you need to fix it immediately.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku vám zavolají, že se na webových stránkách vyskytl problém, který musíte okamžitě vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you should have a nicer Subversion import in your `my_project` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Import ze systému Subversion v adresáři `my_project` by měl nyní vypadat o něco lépe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you want to switch branches, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní chcete přepnout na jinou větev, ale nechcete zapsat změny, na nichž jste dosud pracovali – proto změny odložíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you're both in a pickle.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T140011Z" creationid="Prikryl" creationdate="20151214T140011Z">
        <seg>Teď jste oba v loji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you've created your first commit!</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223033Z" creationid="Prikryl" creationdate="20151031T223033Z">
        <seg>Nyní jste vytvořili svou první revizi!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your new project root is what was in the `trunk` subdirectory each time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaším nový kořenovým adresářem je nyní obsah podadresáře `trunk`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your project history has diverged (see &lt;&lt;divergent_history&gt;&gt;).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170128Z" creationid="Prikryl" creationdate="20151108T170128Z">
        <seg>Nyní se historie vašeho projektu rozdělila (viz obrázek &lt;&lt;divergent_history&gt;&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’ll explore a number of very powerful things that Git can do that you may not necessarily use on a day-to-day basis but that you may need at some point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní poznáte několik velmi účinných nástrojů, které vám Git nabízí. Pravděpodobně je nebudete používat každý den, ale přesto se vám mohou čas od času hodit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’re on another commit, halfway between the one you just tested and your bad commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní jste na jiné revizi, na půl cesty mezi revizí, kterou jste právě otestovali, a problémovou revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Git will use the KDiff3 tool for diff viewing and merge conflict resolution.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git bude nyní k zobrazení výstupů nástoje diff a k řešení konfliktů při slučování používat nástroj KDiff3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Jessica can merge her topic work into her master branch, merge John's work (`origin/master`) into her `master` branch, and then push back to the server again.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T212251Z" creationid="Prikryl" creationdate="20160115T212251Z">
        <seg>Teď může Jessica začlenit (merge) svou tématickou větev do své větve `master`, začlenit Johnovu práci (`origin/master`) rovněž do své větve `master` a potom vše může odeslat (push) znovu na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Jessica makes a couple of commits on the `featureB` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica nyní vytvoří několik revizí ve větvi `featureB`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Jessica pushes her work up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143121Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica teď odešle (push) svou práci na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, John can test his code to make sure it still works properly, and then he can push his new merged work up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145139Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď může John svůj kód otestovat, aby se ujistil, že stále pracuje správně, a pak může odeslat svou novou sloučenou práci na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, all your work is on top of what is on the Subversion server, so you can successfully `dcommit`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní je všechna vaše práce na vrcholu revizí, které jsou na serveru Subversion. Příkaz `dcommit` bude nyní úspěšně proveden:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, each of your topics is contained within a silo – similar to a patch queue – that you can rewrite, rebase, and modify without the topics interfering or interdepending on each other, like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T201844Z" creationid="Prikryl" creationdate="20160121T201844Z">
        <seg>Teď je každé z vašich témat obsaženo v samostatném zásobníku -- podobá se frontě záplat -- a můžete je přepsat, přeskládat a upravit, aniž by se obě témata navzájem ovlivňovala nebo by se mezi nimi vytvářela vzájemná závislost, viz obrázek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, if you want to merge your `opera` branch into `trunk` (your `master` branch), you can do so with a normal `git merge`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li nyní chtít začlenit větev `opera` do větve `trunk` (vaše větev `master`), můžete tak učinit běžným příkazem `git merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, let's say you decide you like the second solution to your issue best (`iss91v2`); and you showed the `dumbidea` branch to your coworkers, and it turns out to be genius.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T185343Z" creationid="Prikryl" creationdate="20151209T185343Z">
        <seg>Řekněme, že se nyní rozhodnete, že se vám druhé řešení problému líbí víc (`iss91v2`). Svůj nápad ve větvi `dumbidea` jste ukázali kolegům a ti ho považují za geniální.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, modify that file a little, and see what happens:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní soubor trochu upravíme a uvidíme, co se stane:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, move the `master` branch back to the middle commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní vrátíme větev `master` zpět na prostřední revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, pay attention.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>A nyní pozor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, run the `cat-file` command on that SHA-1 value:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní pro tuto hodnotu SHA-1 spusťte příkaz `cat-file`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, someone else does more work that includes a merge, and pushes that work to the central server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T142338Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdo jiný teď provede další úpravy, jejichž součástí bude i sloučení (merge), a odešle svou práci na centrální server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, store some text in your Git database:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete uložit kousek textu do databáze Git:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, suppose you forgot to tag the project at v1.2, which was at the ``updated rakefile'' commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224152Z" creationid="Prikryl" creationdate="20151107T224152Z">
        <seg>Nyní předpokládejme, že jste zapomněli označkovat projekt verze 1.2, který je zachycen revizí se zprávou „updated rakefile“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, the snapshot pointed to by `C4'` is exactly the same as the one that was pointed to by `C5` in the merge example.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T112715Z" creationid="Prikryl" creationdate="20151214T112715Z">
        <seg>Snímek, na který odkazuje `C4'`, je v tomto okamžiku přesně stejný, jako ten, na který u příkladu využívajícího slučování odkazoval `C5`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T211059Z" creationid="Prikryl" creationdate="20151214T211059Z">
        <seg>A teď zpět k otázce, zda je lepší slučování nebo přeskládání. Vidíte, doufám, že to není tak jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, when someone else clones or pulls from your repository, they will get all your tags as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nyní někdo bude klonovat nebo stahovat z vašeho repozitáře, stáhne rovněž všechny vaše značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, years later, I'm a contributor to a major Git implementation, I've worked for the largest Git hosting company, and I've traveled the world teaching people about Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T151318Z" creationid="Prikryl" creationdate="20151026T151318Z">
        <seg>A teď, po několika letech, jsem přispěvatelem hlavní implementace systému Git, pracoval jsem pro největší společnost hostující Git a procestoval jsem svět, abych Git naučil další lidi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can add content to Git and pull it back out again.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní tedy umíte vložit do systému Git určitý obsah a ten poté zase vytáhnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can run `git fetch teamone` to fetch everything the remote `teamone` server has that you don't have yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110104Z" creationid="Prikryl" creationdate="20151210T122838Z">
        <seg>Nyní můžete spustit příkaz `git fetch teamone`, který ze vzdáleného repozitáře `teamone` vyzvedne vše, co ještě nemáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can run `git log` to see your new history:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní si můžete nechat příkazem `git log` zobrazit svoji novou historii:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can sign tags without having to specify your key every time with the `git tag` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete podepisovat značky, aniž byste museli pokaždé znovu zadávat svůj klíč příkazem `git tag`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can use the `write-tree` command to write the staging area out to a tree object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete použít příkaz `write-tree`, jímž zapíšete stav oblasti připravovaných změn neboli indexu do objektu stromu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can use the head reference you just created instead of the SHA-1 value in your Git commands:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete v příkazech Git používat „head“ referenci, kterou jste právě vytvořili, místo hodnoty SHA-1:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you need to make Apache use CGI for that script, for which you can add a VirtualHost:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní musíte zajistit, aby server Apache používal CGI pro skript, pro který můžete přidat VirtualHost:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you need to remove this file from all trees in your past.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní potřebujete odstranit tento soubor ze všech minulých stromů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you need to set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter to smudge the files on checkout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní budete muset nastavit filtr v systému Git (pojmenujte ho `dater`) a určit, aby k operaci smudge při checkoutu souborů používal filtr `expand_date`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, your local branch `sf` will automatically pull from `origin/serverfix`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T114148Z" creationid="Prikryl" creationdate="20151213T114148Z">
        <seg>Vaše lokální větev `sf` nyní bude automaticky stahovat data (pull) z `origin/serverfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Oddly enough, you have a real Git history now that you can view with the `git log` command, if you run it on the last commit SHA-1:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se to zdát zvláštní, ale nyní máte vytvořenu skutečnou historii revizí Git, kterou lze zobrazit příkazem `git log` spuštěným pro hodnotu SHA-1 poslední revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Of course if you do this and do a commit, your `version2` branch will be slightly different than your `v2.0.0` tag since it will move forward with your new changes, so do be careful.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T144731Z" creationid="Prikryl" creationdate="20151108T111530Z">
        <seg>Je jasné, že když teď zapíšete nějakou změnu, vaše větev `version2` se bude od snímku se značkou `v2.0.0` lišit, protože vás nové změny posunou dál. Takže buďte opatrní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151105T152732Z" creationid="Prikryl" creationdate="20151104T214103Z">
        <seg>Z téměř 40 tisíc revizí v historii zdrojového kódu Gitu zobrazí příkaz 6 záznamů, které odpovídají zadaným kritériím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, the quickest way is to use a tool called `git reflog`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejrychlejší cestou často bývá použít nástroj `git reflog`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, when you’ve been working on part of your project, things are in a messy state and you want to switch branches for a bit to work on something else.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až budete pracovat na některé části svého projektu, často vám může připadat, že je vaše práce poněkud neuspořádaná a vy budete třeba chtít přepnout větve a pracovat na chvíli na něčem jiném.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, you'll do this to make sure your commits apply cleanly on a remote branch – perhaps in a project to which you're trying to contribute but that you don't maintain.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T121652Z" creationid="Prikryl" creationdate="20151214T121652Z">
        <seg>Tuto metodu budete často používat v situaci, kdy chcete mít jistotu, že byly na vzdálenou větev vaše změny aplikovány čistě -- například u projektu, do kterého chcete přispět, ale který nespravujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, you'll have a class of files that you don't want Git to automatically add or even show you as being untracked.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T175308Z" creationid="Prikryl" creationdate="20151029T175308Z">
        <seg>Ve vašem adresáři se často vyskytne skupina souborů, u nichž nebudete chtít, aby je Git automaticky přidával nebo aby je vůbec uváděl jako nesledované.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On Linux machines, `lighttpd` is often installed, so you may be able to get it to run by typing `git instaweb` in your project directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V počítačích se systémem Linux je často nainstalován `lighttpd`. Spustit ho lze zadáním příkazu `git instaweb` v adresáři vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T124350Z" creationid="Prikryl" creationdate="20151028T110457Z">
        <seg>Ve Windows se soubor `.gitconfig` hledá v adresáři `$HOME`{empty}footnote:[Pozn. překl.: V proměnných prostředí Windows je to `%USERPROFILE%`. Zápis `$HOME` odkazuje na odpovídající údaj v unixových systémech.] (u většiny uživatelů je to `C:\Users\$USER`{empty}footnote:[Pozn. překl.: Ve Windows odpovídá odkazu na unixovskou proměnnou `$USER` odkaz na proměnnou prostředí `%USERNAME%`]).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On a project for which you're not the maintainer, it's generally easier to have a branch like `master` always track `origin/master` and to do your work in topic branches that you can easily discard if they're rejected.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T200802Z" creationid="Prikryl" creationdate="20160121T200802Z">
        <seg>U projektů, kde nevystupujete jako správce, je většinou jednodušší, aby vaše větev `master` stále sledovala větev `origin/master` a abyste práci prováděli v tématických větvích, které můžete v případě odmítnutí snadno odstranit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On a x86 system
[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession" 
----
On a x64 system
[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession" 
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T125252Z" creationid="Prikryl" creationdate="20151107T114608Z">
        <seg>Na 32bitovém systému
[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession" 
----
Na 64bitovém systému
[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession" 
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On the ACL file you looked at earlier, this `get_acl_access_data` method returns a data structure that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V kombinaci se souborem ACL, který jsme si ukázali před chvílí, poskytne tato metoda `get_acl_access_data` datovou strukturu v této podobě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On the command line, you can pull down several branches like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Několik větví můžete přímo z příkazového řádku stáhnout například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Once you’re satisfied with your changes, run</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222754Z" creationid="Prikryl" creationdate="20151023T222754Z">
        <seg>Jakmile jste s vašimi změnami spokojeni, spusťte</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One caveat is that it expects you to be running locally as the same user you push as to the remote machine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je však třeba upozornit, že skript očekává, že lokálně pracujete v roli stejného uživatele jako odesíláte data na vzdálený server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One central hub, or repository, can accept code, and everyone synchronizes their work to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedno centrální úložiště (hub) nebo repozitář přijímá zdrojový kód a každý podle něj synchronizuje svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213007Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jeden z běžných důvodů pro vracení úprav nastane, když zapíšete revizi příliš brzy a například jste zapomněli přidat některé soubory, nebo jste něco popletli ve zprávě k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the great things about Git is that it allows you to make decisions at the last possible moment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou ze skvělých možností, které vám Git nabízí, jsou rozhodnutí na poslední chvíli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the interesting features of this is that you can ask it to figure out all sorts of code movement as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zajímavou funkcí je také to, že můžete systému Git zadat, aby zjistil všechny druhy přesouvání kódu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T230358Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z hlavních výhod tohoto přístupu je, že můžete pracovat bez přerušení a správce hlavního repozitáře může vaše změny do projektu vtáhnout (pull in) až to uzná za vhodné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the main aims of this new edition is to touch on all of those new frontiers in the Git community.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T145753Z" creationid="Prikryl" creationdate="20151026T140011Z">
        <seg>Jedním z hlavních cílů nového vydání je zmínka o všech těchto nových oblastech zájmu v komunitě Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the more helpful options is `-p`, which shows the difference introduced in each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T110816Z" creationid="Prikryl" creationdate="20151102T145242Z">
        <seg>Jednou z užitečnějších voleb je `-p`, která zobrazí rozdíly (diff) provedené v každé revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T182855Z" creationid="Prikryl" creationdate="20151026T182855Z">
        <seg>Jedním z oblíbených nástrojů pro správu verzí byl systém zvaný RCS, který je ještě dnes distribuován s mnohými počítači.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the most complicated aspects of setting up a Git server is user management.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedním z nejsložitějších aspektů nastavení serveru Git je totiž správa uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the workarounds to the `denyNonFastForwards` policy is for the user to delete the branch and then push it back up with the new reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z možností, jak může uživatel obejít pravidlo `denyNonFastForwards`, je odstranit větev a odeslat ji zpět s novou referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T205609Z" creationid="Prikryl" creationdate="20151214T205609Z">
        <seg>Jeden pohled na věc považuje historii zápisů do repozitáře za *záznam toho, co se skutečně stalo*.
Je to historický dokument, který je cenný sám o sobě, a neměli bychom s ním manipulovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One way is to use the `git fsck` utility, which checks your database for integrity.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z možností je použít nástroj `git fsck`, který zkontroluje integritu vaší databáze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Options include oneline, short, full, fuller, and format (where you specify your own format).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T224130Z" creationid="Prikryl" creationdate="20151022T210757Z">
        <seg>Parametry příkazu jsou `oneline`, `short`, `full`, `fuller` a `format` (ve kterém uvedete svůj vlastní formát).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or you can do this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo můžete provést následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or you can have Git try to automatically fix the issue before applying the patch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git se může také pokusit automaticky daný problém vyřešit, ještě než bude záplata aplikována:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T154005Z" creationid="Prikryl" creationdate="20151214T154005Z">
        <seg>Nebo to v tomto případě můžete provést ručně příkazem `git fetch`, následovaným příkazem `git rebase teamone/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or, to compare what is in your `rack` subdirectory with what the `master` branch on the server was the last time you fetched, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Popřípadě chcete-li porovnat, co je ve vašem podadresáři `rack`, s tím, co bylo ve větvi `master` na serveru v okamžiku, kdy jste naposledy vyzvedávali data, spusťte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or, you can do something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provést můžete také tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T203213Z" creationid="Prikryl" creationdate="20151214T153748Z">
        <seg>V opačném případě nebude příkaz `rebase` schopen zjistit, že se jedná o duplikát, a přidá další záplatu, která se podobá té z C4 (kterou se ale pravděpodobně nepodaří čistě aplikovat, protože tam budou alespoň nějaké změny).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Otherwise, it will start from the beginning and will unnecessarily take longer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bez této konkretizace začne proces od začátku a bude trvat zbytečně dlouho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Passing `-p` to it instructs the `cat-file` command to figure out the type of content and display it nicely for you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte-li k příkazu `cat-file` parametr `-p`, říkáte mu, aby zjistil typ obsahu a přehledně vám ho zobrazil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Paul's master branch is now accessible locally as `pb/master` – you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170546Z" creationid="Prikryl" creationdate="20151101T170546Z">
        <seg>Paulova hlavní větev je teď lokálně dostupná jako `pb/master`. Můžete ji začlenit (merge) do některé ze svých větví, nebo ji můžete zpřístupnit jako lokální větev (check out), jestliže si ji chcete prohlédnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perhaps it’s a library that a third party developed or that you’re developing separately and using in multiple parent projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se třeba o knihovnu, kterou vyvinula třetí strana, nebo kterou vyvíjíte odděleně a používáte ji v několika nadřazených projektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perhaps you accidentally committed a file that contained a password, and you want to make your project open source.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo jste omylem zapsali soubor obsahující vaše heslo, ale chcete, aby byl váš projekt veřejný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Please include a nice description of your changes when you submit your PR;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091804Z" creationid="Prikryl" creationdate="20151030T091804Z">
        <seg>Please include a nice description of your changes when you submit your PR;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Pro Git
=======
:doctype:   book
:docinfo:
:toc:
:toclevels: 2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T122020Z" creationid="Prikryl" creationdate="20151026T122020Z">
        <seg>Pro Git
=======
:lang:      cs
:doctype:   book
:docinfo:
:toc:
:toclevels: 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Pro Git
=======
:doctype:   book
:docinfo:
:toc:
:toclevels: 2
:front-cover-image: image:book/cover.png[width=1050,height=1600]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T122804Z" creationid="Prikryl" creationdate="20151026T122636Z">
        <seg>Pro Git
=======
:lang: cs
:doctype:   book
:docinfo:
:toc:
:toclevels: 2
:front-cover-image: image:book/cover.png[width=1050,height=1600]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Push  URL: https://github.com/my-org/complex-project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131318Z" creationid="Prikryl" creationdate="20151107T131318Z">
        <seg>Push  URL: https://github.com/my-org/complex-project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Push  URL: https://github.com/schacon/ticgit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121514Z" creationid="Prikryl" creationdate="20151107T121514Z">
        <seg>Push  URL: https://github.com/schacon/ticgit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Put the following line in your `.gitattributes` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru `.gitattributes` vložte následující řádek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T202458Z" creationid="Prikryl" creationdate="20151026T183416Z">
        <seg>RCS je založen na uchovávání sad záplat (tj. rozdílů mezi podobami souborů), uložených na disku ve speciálním formátu. Poskládáním záplat může později znovu získat podobu libovolného souboru v libovolném čase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110830Z" creationid="Prikryl" creationdate="20151029T110830Z">
        <seg>README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>README           |    1 +</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T213237Z" creationid="Prikryl" creationdate="20160115T213237Z">
        <seg>README           |    1 +</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>README           |  6 ++++++</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145547Z" creationid="Prikryl" creationdate="20151102T145547Z">
        <seg>README           |  6 ++++++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rakefile         | 23 +++++++++++++++++++++++</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145548Z" creationid="Prikryl" creationdate="20151102T145548Z">
        <seg>Rakefile         | 23 +++++++++++++++++++++++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rakefile | 2 +-</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145525Z" creationid="Prikryl" creationdate="20151102T145525Z">
        <seg>Rakefile | 2 +-</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T122904Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládání provede změny z jedné řady prací na jinou, a to v pořadí, v jakém byly provedeny. Naproti tomu sloučení vezme koncové body větví a sloučí je dohromady.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Regular developers work on their topic branch and rebase their work on top of `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T231213Z" creationid="Prikryl" creationdate="20160109T231213Z">
        <seg>Stálí vývojáři pracují na svých tématických větvích a přeskládávají (rebase) svou práci na vrchol větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T094936Z" creationid="Prikryl" creationdate="20151030T094936Z">
        <seg>Nezapomeňte, že všechno, co dosud nebylo připraveno k zapsání -- všechny soubory, které jste vytvořili nebo změnili a pro které jste potom nepoužili `git add` --, nebudou do revize zahrnuty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that each file in your working directory can be in one of two states: tracked or untracked.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T214752Z" creationid="Prikryl" creationdate="20151028T214752Z">
        <seg>Zapamatujte si, že každý soubor ve vašem pracovním adresáři může být v jednou ze dvou stavů: sledován (tracked) a nesledován (untracked).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that the commit records the snapshot you set up in your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223248Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že příkaz `commit` zaznamená snímek projektu, jak byl obsažen v oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember, anything that is _committed_ in Git can almost always be recovered.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T132234Z" creationid="Prikryl" creationdate="20151107T132727Z">
        <seg>Zapamatujte si, že vše, co je v Gitu _zapsáno_, lze téměř vždy obnovit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote branches:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121526Z" creationid="Prikryl" creationdate="20151107T121526Z">
        <seg>Remote branches:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote repositories are versions of your project that are hosted on the Internet or network somewhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálené repozitáře jsou verze vašeho projektu umístěné na Internetu nebo kdekoli v síti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote-tracking branches act as bookmarks to remind you where the branches in your remote repositories were the last time you connected to them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T102219Z" creationid="Prikryl" creationdate="20151210T104353Z">
        <seg>Vzdáleně sledované větve fungují jako záložky, které vám připomínají, kde byly větve ve vzdálených repozitářích v době, kdy jste se k nim naposledy připojili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote-tracking branches are references to the state of remote branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T102158Z" creationid="Prikryl" creationdate="20151210T094136Z">
        <seg>Vzdáleně sledované větve (remote-tracking branches) jsou reference na stav vzdálených větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resolving deltas: 100% (1952/1952), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223112Z" creationid="Prikryl" creationdate="20151023T223112Z">
        <seg>Resolving deltas: 100% (1952/1952), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resolving deltas: 100% (772/772), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101810Z" creationid="Prikryl" creationdate="20151023T101810Z">
        <seg>Resolving deltas: 100% (772/772), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Right below the ``Changes to be committed'' text, it says use `git reset HEAD &lt;file&gt;...` to unstage.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T131327Z" creationid="Prikryl" creationdate="20151106T213952Z">
        <seg>Přímo pod textem „Changes to be committed“ („Změny k zapsání“) se říká: „pro odstranění z oblasti připravených změn použijte příkaz `git reset HEAD &lt;soubor&gt;...`“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run `git difftool --tool-help` to see what is available on your system.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T094612Z" creationid="Prikryl" creationdate="20151030T094612Z">
        <seg>Pokud chcete vědět, co je pro váš systém k dispozici, spusťte `git difftool --tool-help`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run `git push (remote) (branch)`:(((git commands, push)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110436Z" creationid="Prikryl" creationdate="20151210T124206Z">
        <seg>Spusťte `git push (vzdálený) (větev)`:(((git příkazy, push)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T142217Z" creationid="Prikryl" creationdate="20151101T172203Z">
        <seg>Příkaz `git pull` většinou vyzvedne (fetch) data ze serveru, z něhož jste původně klonovali, a automaticky se pokusí začlenit je (merge) do kódu, na němž právě pracujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running `git svn rebase` every once in a while makes sure your code is always up to date.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li čas od času příkaz `git svn rebase`, budete mít jistotu, že pracujete s aktuálním kódem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running a Git server is fairly straightforward.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T142448Z" creationid="Prikryl" creationdate="20151218T142448Z">
        <seg>Zprovoznění gitového serveru je celkem jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running this command gives you a list of commits in your text editor that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spuštěním tohoto příkazu otevřete textový editor se seznamem revizí zhruba v této podobě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running your own server gives you a lot of control and allows you to run the server within your own firewall, but such a server generally requires a fair amount of your time to set up and maintain.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T191344Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provoz vlastního serveru vám dává celou řadu možností řízení a umožňuje provozovat server za vaším firewallem. Nastavení a správa takového serveru však obecně bývají časově náročné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Say John and Jessica both start working at the same time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T153608Z" creationid="Prikryl" creationdate="20160109T153608Z">
        <seg>Dejme tomu, že John i Jessica začnou pracovat ve stejném čase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Second, it only shows you commits that have been committed up to the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadruhé pak to, že zobrazuje pouze revize, jež byly zapsány na server Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See 'git --help'.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090232Z" creationid="Prikryl" creationdate="20151024T090232Z">
        <seg>See 'git --help'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See 'git mergetool --tool-help' or 'git help config' for more details.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103002Z" creationid="Prikryl" creationdate="20151023T103002Z">
        <seg>See 'git mergetool --tool-help' or 'git help config' for more details.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See &lt;&lt;_git_branching&gt;&gt; for more detailed information on how to push to remote servers.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121241Z" creationid="Prikryl" creationdate="20151107T121241Z">
        <seg>Více informací o odesílání na vzdálené servery najdete v kapitole &lt;&lt;_git_branching&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See &lt;&lt;_refspec&gt;&gt; for a more detailed discussion of Git refspecs and different things you can do with them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112816Z" creationid="Prikryl" creationdate="20160118T112816Z">
        <seg>Podrobnější diskusi o specifikaci gitových referencí a o různých možnostech práce s nimi najdete v kapitole &lt;&lt;_refspec&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T093637Z" creationid="Prikryl" creationdate="20151030T093637Z">
        <seg>See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Set up a merge wrapper script named `extMerge` that calls your binary with all the arguments provided:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavte wrapperový skript pro slučování `extMerge`, který bude volat binární soubor všemi dostupnými parametry:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Set your key ID like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>ID svého klíče nastavíte takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Setting up a `.gitignore` file before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T090003Z" creationid="Prikryl" creationdate="20151029T201553Z">
        <seg>Většinou je dobré, když soubor `.gitignore` vytvoříte a naplníte ještě dříve, než se pustíte do práce. Díky tomu se vám nestane, že byste nedopatřením zapsali také soubory, o které v gitovém repozitáři nestojíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She can do so by specifying the local branch followed by a colon (:) followed by the remote branch to the `git push` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může tak učinit příkazem `git push` s určením lokální větve, za níž bude následovat dvojtečka (:) a za ní vzdálená větev:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She can merge either `origin/master` or `issue54` first – they're both upstream, so the order doesn't matter.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T213114Z" creationid="Prikryl" creationdate="20160115T212740Z">
        <seg>Buď může nejdříve začlenit `origin/master` nebo `issue54`. Obě revize jsou následníky té aktuální, takže na pořadí nezáleží.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She can then fetch Josie's changes down with `git fetch`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112245Z" creationid="Prikryl" creationdate="20160118T112245Z">
        <seg>Změny, které Josie provedla, vyzvedne příkazem `git fetch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She chooses to merge in `issue54` first:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T213231Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica se rozhodne začlenit nejdříve `issue54`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She creates a new branch for the feature and does some work on it there:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111505Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoří si pro něj novou větev a udělá v ní kus práce:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She hasn't fetched John's changes yet, so her commit history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145444Z" creationid="Prikryl" creationdate="20160115T145444Z">
        <seg>Zatím ještě nevyzvedla Johnovy změny, takže její historie revizí vypadá nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She is told that she's trying to push non-fast-forward changes and that she won't be able to do so until she fetches and merges.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T154043Z" creationid="Prikryl" creationdate="20160109T154043Z">
        <seg>Řekne jí, že se pokouší odeslat změny (push), které nemají charakter „rychle vpřed“, a že to nebude moci udělat, dokud neprovede vyzvednutí a sloučení (fetch a merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She runs `git log` to find out:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustí proto příkaz `git log`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She runs a `git fetch` to pull down those changes:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113209Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica je stáhne spuštěním příkazu `git fetch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She's created a topic branch called `issue54` and done three commits on that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145406Z" creationid="Prikryl" creationdate="20160115T145406Z">
        <seg>Vytvořila tématickou větev s názvem `issue54` a zapsala do ní tři revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She's ready to push up her work, but gets an email from Josie that a branch with some initial work on it was already pushed to the server as `featureBee`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112147Z" creationid="Prikryl" creationdate="20160118T112147Z">
        <seg>Je připravena odeslat svou práci, ale dostane e-mail od Josie, že již na server odeslala větev `featureBee`, v níž už je část práce hotová.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143508Z" creationid="Prikryl" creationdate="20151107T143508Z">
        <seg>Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Simply set up a single repository, and give everyone on your team push access; Git won't let users overwrite each other.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T153507Z" creationid="Prikryl" creationdate="20160109T153507Z">
        <seg>Jednoduše vytvořte repozitář a přidělte všem ze svého týmu oprávnění k odesílání dat. Git uživatelům neumožní, aby se navzájem přepisovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since Git is quite excellent at preserving backwards compatibility, any version after 2.0 should work just fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T204345Z" creationid="Prikryl" creationdate="20151027T204345Z">
        <seg>A protože Git výborně zachovává zpětnou kompatibilitu, měly by všechny verze novější než 2.0 fungovat stejně dobře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Od svého vzniku v roce 2005 se Git vyvinul a vyzrál v snadno použitelný systém, který si dodnes uchovává své prvotní kvality.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since then a lot has changed and yet many important things have not.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T104052Z" creationid="Prikryl" creationdate="20151026T131547Z">
        <seg>Od té doby se objevila řada změn, ale mnoho důležitých věcí zůstalo zachováno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since then, nearly every open source community has adopted it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T104519Z" creationid="Prikryl" creationdate="20151026T133311Z">
        <seg>Od té doby jej přijaly téměř všechny Open Source komunity.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So for example in that output, the `README` file is modified in the working directory but not yet staged, while the `lib/simplegit.rb` file is modified and staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T085554Z" creationid="Prikryl" creationdate="20151029T175044Z">
        <seg>Takže například v uvedeném výstupu byl soubor `README` změněn v pracovním adresáři, ale nebyl zatím připraven k zápisu (staged), zatímco soubor `lib/simplegit.rb` byl změněn a připraven k zápisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So here we can see that our `iss53` branch is tracking `origin/iss53` and is ``ahead'' by two, meaning that we have two commits locally that are not pushed to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132913Z" creationid="Prikryl" creationdate="20151213T215212Z">
        <seg>Takže vidíme, že naše větev `iss53` sleduje `origin/iss53` a má „náskok“ (ahead) dva, což znamená, že máme lokálně dva objekty revize, které ještě nebyly odeslány na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So if you're on the `master` branch and it's tracking `origin/master`, you can say something like `git merge @{u}` instead of `git merge origin/master` if you wish.(((+++@{u}+++)))(((+++@{upstream}+++)))
====</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214340Z" creationid="Prikryl" creationdate="20151213T214340Z">
        <seg>Takže pokud jste na větvi `master` a ta sleduje `origin/master`, pak (pokud chcete) můžete místo `git merge origin/master` napsat `git merge @{u}`.(((+++@{u}+++)))(((+++@{upstream}+++)))
====</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So instead of the result we see in &lt;&lt;_merge_rebase_work&gt;&gt;, we would end up with something more like &lt;&lt;_rebase_rebase_work&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T151450Z" creationid="Prikryl" creationdate="20151214T151450Z">
        <seg>Takže místo výsledku z obrázku &lt;&lt;_merge_rebase_work&gt;&gt;, skončíme s něčím, co odpovídá spíše obrázku &lt;&lt;_rebase_rebase_work&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So we will expect you to know how to open Terminal in Mac or Command Prompt or Powershell in Windows.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T193911Z" creationid="Prikryl" creationdate="20151027T193911Z">
        <seg>Takže od vás budeme očekávat, že na počítači Mac umíte otevřít Terminál, nebo že ve Windows umíte spustit Příkazový řádek či PowerShell.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So what if there was a messy series of merge commits?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T210139Z" creationid="Prikryl" creationdate="20151214T210139Z">
        <seg>Jenže co když se vyskytly nějaké zamuchlané posloupnosti bodů sloučení?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, `git fetch origin` fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takže příkaz `git fetch origin` vyzvedne veškerou novou práci, která byla na uvedený server poslána (push) od okamžiku, kdy jste odtud klonovali (nebo kdy jste odtud naposledy vyzvedávali práci).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if there is a `master` branch on the server, you can access the log of that branch locally via</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li tedy na serveru hlavní větev `master`, lokálně lze získat přístup k jejímu logu některým z příkazů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if you see that a method in your code is buggy, you can annotate the file with `git blame` to see when each line of the method was last edited and by whom.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud zjistíte, že některá metoda ve vašem kódu obsahuje chybu, můžete soubor anotovat příkazem `git blame`, který u každého řádku metody zobrazí, kdo a kdy ho naposledy upravil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit – you as the author, and the core member as the committer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T212702Z" creationid="Prikryl" creationdate="20151102T212702Z">
        <seg>Pokud tedy pošlete záplatu k projektu a někdo z užšího týmu footnote:[core member] ji použije, získáte zásluhu oba -- vy, jako autor, i daný člen týmu, jako autor revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if you want to make a single commit from these three commits, you make the script look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li tedy vytvořit jedinou revizi z těchto tří revizí, bude skript vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, in the following file</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, let's use that advice to unstage the `CONTRIBUTING.md` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T131218Z" creationid="Prikryl" creationdate="20151106T214027Z">
        <seg>Budeme se tedy řídit touto radou a z oblasti připravených změn odstraníme soubor `CONTRIBUTING.md`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, the first thing to do in your `print_export` method is generate a mark from the directory name:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním krokem, který tak při metodě se souborem `print_export` uděláte, bude vygenerování označovače na základě názvu adresáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, to create a tree object, you first have to set up an index by staging some files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto chcete-li vytvořit objekt stromu, musíte ze všeho nejdříve připravit soubory k zapsání, a vytvořit tak index.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, what is Git in a nutshell?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T123232Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Co že to vlastně Git v jádru je?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, you can either run four config commands</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete tedy spustit kterýkoli ze čtyř konfiguračních příkazů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some Linux distributions have a `gitweb` package that you may be able to install via `apt` or `yum`, so you may want to try that first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé linuxové distribuce mají balíček `gitweb`, který by mělo být možné nainstalovat pomocí nástrojů `apt` nebo `yum`. Zkuste proto tuto možnost jako první.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some files look like text files but for all intents and purposes are to be treated as binary data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé soubory se tváří jako textové, ale v podstatě je s nimi třeba zacházet jako s binárními daty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some larger projects also have a `proposed` or `pu` (proposed updates) branch that has integrated branches that may not be ready to go into the `next` or `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T141329Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé větší projekty mají také větev `proposed` nebo `pu` (proposed updates, návrh úprav), která přebírá věci z větví, které nejsou způsobilé k začlenění do větví `next` nebo `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of the variables involved are active contributor count, chosen workflow, your commit access, and possibly the external contribution method.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T115719Z" creationid="Prikryl" creationdate="20160110T115719Z">
        <seg>Mezi proměnné v tomto procesu patří počet aktivních přispěvatelů, zvolený pracovní postup, vaše oprávnění pro odesílání revizí a případně i metoda externího přispívání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some people may instead find it useful to install Git from source, because you'll get the most recent version.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T000836Z" creationid="Prikryl" creationdate="20151028T000836Z">
        <seg>Někteří lidé si Git instalují raději ze zdrojových textů, protože tímto způsobem získáte nejnovější verzi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some people refer to Git's branching model as its ``killer feature,'' and it certainly sets Git apart in the VCS community.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T093600Z" creationid="Prikryl" creationdate="20151105T154428Z">
        <seg>Někteří lidé mluví o modelu větvení Gitu jako o „převratné vlastnosti“ a mezi systémy pro správu verzí se jím Git určitě odlišuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Someone accidentally commits a huge binary file with a thoughtless `git add .`, and you want to remove it everywhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdo příkazem `git add .` bezmyšlenkovitě zapsal obří binární soubor a vy ho chcete odstranit ze všech revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Splitting a commit undoes a commit and then partially stages and commits as many times as commits you want to end up with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozdělení revize vrátí všechny změny v revizi obsažené a po částech je znovu připraví a zapíše do tolika revizí, kolik určíte jako konečný počet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Staged means that you have marked a modified file in its current version to go into your next commit snapshot.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T120534Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Připraveno k zapsání znamená, že jste změněný soubor v jeho aktuální verzi určili k tomu, aby byl zapsán do dalšího snímku (commit snapshot).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Staging the file marks it as resolved in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T083316Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Připravením k zápisu se v Gitu soubor označí jako vyřešený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Staging the files checksums each one (the SHA-1 hash we mentioned in &lt;&lt;_getting_started&gt;&gt;), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T174604Z" creationid="Prikryl" creationdate="20151108T143203Z">
        <seg>Při přípravě souborů k zapsání je pro každý z nich vypočítán kontrolní součet (o otisku SHA-1 jsme se zmínili v kapitole &lt;&lt;_getting_started&gt;&gt;), daná verze souborů se uloží v repozitáři Gitu (Git jim říká bloby footnote:[Pozn. překl.: Z anglického Binary Large OBject, čili _velký binární objekt_.]) a přidá jejich kontrolní součet do oblasti připravených změn:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start with the first tree you wrote:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začněte prvním stromem, který jste zapsali:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Submodules allow you to keep a Git repository as a subdirectory of another Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Submoduly umožňují uchovávat repozitář Git jako podadresář jiného repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Subversion can have only a single linear history, and confusing it is very easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Subversion může mít pouze jednu lineární historii a opravdu není těžké uvést ho do rozpaků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Such example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115329Z" creationid="Prikryl" creationdate="20151107T115329Z">
        <seg>V systému Windows to může například vést i k předčasnému ukončení operace Gitu, když bude Git editor spouštět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suffice it to say that this is rare.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je jasné, že to většinou nechcete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you add a remote like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že přidáte například tento vzdálený repozitář:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you clone from a central server and then do some work off that.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T135115Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že jste naklonovali z centrálního serveru a provedli jste několik změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it's tested further.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T124713Z" creationid="Prikryl" creationdate="20151214T124713Z">
        <seg>Předpokládejme, že nyní chcete změny straně klienta začlenit do své hlavní linie k vydání, ale prozatím chcete počkat se změnami na straně serveru, dokud nebudou víc otestovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you look at the history of your project:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete mít například takovouto historii projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you want to add a mechanism that uses an access control list (ACL) that specifies which users are allowed to push changes to which parts of your projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že chcete přidat mechanismus, který bude používat seznam oprávnění ACL (access control list), v němž bude stanoveno, kteří uživatelé smějí do které části vašeho projektu odesílat změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose your commit history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že vaše historie revizí vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose your history looks like the following: you created an `experiment` branch, did two commits, and then merged them back into `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že vaše historie vypadá následovně: vytvořili jste větev `experiment`, zapsali jste dvě revize a začlenili jste je zpět do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose your repository contains the following branches and tags:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že váš repozitář obsahuje tyto větve a značky:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you’re developing a web site and creating Atom feeds.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Programujete webové stránky a vytváříte kanály Atom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you’ve done an import from another source control system and have subdirectories that make no sense (trunk, tags, and so on).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že jste dokončili import z jiného systému ke správě zdrojového kódu a máte podadresáře, které nedávají žádný smysl (trunk, tags apod.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switch back to your original story and continue working.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153236Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepnete zpět na svůj původní případ a pokračujete v práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switch to your production branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152920Z" creationid="Prikryl" creationdate="20151111T152920Z">
        <seg>Přepnete se na produkční větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switched to a new branch 'serverfix'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T145019Z" creationid="Prikryl" creationdate="20151210T145019Z">
        <seg>Switched to a new branch 'serverfix'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switched to a new branch 'sf'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T114030Z" creationid="Prikryl" creationdate="20151213T114030Z">
        <seg>Switched to a new branch 'sf'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>TODO |    1 +</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144846Z" creationid="Prikryl" creationdate="20160115T144846Z">
        <seg>TODO |    1 +</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Take a history like &lt;&lt;rbdiag_e&gt;&gt;, for example.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T080626Z" creationid="Prikryl" creationdate="20151214T123420Z">
        <seg>Vezměme si například historii na obrázku &lt;&lt;rbdiag_e&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Technically, you can do that by explicitly figuring out the common ancestor and then running your diff on it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete tedy explicitně najít společného předka obou větví a spustit na něm příkaz diff:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That approach lets you do more complex things like deny non-fast-forwards to a certain subset of users.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato metoda umožňuje pokročilejší nastavení, jako zamítnutí jiných aktualizací než „rychle vpřed“ určité skupině uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That change will be rejected until you merge in their work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jejich změna bude odmítnuta, dokud nezačlení dříve odeslanou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That command compares what is in your working directory with what is in your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091922Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz porovná obsah vašeho pracovního adresáře s tím, co se nachází v oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That command did two things.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164832Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz provedl dvě věci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That command does the same thing as the previous one, but the target directory is called `mylibgit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T214014Z" creationid="Prikryl" creationdate="20151028T214014Z">
        <seg>Tento příkaz učiní totéž co příkaz předchozí, ale cílový adresář se bude jmenovat `mylibgit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That commit is when this file was first added to this project, and those lines have been unchanged since.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato revize vznikla prvním přidáním tohoto souboru do projektu a tyto řádky zůstaly od té doby nezměněny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That creates a directory named ``libgit2'', initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T140144Z" creationid="Prikryl" creationdate="20151028T212257Z">
        <seg>Tímto příkazem se vytvoří adresář s názvem `libgit2`, inicializuje se v něm podadresář `.git`, stáhnou se všechna data pro tento repozitář a vytvoří se pracovní kopie nejnovější verze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That drops you into your text editor, which has your last commit message in it, ready for you to modify the message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím se přesunete do textového editoru, v němž bude otevřena vaše poslední zpráva k revizi. Nyní ji můžete upravit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That gives you your next commit object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím získáte další objekt revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is a simple example you're likely to encounter.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121915Z" creationid="Prikryl" creationdate="20151107T121915Z">
        <seg>S uvedeným jednoduchým případem se pravděpodobně setkáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is a special mode in Git that basically means you’re recording a commit as a directory entry rather than a subdirectory or a file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o speciální režim systému Git, který udává, že revizi zaznamenáváte jako adresář, ne jako podadresář nebo soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is a very useful syntax to remember.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Určitě uděláte dobře, pokud si tuto syntaxi zapamatujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is one of the simplest workflows.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je jeden z nejjednodušších pracovních postupů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is, you'll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160108T185252Z" creationid="Prikryl" creationdate="20160108T185252Z">
        <seg>Jinými slovy, naučíte se, jak lze do projektu úspěšně přidat vlastní kód, jak to co nejvíc usnadnit sobě i správci projektu a také to, jak se dá úspěšně udržovat projekt, do kterého přispívá velký počet vývojářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That means you can do things such as:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121123Z" creationid="Prikryl" creationdate="20151107T121123Z">
        <seg>To znamená, že můžete zadat příkaz jako:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That pulls down the work John has pushed up in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím stáhne práci, kterou mezitím odeslal John.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That returns an integer value for the date of each directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím dostanete celé číslo pro data každého adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150558Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz zobrazí informace o autorovi značky, datu, kdy byla revize označena, a zprávu značky ještě před informacemi o revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That shows you where the branch tip was yesterday.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vám ukáže, kde se vrchol větve nacházel včera.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That starts up an HTTPD server on port 1234 and then automatically starts a web browser that opens on that page.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím spustíte HTTPD server na portu 1234 a automaticky se spustí webový prohlížeč, který otevře tuto stránku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That way, the maintainer doesn't have to do any integration work – just a fast-forward or a clean apply.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T121822Z" creationid="Prikryl" creationdate="20151214T121822Z">
        <seg>Správce v tomto případě nemusí provádět žádnou integraci, provede pouze posun „rychle vpřed“ nebo čistou aplikaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That way, they can correct any problems before committing and before those issues become more difficult to fix.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny problémy tak budou moci opravit, dokud to ještě není příliš složité a dokud je nezapsali do revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That way, you can use private branches for work you don't want to share, and push up only the topic branches you want to collaborate on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T123820Z" creationid="Prikryl" creationdate="20151210T123820Z">
        <seg>Tímto způsobem si můžete zachovat soukromé větve pro práci, kterou nehodláte sdílet, a odesílat pouze tématické větve, na nichž chcete spolupracovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That's how it happened, and the repository should preserve that for posterity.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T210227Z" creationid="Prikryl" creationdate="20151214T210227Z">
        <seg>Takhle se to stalo a repozitář by to měl zachovat pro další generace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s 1,200 times the number of grains of sand on the earth.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je 1200násobek počtu všech zrnek písku na celé Zemi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git directory is where Git stores the metadata and object database for your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T115612Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Adresář Git je místo, kde Git uchovává metadata a databázi objektů vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project also has a `maint` branch that is forked off from the last release to provide backported patches in case a maintenance release is required.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt Git má kromě toho větev `maint`, která byla odštěpena z posledního vydání a představuje záplaty backportované pro případ, že by bylo třeba vydat opravnou verzi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project has well-formatted commit messages – try running `git log --no-merges` there to see what a nicely formatted project-commit history looks like.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T140921Z" creationid="Prikryl" creationdate="20160115T140921Z">
        <seg>Projekt Git obsahuje kvalitně naformátované zprávy k revizím. Zkuste spustit `git log --no-merges`, abyste se podívali, jak vypadá pěkně naformátovaná historie revizí projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project provides a document that lays out a number of good tips for creating commits from which to submit patches – you can read it in the Git source code in the `Documentation/SubmittingPatches` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T193114Z" creationid="Prikryl" creationdate="20160110T123438Z">
        <seg>Samotný projekt Git obsahuje dokument, v němž je navržena celá řada dobrých tipů pro vytváření revizí, z kterých se vytvářejí záplaty. Najdete ho ve zdrojovém kódu systému Git, v souboru `Documentation/SubmittingPatches`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project requires that the more detailed explanation include your motivation for the change and contrast its implementation with previous behavior – this is a good guideline to follow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160114T125535Z" creationid="Prikryl" creationdate="20160114T125535Z">
        <seg>Projekt Git vyžaduje, aby podrobnější popis revize zahrnoval i vaši motivaci ke změnám a aby uvedl srovnání nové implementace s původním chováním. Tuto zásadu je dobré dodržovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git server will generally keep the data there for a while until a garbage collection runs, so if it was accidentally deleted, it's often easy to recover.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T080611Z" creationid="Prikryl" creationdate="20151214T080611Z">
        <seg>Gitový server data obecně po nějakou dobu uchovává -- až do doby, kdy se spustí úklid (garbage collection). Takže pokud jste něco nechtěně smazali, dá se to obvykle snadno obnovit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git source repo, for instance, contains more than 500 tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145401Z" creationid="Prikryl" creationdate="20151107T145401Z">
        <seg>Například repozitář se zdrojovým kódem systému Git obsahuje více než 500 značek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Linux kernel is an open source software project of fairly large scope.(((Linux)))
For most of the lifetime of the Linux kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T072810Z" creationid="Prikryl" creationdate="20151027T072810Z">
        <seg>Jádro Linuxu je celkem rozsáhlý softwarový open source projekt.(((Linux)))
Po většinu životního cyklu údržby jádra Linuxu (1991–2002) se změny přenášely formou záplat a archivních souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Open Source community using Git has also exploded.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T104452Z" creationid="Prikryl" creationdate="20151026T140427Z">
        <seg>Prudký nárůst zaznamenala samotná komunita kolem Open Source, která Git využívá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Pro Git of four years ago knows about none of that.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T134448Z" creationid="Prikryl" creationdate="20151026T134448Z">
        <seg>V knize Pro Git vydané před čtyřmi lety nenajdete téměř nic, co by s tím souviselo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The SHA-1 digest is 20 bytes or 160 bits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Otisk SHA-1 má 20 bytů, neboli 160 bitů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Subversion bridge is the gateway drug to the DVCS world.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Most k systému Subversion je branou do světa DVCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `*` next to each file means the file is selected to be staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znak `*` vedle souborů znamená, že je soubor vybrán jako připravený k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T200932Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Volba `--author` vám umožní filtrovat výpisy podle zadaného autora, volbou `--grep` můžete ve zprávách k revizi hledat klíčová slova.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--squash` option takes all the work on the merged branch and squashes it into one changeset producing the repository state as if a real merge happened, without actually making a merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T205950Z" creationid="Prikryl" creationdate="20160122T192505Z">
        <seg>Volba `--squash` (stlačit) zajistí převzetí všech změn ze začleňované větve a stlačí je do podoby jedné sady změn, která vede ke stejnému stavu repozitáře, jako kdyby se provedlo opravdové sloučení (merge), ale nevytvoří se při tom bod sloučení{empty}footnote:[Pozn. překl.: Nezapíše se tedy revize. Jinými slovy, nevytvoří se žádný objekt revize. Změny budou promítnuté jen to pracovního stromu.] (merge commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--tree-filter` option runs the specified command after each checkout of the project and then recommits the results.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `--tree-filter` spustí zadaný příkaz po každém checkoutu projektu a znovu zapíše jeho výsledky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-M` switch tells Git to look for renames.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepínač `-M` řekne systému Git, aby zkontroloval případné přejmenování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-T trunk -b branches -t tags` part tells Git that this Subversion repository follows the basic branching and tagging conventions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Část `-T trunk -b branches -t tags` říká systému Git, že tento repozitář Subversion dodržuje základní zásady větvení a značkování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-m` specifies a tagging message, which is stored with the tag.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `-m` udává zprávu značky, která bude uložena spolu se značkou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-w` tells `hash-object` to store the object; otherwise, the command simply tells you what the key would be.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `-w` sděluje příkazu `hash-object`, aby objekt uložil. Bez parametru by vám příkaz jen sdělil, jaký klíč by byl přidělen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `.pub` file is your public key, and the other file is your private key.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor `.pub` je váš veřejný klíč, druhý soubor je soukromý klíč.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `Author` information is the individual who originally created the patch and when it was originally created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace `Author` naproti tomu označuje jedince, který patch původně vytvořil, a kdy tak učinil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `CONTRIBUTING.md` file is modified but once again unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T214129Z" creationid="Prikryl" creationdate="20151106T214129Z">
        <seg>Soubor `CONTRIBUTING.md` má stav „změněn“, ale už se nenachází v oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `Commit` information indicates the person who applied the patch and the time it was applied.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace `Commit` uvádí osobu, která patch aplikovala, a čas, kdy se tak stalo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `Rakefile` was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T175209Z" creationid="Prikryl" creationdate="20151029T175209Z">
        <seg>Soubor `Rakefile` byl změněn, připraven k zápisu a potom znovu změněn, takže se indikuje změna jak pro oblast připravenosti k zápisu, tak pro pracovní strom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `SHA^@` syntax resolves to all the parents of that commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Syntaxe `SHA^@` se vztahuje na všechny rodiče této revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The ``CONTRIBUTING.md'' file appears under a section named ``Changes not staged for commit'' – which means that a file that is tracked has been modified in the working directory but not yet staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120529Z" creationid="Prikryl" creationdate="20151107T120529Z">
        <seg>Soubor `CONTRIBUTING.md` je uveden v části „Changes not staged for commit“ (změny, které nejsou připraveny k zapsání). Znamená to, že soubor, který je sledován, byl v pracovním adresáři změněn, avšak ještě nebyl připraven k zapsání (staged).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `bisect` command does a binary search through your commit history to help you identify as quickly as possible which commit introduced an issue.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `bisect` zahájí binární vyhledávání ve vaší historii revizí a pomůže vám co nejrychleji identifikovat, která revize je původcem problému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `format-patch` command prints out the names of the patch files it creates.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `format-patch` vypíše názvy souborů záplaty, kterou vytváří.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git branch` command does more than just create and delete branches.(((git commands, branch)))
If you run it with no arguments, you get a simple listing of your current branches:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T205851Z" creationid="Prikryl" creationdate="20151124T205851Z">
        <seg>Příkaz `git branch` umí víc, než jen vytvářet a mazat větve.(((git příkazy, branch)))
Pokud ho spustíte bez dalších parametrů, získáte prostý výpis všech aktuálních větví:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git branch` command only _created_ a new branch – it didn't switch to that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T163204Z" creationid="Prikryl" creationdate="20151108T163204Z">
        <seg>Příkaz `git branch` pouze _vytvořil_ novou větev -- nepřepnul do ní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T103701Z" creationid="Prikryl" creationdate="20151031T224402Z">
        <seg>Je k tomu určen příkaz `git rm`, který soubor odstraní také z vašeho pracovního adresáře, takže ho už příště neuvidíte mezi nesledovanými soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git status` command reminds you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Připomene vám to příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git verify-pack` plumbing command allows you to see what was packed up:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nízkoúrovňový příkaz `git verify-pack` umožňuje prohlížet, co bylo zabaleno:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `issue54..origin/master` syntax is a log filter that asks Git to only show the list of commits that are on the latter branch (in this case `origin/master`) that are not on the first branch (in this case `issue54`).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T150511Z" creationid="Prikryl" creationdate="20160115T150511Z">
        <seg>Zápis `issue54..origin/master` předtavuje filtr příkazu, kterým se Gitu říká, aby zobrazil seznam jen těch objektů revize, které se nacházejí v druhé z větví (zde `origin/master`), ale které se nenacházejí v první větvi (zde `issue54`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `master^{tree}` syntax specifies the tree object that is pointed to by the last commit on your `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Syntaxe `master^{tree}` určuje objekt stromu, na nějž ukazuje poslední revize větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `master` branch is that of the dictator.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T172932Z" creationid="Prikryl" creationdate="20160109T232450Z">
        <seg>Větev `master` je předmětem zájmu diktátora.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `objects` directory stores all the content for your database, the `refs` directory stores pointers into commit objects in that data (branches), the `HEAD` file points to the branch you currently have checked out, and the `index` file is where Git stores your staging area information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V adresáři `objects` je uložen celý obsah vaší databáze, v adresáři `refs` jsou uloženy ukazatele na objekty revizí v datech (větve). Soubor `HEAD` ukazuje na větev, na níž se právě nacházíte, a soubor `index` je pro systém Git úložištěm informací o oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `oneline` option prints each commit on a single line, which is useful if you're looking at a lot of commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T152153Z" creationid="Prikryl" creationdate="20151102T145802Z">
        <seg>Hodnota `oneline` vypíše všechny revize na jednom řádku, což oceníte při prohlížení velkého množství revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `post-receive` hook runs after the entire process is completed and can be used to update other services or notify users.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `post-receive` se spouští až poté, co je celý proces dokončen. Lze ho použít k aktualizaci jiných služeb nebo odeslání oznámení jiným uživatelům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `pre-commit` hook is run first, before you even type in a commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `pre-commit` se spouští jako první, ještě než začnete psát zprávu k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `pre-rebase` hook runs before you rebase anything and can halt the process by exiting non-zero.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `pre-rebase` se spouští před každým přeskládáním a při nenulové hodnotě může tento proces zastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `prepare-commit-msg` hook is run before the commit message editor is fired up but after the default message is created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `prepare-commit-msg` se spouští ještě předtím, než se otevře editor pro vytvoření zprávy k revizi, ale poté, co byla vytvořena výchozí zpráva.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `request-pull` command takes the base branch into which you want your topic branch pulled and the Git repository URL you want them to pull from, and outputs a summary of all the changes you're asking to be pulled in.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T195811Z" creationid="Prikryl" creationdate="20160121T195811Z">
        <seg>Příkazu `request-pull` se zadává základní větev, do které chcete nechat vaši tématickou větev vtáhnout, a URL adresu gitového repozitáře, z kterého se má stahovat. Příkaz vypíše shrnutí všech změn, které by měly být vtaženy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `send-pack` process runs on the client and connects to a `receive-pack` process on the remote side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces `send-pack` se spouští na klientovi a připojuje se k procesu `receive-pack` na straně vzdáleného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The ability of smaller subgroups of a team to collaborate via remote branches without necessarily having to involve or impede the entire team is a huge benefit of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T150303Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možnost spolupráce menších podskupin týmu prostřednictvím vzdálených větví -- aniž by si práce vyžádala účast celého týmu nebo aby bránila ostatním v jiné práci -- patří k obrovským výhodám Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The answer is the HEAD file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odpověď zní: soubor HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The answer to this issue is the `git stash` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řešením této situace je odložení (stashing) příkazem `git stash`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The author is the person who originally wrote the work, whereas the committer is the person who last applied the work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T212315Z" creationid="Prikryl" creationdate="20151102T212156Z">
        <seg>_Autor_ (author) je osoba, která práci původně napsala, zatímco _autor revize_ (committer) je osoba, která tuto práci naposled použila.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The base command in Git for all the Subversion bridging commands is `git svn`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Základním příkazem systému Git ke všem operacím směřujícím do systému Subversion je `git svn`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The basic Git workflow goes something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T121528Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Základní pracovní postup vypadá v Gitu následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The benevolent dictator's repository serves as the reference repository from which all the collaborators need to pull.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T231012Z" creationid="Prikryl" creationdate="20160109T231012Z">
        <seg>Repozitář benevolentního diktátora slouží jako referenční repozitář, z nějž všichni spolupracovníci musí stahovat data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The binary installers tend to be a bit behind, though as Git has matured in recent years, this has made less of a difference.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T001059Z" creationid="Prikryl" creationdate="20151028T001059Z">
        <seg>Binární instalátory bývají trošku pozadu, ačkoli v posledních letech Git vyspěl a rozdíly už nejsou tak významné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The blank line separating the
summary from the body is critical (unless you omit the body
entirely); tools like rebase can get confused if you run
the two together.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T140444Z" creationid="Prikryl" creationdate="20160114T153800Z">
        <seg>Prázdný řádek, který
odděluje shrnutí od těla je nezbytně nutný (pokud tělo nevynecháte
úplně); nástroje jako rebase mohou být zmatené, pokud tyto části
neoddělíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The blob is now a different blob, which means that although you added only a single line to the end of a 400-line file, Git stored that new content as a completely new object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní jde o úplně jiný blob. Přestože jste na konec 400řádkového souboru vložili jen jeden jediný řádek, Git uložil nový obsah jako úplně nový objekt:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The changes to your files were reapplied, but the file you staged before wasn’t restaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změny byly znovu aplikovány na vaše soubory, ale soubor, který jste předtím připravili k zapsání, nebyl znovu připraven.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The client initiates a `fetch-pack` process that connects to an `upload-pack` process on the remote side to negotiate what data will be transferred down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Klient iniciuje proces `fetch-pack`, který vytvoří připojení k procesu `upload-pack` na straně vzdáleného serveru a dojedná, která data budou stažena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The code looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kód má tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command for this is simple: `git push [remote-name] [branch-name]`.(((git commands, push)))
If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T100910Z" creationid="Prikryl" creationdate="20151107T100350Z">
        <seg>Příslušný příkaz je jednoduchý: `git push [jméno-vzdáleného-serveru] [jméno-větve]`.(((git příkazy, push)))
Pokud chcete na server `origin` odeslat svou větev `master` (znovu připomeňme, že při klonování se vám obě tato jména nastaví automaticky), pak následující příkaz odešle na server všechny vaše revize (commits):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command goes out to that remote project and pulls down all the data from that remote project that you don't have yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170848Z" creationid="Prikryl" creationdate="20151101T170848Z">
        <seg>Příkaz zamíří do vzdáleného projektu a stáhne z něj všechna data, která ještě nemáte u sebe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command helpfully tells you that if you're on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T143222Z" creationid="Prikryl" creationdate="20151107T121851Z">
        <seg>Příkaz vám mimo jiné sděluje, že pokud se nacházíte na větvi `master` a spustíte příkaz `git pull`, pak se po vyzvednutí všech vzdálených referencí (fetch) větev `master` ze vzdáleného serveru automaticky začlení (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command is `filter-branch`, and it can rewrite huge swaths of your history, so you probably shouldn’t use it unless your project isn’t yet public and other people haven’t based work off the commits you’re about to rewrite.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz pro tento případ je `filter-branch`. Dokáže přepsat velké části vaší historie, a proto byste ho určitě neměli používat, pokud už byl váš projekt zveřejněn a ostatní uživatelé už založili svou práci na revizích, které hodláte přepsat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command is a bit strange, but it works.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz je sice trochu zvláštní, ale funguje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command to do this is `git archive`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz pro vytvoření archivu zní `git archive`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The commit message by default looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081104Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zpráva k revizi má v takovém případě přednastavenu tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The commit message must be expressed in a special format:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zpráva k revizi musí být ve speciálním formátu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nevýhodou této metody je, že nastavit a získat sdílený přístup z více umístění je většinou těžší než obyčejný síťový přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The contributor pushes to their own public copy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přispěvatel odešle změny do své vlastní veřejné kopie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The contributor sends the maintainer an email asking them to pull changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T160106Z" creationid="Prikryl" creationdate="20160109T160106Z">
        <seg>Přispěvatel pošle správci email, ve kterém jej požádá o vtažení změn (pull).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The default branch name in Git is `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T145902Z" creationid="Prikryl" creationdate="20151108T145902Z">
        <seg>Výchozím názvem větve v Gitu je `master` (hlavní větev).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The dictator merges the lieutenants' `master` branches into the dictator's `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T232636Z" creationid="Prikryl" creationdate="20160109T232636Z">
        <seg>Diktátor začleňuje větve `master` poručíků do své větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The dictator pushes their `master` to the reference repository so the other developers can rebase on it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T173048Z" creationid="Prikryl" creationdate="20160109T232905Z">
        <seg>Diktátor odesílá svou větev `master` do referenčního repozitáře, aby ji ostatní vývojáři mohli použít jako základ pro přeskládání (rebase).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Wrapper nástroje diff zkontroluje zda je skutečně zadáno sedm parametrů a předá dva z nich do skriptu pro slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The difference becomes apparent when you specify a number.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozdíl mezi nimi je patrný při zadání čísla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The difference is how you submit them to the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Liší se to, jak je budete doručovat do projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The double-dot syntax is useful as a shorthand; but perhaps you want to specify more than two branches to indicate your revision, such as seeing what commits are in any of several branches that aren’t in the branch you’re currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zápis s dvěma tečkami přestavuje užitečnou zkratku. Možná ale budete chtít k označení revize určit více než dvě větve, např. až budete chtít zjistit, které revize jsou obsaženy ve všech ostatních větvích a zároveň nejsou obsaženy ve větvi, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The downside of the Git protocol is the lack of authentication.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nevýhodou protokolu Git je, že neprovádí autentizaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The easiest is probably to install the Xcode Command Line Tools.(((Xcode)))
On Mavericks (10.9) or above you can do this simply by trying to run 'git' from the Terminal the very first time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T122432Z" creationid="Prikryl" creationdate="20151027T211130Z">
        <seg>Nejjednodušší pravděpodobně bude, když nainstalujete nástroje příkazového řádku Xcode.(((Xcode)))
U systému Mavericks (10.9) a vyšších můžete v okně Terminálu zkusit hned od začátku napsat `git`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The easiest way is to specify `-a` when you run the `tag` command:(((git commands, tag)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150217Z" creationid="Prikryl" creationdate="20151107T150217Z">
        <seg>Nejjednodušším způsobem je zadat k příkazu `tag` parametr `-a`:(((git příkazy, tag)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The easiest way to integrate the branches, as we've already covered, is the `merge` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T083059Z" creationid="Prikryl" creationdate="20151214T083059Z">
        <seg>Jak jsme si již ukázali, nejjednodušší způsob spojení větví spočívá v použití příkazu `merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The editor displays the following text (this example is a Vim screen):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Editor zobrazí následující text (tento příklad je z editoru Vim):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The end snapshot should be identical no matter which order she chooses; only the history will be slightly different.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T213206Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Konečný snímek bude stejný, ať zvolí jakékoli pořadí. Trochu se bude lišit jen historie revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The examples in the previous section show `schacon` in some places, such as the `blame` output and the `git svn log`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V předchozí části se u některých příkladů (výstupy příkazů `blame` nebo `git svn log`) objevilo jméno `schacon`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The file is meant to be consumed by a machine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor je určen ke strojovému zpracování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The files end up looking like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubory nakonec vypadají takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first developer, John, clones the repository, makes a change, and commits locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První vývojář, John, naklonuje repozitář, provede změny a zapíše lokální revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first edition of this book is what got me hooked on Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T150328Z" creationid="Prikryl" creationdate="20151026T150328Z">
        <seg>První vydání této knihy způsobilo, že jsem systému Git propadl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first edition was published over four years ago now.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T083114Z" creationid="Prikryl" creationdate="20151026T131345Z">
        <seg>První vydání bylo publikováno před více než čtyřmi lety footnote:[Pozn. překl.: Originál i český překlad první edice vyšly v roce 2009. Druhé vydání originálu vyšlo v roce 2014.].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first four hooks have to do with the committing process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První čtyři zásuvné moduly se týkají zapisování revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first hook that is run is `applypatch-msg`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První zásuvným modulem, který se spouští, je `applypatch-msg`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first is `git svn create-ignore`, which automatically creates corresponding `.gitignore` files for you so your next commit can include them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím prvním je `git svn create-ignore`, jenž automaticky vytvoří odpovídající soubory `.gitignore`, podle nichž se bude řídit už vaše příští revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first is to set up accounts for everybody, which is straightforward but can be cumbersome.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním způsobem je nastavit účty pro všechny, což je sice přímočaré, ale může to být poněkud zdlouhavé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first line tells Git to ignore any files ending in ``.o'' or ``.a'' – object and archive files that may be the product of building your code.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T204141Z" creationid="Prikryl" creationdate="20151029T175714Z">
        <seg>První řádek Gitu říká, že se mají ignorovat všechny soubory končící na `.o` nebo `.a` -- objekty a archivní soubory, které mohou být výsledkem překladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first line was printed out by you, the other two were Git telling you that the update script exited non-zero and that is what is declining your push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První řádek jste vytvořili vy, dalšími dvěma řádky vám Git sděluje, že je výstup skriptu update nenulový, a proto bude odeslání odmítnuto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first parent is the branch you were on when you merged, and the second is the commit on the branch that you merged in:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První rodič je větev, na níž jste se během začlenění nacházeli, druhým rodičem je větev, kterou jste začleňovali:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first place Git looks for these values is in an `/etc/gitconfig` file, which contains values for every user on the system and all of their repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním místem, kde Git tyto hodnoty vyhledává, je soubor `/etc/gitconfig`, obsahující hodnoty pro každého uživatele v systému a všechny jejich repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first problem is the author information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním problémem jsou informace o autorovi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first script to run when handling a push from a client is `pre-receive`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním skriptem, který se při manipulaci s revizemi přijatými od klienta spustí, je `pre-receive`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first section of this chapter will cover the available protocols and the pros and cons of each.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T142616Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První část této kapitoly se bude věnovat dostupným protokolům a kladům a záporům každého z nich.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first takes an existing project or directory and imports it into Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T210519Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První způsob spočívá v tom, že vezmeme existující projekt nebo adresář a importujeme ho do Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first thing this command does is pull down the `info/refs` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První věcí, kterou příkaz udělá, je stažení souboru `info/refs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first thing you should do when you install Git is to set your user name and email address.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T114348Z" creationid="Prikryl" creationdate="20151107T114348Z">
        <seg>První věcí, kterou byste měli po nainstalování systému Git udělat, je nastavení vašeho uživatelského jména a e-mailové adresy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first variable is active contributor count – how many users are actively contributing code to this project, and how often?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T191607Z" creationid="Prikryl" creationdate="20160110T115835Z">
        <seg>První proměnnou je počet aktivních přispěvatelů. Kolik uživatelů aktivně přispívá svým kódem do projektu a jak často?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The following command is equivalent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující příkaz je ekvivalentní:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The format consists of the word data, the size of the data to be read, a newline, and finally the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento formát tedy obsahuje slovo data, velikost načítaných dat (size), nový řádek a konečně data samotná (contents).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The format for listing the new file contents or specifying a modified file with the new contents is as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Formát pro výpis obsahu nového souboru nebo určení změněného souboru s novým obsahem je následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The format of the refspec is an optional `+`, followed by `&lt;src&gt;:&lt;dst&gt;`, where `&lt;src&gt;` is the pattern for references on the remote side and `&lt;dst&gt;` is where those references will be written locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Refspec má následující formát: fakultativní znak `+`, za nímž následuje `&lt;src&gt;:&lt;dst&gt;`, kde `&lt;src&gt;` je vzor pro referenci na straně vzdáleného serveru a `&lt;dst&gt;` je lokální umístění, kam mají být tyto reference zapsány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The general sequence is something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T221424Z" creationid="Prikryl" creationdate="20160115T221424Z">
        <seg>Obvyklá posloupnost vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The hooks are all stored in the `hooks` subdirectory of the Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny zásuvné moduly jsou uloženy v podadresáři `hooks` adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The idea is that your branches are at various levels of stability; when they reach a more stable level, they're merged into the branch above them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T141428Z" creationid="Prikryl" creationdate="20151209T141428Z">
        <seg>Hlavní myšlenka je taková, že se větve nacházejí na různé úrovni stability. Jakmile dosáhnou stability o stupeň vyšší, jsou začleněny do větve nad nimi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The idea of the subtree merge is that you have two projects, and one of the projects maps to a subdirectory of the other one and vice versa.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začlenění podstromu spočívá v tom, že máte dva projekty a jeden z projektů se promítá do podadresáře druhého projektu a naopak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The index is a file that contains offsets into that packfile so you can quickly seek to a specific object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Index je soubor, který obsahuje ofsety do tohoto balíčkového souboru, díky nimž lze rychle vyhledat konkrétní objekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The installer includes a command line version of Git as well as the GUI.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T235853Z" creationid="Prikryl" creationdate="20151027T235853Z">
        <seg>Instalátor v sobě zahrnuje jak verzi Gitu pro příkazový řádek, tak i grafické uživatelské rozhraní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The interactive rebase gives you a script that it’s going to run.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V interaktivním režimu přeskládání se nyní spustí skript.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The issue with including the library is that it’s difficult to customize the library in any way and often more difficult to deploy it, because you need to make sure every client has that library available.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problém s použitím knihovny je ten, že je obtížné knihovnu jakýmkoli způsobem upravit a často ještě těžší ji nasadit, protože se musíte ujistit, že ji má k dispozici každý klient.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The issue with vendoring the code into your own project is that any custom changes you make are difficult to merge when upstream changes become available.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problémem s převzetím zdrojového kódu do vlastního projektu bývá, že jakékoli uživatelské změny, které provedete, se obtížně začleňují, pokud se objeví novější změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last major range-selection syntax is the triple-dot syntax, which specifies all the commits that are reachable by either of two references but not by both of them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední významnou syntaxí k určení intervalu je trojtečková syntaxe, která vybere všechny revize dostupné ve dvou referencích, ale ne v obou zároveň.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last piece of meta-information you need for each commit is the committer data, which you hardcode in a global variable:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posledními metadaty, jež budete pro všechny revize potřebovat, jsou informace o autorovi revize, které zadáte v globální proměnné:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last really useful option to pass to `git log` as a filter is a path.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T121839Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední opravdu užitečná volba pro `git log` spočívá ve filtrování podle zadané cesty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last thing to do is add your new Git server as a remote and push to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední věcí, která ještě zbývá, je přidat nový server Git jako vzdálený repozitář a odeslat do něj revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last thing to keep in mind is the commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T125412Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední věcí, na kterou byste měli myslet, jsou zprávy k revizím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last thing you need to do is to return the current mark so it can be passed to the next iteration:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední věcí, kterou musíte udělat, je vrátit aktuální označovač, aby mohl být zadán do příští iterace:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The latter wouldn't be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T192923Z" creationid="Prikryl" creationdate="20151219T192923Z">
        <seg>Druhá varianta není právě ideální, protože všechny instance repozitáře s kódem jsou umístěny na stejném počítači, čímž se zvyšuje riziko katastrofické ztráty dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main reason to specify the `file://` prefix is if you want a clean copy of the repository with extraneous references or objects left out – generally after an import from another version-control system or something similar (see &lt;&lt;_git_internals&gt;&gt; for maintenance tasks).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T194525Z" creationid="Prikryl" creationdate="20151219T194525Z">
        <seg>Hlavním důvodem, proč zadat předponu `file://` je to, že tak získáte čistou kopii repozitáře bez nepotřebných referencí a objektů, například po importu z jiného verzovacího systému a podobně (viz popis úkonů správy v kapitole &lt;&lt;_git_internals&gt;&gt;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main tool you use to determine which files are in which state is the `git status` command.(((git commands, status)))
If you run this command directly after a clone, you should see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110002Z" creationid="Prikryl" creationdate="20151029T110002Z">
        <seg>Hlavním nástrojem na zjišťování stavu jednotlivých souborů je příkaz `git status`.(((git commands, status)))
Spustíte-li tento příkaz bezprostředně po klonování, objeví se zhruba následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer adds the contributor's repo as a remote and merges locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T172304Z" creationid="Prikryl" creationdate="20160109T160147Z">
        <seg>Správce si přidá přispěvatelův repozitář jako vzdálený a provede lokální sloučení (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T172113Z" creationid="Prikryl" creationdate="20160109T155559Z">
        <seg>Správce si pak může váš repozitář přidat jako vzdálený, lokálně otestovat vaše změny, začlenit (merge) je do své větve a odeslat zpět (push) do svého repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer of the Git project has solved this issue by including their public key as a blob in the repository and then adding a tag that points directly to that content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce projektu Git vyřešil tento problém tak, že přidal svůj veřejný klíč jako blob do repozitáře a poté vložil značku, která ukazuje přímo na tento obsah.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer pushes merged changes to the main repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T161850Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce odešle začleněné změny do hlavního repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T075623Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Hlavním rozdílem mezi systémem Git a všemi ostatními systémy pro správu verzí (včetně Subversion a spol) je způsob, jakým Git o datech uvažuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The mechanism that Git uses for this checksumming is called a SHA-1 hash.(((SHA-1)))
This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T094642Z" creationid="Prikryl" creationdate="20151027T094642Z">
        <seg>Pro vytváření kontrolních součtů používá Git mechanismus zvaný SHA-1.(((SHA-1)))
Jde se o řetězec o 40 hexadecimálních znacích (0–9, a–f) vypočítaný na základě obsahu souboru nebo adresářové struktury systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The merge goes smoothly – John's commit history now looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144949Z" creationid="Prikryl" creationdate="20160115T144949Z">
        <seg>Sloučení probíhá hladce -- Johnova historie revizí teď vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most basic and powerful tool to do this is the `git log` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejzákladnějším a nejmocnějším nástrojem je v tomto případě příkaz `git log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most common range specification is the double-dot syntax.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejčastěji se při označení intervalu používá dvojtečková syntaxe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most interesting option is `format`, which allows you to specify your own log output format.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T113851Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejzajímavější možností je předpis `format`, který vám umožní předepsat vlastní formát výstupu logu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most obvious is the single point of failure that the centralized server represents.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T185642Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tím nejkřiklavějším je kolaps po výpadku jediného místa, kterým je centrální server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next hook to run when applying patches via `git am` is `pre-applypatch`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další zásuvným modulem, který se může spouštět při aplikaci záplaty příkazem `git am`, je `pre-applypatch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next issue is your commit access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další otázkou je vaše oprávnění k zapisování revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next line is 0000, meaning the server is done with its references listing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující řádek je 0000 – touto kombinací server označuje konec seznamu referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next section deals with projects that prefer to accept contributed patches via email.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T184907Z" creationid="Prikryl" creationdate="20160121T184907Z">
        <seg>Další část pojednává o projektech, které upřednostňují přijímání záplat posílaných e-mailem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next sections will explain some typical setups using those protocols and how to get your server running with them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T143214Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalších částech vysvětlíme některé typické konfigurace, které těchto protokolů využívají, a jak s nimi uvést server do provozu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next time one of your collaborators fetches from the server, they will get a reference to where the server's version of `serverfix` is under the remote branch `origin/serverfix`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144111Z" creationid="Prikryl" creationdate="20151210T130747Z">
        <seg>Až bude příště některý z vašich spolupracovníků vyzvedávat data ze serveru, obdrží referenci na místo, kde se nachází serverová verze větve `serverfix` pod jménem vzdálené větve `origin/serverfix`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next time you commit, the file will be gone and no longer tracked.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224903Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při příštím zápisu (commit) už tam soubor neuvidíte a nebude se sledovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next two sections demonstrate how to wrangle your staging area and working directory changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující dvě části popisují, jak se poprat s oblastí připravených změn a se změnami v pracovním adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next variable is the workflow in use for the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další proměnnou je pracovní postup, který se u projektu využívá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T130851Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dobré je, že příkaz, jímž se zjišťuje stav těchto dvou oblastí, zároveň připomíná, jak v nich nežádoucí změny zrušit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The nice thing about this wrapper setup is that you can change your diff and merge tools easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příjemné na tomto wrapperovém nastavení je, že lze snadno změnit nástroj diff i nástroj pro slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The oneline and format options are particularly useful with another `log` option called `--graph`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T213044Z" creationid="Prikryl" creationdate="20151102T213044Z">
        <seg>Parametry `oneline` a `format` jsou zvlášť užitečné ve spojení s další volbou příkazu `log` nazvanou `--graph`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The only real difference is that `mv` is one command instead of three – it's a convenience function.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T105429Z" creationid="Prikryl" creationdate="20151031T231701Z">
        <seg>Jediným skutečným rozdílem je, že `mv` je jediný příkaz místo tří -- jde o funkci pro zjednodušení práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The only reason nearly every repository has one is that the `git init` command creates it by default and most people don't bother to change it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150658Z" creationid="Prikryl" creationdate="20151108T150658Z">
        <seg>Jediným důvodem, proč ji najdete skoro v každém repozitáři, je to, že ji standardně vytváří příkaz `git init` a většina lidí se nezatěžuje tím, že by to změnili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T083536Z" creationid="Prikryl" creationdate="20151214T210627Z">
        <seg>Z opačného pohledu je historie zápisu revizí *příběhem o tom, jak váš projek vznikal*.
U knihy byste také nepublikovali pracovní verzi a příručka o tom, jak udržovat udržovat váš vlastní software vyžaduje pečlivé úpravy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other advantage of this approach is that you get the history of the commits as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další výhodou tohoto postupu je, že získáte rovněž historii revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other files are your new packfile and an index.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ostatní soubory jsou v novém balíčkovém souboru a indexu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other important difference is the way you get a listing of the files that have been changed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhým důležitým rozdílem je způsob, jak se zobrazí seznam změněných souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other large change in the time since the last publishing has been the development and rise of the HTTP protocol for Git network transactions.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T144136Z" creationid="Prikryl" creationdate="20151026T144136Z">
        <seg>Další velkou změnu od prvního vydání knihy byl vývoj a vzestup HTTP protokolu pro síťové transakce systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other main ancestry specification is the `~`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další základní možností označení původu je znak `~`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other main way to specify a commit is via its ancestry.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další základní způsob, jak specifikovat konkrétní revizi, je na základě jejího původu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other thing `gc` will do is pack up your references into a single file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další operací, kterou `gc` provede, je zabalení referencí do jediného souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The output can be sent to the maintainer – it tells them where the work was branched from, summarizes the commits, and tells where to pull this work from.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T200509Z" creationid="Prikryl" creationdate="20160121T200509Z">
        <seg>Výstup příkazu lze odeslat správci. Říká mu, odkud daná větev vychází, podá mu přehled o revizích a řekne mu, odkud lze práci stáhnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The output from the command is a 40-character checksum hash.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstupem příkazu je 40znakový otisk kontrolního součtu (checksum hash).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The output looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jeho výstup vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The packfile is a single file containing the contents of all the objects that were removed from your filesystem.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Balíčkový soubor je jediný soubor, v němž je zabalen obsah všech objektů odstraněných ze systému souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The previous example uses the `https://` protocol, but you may also see `git://` or `user@server:path/to/repo.git`, which uses the SSH transfer protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T214243Z" creationid="Prikryl" creationdate="20151028T214243Z">
        <seg>Předchozí příklad využívá protokol `https://`, můžete se ale setkat také s protokolem `git://` nebo `user@server:/path/to/repo.git`, který používá přenosový protokol SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The problem is, you don’t want to do a commit of half-done work just so you can get back to this point later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problém je, že nebudete chtít zapsat revizi nehotové práce, budete se k ní chtít vrátit později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The process works as follows (see &lt;&lt;wfdiag_b&gt;&gt;):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T172202Z" creationid="Prikryl" creationdate="20160109T155625Z">
        <seg>Proces funguje následovně (viz obrázek &lt;&lt;wfdiag_b&gt;&gt;):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The process works like this (see &lt;&lt;wfdiag_c&gt;&gt;):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T231114Z" creationid="Prikryl" creationdate="20160109T231114Z">
        <seg>Proces funguje nějak takto (viz obrázek &lt;&lt;wfdiag_c&gt;&gt;):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The project maintainer pushes to their public repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T155938Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce projektu odešle data do svého veřejného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The project snapshot at the tip of the branch is identical whether you do one commit or five, as long as all the changes are added at some point, so try to make things easier on your fellow developers when they have to review your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T124750Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snímek projektu na vrcholu větve bude stejný, ať zapíšete jednu revizi, nebo pět (za předpokladu, že vložíte všechny změny). Snažte se proto usnadnit práci svým kolegům, kteří možná někdy budou vaše změny revidovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The pros of file-based repositories are that they're simple and they use existing file permissions and network access.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151228T184555Z" creationid="Prikryl" creationdate="20151219T195016Z">
        <seg>Výhoda souborových repozitářů spočívá v tom, že jsou jednoduché a používají existující oprávnění k souborům a pro přístup k síti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The pros of using SSH are many.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používání protokolu SSH přináší mnoho výhod.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The public keys look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veřejné klíče mají zhruba tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The question now is, when you run `git branch (branchname)`, how does Git know the SHA-1 of the last commit?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se však nabízí otázka, jak může Git při spuštění příkazu `git branch (název větve)` znát hodnotu SHA-1 poslední revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The really nice thing about this is that it can be repacked at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na celém balíčku je navíc příjemné, že ho můžete kdykoli znovu zabalit do nové podoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The reason is that if the work isn't accepted or is cherry picked, you don't have to rewind your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T193312Z" creationid="Prikryl" creationdate="20160121T193312Z">
        <seg>Důvod je ten, že pokud nebude vaše práce přijata, nebo pokud z ní budou převzaty jen některé revize, nebudete muset svou větev `master` vracet zpět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The result tells you the changes you've made that you haven't yet staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T092015Z" creationid="Prikryl" creationdate="20151030T092015Z">
        <seg>Výsledek vám řekne, jaké změny jste provedli a dosud nepřipravili k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The rules for the patterns you can put in the `.gitignore` file are as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravidla pro masky, které můžete použít v souboru `.gitignore`, jsou následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The same commit-message editor fires up, but it already contains the message of your previous commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustí se stejný editor pro editaci zpráv k revizím, ale tentokrát už obsahuje zprávu z vaší předchozí revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The script puts helpful instructions in the rebase message:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript vám ve zprávě k přeskládání podává užitečné instrukce:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second clones an existing Git repository from another server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T135522Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhý způsob spočívá v naklonování již existujícího gitového repozitáře z jiného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second command is `git svn show-ignore`, which prints to stdout the lines you need to put in a `.gitignore` file so you can redirect the output into your project exclude file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhým z příkazů je `git svn show-ignore`, který zobrazí standardní výstup stdout s řádky, které budete muset vložit do souboru `.gitignore`. Výstup pak můžete přesměrovat do souboru exclude svého projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second developer must merge in the first one's work before pushing changes up, so as not to overwrite the first developer's changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T152817Z" creationid="Prikryl" creationdate="20160109T152817Z">
        <seg>Druhý vývojář musí před odesláním svých změn začlenit (merge) práci prvního vývojáře do své, aby nepřepsal jeho změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second developer, Jessica, does the same thing – clones the repository and commits a change:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143013Z" creationid="Prikryl" creationdate="20160115T143013Z">
        <seg>Druhá vývojářka, Jessica, učiní totéž -- naklonuje repozitář a zapíše provedenou změnu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second edition of this book is meant to address those changes and update the book so it can be more helpful to the new user.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T145550Z" creationid="Prikryl" creationdate="20151026T132412Z">
        <seg>Druhé vydání knihy se těmto změnám věnuje a snaží se o to, aby byl pro nového uživatele obsah knihy užitečnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second line tells Git to ignore all files that end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T175801Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhý řádek Gitu říká, aby ignoroval všechny soubory končící vlnovkou (`~`), kterou mnoho textových editorů (např. Emacs) používá k označení dočasných souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The sequence for the workflow you saw here is something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T150449Z" creationid="Prikryl" creationdate="20160118T150449Z">
        <seg>Posloupnost událostí ve zde popsaném pracovním postupu vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The sequence looks basically like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T185954Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posloupnost příkazů vypadá v podstatě takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The simple case is the example you just saw, running `git checkout -b [branch] [remotename]/[branch]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T113206Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduchým případem je příklad, který jste právě viděli -- spuštění příkazu `git checkout -b [větev] [vzdálený]/[větev]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The simplest is just to keep it in memory for a few minutes, which you can easily set up by running `git config --global credential.helper cache`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T130125Z" creationid="Prikryl" creationdate="20151210T130125Z">
        <seg>Nejjednodušší je podržet tyto informace pár minut v paměti, čehož snadno dosáhnete spuštěním `git config --global credential.helper cache`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The stable branches are farther down the line in your commit history, and the bleeding-edge branches are farther up the history.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T135307Z" creationid="Prikryl" creationdate="20151209T135307Z">
        <seg>Stabilní větve leží v linii historie revizí níže a větve s nejčerstvějšími novinkami se nacházejí nad nimi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T131649Z" creationid="Prikryl" creationdate="20151027T120641Z">
        <seg>Oblast připravených změn je soubor, většinou uložený v adresáři Git, který obsahuje informace o tom, co bude obsahovat příští objekt revize (commit{empty}footnote:[Pozn. překl.: V angličtině se slovo _commit_ používá i jako podstatné jméno s významem výsledku posledního zápisu do databáze Gitu příkazem `commit`. V grafických nástrojích bývá zobrazován jako bod (tečka, kulička, hvězdička). Pojem _revize_ má význam spíš abstraktnější, ale též vyjadřující stav projektu (bez důrazu na způsob uložení nebo znázornění). Pojem _revize_ má v souvislosti se systémy správy verzí své historické kořeny -- viz zmíněný systém RCS (Revision Control System). Je to pravděpodobně rozumný jednoslovný český pojem, kterým se dá nahradit jednoslovné vyjádření _commit_. V situacích vyžadujících přesnější představu budu používat raději dvouslovný „objekt revize“]).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The status of the simplegit.rb file is interesting.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zajímavý je stav souboru simplegit.rb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The useful `--merged` and `--no-merged` options can filter this list to branches that you have or have not yet merged into the branch you're currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210843Z" creationid="Prikryl" creationdate="20151124T210843Z">
        <seg>Užitečné volby `--merged` a `--no-merged` vám z tohoto seznamu umožní vyfiltrovat větve, které jste do aktuální větve buď začlenili, nebo dosud nezačlenili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T133604Z" creationid="Prikryl" creationdate="20151107T133356Z">
        <seg>Způsob, jakým Git větvení provádí, je neuvěřitelně snadný a operace větvení probíhají téměř okamžitě. A stejně rychlé je většinou i přepínání mezi větvemi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The whole method looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celá metoda vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The workflow required in order to contribute to a project is much different if you have write access to the project than if you don't.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T121825Z" creationid="Prikryl" creationdate="20160110T121825Z">
        <seg>Pracovní postup při přispívání do projektu se velmi liší podle toho, zda máte, či nemáte oprávnění k zápisu do projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The working directory is a single checkout of one version of the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pracovní adresář obsahuje lokální kopii jedné verze projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Their GUI Git tool has an option to install command line tools as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T234939Z" creationid="Prikryl" creationdate="20151027T234939Z">
        <seg>U nástroje GUI Git je možné zvolit, zda se mají instalovat i nástroje pro příkazový řádek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then Jessica tries to push her changes, but the server rejects them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T153716Z" creationid="Prikryl" creationdate="20160109T153716Z">
        <seg>Poté se Jessica pokusí odeslat své změny, ale server je odmítne.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then you can add the submodule:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto ho musíte nejprve vrátit, až potom můžete přidat submodul:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then you need to push your work up to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T192101Z" creationid="Prikryl" creationdate="20160121T192101Z">
        <seg>Do něj teď musíte odeslat (push) svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, John, Josie, or Jessica can push the first version of their project into that repository by adding it as a remote and pushing up a branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John, Josie a Jessica pak mohou do tohoto repozitáře odeslat první verzi svého projektu: přidají si ho jako vzdálený repozitář a odešlou do něj svou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, compile and install:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté spusťte kompilaci a instalaci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, if you run `git rm`, it stages the file's removal:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224751Z" creationid="Prikryl" creationdate="20151031T224751Z">
        <seg>Pokud ale provedete `git rm`, odstranění souboru bude připraveno k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, it adds a space followed by the size of the content and finally a null byte:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté vloží mezeru, za níž bude následovat velikost obsahu a na konec nulový byte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, open the file with `File.open()` and write out the previously zlib-compressed content to the file with a `write()` call on the resulting file handle:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté zadejte `File.open()` pro otevření souboru a voláním `write()` na vzniklý identifikátor souboru zapište do souboru právě zkomprimovaný (zlib) obsah:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté spusťte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, she can see what has been changed with `git log`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté si může příkazem `git log` prohlédnout, co všechno bylo změněno:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, when the codebase on that branch is stable and passes tests, you merge it into a develop branch; and when that has proven itself stable for a while, you fast-forward your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teprve pokud je kód v této větvi stabilní a projde testováním, začleníte ho do větve develop. A až se větev develop ukáže v některém okamžiku jako stabilní, posunete rychle vpřed i svou hlavní větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, write some new content to the file, and save it again:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté do souboru zapište nový obsah a znovu ho uložte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you branched off that to make the client-side changes (`client`) and committed a few times.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T124143Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté jste se odvětvili, abyste učinili změny na straně klienta (`client`), a provedli jste několik zápisů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can directly import the key into the Git database by exporting it and piping that through `git hash-object`, which writes a new blob with those contents into Git and gives you back the SHA-1 of the blob:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté můžete klíč přímo importovat do databáze Git: vyexportujte ho a použijte příkaz `git hash-object`, který zapíše nový blob s tímto obsahem do systému Git a vrátí vám otisk SHA-1 tohoto blobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can fast-forward the base branch (`master`):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T142149Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté můžete bázovou větev (`master`) přesunout „rychle vpřed“:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can push to and pull from that remote as though you were doing so over a network.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T194918Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté můžete do vzdáleného repozitáře data odesílat (push) a stahovat je z něj (pull), jako byste tak činili prostřednictvím sítě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can see what the `master` branch on the `origin` remote was the last time you communicated with the server, by checking the `refs/remotes/origin/master` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté se můžete podívat, jakou podobu měla větev `master` na vzdáleném serveru `origin`, když jste s ním naposledy komunikovali. Pomůže vám s tím soubor `refs/remotes/origin/master`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can send a request to the maintainer of the main project to pull in your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T155402Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté můžete správci hlavního projektu odeslat žádost, aby do projektu vaše změny vtáhl (pull).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can use a branch name in any Git command that expects a commit object or SHA-1 value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě můžete použít název větve v libovolném příkazu Git, který vyžaduje objekt revize nebo hodnotu SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you must tell bisect when the last known good state was, using `git bisect good [good_commit]`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté musíte nástroji bisect sdělit, kdy byl kód naposled nepochybně funkční. K tomu použijete příkaz `git bisect good [good_commit]`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you specify the mode, SHA-1, and filename:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomu všemu přidáte režim, SHA-1 a název souboru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, your editor will open to something like this for your placeholder commit message when you commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při zapisování revize váš editor otevře následující šablonu zprávy k revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a couple of interesting things here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstup obsahuje řadu zajímavých informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a couple of minor differences in the configuration file; but for your purpose, this is close to the same thing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bude tu sice pár menších rozdílů v konfiguračním souboru, ale pro náš účel můžeme příkazy považovat za ekvivalentní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a few ways you can give access to everyone on your team.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existuje několik způsobů, jak umožnit přístup všem členům vašeho týmu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a lot of client-side hooks.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na straně klienta existuje mnoho zásuvných modulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a lot of different ways to use Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T190226Z" creationid="Prikryl" creationdate="20151027T190226Z">
        <seg>Git se dá používat mnoha různými způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a lot of great things about Git, but one feature that can cause issues is the fact that a `git clone` downloads the entire history of the project, including every version of every file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systém Git nabízí velké množství úžasných funkcí a možností. Je však jedna věc, která vám může způsobovat problém. Je jí fakt, že příkaz `git clone` stáhne vždy celou historii projektu, všechny verze všech souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are also a few ways to install Git on Windows.(((Windows, installing)))
The most official build is available for download on the Git website.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T235354Z" creationid="Prikryl" creationdate="20151027T235354Z">
        <seg>I v systému Windows lze Git nainstalovat několika způsoby.(((Windows, instalace)))
Hlavní oficiální instalátor se dá stáhnout z domovského webového serveru Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are the original command line tools, and there are many graphical user interfaces of varying capabilities.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T190651Z" creationid="Prikryl" creationdate="20151027T190651Z">
        <seg>K dispozici jsou původní nástroje pro použití z příkazového řádku a je tu i řada grafických uživatelských rozhraní s různými schopnostmi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are two columns to the output - the left hand column indicates that the file is staged and the right hand column indicates that it's modified.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T085429Z" creationid="Prikryl" creationdate="20151029T174843Z">
        <seg>Značka na výstupu se zobrazuje ve dvou sloupcích. Levý sloupec indikuje stav souboru v oblasti připravených změn (index, stage area), v pravém sloupci se indikuje stav v pracovním stromu{empty}footnote:[Pozn. překl.: V době překladu byl originální popis zmatený. Upraveno podle dokumentace.].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are two sets of processes for transferring data: a pair for uploading data and a pair for downloading data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existují dvě sady procesů pro přenos dat: jeden pár pro upload dat a jeden pár pro jejich stahování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are ways to get around this (namely, stashing and commit amending) that we'll cover later on, in &lt;&lt;_git_stashing&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T212908Z" creationid="Prikryl" creationdate="20151111T212814Z">
        <seg>Existují způsoby, jak to obejít (konkrétně odložení (stashing) a úprava revize (commit amending)), těm se však budeme věnovat až později, v části &lt;&lt;_git_stashing&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is a bit of a problem – she needs to push the merged work in her `featureB` branch to the `featureBee` branch on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112440Z" creationid="Prikryl" creationdate="20160118T112440Z">
        <seg>Tady nastává drobný problém. Musí odeslat sloučenou práce ze své větve `featureB` do větve `featureBee` na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T094416Z" creationid="Prikryl" creationdate="20151030T094416Z">
        <seg>Pokud vám víc vyhovují grafické nebo jiné externí programy pro prohlížení změn, pak tu máme další možnost.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is no difference in the end product of the integration, but rebasing makes for a cleaner history.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T112806Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve výsledcích integrace není žádný rozdíl, výsledkem přeskládání je však čistší historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There, you can do a mixed reset of that commit with `git reset HEAD^`, which effectively undoes that commit and leaves the modified files unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odtud můžete vytvořit smíšený reset této revize zadáním příkazu `git reset HEAD^`, který efektivně vrátí všechny změny v revizi a ponechá změněné soubory nepřipraveny k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Therefore, the preferred method for collaborating with someone is to set up an intermediate repository that you both have access to, and push to and pull from that.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T142428Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto se pro spolupráci s ostatními doporučuje zřídit repozitář, ke kterému mají zúčastnění přístup pro odesílání (push) i pro stahování (pull).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These are generally automatically generated files such as log files or files produced by your build system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se většinou o automaticky vygenerované soubory, jako soubory log nebo soubory vytvořené při překladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These are some commonly used workflows that are possible with a distributed system like Git, but you can see that many variations are possible to suit your particular real-world workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T190534Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou tedy některé z běžně používaných pracovních postupů, které umožňují distribuované systémy, jako je Git. Ale sami vidíte, že lze uplatnit řadu variací, aby to vyhovovalo vašim konkrétně používaným pracovním postupům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These are the core parts of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To jsou ústřední součásti adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These channels are regularly filled with hundreds of people who are all very knowledgeable about Git and are often willing to help.(((IRC)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T130350Z" creationid="Prikryl" creationdate="20151028T134155Z">
        <seg>Na těchto kanálech se většinou pohybují stovky lidí, kteří mají se systémem Git bohaté zkušenosti a často ochotně pomohou{empty}footnote:[Pozn. překl.: Nutno ovšem podotknout, že se na těchto kanálech komunikuje v angličtině.].(((IRC)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These commands are nice because you can access them anywhere, even offline.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T133931Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto příkazy jsou šikovné, neboť je můžete spustit kdykoli, dokonce i offline.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These days, you have a huge number of hosting options to choose from, each with different advantages and disadvantages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dnešní době můžete vybírat z velkého počtu možností hostingu. Každá má jiné klady a zápory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These examples use a very simple project called ``simplegit''.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T144603Z" creationid="Prikryl" creationdate="20151102T144603Z">
        <seg>Následující příklady ukazují velmi jednoduchý projekt pojmenovaný `simplegit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These features help encourage developers to create and use branches often.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T173424Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto vlastnosti pomáhají k tomu, aby se vývojáři nebáli větve často vytvářet a používat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T115741Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tyto soubory jsou vytaženy ze zkomprimované databáze v adresáři Git a umístěny na disk, kde je můžete používat nebo upravovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These filters can be set to do all sorts of fun things.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto filtry lze nastavit k různým šikovným úkonům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These instructions tell you exactly what to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto instrukce vám sdělují, že nyní můžete upravit revizi příkazem git commit --amend, a až budete se změnami hotovi, spustit příkaz git rebase --continue.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These options apply to the `git rebase` command as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A toto nastavení platí také pro příkaz `git rebase`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These scripts run before and after pushes to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto skripty se spouštějí před odesíláním revizí na server i po něm.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T080434Z" creationid="Prikryl" creationdate="20151027T080434Z">
        <seg>Tyto systémy (CVS, Subversion, Perforce, Bazaar atd.) chápou uložené informace jako sadu souborů a změn každého z těchto souborů v čase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T184148Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tyto systémy, jako je CVS, Subversion a Perforce, používají jeden server, který uchovává všechny verzované soubory, a více klientů, kteří umí soubory z centrálního místa získat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These tools are very helpful if you modify a bunch of files and then decide that you want those changes to be in several focused commits rather than one big messy commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto nástroje se vám mohou velmi hodit, jestliže upravujete několik souborů a rozhodnete se, že tyto změny zapíšete raději do několika specializovaných revizí než do jedné velké nepřehledné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These values are specific to that single repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto hodnoty platí pouze pro tento konkrétní repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They aren’t necessarily obvious but are helpful to know.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není nezbytně nutné, abyste je všechny znali, ale mohou být užitečné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They can use that key to verify all your signed tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Klíč pak může použít k ověření všech vašich podepsaných značek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They have another parallel branch named `develop` or `next` that they work from or use to test stability – it isn't necessarily always stable, but whenever it gets to a stable state, it can be merged into `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T091442Z" creationid="Prikryl" creationdate="20151209T091442Z">
        <seg>Kromě toho mají další, paralelní větev `develop` nebo `next`, ve které pracují nebo ji používají pro testování stability. Tato větev nemusí být nutně stabilní, ale jakmile se dostane do stabilního stavu, může být začleněna do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They take the form `(remote)/(branch)`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T105453Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mají podobu `(vzdálený)/(větev)`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They will stay as modified files on your disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zůstanou na vašem disku jako změněné soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They're checksummed; contain the tagger name, email, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145918Z" creationid="Prikryl" creationdate="20151107T145918Z">
        <seg>U anotovaných značek se provádí kontrolní součet. Obsahují jméno autora značky (tagger), e-mail a datum, nesou vlastní zprávu značky (tagging message) a mohou být podepsány (signed) a ověřeny (verified) v programu GNU Privacy Guard (GPG).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They're local references that you can't move; they're moved automatically for you whenever you do any network communication.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T104035Z" creationid="Prikryl" creationdate="20151210T104035Z">
        <seg>Jsou to lokální reference, které nemůžete posunovat. Posunují se automaticky v době, kdy probíhá komunikace po síti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento fragment Perl vyjme vše, co najde v řetězci `$Date$`, čímž se vrátí zpět do stavu, kde jste začali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T194112Z" creationid="Prikryl" creationdate="20151026T194112Z">
        <seg>Díky tomu lze zavést několik typů pracovních postupů, které nejsou v centralizovaných systémech možné -- jako jsou například hierarchické modely.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This also means that there is very little you can't do if you're offline or off VPN.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T093044Z" creationid="Prikryl" creationdate="20151027T093044Z">
        <seg>To také znamená, že je jen velmi málo operací, které nemůžete provádět offline nebo bez připojení k VPN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This also means the changes you make from this point forward will diverge from an older version of the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T165152Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To také znamená, že změny, které od tohoto okamžiku provedete, vedou k odklonu od starší verze projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This also refers to the first parent, so `HEAD~` and `HEAD^` are equivalent.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také tento znak označuje prvního rodiče, výrazy `HEAD~` a `HEAD^` jsou proto ekvivalentní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This approach also makes it easier to pull out or revert one of the changesets if you need to later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T124948Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takový přístup současně usnadňuje stahování změn (pull) nebo vracení jedné sady změn do původního stavu -- bude-li to později třeba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This approach is very common because it is so simple, but it is also incredibly error prone.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T182112Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Takový přístup je velmi častý, protože je jednoduchý, ale je také velmi náchylný k chybám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This basically asks Git to resolve a range of commits that are reachable from one commit but aren’t reachable from another.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí ní systému Git v podstatě říkáte, aby uvažoval celý interval revizí, které jsou dostupné z jedné revize, ale nejsou dostupné z jiné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This basically says, ``Check out the client branch, figure out the patches from the common ancestor of the `client` and `server` branches, and then replay them onto `master`.''
It's a bit complex, but the result is pretty cool.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T212447Z" creationid="Prikryl" creationdate="20151214T125245Z">
        <seg>V podstatě tím říkáte: „Přepni se (checkout) na větev `client`, zjisti záplaty od společného předka větví `client` a `server` a znovu je aplikuj na větev `master`.“ Je to možná trochu složitější, ale výsledek stojí za to.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This book covers how to use Git with 30 or so verbs such as `checkout`, `branch`, `remote`, and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této knize jsme dosud uvedli asi 30 příkazů, které se používají k ovládání systému Git, např. `checkout`, `branch` nebo `remote`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can also be written `HEAD^^^`, which again is the first parent of the first parent of the first parent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Totéž by bylo možné označit výrazem `HEAD^^^`, který opět udává prvního rodiče prvního rodiče prvního rodiče:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T092714Z" creationid="Prikryl" creationdate="20151030T092714Z">
        <seg>Může to být matoucí, protože pokud jste všechny provedené změny připravili k zapsání, bude výstup příkazu `git diff` prázdný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can take a while.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces může chvíli trvat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T201917Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To může zabrat několik sekund nebo dokonce minut -- v závislosti na velikosti projektu --{empty}, zatímco v Gitu tento proces proběhne vždy okamžitě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This chapter covers every basic command you need to do the vast majority of the things you'll eventually spend your time doing with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T135139Z" creationid="Prikryl" creationdate="20151028T202606Z">
        <seg>Tato kapitola popisuje všechny základní příkazy, které potřebujete pro drtivou většinu věcí, jejichž prováděním budete v Gitu trávit svůj čas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This chapter will be about getting started with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T105810Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tato kapitola pojednává o tom, jak se systémem Git začít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This combination effectively filters all C source code files through `indent` before committing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato kombinace ještě před zapsáním účinně přefiltruje veškeré zdrojové soubory pro jazyk C přes program `indent`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command also exits with a non-zero status if the check fails, so you can use it in scripts if you want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže kontrola selže, příkaz vrací nenulový návratový kód, a proto ho lze snadno používat ve skriptech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command compares your staged changes to your last commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T092310Z" creationid="Prikryl" creationdate="20151030T092310Z">
        <seg>Tento příkaz porovná změny připravené k zapsání vůči poslední zapsané revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command does not reach out to the servers, it's telling you about what it has cached from these servers locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T220310Z" creationid="Prikryl" creationdate="20151213T220310Z">
        <seg>Příkaz se nesnaží o navázání kontaktu se serverem. Říká vám jen to, co je pro uvedené servery uchováno lokálně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command gives you a diff, but it may be misleading.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstupem tohoto příkazu bude výpis diff, který však může být lehce matoucí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command is sort of a Swiss army knife for inspecting Git objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz je něco jako švýcarský nůž k prohlížení objektů Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command lists the tags in alphabetical order; the order in which they appear has no real importance.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145232Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vypíše značky v abecedním pořadí. Pořadí zobrazení značek nenese žádnou důležitou informaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command looks up which server ``origin'' is (in this case, it's `git.ourcompany.com`), fetches any data from it that you don't yet have, and updates your local database, moving your `origin/master` pointer to its new, more up-to-date position.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T112125Z" creationid="Prikryl" creationdate="20151210T112125Z">
        <seg>Tento příkaz zjistí, který server je `origin` (v tomto případě je to `git.ourcompany.com`), vyzvedne z něj všechna data, která ještě nemáte, a aktualizuje vaši lokální databázi. Při tom přemístí ukazatel `origin/master` na novou, aktuálnější pozici.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command puts conflict markers in any files it has issues with, much like a conflicted merge or rebase operation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vloží poznámku o konfliktu (conflict marker) do všech souborů, u nichž došlo k problémům, stejně jako u operací sloučení nebo přeskládání, při nichž došlo ke konfliktu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command reads simple instructions from stdin to write specific Git data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz načítá ze vstupů stdin jednoduché instrukce k zapsáni specifických dat systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command removes all files that end with `~`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz odstraní všechny soubory, které končí vlnovkou (`~`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command removes all files that have the `.log` extension in the `log/` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230424Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvedeným příkazem odstraníte všechny soubory s příponou `.log` z adresáře `log/`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command shows which branch is automatically pushed to when you run `git push` while on certain branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131423Z" creationid="Prikryl" creationdate="20151107T131423Z">
        <seg>Tento příkaz ukazuje, která větev bude automaticky odeslána, pokud spustíte příkaz `git push` na určitých větvích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command shows you any commits in your current branch that aren’t in the `master` branch on your `origin` remote.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz zobrazí všechny revize ve vaší aktuální větvi, které nejsou obsaženy ve větvi `master` vzdáleného repozitáře `origin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command shows you only the work your current topic branch has introduced since its common ancestor with master.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142314Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz zobrazí pouze práci, která byla ve vaší aktuální tématické větvi provedena od chvíle, kdy se oddělila od hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command takes your staging area and uses it for the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vezme vaši oblast připravených změn a použije ji k vytvoření revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command uses GPG to verify the signature.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz využívá k ověření podpisu program GPG.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command will apply the other two commits automatically, and then you’re done.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz automaticky aplikuje zbývající dvě revize. Tím je celý proces dokončen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T101037Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz bude funkční, pouze pokud jste klonovali ze serveru, k němuž máte oprávnění pro zápis, a pokud tam mezi tím nikdo nic neodeslal.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T200403Z" creationid="Prikryl" creationdate="20151103T200403Z">
        <seg>Tento příkaz pracuje s velkým množstvím formátů. Můžete zadat konkrétní datum (`"2008-01-15"`) nebo relativní datum, jako je `"2 years 1 day 3 minutes ago"` (před 2 roky, 1 dnem a 3 minutami).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This commit is fine, and now Git has all the information it needs to determine where the issue was introduced.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato revize je v pořádku, a Git tak má nyní všechny informace, které potřebuje k určení, kde problém vznikl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This concept is as true in Git as it is in Subversion(((Subversion))) (or any CVCS), and this model works perfectly well in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T153033Z" creationid="Prikryl" creationdate="20160109T153033Z">
        <seg>Tento koncept platí jak pro Git, tak pro Subversion(((Subversion))) (nebo pro jiný systém pro správu verzí). Bez problémů funguje i v Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This config file can only be changed by `git config -f &lt;file&gt;` as an admin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T114258Z" creationid="Prikryl" creationdate="20151107T114258Z">
        <seg>Tento soubor můžete upravovat jen pokud jste správce a to příkazem `git config -f &lt;soubor&gt;`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This creates a new subdirectory named `.git` that contains all of your necessary repository files – a Git repository skeleton.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T210705Z" creationid="Prikryl" creationdate="20151028T210705Z">
        <seg>Příkaz vytvoří nový podadresář s názvem `.git`, který bude obsahovat všechny soubory nezbytné pro repozitář, tzv. kostru repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This does the equivalent of the `svn copy trunk branches/opera` command in Subversion and operates on the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz je ekvivalentní s příkazem `svn copy trunk branches/opera` v systému Subversion a pracuje na serveru Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This effectively makes nice text-based versions of your Word files before attempting to diff them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Než se Git pokusí zjistit ve wordovských souborech rozdíly, dojde k jejich převedení na hezké textové verze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This entire chapter basically deals with the stuff in this directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celá tato kapitola se bude zabývat v podstatě jen obsahem tohoto adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This example uses the `-L` option to limit the output to lines 12 through 22:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující příklad používá parametr `-L`, který omezí výstup na řádky 12 až 22:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This file is written by the `update-server-info` command, which is why you need to enable that as a `post-receive` hook in order for the HTTP transport to work properly:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento soubor se zapisuje příkazem `update-server-info`. To je také důvod, proč ho je nutné zapnout jako zásuvný modul `post-receive`, aby přenos dat prostřednictvím protokolu probíhal správně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This first example describes contributing via forking on Git hosts that support easy forking.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T184110Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První příklad popisuje, jak se přispívá s využitím odštěpení (fork) na gitovských hostitelských serverech, které podporují snadné vytváření odštěpených projektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This functionality is built into Git at the lowest levels and is integral to its philosophy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T115935Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tato funkčnost je do Gitu zabudována na nejnižších úrovních a je nedílnou součástí jeho filosofie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This gives you a local branch that you can work on that starts where `origin/serverfix` is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem získáte lokální větev, na níž můžete pracovat a která začíná na pozici `origin/serverfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This goes through and rewrites every commit to have your new address.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz projde a přepíše všechny revize tak, aby obsahovaly novou adresu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This helps make the data more useful:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu získáte k datům další užitečné informace:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This hook can likewise validate the presence of files external to Git control that you may want copied in when the working tree changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul může rovněž ověřit přítomnost souborů nezahrnutých do správy verzí systému Git, které možná budete chtít po změnách v pracovním stromě zkopírovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a bit of a shortcut.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je zkrácená verze příkazu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a common enough operation that git provides the `--track` shorthand:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T113436Z" creationid="Prikryl" creationdate="20151213T113436Z">
        <seg>Jde o natolik běžnou operaci, že k ní Git nabízí zkratkový příkaz `--track`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a configuration file that stores the mapping between the project’s URL and the local subdirectory you’ve pulled it into:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o konfigurační soubor, v němž je uloženo mapování mezi adresou URL projektu a lokálním podadresářem, do nějž jste stáhli repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a nice shortcut to recover stashed work easily and work on it in a new branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o příjemný a jednoduchý způsob, jak obnovit odloženou práci a pokračovat na ní v nové větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a powerful tool that can help you check hundreds of commits for an introduced bug in minutes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz představuje výkonný nástroj, který vám pomůže vyhledat zavlečenou chybu mezi stovkami revizí za pár minut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T225438Z" creationid="Prikryl" creationdate="20151031T225438Z">
        <seg>Jde o funkci zvyšující bezpečnost tím, že brání nechtěnému odstranění dat, která ještě nebyla zaznamenána do snímku, a proto by nemohla být Gitem obnovena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to speciální démon, který je distribuován spolu se systémem Git. Naslouchá na vyhrazeném portu (9418) a poskytuje podobnou službu jako protokol SSH, avšak bez jakékoliv autentizace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is also a nice option for quickly grabbing work from someone else's working repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151228T185247Z" creationid="Prikryl" creationdate="20151228T185247Z">
        <seg>Je to taky šikovná možnost rychlého získání práce z pracovního repozitáře někoho jiného.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is also not limited to small teams.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T154259Z" creationid="Prikryl" creationdate="20160109T154259Z">
        <seg>A není také omezen jen na malé týmy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is also useful if you have multiple packfiles on the server, so you can see which packfile contains the object you need:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je rovněž užitečné, máte-li na serveru více balíčkových souborů. Zjistíte tak, který z nich obsahuje hledaný objekt:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Cesta je vždy posledním parametrem a většinou jí předcházejí dvě pomlčky (`--`) , jimiž je oddělena od ostatních parametrů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important distinction between Git and nearly all other VCSs.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T113340Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jde o důležitý rozdíl mezi systémem Git a téměř všemi ostatními systémy pro správu verzí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important distinction – instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211552Z" creationid="Prikryl" creationdate="20151028T211552Z">
        <seg>Tento rozdíl je podstatný. Místo pouhého získání pracovní kopie souborů projektu, získá Git plnou kopii téměř všech dat na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important point to remember: when you switch branches, Git resets your working directory to look like it did the last time you committed on that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T213404Z" creationid="Prikryl" creationdate="20151111T213404Z">
        <seg>Zapamatujte si následující důležitý bod: když přepínáte větve, Git nastavuje obsah pracovního adresáře tak, aby vypadal stejně jako v době, kdy jste v dané větvi prováděli poslední zápis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important section to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T074322Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pochopení této podkapitoly je důležité, protože pokud porozumíte, co Git je a na jakých základech pracuje, bude pro vás i jeho efektivní používání mnohem snadnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is basically the `git log` command, but by default it prints out only the SHA-1 values and no other information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz má v podstatě stejnou funkci jako `git log`, jeho výstupem jsou ale pouze hodnoty SHA-1 bez dalších informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is basically the commit checksum stored in a file – no other information is kept.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223432Z" creationid="Prikryl" creationdate="20151107T223432Z">
        <seg>Jde v podstatě o kontrolní součet revize uložený v souboru -- žádné další informace neobsahuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is because Windows uses both a carriage-return character and a linefeed character for newlines in its files, whereas Mac and Linux systems use only the linefeed character.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Windows ve svých souborech používá pro nové řádky jak znak pro návrat vozíku (carriage return), tak znak pro posun o řádek (linefeed), zatímco systémy Mac a Linux používají pouze znak posun o řádek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is called a _refspec_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Říká se tomu _refspec_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is called a ``patch-id''.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T143742Z" creationid="Prikryl" creationdate="20151214T143742Z">
        <seg>Jmenuje se to „patch-id“ (doslova „identifikace záplaty“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is especially important to understand if you're used to Subversion, because you'll notice that the two developers didn't edit the same file.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143943Z" creationid="Prikryl" creationdate="20160115T143943Z">
        <seg>Pochopit to je obzvlášť důležité v případě, kdy jste zvyklí na Subversion. Můžete si totiž všimnout, že oba vývojáři neupravovali stejný soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is especially useful when you're generating output for machine parsing – because you specify the format explicitly, you know it won't change with updates to Git:(((log formatting)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T113948Z" creationid="Prikryl" creationdate="20151102T150152Z">
        <seg>Je to užitečné zejména v situaci, kdy generujete výstup pro strojové zpracování -- formát předepisujete explicitně, takže máte jistotu, že se s aktualizací Gitu nezmění:(((log formátování)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is fine if the whole thing is source code, because Git is highly optimized to compress that data efficiently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je však jedna věc, která vám může způsobovat problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is generally straightforward to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S tím obvykle nebývá problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is helpful if a branch in your project has diverged or is specialized, but you want to be able to merge changes back in from it, and you want to ignore certain files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto možnost využijete, pokud se rozdělila nebo specializovala některá z větví vašeho projektu, avšak vy z ní budete chtít začlenit změny zpět a ignorovat přitom určité soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is how other people who clone this project know where to get the submodule projects from.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ostatní uživatelé, kteří budou tento projekt klonovat, díky tomu zjistí, kde najdou projekty submodulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T124803Z" creationid="Prikryl" creationdate="20151028T110842Z">
        <seg>Je to důležité, protože tuto informaci Git používá pro každý zápis revize (commit) a uvedené údaje se stanou trvalou součástí objektů revize, které budete vytvářet:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is important because it means that all the SHA-1 checksums for your commits change.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je důležité, protože to znamená, že se změní všechny kontrolní součty SHA-1 vašich revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is important because with more and more developers, you run into more issues with making sure your code applies cleanly or can be easily merged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T192242Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Počet přispěvatelů je důležitý, protože s rostoucím počtem vývojářů narůstají i potíže se zajištěním toho, aby byl váš kód aplikován čistě, nebo aby ho bylo možné snadno začlenit (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T172256Z" creationid="Prikryl" creationdate="20151108T172256Z">
        <seg>Ostře to kontrastuje se způsobem větvení ve většině starších systémů pro správu verzí, který zahrnoval kopírování všech souborů projektu do druhého adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is interesting, because now your `testing` branch has moved forward, but your `master` branch still points to the commit you were on when you ran `git checkout` to switch branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164653Z" creationid="Prikryl" creationdate="20151108T164653Z">
        <seg>Výsledek je zajímavý z toho důvodu, že se větev `testing` posunula vpřed, zatímco větev `master` stále ukazuje na revizi, na níž jste se nacházeli před přepnutím větví příkazem `git checkout`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is just the default refspec for `git fetch` for that remote.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je výchozí vzorec refspec pro příkaz `git fetch` pro tento vzdálený server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is like `blame` and `log` in that it runs offline and is up to date only as of the last time you communicated with the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně jako v případě příkazů `blame` a `log` pracuje i tento příkaz offline a zobrazuje stav v okamžiku, kdy jste naposledy komunikovali se serverem Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is much like specifying `git diff --cached` on the command line:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to prakticky totéž, jako byste na příkazovém řádku zadali příkaz `git diff --cached`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230403Z" creationid="Prikryl" creationdate="20151031T230403Z">
        <seg>Je to nezbytné, protože Git provádí své vlastní nahrazování masek souborů (kromě toho, které provádí shell).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is nice because with this syntax you can specify more than two references in your query, which you cannot do with the double-dot syntax.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato syntaxe je užitečná zejména proto, že pomocí ní můžete zadat více než dvě reference, což není pomocí dvojtečkové syntaxe možné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is often called a pull request, and you can either generate it via the website – GitHub has its own Pull Request mechanism that we'll go over in &lt;&lt;_github&gt;&gt; – or you can run the `git request-pull` command and email the output to the project maintainer manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T195151Z" creationid="Prikryl" creationdate="20160121T195151Z">
        <seg>Často se tomu říká „pull request“, čili požadavek na stažení. Můžete ho vytvořit prostřednictvím webové stránky -- GitHub má svůj vlastní mechanismus Pull Request, kterým se budeme zabývat v kapitole &lt;&lt;_github&gt;&gt; -- nebo můžete spustit příkaz `git request-pull` a správci projektu ručně zaslat výstup příkazu e-mailem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely case that everyone logs in to the same computer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T192753Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Často se využívá v případech, kdy mají všichni z vašeho týmu přístup k sdílenému souborovému systému (například přes NFS), nebo v méně pravděpodobném případě, kdy se všichni přihlašují na stejný počítač.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is one of the few areas in Git where you may lose some work if you do it wrong.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T123612Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to jedna z mála oblastí, kdy při neuváženém postupu v Gitu riskujete, že přijdete o část své práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T104546Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může to být zvlášť užitečné, pokud jste něco zapomněli přidat do souboru `.gitignore` a omylem jste to zahrnuli do oblasti připravených změn -- například velký log soubor nebo spoustu zkompilovaných souborů s příponou `.a`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is really useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato funkce je opravdu užitečná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is referred to as a merge commit, and is special in that it has more than one parent.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T154656Z" creationid="Prikryl" creationdate="20151115T154656Z">
        <seg>Říká se mu bod sloučení (merge commit) a je zvláštní v tom, že má víc než jednoho rodiče.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is roughly equivalent to something like</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to přibližně stejné, jako byste zadali například:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is roughly the same script as the server-side part, but with two important differences.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o přibližně stejný skript, jaký funguje na serveru, avšak se dvěma podstatnými rozdíly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is shorthand for:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153715Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jde o zkratku pro příkazy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is something you've likely never done with a VCS before because it's generally too expensive to create and merge branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142758Z" creationid="Prikryl" creationdate="20151209T142758Z">
        <seg>Je to něco, co byste v dřívějších systémech pro správu verzí nikdy nedělali, protože v nich je vytváření a slučování větví většinou náročné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the basic information that the commit object stores for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou základní informace, které obsahuje objekt revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the beginning of the output of the format-patch command that you saw in the previous section.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je začátek výstupu příkazu format-patch, s nímž jsme se setkali v předchozí části.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T083752Z" creationid="Prikryl" creationdate="20151214T210918Z">
        <seg>Zastánci tohoto tábora používají nástroje jako přeskládání a filtrování větví k tomu, aby příběh sdělili způsobem, který je nejlepší z hlediska budoucích čtenářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the main thing to remember about Git if you want the rest of your learning process to go smoothly.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T115007Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud chcete dále hladce pokračovat ve studiu Gitu, budou pro vás následující informace stěžejní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the most important part of Git, and it is what is copied when you clone a repository from another computer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T115643Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Je to nejdůležitější část systému Git a zároveň je to adresář, který se zkopíruje, když klonujete repozitář z jiného počítače.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is useful if you want to keep the `experiment` branch up to date and preview what you’re about to merge in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento log využijete, pokud chcete udržovat větev `experiment` stále aktuální a zjistit, co hodláte začlenit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is useful if you write your own tools that work with a Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T144026Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je užitečné v případech, kdy si píšete své vlastní nástroje, které s repozitářem Gitu pracují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T112333Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to velmi užitečné při kontrole kódu nebo k rychlému zjištění, co se stalo v posloupnosti revizí, které přidal váš spolupracovník.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is very similar to what `receive-pack` responds with, but the capabilities are different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace se nápadně podobají těm, jimiž odpovídá proces `receive-pack`, liší se však schopnosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This kind of workflow isn't common, but can be useful in very big projects, or in highly hierarchical environments.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T233058Z" creationid="Prikryl" creationdate="20160109T233058Z">
        <seg>Tento typ pracovního postupu sice není běžný, ale může být užitečný u velmi velkých projektů nebo v přísně hierarchických prostředích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Z toho vyplývá, že projekt je v systému Git rozdělen do tří hlavních částí: adresář systému Git (Git directory), pracovní adresář (working directory) a oblast připravených změn (staging area).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This lets you clone another repository into your project and keep your commits separate.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do svého projektu tak můžete naklonovat jiný repozitář a uchovávat revize oddělené.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This looks a bit different than the `hotfix` merge you did earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T153455Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady už se to od dřívějšího slučování s větví `hotfix` trochu liší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T113534Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Díky tomu Git vypadá (spíše než jiné systémy pro správu verzí) jako malý souborový systém, nad kterým pracuje sada neuvěřitelně výkonných nástrojů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes for a very powerful revision query system that should help you figure out what is in your branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím máte v rukou velmi efektivní systém vyhledávání revizí, který vám pomůže zjistit, co vaše větve obsahují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes merging a heck of a lot easier in Git than in these other systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T155408Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím se slučování větví v Gitu stává o dost jednodušší, než je tomu v ostatních systémech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes the following two commands equivalent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zadání takového příkazu budete mít k dispozici dva ekvivalentní příkazy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T120233Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Díky tomu je práce s Gitem radostí, protože víme, že můžeme experimentovat bez nebezpečí závažného poškození hotových věcí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes your `import` command look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš příkaz `import` pak bude mít tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This may be a bit confusing, so let's look at an example.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T104802Z" creationid="Prikryl" creationdate="20151210T104802Z">
        <seg>Mohlo by to být trochu matoucí, takže si uveďme příklad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This may not seem like a huge deal, but you may be surprised what a big difference it can make.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Možná to vypadá jako maličkost, ale divili byste se, jak velký je v tom rozdíl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means it's impossible to change the contents of any file or directory without Git knowing about it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T094152Z" creationid="Prikryl" creationdate="20151027T094152Z">
        <seg>To znamená, že není možné změnit obsah jakéhokoli souboru nebo adresáře, aniž by o tom Git nevěděl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T152702Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že pokud dva vývojáři klonují z centrálního úložiště a oba provedou změny, pak jen první z nich může bez problémů odeslat (push) své změny zpět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that if you commit at this point, the `master` branch will be moved forward with your new work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T134322Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že pokud teď zapíšete revizi, bude se s novou prací posunovat větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that there is generally no pushing over this protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že se přes tento protokol nedají odesílat žádné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that, for example, instead of typing `git commit`, you just need to type `git ci`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že například místo kompletního příkazu `git commit` stačí zadat pouze zkrácené `git ci`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento řádek znamená, že značka bezprostředně nad ním je anotovaná a tento řádek je revize, na niž tato anotovaná značka ukazuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073928Z" creationid="Prikryl" creationdate="20151120T073928Z">
        <seg>To znamená, že verze v `HEAD` (což je vaše větev `master`, protože jste na ni byli přepnutí, když jste spouštěli příkaz `merge`) je uvedena v horní části tohoto bloku (všechno nad oddělovačem `=======`), zatímco verze z větve `iss53` je uvedena v dolní části.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means we can pull contributions from any of these users pretty easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T165426Z" creationid="Prikryl" creationdate="20151101T165426Z">
        <seg>To znamená, že můžeme celkem snadno stáhnout příspěvky od kteréhokoli z těchto uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you can do local branching and merging, use the staging area, use rebasing and cherry-picking, and so on, while your collaborators continue to work in their dark and ancient ways.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že můžete vytvářet nové lokální větve a slučovat je, používat oblast připravených změn, přeskládávat, částečně přejímat atd., zatímco vaši spolupracovníci budou dále pracovat svými zašlými a prastarými způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you can have several branches that are always open and that you use for different stages of your development cycle; you can merge regularly from some of them into others.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T090643Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že můžete mít neustále otevřeno několik větví a můžete je používat pro různé fáze vývojového cyklu. Některé z nich můžete pravidelně slučovat s jinými.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you have a clean working directory – in other words, there are no tracked and modified files.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110150Z" creationid="Prikryl" creationdate="20151029T110150Z">
        <seg>To znamená, že váš pracovní adresář je čistý. Jinými slovy, nejsou v něm žádné sledované soubory, které by byly změněny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you see the project history almost instantly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Znamená to, že se historie projektu zobrazí téměř hned.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means your future commit will have one parent only and allows you to introduce all the changes from another branch and then make more changes before recording the new commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T194708Z" creationid="Prikryl" creationdate="20160122T194419Z">
        <seg>To znamená, že váš budoucí objekt revize bude mít jen jednoho rodiče a přitom vám umožní vnést všechny změny z jiné větve a poté provést další úpravy ještě před tím, než se nová revize zapíše.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This message is displayed because 'merge.tool' is not configured.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103001Z" creationid="Prikryl" creationdate="20151023T103001Z">
        <seg>This message is displayed because 'merge.tool' is not configured.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This modifies the files in your working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím změníte soubory ve svém pracovním adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This moves `HEAD` to point to the `testing` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164158Z" creationid="Prikryl" creationdate="20151108T164158Z">
        <seg>Tím se `HEAD` se přesune a ukazuje na větev `testing`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This object also contains the author's name and email, the message that you typed, and pointers to the commit or commits that directly came before this commit (its parent or parents): zero parents for the initial commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T094239Z" creationid="Prikryl" creationdate="20151108T142915Z">
        <seg>Tento objekt obsahuje také jméno a e-mail autora, zprávu, kterou jste napsali, a odkazy na jeden nebo víc objektů revize, které této revizi přímo předcházely (jeho rodiče): na žádného rodiče pro počáteční revizi, na jednoho rodiče pro běžnou revizi a na více rodičů pro revizi, která je výsledkem sloučení dvou nebo více větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This object type is called a blob.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento typ objektu se nazývá blob.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This occurs fairly commonly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je opravdu velmi častá situace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This only works if C4 and C4' that your partner made are almost exactly the same patch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T153500Z" creationid="Prikryl" creationdate="20151214T153500Z">
        <seg>Funguje to jen tehdy, když C4 a C4', které vytvořil váš partner, představují téměř shodné záplaty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This opens a vast range of workflow possibilities for your project and/or your team, so we'll cover a few common paradigms that take advantage of this flexibility.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T144746Z" creationid="Prikryl" creationdate="20160109T144746Z">
        <seg>Tím se pro váš projekt a váš tým otvírá široké spektrum pracovních postupů. Podíváme se na pár obvyklých přístupů, které dané pružnosti využívají.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option adds a nice little ASCII graph showing your branch and merge history:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T213228Z" creationid="Prikryl" creationdate="20151102T213228Z">
        <seg>Tato volba přidá pěkný malý ASCII graf, znázorňující vaši větev a historii slučování:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option changes the log output to formats other than the default.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T113713Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změní výstup logu na jiný než výchozí formát.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option displays the same information but with a diff directly following each entry.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T112219Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato volba zobrazí stejné informace, ale za každým záznamem následuje informace o rozdílech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option is called `--decorate`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T095500Z" creationid="Prikryl" creationdate="20151108T163522Z">
        <seg>Potřebná volba se jmenuje `--decorate`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This process is just like sharing remote branches – you can run `git push origin [tagname]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224849Z" creationid="Prikryl" creationdate="20151107T224849Z">
        <seg>Tento proces se velmi podobá sdílení vzdálených větví -- můžete provést `git push origin [název-značky]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This process is similar across all operating systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento proces se napříč operačními systémy téměř neliší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper.(((Linus Torvalds)))
Some of the goals of the new system were as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T073359Z" creationid="Prikryl" creationdate="20151027T073359Z">
        <seg>To přimělo komunitu vývojářů Linuxu (a zejména Linuse Torvaldse, tvůrce Linuxu), aby vyvinula vlastní nástroj, založený na poznatcích, které nasbírala při užívání systému BitKeeper.(((Linus Torvalds)))
Některé z cílů nového systému byly následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This pulls the same change introduced in `e43a6`, but you get a new commit SHA-1 value, because the date applied is different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto natáhnete stejnou změnu, která byla provedena revizí `e43a6`, avšak hodnota SHA-1 obou revizí se bude lišit, neboť bude rozdílné datum aplikace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This replays your `server` work on top of your `master` work, as shown in &lt;&lt;rbdiag_h&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T081832Z" creationid="Prikryl" creationdate="20151214T131332Z">
        <seg>Příkaz přehraje práci z větve `server` k práci ve větvi `master` -- viz &lt;&lt;rbdiag_h, obrázek&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This resolution has a little of each section, and the `&lt;&lt;&lt;&lt;&lt;&lt;&lt;`, `=======`, and `&gt;&gt;&gt;&gt;&gt;&gt;&gt;` lines have been completely removed.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T083120Z" creationid="Prikryl" creationdate="20151120T074804Z">
        <seg>Toto řešení obsahuje trochu z každé části a řádky `&lt;&lt;&lt;&lt;&lt;&lt;&lt;`, `=======` a `&gt;&gt;&gt;&gt;&gt;&gt;&gt;` byly úplně odstraněny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This rewrites your history to now look like &lt;&lt;psp_b&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T184026Z" creationid="Prikryl" creationdate="20160122T184026Z">
        <seg>Tím se vaše historie přepíše a bude vypadat jako na obrázku &lt;&lt;psp_b&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This scenario often includes a canonical repository that represents the ``official'' project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T155217Z" creationid="Prikryl" creationdate="20160109T155217Z">
        <seg>Tento scénář často zahrnuje jeden hlavní repozitář, který reprezentuje „oficiální“ projekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section outlines the various ways you can refer to a single commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato část uvede několik různých způsobů, jak lze určit jednu konkrétní revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section will cover some of these scenarios.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato část se na některé z těchto scénářů zaměří.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section will quickly cover how these two main protocols operate.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato část se ve stručnosti zaměří na to, jak tyto dva základní protokoly fungují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This seems a bit clearer.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T145224Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `unstage` vypadá srozumitelněji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This server is at `git.team1.ourcompany.com`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento server se nachází na `git.team1.ourcompany.com`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This sets up the properties to run the sync.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím nastavíte vlastnosti synchronizace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This setup offers many advantages, especially over local VCSs.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T184451Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Toto uspořádání nabízí mnoho výhod, zejména v porovnání s lokálními systémy pro správu verzí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This shows your other branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211546Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím se zobrazí jiná větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This technique allows you to context-switch quickly and completely – because your work is separated into silos where all the changes in that branch have to do with that topic, it's easier to see what has happened during code review and such.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T144023Z" creationid="Prikryl" creationdate="20151209T144023Z">
        <seg>Tato technika umožňuje rychlé a snadné přepínání kontextu. A protože je vaše práce rozdělena do zásobníků, kde všechny změny v jedné větvi souvisejí s jedním tématem, je při kontrole kódu snazší dohledat, čeho se změny týkaly a podobné věci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This technique can also be very useful in creating commands that you think should exist.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato metoda může být velmi užitečná také k vytváření příkazů, které by podle vás měly existovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This technique only works for data that’s still in your reflog, so you can’t use it to look for commits older than a few months.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato možnost funguje pouze pro data, jež jsou dosud v záznamu reflog. Nemůžete ji proto použít pro revize starší než několik měsíců.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This time, if you run `git show` on the tag, you don't see the extra tag information.(((git commands, show)))
The command just shows the commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223646Z" creationid="Prikryl" creationdate="20151107T223604Z">
        <seg>Pokud spustíte příkaz `git show` pro značku tentokrát, nezobrazí se k ní žádné další informace.(((git příkazy, show)))
Příkaz ukáže jen informaci o revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This tool allows you to use Git as a valid client to a Subversion server, so you can use all the local features of Git and then push to a Subversion server as if you were using Subversion locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento nástroj umožňuje používat Git jako platného klienta serveru Subversion. Můžete tak využívat všech lokálních funkcí systému Git, ale revize odesílat na server Subversion, jako byste tento systém používali i lokálně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This type of output will become more interesting as we go through branching and merging in the next chapter.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T213451Z" creationid="Prikryl" creationdate="20151102T213451Z">
        <seg>Tento typ výstupu nás začne víc zajímat, jakmile se v další kapitole začneme zabývat větvením a slučováním.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This was my introduction to a style of making software that felt more natural than anything I had seen before.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T150714Z" creationid="Prikryl" creationdate="20151026T150714Z">
        <seg>Uvedla mě do stylu programování, při kterém jsem se cítil přirozeněji než u přístupů, s kterými jsem se do té doby potkal.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, projects don’t have to worry about adding users as collaborators to give them push access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu se projekty nemusí starat o přidávání uživatelů do role spolupracovníků, kteří by měli právo zápisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can export a snapshot or build and name it something understandable to people.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu lze snímek nebo sestavení (build) vyexportovat a přiřadit mu pro člověka srozumitelný název.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can make sure your commits are logically separate changesets and can be easily reviewed by the developers working with you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem zajistíte, že budou vaše revize logicky oddělenými sadami změn, jež mohou vaši spolupracovníci snadno zkontrolovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can see the last commit easily:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem snadno zobrazíte poslední revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This will list out your local branches with more information including what each branch is tracking and if your local branch is ahead, behind or both.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214757Z" creationid="Prikryl" creationdate="20151213T214757Z">
        <seg>Zobrazí se seznam lokálních větví s dalšími informacemi včetně toho, co každá z větví sleduje a zda má vaše lokální větev náskok, nebo je pozadu, nebo obojí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This will transfer all of your tags to the remote server that are not already there.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T225219Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím se na vzdálený server přenesou všechny vaše značky, které tam ještě nejsou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This workflow is attractive to a lot of people because it's a paradigm that many are familiar and comfortable with.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T171755Z" creationid="Prikryl" creationdate="20160109T154208Z">
        <seg>Tento pracovní postup je pro mnoho lidí zajímavý, protože je to model, který jsou zvyklí používat a jsou s ním spokojeni.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Those are only some simple output-formatting options to `git log` – there are many more.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T114503Z" creationid="Prikryl" creationdate="20151102T213713Z">
        <seg>Uvedli jsme jen několik jednoduchých možností formátování výstupu příkazu `git log`. Existuje jich mnohem víc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Though most of the commands we use should work even in ancient versions of Git, some of them might not or might act slightly differently if you're using an older version.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T204121Z" creationid="Prikryl" creationdate="20151027T204121Z">
        <seg>Ačkoliv by měla většina příkazů fungovat i s historickými verzemi Gitu, některé z nich se mohou chovat při použití starší verze trošku jinak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud v takové situaci dojde ke kolapsu serveru a pokud jej tyto systémy využívaly, můžeme obsah serveru obnovit zkopírováním repozitáře od libovolného uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus it's a bit confusing that Git has a `mv` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T231054Z" creationid="Prikryl" creationdate="20151031T231042Z">
        <seg>Takže se může zdát zvláštní, že Git přesto nabízí příkaz `mv`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus these three commands are equivalent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto tři příkazy jsou tedy ekvivalentní:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus, when you clone the Git repository, you have four branches that you can check out to evaluate the project in different stages of development, depending on how cutting edge you want to be or how you want to contribute; and the maintainer has a structured workflow to help them vet new contributions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tedy klonujete repozitář Git, můžete stáhnout až čtyři větve, a hodnotit tak projekt na čtyřech různých úrovních vývoje. Záleží na vás, do jaké hloubky chcete proniknout nebo jak chcete přispívat. A správce projektu má k dispozici strukturovaný pracovní postup k evaluaci nových příspěvků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To add a local repository to an existing Git project, you can run something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T194726Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K přidání lokálního repozitáře do existujícího gitového projektu můžete něco takového:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To allow read access to your repository over HTTP, do something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li u svého repozitáře nastavit oprávnění pro čtení pomocí protokolu HTTP, proveďte následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To apply a patch generated by `format-patch`, you use `git am`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K aplikaci patche vygenerovaného příkazem `format-patch` použijte příkaz `git am`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To avoid issues, you should delete the local branch (in this case, `opera`) after you merge it into trunk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li se vyhnout možným problémům, smažte lokální větev (v našem případě `opera`) hned poté, co jste ji začlenili do kmenové větve (trunk).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To be able to collaborate on any Git project, you need to know how to manage your remote repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T161408Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste mohli na gitových projektech spolupracovat, je třeba vědět, jak manipulovat se vzdálenými repozitáři (remote repositories).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To be efficient, if files have not changed, Git doesn't store the file again, just a link to the previous identical file it has already stored.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T083633Z" creationid="Prikryl" creationdate="20151027T083633Z">
        <seg>Pokud se soubor nezměnil, pak ho Git v zájmu efektivnosti znovu neukládá, ale jen se odkáže na předchozí identický soubor, který už byl uložen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To begin, she starts a new feature branch, basing it off the server's `master` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111906Z" creationid="Prikryl" creationdate="20160118T111906Z">
        <seg>Začne tím, že založí novou větev, která bude založena na větvi `master` ze serveru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To change that default to something else, you can use the `core.editor` setting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li změnit výchozí hodnotu, použijte nastavení `core.editor`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To clone a Git repository over SSH, you can specify ssh:// URL like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li naklonovat repozitář Git pomocí protokolu SSH, zadejte `ssh://` URL, například:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To clone a repository like this or to add one as a remote to an existing project, use the path to the repository as the URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T193339Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při klonování takového repozitáře, nebo při jeho přidávání jako vzdáleného repozitáře existujícího projektu, se v roli URL používá cesta k repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To contribute to that project, you create your own public clone of the project and push your changes to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T155256Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li do tohoto projektu přispívat, vytvoříte vlastní veřejný klon projektu a odešlete do něj změny, které jste provedli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a branch and switch to it at the same time, you can run the `git checkout` command with the `-b` switch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste vytvořili novou větev a rovnou na ni přepnuli, můžete spustit příkaz `git checkout` s přepínačem `-b`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a branch back at the second commit, you can do this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit větev zpětně na druhé revizi, můžete zadat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a commit object, you call `commit-tree` and specify a single tree SHA-1 and which commit objects, if any, directly preceded it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro vytvoření objektu revize zavolejte příkaz `commit-tree` a zadejte jeden SHA-1 stromu a eventuální objekty revize, které mu bezprostředně předcházely.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a lightweight tag, don't supply the `-a`, `-s`, or `-m` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223452Z" creationid="Prikryl" creationdate="20151107T223452Z">
        <seg>Chcete-li vytvořit prostou značku, nezadávejte ani jeden z parametrů `-a`, `-s` nebo `-m`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a new branch in Subversion, you run `git svn branch [branchname]`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit novou větev v systému Subversion, spusťte příkaz `git svn branch [název větve]`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a new reference that will help you remember where your latest commit is, you can technically do something as simple as this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit novou referenci, díky níž si budete pamatovat, kde se nachází vaše poslední revize, lze to technicky provést velmi jednoduše:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T111117Z" creationid="Prikryl" creationdate="20151026T182654Z">
        <seg>Aby k těmto potížím nedocházelo, vyvinuli programátoři už dávno lokální systémy pro správu verzí. Byly založeny na jednoduché databázi, která uchovávala všechny změny souborů zařazených do správy revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T183730Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pro vyřešení tohoto problému byly vyvinuty tzv. centralizované systémy pro správu verzí (CVCS z anglického Centralized Version Control System).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let's assume you have another internal Git server that is used only for development by one of your sprint teams.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T150529Z" creationid="Prikryl" creationdate="20151210T114244Z">
        <seg>Abychom si mohli ukázat, jak se pracuje s několika vzdálenými servery a jak vypadají vzdálené větve takových vzdálených projektů, předpokládejme, že máte ještě další interní server Git, který při vývoji používá pouze jeden z vašich sprint týmů{empty}footnote:[Pozn. překl.: Pojem „sprint tým“ pochází z agilní vývojové metodologie https://cs.wikipedia.org/wiki/Scrum[Scrum].].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate this functionality, you need a typical SVN repository that you have write access to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom si mohli tuto funkci ukázat, budete potřebovat typický repozitář SVN, k němuž máte oprávnění pro zápis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate, you can use the plumbing command `hash-object`, which takes some data, stores it in your `.git` directory, and gives you back the key the data is stored as.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom to předvedli, můžete použít nízkoúrovňový příkaz `hash-object`, který vezme určitá data, uloží je v adresáři `.git` a vrátí vám klíč, pod nímž jsou tato data uložena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate, you’ll go into your project and start working on a couple of files and possibly stage one of the changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro názornost uvažujme situaci, že ve svém projektu začnete pracovat na několika souborech a jednu z provedených změn připravíte k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do that, you must run the `git stash apply` command with a `--index` option to tell the command to try to reapply the staged changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, aby se příkaz pokusil znovu aplikovat i změny připravené k zapsání, musíte zadat příkaz `git stash apply` s parametrem `--index`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ke správnému postupu budete potřebovat malý skript, který vezme název souboru, zjistí datum poslední revize v tomto projektu a vloží datum do souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this, use the `--cached` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T225946Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedete to pomocí volby `--cached`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this, you can add the `commit-msg` hook.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomuto účelu můžete použít zásuvný modul `commit-msg`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this, you can figure out which key you want by running `gpg --list-keys`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí příkazu `gpg --list-keys` můžete určit, jaký klíč chcete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To exit the script and reject the push, exit non-zero.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li skript ukončit a odesílaná data odmítnout, návratová hodnota musí být nenulová.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To follow along, you first need to create a new local Subversion repository:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li postupovat podle mě, budete si nejprve muset vytvořit nový lokální repozitář Subversion:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get a list of the author names that SVN uses, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li získat seznam jmen autorů používaných v SVN, spusťte tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get it running without having to reboot, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nechcete počítač restartovat, spusťte tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get the project, run</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T110245Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete ho získat spuštěním</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get the raw commit data, you can use another plumbing command called `git cat-file`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li získat syrová data revizí, můžete použít další nízkoúrovňový příkaz: `git cat-file`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get them, you must reset your branch to where `master` is now:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li je získat, musíte vaši větev resetovat do místa, kde se nyní nachází větev `master`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To jessica@githost:simplegit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143136Z" creationid="Prikryl" creationdate="20160115T143136Z">
        <seg>To jessica@githost:simplegit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To john@githost:simplegit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145143Z" creationid="Prikryl" creationdate="20160115T145143Z">
        <seg>To john@githost:simplegit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To merge this work into your current working branch, you can run `git merge origin/serverfix`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144618Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li začlenit tato data do své aktuální pracovní větve, můžete provést příkaz `git merge origin/serverfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To modify a commit that is farther back in your history, you must move to more complex tools.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li změnit revizi, která leží hlouběji ve vaší historii, budete muset sáhnout po složitějších nástrojích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To my wife Jessica who has supported me for all of these years and to my daughter Josephine, 
who will support me when I'm too old to know what's going on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T152040Z" creationid="Prikryl" creationdate="20151026T152040Z">
        <seg>Mé ženě Jessice, která mě po celé ty roky podporovala, a mé dceři Josephine, 
která mě bude podporovat, až budu příliš starý na to, abych věděl, co se děje kolem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit's history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together – this is called a ``fast-forward.''</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T123746Z" creationid="Prikryl" creationdate="20151215T123746Z">
        <seg>Jinými slovy, pokud se snažíte sloučit jeden objekt revize s jiným, na který se můžete dostat přes historii prvního objektu revize, Git to vše zjednoduší tím, že přesune ukazatel vpřed, protože neexistuje žádná odchylující se práce, s kterou bychom to museli slučovat. Tomuto postupu se říká „rychle vpřed“ („fast-forward“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To pull the `master` branch on the remote down to `origin/mymaster` locally, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li stáhnout větev `master` ze vzdáleného serveru do lokálního adresáře `origin/mymaster`, můžete zadat příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To push to a Subversion server, you run the `git svn dcommit` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro odeslání revizí na server Subversion zadejte příkaz `git svn dcommit`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T134946Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom skutečně pochopili, jak v Gitu funguje větvení, musíme poodstoupit a podívat se, jak Git ukládá data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To remove a file named passwords.txt from your entire history, you can use the `--tree-filter` option to `filter-branch`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro odstranění souboru s názvem passwords.txt z celé historie můžete použít parametr `--tree-filter`, který přidáte k příkazu `filter-branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To remove it, you can run `git stash drop` with the name of the stash to remove:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ji odstranit, spusťte příkaz `git stash drop` s názvem odkladu, který má být odstraněn:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To remove remote branches, you must remove the ref files from the server manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li chtít odstranit vzdálenou větev, budete muset ručně smazat referenční soubory ze serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To restore the original branch and stop patching run "git am --abort".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221313Z" creationid="Prikryl" creationdate="20151023T221313Z">
        <seg>To restore the original branch and stop patching run "git am --abort".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To run `filter-branch` on all your branches, you can pass `--all` to the command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li spustit příkaz `filter-branch` na všech větvích, zadejte k příkazu parametr `--all`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see a full diff of what would happen if you were to merge this topic branch with another branch, you may have to use a weird trick to get the correct results.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142314Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vidět plný výpis diff, jak by vypadaly rozdíly, kdybyste tuto tématickou větev začlenili do jiné větve, můžete použít speciální trik, který vám zobrazí požadované informace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see all the branches that contain work you haven't yet merged in, you can run `git branch --no-merged`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211458Z" creationid="Prikryl" creationdate="20151124T211458Z">
        <seg>Pro zobrazení všech větví, které obsahují dosud nezačleněnou práci, spusťte příkaz `git branch --no-merged`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see reflog information formatted like the `git log` output, you can run `git log -g`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit informace záznamu reflog ve formátu výstupu `git log`, zadejte příkaz `git log -g`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see the diff of what you’ve staged, you can use the `6` or `d` (for diff) command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit výpis diff připravených souborů, použijte příkaz `6` nebo `d` (jako „diff“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see the last commit on each branch, you can run `git branch -v`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit poslední revizi na každé větvi, spusťte příkaz `git branch -v`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see the same information in a much more useful way, we can run `git log -g`, which will give you a normal log output for your reflog.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit stejné informace v užitečnějším formátu, můžete spustit příkaz `git log -g`, jímž získáte normální výstup příkazu log pro reflog.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what changes each commit introduces, remember that you can pass the `-p` option to `git log` and it will append the diff introduced to each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, jaké změny byly v jednotlivých revizích provedeny, můžete k příkazu `git log` přidat parametr `-p`, který ke každé revizi připojí rozdíly ve formátu diff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what happens, you can manually ask Git to pack up the objects by calling the `git gc` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vidět, jak proces probíhá, můžete systému Git ručně zadat, aby objekty zabalil. Zadejte příkaz `git gc`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what packfiles are available on this server, you need to get the `objects/info/packs` file, which contains a listing of them (also generated by `update-server-info`):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, jaké balíčkové soubory jsou na serveru dostupné, pomůže vám soubor `objects/info/packs`, který obsahuje jejich seznam (rovněž generován příkazem `update-server-info`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what you've changed but not yet staged, type `git diff` with no other arguments:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091749Z" creationid="Prikryl" creationdate="20151030T091749Z">
        <seg>Pokud chcete vidět, co jste změnili, ale zatím nepřipravili k zapsání, napište `git diff` bez dalších parametrů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see which branches are already merged into the branch you're on, you can run `git branch --merged`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210944Z" creationid="Prikryl" creationdate="20151124T210944Z">
        <seg>Chcete-li zjistit, které větve už byly začleněny do větve, na níž se nacházíte, spusťte příkaz `git branch --merged`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see which remote servers you have configured, you can run the `git remote` command.(((git commands, remote)))
It lists the shortnames of each remote handle you've specified.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T134942Z" creationid="Prikryl" creationdate="20151101T164042Z">
        <seg>Chcete-li zjistit, jaké vzdálené servery jste si nakonfigurovali, můžete použít příkaz `git remote`.(((git příkazy, remote)))
Zobrazí se seznam krátkých jmen, která jste vzdáleným repozitářům přidělili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see which stashes you’ve stored, you can use `git stash list`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li se podívat, které soubory jste odložili, spusťte příkaz `git stash list`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li nastavit lokální větev s jiným názvem, než má vzdálená větev, můžete jednoduše použít první variantu s odlišným názvem lokální větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To set up your client, you must export the P4PORT environment variable to point to the Perforce depot:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K nastavení svého klienta budete muset exportovat proměnnou prostředí P4PORT, která bude ukazovat na depot Perforce:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To stage it, you run the `git add` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T121103Z" creationid="Prikryl" creationdate="20151029T121103Z">
        <seg>K zapsání ho připravíme provedením příkazu `git add`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To stage the TODO and index.html files, you can type the numbers:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže chcete připravit k zapsání soubory TODO a index.html, zadejte příslušná čísla:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To stay out of trouble, try to follow these guidelines:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li se vyhnout problémům, dodržujte tato pravidla:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To synchronize your work, you run a `git fetch origin` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K synchronizaci své práce použijte příkaz `git fetch origin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To tag that commit, you specify the commit checksum (or part of it) at the end of the command:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224252Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro označkování revize zadejte na konec příkazu kontrolní součet revize (nebo jeho část):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To tell Git to treat all `pbxproj` files as binary data, add the following line to your `.gitattributes` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li systému Git zadat, aby nakládal se všemi soubory `pbxproj` jako s binárními daty, vložte do souboru `.gitattributes` následující řádek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To tell Git to use it as the default message that appears in your editor when you run `git commit`, set the `commit.template` configuration value:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li systému Git zadat, aby soubor používal jako výchozí zprávu, která se zobrazí v textovém editoru po spuštění příkazu `git commit`, nastavte konfigurační hodnotu `commit.template`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To verify a signed tag, you use `git tag -v [tag-name]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ověřit podepsanou značku, použijte příkaz `git tag -v [název značky]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To visualize this, let's assume that you have a directory containing three files, and you stage them all and commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T142946Z" creationid="Prikryl" creationdate="20151108T142946Z">
        <seg>Pro ilustraci předpokládejme, že máte adresář s třemi soubory, které připravíte k zapsání a následně zapíšete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T225230Z" creationid="Prikryl" creationdate="20151107T225230Z">
        <seg>Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224908Z" creationid="Prikryl" creationdate="20151107T224908Z">
        <seg>Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T124221Z" creationid="Prikryl" creationdate="20151210T124221Z">
        <seg>Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T215000Z" creationid="Prikryl" creationdate="20151028T215000Z">
        <seg>Sledované soubory jsou ty soubory, které byly součástí posledního snímku. Mohou být ve stavu nezměněn (unmodified), změněn (modified) nebo připraven k zapsání (staged).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Tracking branches are local branches that have a direct relationship to a remote branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sledující větve jsou lokální větve s přímým vztahem ke vzdálené větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Type</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadejme tedy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Typically people use this functionality to mark release points (v1.0, and so on).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T144907Z" creationid="Prikryl" creationdate="20151107T144907Z">
        <seg>Tato funkce se nejčastěji používá k označení jednotlivých vydání (například v1.0 atd.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Typing `?` shows a list of what you can do:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li znak `?`, zobrazí se seznam možností, které máte k dispozici.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>URL: https://github.com/my-org/complex-project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131311Z" creationid="Prikryl" creationdate="20151107T131311Z">
        <seg>URL: https://github.com/my-org/complex-project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Understanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T093721Z" creationid="Prikryl" creationdate="20151107T133611Z">
        <seg>Pochopení a zvládnutí tohoto rysu vám dává do rukou výkonný a jedinečný nástroj a může zcela změnit způsob, jakým budete realizovat vývoj.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T133528Z" creationid="Prikryl" creationdate="20151107T133528Z">
        <seg>Na rozdíl od ostatních systémů pro správu verzí vybízí Git ke způsobu práce, kdy se větvení a slučování provádí často, dokonce i několikrát za den.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unmerged paths:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073014Z" creationid="Prikryl" creationdate="20151120T073014Z">
        <seg>Unmerged paths:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Untracked basically means that Git sees a file you didn't have in the previous snapshot (commit); Git won't start including it in your commit snapshots until you explicitly tell it to do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T084359Z" creationid="Prikryl" creationdate="20151029T111124Z">
        <seg>Není-li soubor sledován, znamená to, že Git vidí soubor, který nebyl v předchozím snímku (commit). Git ho nezařadí ani do dalších snímků, dokud mu k tomu nedáte výslovný příkaz.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T215114Z" creationid="Prikryl" creationdate="20151028T215050Z">
        <seg>Nesledované soubory jsou všechny ostatní, tedy veškeré soubory ve vašem pracovním adresáři, které nebyly obsaženy ve vašem posledním snímku a nenacházejí se v oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Using a VCS also generally means that if you screw things up or lose files, you can easily recover.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T181510Z" creationid="Prikryl" creationdate="20151026T181510Z">
        <seg>Používáte-li systém pro správu verzí a něco se pokazí, nebo přijdete o soubory, můžete se z toho snadno dostat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Using attributes, you can do things like specify separate merge strategies for individual files or directories in your project, tell Git how to diff non-text files, or have Git filter content before you check it into or out of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí atributů lze například určit odlišnou strategii slučování pro konkrétní soubory nebo adresáře projektu, zadat systému Git nástroj diff pro netextové soubory nebo jak filtrovat obsah před načtením dat do systému Git nebo jejich odesláním.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Using submodules isn’t without hiccups, however.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používání submodulů se však vždy neobejde bez zádrhelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Various integration managers are in charge of certain parts of the repository; they're called lieutenants.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T230832Z" creationid="Prikryl" creationdate="20160109T230832Z">
        <seg>Za konkrétní části repozitáře odpovídají různí integrační manažeři. Říká se jim poručíci (lieutenants).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T174943Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Správa verzí je systém, který zaznamenává změny souboru nebo sady souborů v čase tak, abyste se mohli později k určité verzi vrátit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can also see that our `master` branch is tracking `origin/master` and is up to date.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T215343Z" creationid="Prikryl" creationdate="20151213T215233Z">
        <seg>Vidíme také, že naše větev `master` sleduje `origin/master` a její stav je aktuální.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can demonstrate by aliasing `git visual` to run `gitk`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T145720Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžeme si to předvést vytvořením aliasu `git visual` pro spuštění `gitk`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We may additionally have permission to push to one or more of these, though we can't tell that here.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T135443Z" creationid="Prikryl" creationdate="20151101T165642Z">
        <seg>Na jeden nebo několik z nich můžeme mít navíc přiděleno právo pro odesílání změn (push), ale z tohoto výpisu to nelze poznat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We will begin by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it set up to start working with.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173416Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Nejdříve si vysvětlíme něco o původu nástrojů pro správu verzí, poté se budeme věnovat tomu, jak spustit systém Git ve vašem počítači, a nakonec se podíváme na to, co musíme nastavit, abychom s ním mohli začít pracovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We will go into more detail about the various possible workflows for your Git project in &lt;&lt;_distributed_git&gt;&gt;, so before you decide which branching scheme your next project will use, be sure to read that chapter.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T190310Z" creationid="Prikryl" creationdate="20151209T190310Z">
        <seg>Další detaily různých možných pracovních postupů, které můžete pro váš projekt v Gitu využít, rozebereme v kapitole &lt;&lt;_distributed_git&gt;&gt;. Takže než se rozhodnete, jaké schéma větvení bude váš příští projekt využívat, přečtěte si ji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We won't refer to them or assume you've used them later in the book, but you should probably know how to use them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T142912Z" creationid="Prikryl" creationdate="20151107T142733Z">
        <seg>V dalších částech knihy se na ně nebudeme odkazovat, ani nebudeme předpokládat, že je umíte používat, ale asi byste o nich měli vědět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll also show you how to set up Git to ignore certain files and file patterns, how to undo mistakes quickly and easily, how to browse the history of your project and view changes between commits, and how to push and pull from remote repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202846Z" creationid="Prikryl" creationdate="20151028T202846Z">
        <seg>Ukážeme si také, jak nastavit Git, aby ignoroval určité soubory a masky souborů, jak rychle a jednoduše vrátit nežádoucí změny, jak procházet historii projektu a zobrazit změny mezi jednotlivými revizemi a jak posílat soubory do vzdálených repozitářů (push) a naopak z nich soubory zase stahovat (pull).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll cover aspects of each of these in a series of use cases, moving from simple to more complex; you should be able to construct the specific workflows you need in practice from these examples.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T122812Z" creationid="Prikryl" creationdate="20160110T122812Z">
        <seg>Každou z těchto otázek si probereme na sérii praktických případů, postupně od jednodušších po složitější. Z uvedených příkladů byste si měli být schopni odvodit vlastní pracovní postup, který budete v praxi využívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll cover this distinction a bit more in &lt;&lt;_distributed_git&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T212806Z" creationid="Prikryl" creationdate="20151102T212806Z">
        <seg>Uvedený rozdíl si blíže vysvětlíme v kapitole &lt;&lt;_distributed_git&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll discuss how to export a bare repository copy for this purpose in &lt;&lt;_git_on_the_server&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151228T185025Z" creationid="Prikryl" creationdate="20151228T185025Z">
        <seg>O exportu kopie holého repozitáře pro tento účel se více dočtete v části &lt;&lt;_git_on_the_server&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in &lt;&lt;_git_branching&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T092212Z" creationid="Prikryl" creationdate="20151027T092104Z">
        <seg>Některými výhodami, které získáme při tomto uvažování o datech, se budeme zabývat při výkladu větvení v kapitole &lt;&lt;_git_branching&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll go into much more detail about what `reset` does and how to master it to do really interesting things in &lt;&lt;_git_reset&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215130Z" creationid="Prikryl" creationdate="20151106T215130Z">
        <seg>Podrobněji se budeme tím, co příkaz `reset` dělá a jak jej využít pro opravdu zajímavé věci, v podkapitole &lt;&lt;_git_reset&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160113T171315Z" creationid="Prikryl" creationdate="20160109T152044Z">
        <seg>Uvedeme si jejich přednosti i eventuální slabiny. Můžete vybrat jeden z nich, nebo je můžete pro dosažení požadovaných vlastností navzájem kombinovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll go over this syntax in detail in &lt;&lt;_commit_ranges&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T150750Z" creationid="Prikryl" creationdate="20160115T150750Z">
        <seg>Podrobně se budeme touto syntaxí zabývat v části &lt;&lt;_commit_ranges&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll go over what these commands do in just a minute.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211108Z" creationid="Prikryl" creationdate="20151028T211108Z">
        <seg>K tomu, co přesně tyto příkazy provedou, se dostaneme za okamžik.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll use the normal path here because doing so is almost always faster.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T194622Z" creationid="Prikryl" creationdate="20151219T194622Z">
        <seg>My zde budeme používat normální cestu, protože je to téměř vždy rychlejší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We've covered basic branching and merging in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T133717Z" creationid="Prikryl" creationdate="20151108T133717Z">
        <seg>V této kapitole jsme se věnovali základům větvení a slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We've mentioned and given some demonstrations of adding remote repositories in previous sections, but here is how to do it explicitly.(((git commands, remote)))
To add a new remote Git repository as a shortname you can reference easily, run `git remote add [shortname] [url]`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T135709Z" creationid="Prikryl" creationdate="20151101T170241Z">
        <seg>O přidávání vzdálených repozitářů jsme se zmínili v předchozích podkapitolách a něco jsme si i ukázali, ale tady si přesně řekneme, jak to udělat.(((git příkazy, remote)))
Chcete-li přidat nový vzdálený repozitář Git a zadat zkrácený název, přes který se můžete snadno odkazovat, spusťte příkaz `git remote add [zkrácený název] [url]`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Welcome to the second edition of Pro Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T130250Z" creationid="Prikryl" creationdate="20151026T130250Z">
        <seg>Vítejte u druhého vydání knihy Pro Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Well, doing so creates a new pointer for you to move around.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150929Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znamená to vytvoření nového ukazatele, s nímž můžete pohybovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Well, let's do another commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164325Z" creationid="Prikryl" creationdate="20151108T164325Z">
        <seg>Dobře, zapišme další revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What does that mean?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A co to znamená?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215208Z" creationid="Prikryl" creationdate="20151106T215208Z">
        <seg>A co když zjistíte, že nechcete zachovat změny, které jste provedli v souboru `CONTRIBUTING.md`?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What is the significance of that?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164246Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A jaký to má význam?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What the heck?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Co to má být?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What then?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Co teď?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What used to be referenced at `pb/master` is now at `paul/master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z původní reference `pb/master` se tak nyní stává `paul/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When Git packs objects, it looks for files that are named and sized similarly, and stores just the deltas from one version of the file to the next.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při balení objektů vyhledá Git soubory, které mají podobný název a podobnou velikost, a uloží pouze rozdíly mezi jednotlivými verzemi souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When I originally sat down to write the book nearly five years ago (it took me a while to get the first version out), I had just started working at a very little known company developing a Git hosting website called GitHub.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T091722Z" creationid="Prikryl" creationdate="20151026T140938Z">
        <seg>Když jsem před téměř pěti lety usedal k psaní této knihy (chvíli mi trvalo, než první verze spatřila světlo světa), začal jsem zrovna pracovat v téměř neznámé společnosti, která začala vyvíjet webový server pro hostování Gitu, zvaný GitHub.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When I wrote the first edition, Git was still a relatively difficult to use and barely adopted tool for the harder core hacker.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T132924Z" creationid="Prikryl" creationdate="20151026T132924Z">
        <seg>V době psaní prvního vydání byl Git ještě nástrojem poměrně obtížně použitelným a sotva přijímaným i z pohledu skalních vývojářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When Scott asked if I'd be interested in working on the second edition, I didn't even have to think.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T151408Z" creationid="Prikryl" creationdate="20151026T151408Z">
        <seg>Když se mě Scott zeptal, jestli bych měl zájem spolupracovat na druhém vydání, nemusel jsem o tom ani přemýšlet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When all the patches for your topic are applied and committed into your branch, you can choose whether and how to integrate them into a longer-running branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142314Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až budete mít všechny záplaty aplikovány a zapsány do tématické větve, můžete se rozhodnout, zda a jak je chcete integrovat do některé z trvalejších větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When that is set up, you can use `git imap-send` to place the patch series in the Drafts folder of the specified IMAP server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až toto nastavení dokončíte, můžete použít příkaz `git imap-send`, jímž umístíte sérii záplat (patch) do složky Koncepty (Drafts) zadaného serveru IMAP:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you `dcommit`, you see output like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstup příkazu `dcommit` bude nyní vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you clone a repository, it generally automatically creates a `master` branch that tracks `origin/master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud klonujete repozitář, většinou se vytvoří větev `master`, která bude sledovat větev `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you commit, you see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže zapíšete revizi, zobrazí se přibližně toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you create the commit by running `git commit`, Git checksums each subdirectory (in this case, just the root project directory) and stores those tree objects in the Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T094545Z" creationid="Prikryl" creationdate="20151108T143524Z">
        <seg>Když příkazem `git commit` vytváříte revizi, vypočítá Git kontrolní součet každého podadresáře (v tomto případě pouze kořenového adresáře projektu) a uloží tyto objekty stromu (tree) do repozitáře Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you design these filters, they should be able to fail gracefully and have the project still work properly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při navrhování těchto filtrů byste tedy měli myslet i na to, aby projekt pracoval správně, i když filtr selže.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you do actions in Git, nearly all of them only add data to the Git database.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T095305Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud v Gitu provádíte nějaké akce, pak téměř všechny z nich data do databáze pouze přidávají.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you first clone a repository, all of your files will be tracked and unmodified because you just checked them out and haven't edited anything.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T215234Z" creationid="Prikryl" creationdate="20151028T215234Z">
        <seg>Po úvodním klonování repozitáře budou všechny vaše soubory sledované a nezměněné, protože jste je právě získali a dosud jste neudělali žádné změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have all the necessary dependencies, you can go ahead and grab the latest tagged release tarball from several places.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T102628Z" creationid="Prikryl" creationdate="20151028T102628Z">
        <seg>Po doinstalování všech potřebných závislostí můžete pokračovat stažením nejnovějšího archivu z několika míst.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have resolved this problem run "git am --resolved".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221256Z" creationid="Prikryl" creationdate="20151023T221256Z">
        <seg>When you have resolved this problem run "git am --resolved".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have work in a topic branch and have determined that you want to integrate it, you move to that branch and run the rebase command to rebuild the changes on top of your current master (or `develop`, and so on) branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142314Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li určitou práci v tématické větvi a rozhodli jste se, že ji integrujete, přejdete na tuto větev a spustíte příkaz rebase, jímž znovu sestavíte příslušné změny na vrcholu svojí aktuální hlavní větve (příp. větve `develop` apod.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have your project at a point that you want to share, you have to push it upstream.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T142648Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se váš projekt nachází ve stavu, kdy ho chcete sdílet s ostatními, můžete ho odeslat (push) na referenční server (upstream{empty}footnote:[Pozn. překl.: Pojem _upstream_ se používá pro vzdálený server umístěný doslova _výše proti proudu_ -- z logického pohledu. Podle konvence se často `upstream` používá i pro pojmenování takového vzdáleného serveru. Typicky jde o server, který slouží ke sdílení výsledků projektu, který se považuje v jistém smyslu za referenční -- z něj to _teče dolů po proudu_ k ostatním. Je možné, že se s tímto pojmem poprvé setkáte v okamžiku, kdy začnete používat GitHub a provedete takzvaný _Fork_ jiného projektu. V nápovědě přímo najdete příkazy, ve který se slovo _upstream_ vyskytuje -- https://help.github.com/articles/fork-a-repo/[GitHub Help: Fork a Repo]. V této souvislosti chápejte pojmy _vzdálený server_ a _vzdálený repozitář_ jako shodné. Repozitář označovaný pojmem _upstream_ je ten, ze kterého jste na GitHub provedli _fork_.]).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T135244Z" creationid="Prikryl" creationdate="20151108T135244Z">
        <seg>Když zapíšete revizi, uloží Git objekt revize (commit object), který obsahuje odkaz na snímek obsahu, který jste připravili k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you notice issues, you should be able to easily figure out what commit introduced them, when, and by whom.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyskytnou-li se jakékoli problémy, měli byste být schopni snadno odhalit závadnou revizi, kdo je jejím autorem a kdy byla zapsána.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you rebase stuff, you're abandoning existing commits and creating new ones that are similar but different.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132620Z" creationid="Prikryl" creationdate="20151214T134513Z">
        <seg>Pokud provedete přeskládání, zahazujete existující objekty revize (commits) a vytváříte nové, které jsou podobné, ale přesto jiné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you restart your machine, your Git daemon will start automatically and respawn if it goes down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při restartování počítače se démon Git spustí automaticky. V případě pádu démona bude jeho činnost automaticky obnovena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git commit`, it creates the commit object, specifying the parent of that commit object to be whatever SHA-1 value the reference in HEAD points to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git commit`, systém vytvoří objekt revize, jehož rodičem bude hodnota SHA-1, na niž ukazuje reference v souboru HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git init` in a new or existing directory, Git creates the `.git` directory, which is where almost everything that Git stores and manipulates is located.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li v novém nebo existujícím adresáři příkaz `git init`, Git vytvoří adresář `.git`, tj. místo, kde je umístěno téměř vše, co Git ukládá a s čím manipuluje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git log` in this project, you should get output that looks something like this:(((git commands, log)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T144720Z" creationid="Prikryl" creationdate="20151102T144720Z">
        <seg>Po zadání příkazu `git log` byste pro tento projekt měli dostat výstup, který vypadá zhruba takto:(((git commands, log)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and close the editor, the editor writes a new commit containing that message and makes it your new last commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení změn a zavření editoru zapíše editor novou revizi, která bude obsahovat upravenou zprávu a která bude vaší novou poslední revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git applies all three changes and then puts you back into the editor to merge the three commit messages:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení změn a zavření editoru aplikuje Git všechny tři změny a znovu otevře textový editor, abyste sloučili všechny zprávy k revizím:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git rewinds to the parent of the first commit in your list, applies the first commit (`f7f3f6d`), applies the second (`310154e`), and drops you to the console.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když uložíte změny a zavřete editor, Git se vrátí na rodiče první revize ve vašem seznamu, aplikuje první revizi (`f7f3f6d`), aplikuje druhou revizi (`310154e`) a ocitnete se znovu na konzoli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git rewinds you back to the last commit in that list and drops you on the command line with the following message:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení změn a zavření editoru vás Git vrátí zpět na poslední revizi v seznamu a zobrazí vám příkazový řádek s touto zprávou:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git rewinds your branch to the parent of these commits, applies `310154e` and then `f7f3f6d`, and then stops.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakmile uložíte změny a zavřete editor, Git vrátí vaši větev zpět na rodiče těchto revizí, aplikuje revizi `310154e`, po ní revizi `f7f3f6d` a zastaví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save that, you have a single commit that introduces the changes of all three previous commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení zprávy budete mít jedinou revizi, která bude obsahovat všechny změny předchozích tří revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you want to share that work, you merge it into your own master branch, then fetch and merge `origin/master` if it has changed, and finally push to the `master` branch on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T221229Z" creationid="Prikryl" creationdate="20160115T215110Z">
        <seg>Chcete-li tuto práci sdílet, začleníte ji (merge) do své větve `master`. Poté vyzvednete změny (fetch) a pokud se větev `origin/master` změnila, začleníte ji (merge). Nakonec odešlete (push) všechna data do větve `master` na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you're branching and merging, everything is being done only in your Git repository – no server communication is happening.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T190514Z" creationid="Prikryl" creationdate="20151209T190514Z">
        <seg>Veškeré větvení a slučování se odehrává pouze ve vašem gitovém repozitáři -- neprobíhá žádná komunikace se serverem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you're using Git more heavily, however, you may see much more information from `git remote show`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T143331Z" creationid="Prikryl" creationdate="20151107T121932Z">
        <seg>Pokud však Git používáte intenzivněji, může vám příkaz `git remote show` zobrazit mnohem více informací:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When your branch work is finished and you're ready to contribute it back to the maintainers, go to the original project page and click the ``Fork'' button, creating your own writable fork of the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T190946Z" creationid="Prikryl" creationdate="20160121T190946Z">
        <seg>Až budete s prací ve větvi hotovi a budete ji chtít poslat zpět správcům, přejděte na původní stránku projektu a klikněte na tlačítko „Fork“, čímž vytvoříte vlastní odštěpený projekt, do kterého budete moci zapisovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re finished, you should run `git bisect reset` to reset your HEAD to where you were before you started, or you’ll end up in a weird state:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až vyhledávání dokončíte, měli byste použít příkaz `git bisect reset`, abyste vrátili ukazatel HEAD na pozici, z níž jste vyhledávání zahajovali. Jinak byste skončili v nějakém podivném stavu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Whether you maintain a canonical repository or want to help by verifying or approving patches, you need to know how to accept work in a way that is clearest for other contributors and sustainable by you over the long run.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ať spravujete standardní repozitář, nebo pomáháte při ověřování či schvalování záplat, budete muset vědět, jak přijímat práci ostatních přispěvatelů, a to způsobem, který je pro ostatní co nejčistší a pro vás dlouhodobě udržitelný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While I still don't love that conflict of interests, the importance of GitHub in the Git community is unavoidable.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T143333Z" creationid="Prikryl" creationdate="20151026T143333Z">
        <seg>I když stále nemám dobrý pocit z uvedeného konfliktu zájmů, důležitosti GitHub pro komunitu kolem systému Git se nedá vyhnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While ``master'' is the default name for a starting branch when you run `git init` which is the only reason it's widely used, ``origin'' is the default name for a remote when you run `git clone`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T114835Z" creationid="Prikryl" creationdate="20151210T105937Z">
        <seg>Zatímco „master“ je výchozí jméno pro počáteční větev po provedení `git init` -- což je jediný důvod, proč se tak často používá --{empty}, „origin“ je výchozí jméno pro vzdálený repozitář po provedení příkazu `git clone`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While most of the core commands and concepts are still valid today as the Git core team is pretty fantastic at keeping things backward compatible, there have been some significant additions and changes in the community surrounding Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T132114Z" creationid="Prikryl" creationdate="20151026T132114Z">
        <seg>Většina základních příkazů a konceptů zůstala dodnes v platnosti, protože tým systému Git odvádí fantastickou práci, aby zachoval zpětnou kompatibilitu. Z komunity systému Git přesto vzešlo několik významných přídavků a změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While on a Windows system, if you want to use a different text editor, such as Notepad++, you can do the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T114604Z" creationid="Prikryl" creationdate="20151107T114604Z">
        <seg>Chcete-li používat jiný textový editor, například Notepad++, můžete použít následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While she waits for feedback from John, Jessica decides to start working on `featureB` with Josie.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zatímco čeká na zpětnou vazbu od Johna, rozhodne se, že začne pracovat spolu s Josie na úkolu `featureB`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While the `git status` output is pretty comprehensive, it's also quite wordy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T130456Z" creationid="Prikryl" creationdate="20151029T130456Z">
        <seg>Výstup příkazu `git status` je sice poměrně srozumitelný, ale je také dost ukecaný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Why is it so special?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151105T213932Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V čem je tak zvláštní?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With Git's branching model, it's possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T154459Z" creationid="Prikryl" creationdate="20160109T154459Z">
        <seg>Model větvení Gitu umožňuje, aby na jednom projektu pracovaly stovky vývojářů a využívali při tom souběžně desítky větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With Git, you don't have to deploy your fix along with the `iss53` changes you've made, and you don't have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T111409Z" creationid="Prikryl" creationdate="20151111T180030Z">
        <seg>Při používání Gitu nemusíte nasadit opravu společně se změnami, které jste provedli při řešení problému `iss53`. Před opravou produkční verze nemusíte ani vynakládat velké úsilí a změny zase rušit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With the `rebase` command, you can take all the changes that were committed on one branch and replay them on another one.(((git commands, rebase)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T075955Z" creationid="Prikryl" creationdate="20151214T091407Z">
        <seg>Příkazem `rebase` vezmete všechny změny, které byly zapsány na jedné větvi, a necháte je přehrát na jinou větev.(((git příkazy, rebase)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With the interactive rebase tool, you can then stop after each commit you want to modify and change the message, add files, or do whatever you wish.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S interaktivním nástrojem přeskládání pak můžete zastavit po každé revizi, kterou chcete upravit, a změnit u ní zprávu, přidat soubory nebo cokoli dalšího.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With these basic commands, you can use the interactive add mode to deal with your staging area a little more easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí těchto základních příkazů můžete použít režim interaktivního přidávání, a snáze tak ovládat svou oblast připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With these tools, you can much more easily let Git know what commit or commits you want to inspect.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí těchto nástrojů můžete v systému Git daleko snáze specifikovat, kterou revizi nebo které revize chcete zobrazit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With this method, you can quickly get a read/write Git server up and running for a handful of developers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem lze rychle vytvořit a spustit server Git ke čtení i zápisu pro menší počet vývojářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Without the `-3` option, it looks like a conflict.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bez parametru `-3` se celá situace tváří jako konflikt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Wrap it to
about 72 characters or so.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160114T153323Z" creationid="Prikryl" creationdate="20160114T153323Z">
        <seg>Zalamujte řádky
přibližně na 72 znaků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Write out that tree (recording the state of the staging area or index to a tree object) and see what it looks like:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uložte tento strom (zaznamenáním stavu oblasti připravených změn neboli indexu do objektu stromu) a prohlédněte si výsledek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T225227Z" creationid="Prikryl" creationdate="20151107T225227Z">
        <seg>Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224906Z" creationid="Prikryl" creationdate="20151107T224906Z">
        <seg>Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (17/17), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091728Z" creationid="Prikryl" creationdate="20151024T091728Z">
        <seg>Writing objects: 100% (17/17), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T124219Z" creationid="Prikryl" creationdate="20151210T124219Z">
        <seg>Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (3/3), 323 bytes, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090856Z" creationid="Prikryl" creationdate="20151024T090856Z">
        <seg>Writing objects: 100% (3/3), 323 bytes, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (7/7), 716 bytes, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091712Z" creationid="Prikryl" creationdate="20151024T091712Z">
        <seg>Writing objects: 100% (7/7), 716 bytes, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You accomplish that by using refspecs to push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady vám při odesílání větví pomůže vzorec refspec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You also have access to the user doing the pushing if the push is being run over SSH.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jsou revize odesílány prostřednictvím SSH, budete mít přístup také k uživateli, který data odesílá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You also need to make sure these tools are executable:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále se potřebujete také ujistit, že lze tyto nástroje spustit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You and the other developers all have push access to the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142307Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy a vaši ostatní vývojáři máte všichni oprávnění odesílat změny do repozitáře (push).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You begin by reading this data into a structure that you can use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začnete načtením těchto dat do struktury, kterou můžete použít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You branched a topic branch (`server`) to add some server-side functionality to your project, and made a commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T123535Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořili jste novou tématickou větev (`server`), abyste v ní do projektu přidali novou funkčnost na straně serveru, a zapsali jste revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can accomplish that with a few `git add` commands that specify the files you want to track, followed by a `git commit`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211043Z" creationid="Prikryl" creationdate="20151028T211043Z">
        <seg>Můžete tak učinit pomocí několika příkazů `git add`, jimiž určíte soubory, které chcete sledovat, a poté provedete příkaz provedete `git commit`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can accomplish the same task with `--tree-filter` if you want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, můžete provést stejný úkon i pomocí parametru `--tree-filter`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can add it after the fact.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Značku můžete přidat dodatečně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can add it as a new remote reference to the project you're currently working on by running the `git remote add` command as we covered in &lt;&lt;_git_basics_chapter&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T122554Z" creationid="Prikryl" creationdate="20151210T122554Z">
        <seg>Můžete ho přidat jako novou vzdálenou referenci k projektu, na němž právě pracujete, spuštěním příkazu `git remote add` -- jak jsme si ukázali v kapitole &lt;&lt;_git_basics_chapter&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can add the following line to your Git attributes file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru s atributy Git můžete přidat následující řádek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also change them at any time by running through the commands again.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Opětovným použitím příkazů můžete nastavení kdykoliv změnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also check what Git thinks a specific key's value is by typing `git config &lt;key&gt;`:(((git commands, config)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T133409Z" creationid="Prikryl" creationdate="20151028T132304Z">
        <seg>Zadáním `git config &lt;klíč&gt;` můžete zkontrolovat, jakou hodnotu bude Git pro konkrétní klíč uvažovat:(((git příkazy, config)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also continue this concept, having an integrate branch where all the work is merged together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento koncept můžete dále rozšířit o integrační větev, v níž budete veškerou práci slučovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also create a zip archive in much the same way, but by passing the `--format=zip` option to `git archive`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejným způsobem můžete vytvořit také archiv zip. K příkazu `git archive` stačí přidat parametr `--format=zip`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also do `git push origin serverfix:serverfix`, which does the same thing – it says, ``Take my serverfix and make it the remote's serverfix.''
You can use this format to push a local branch into a remote branch that is named differently.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110720Z" creationid="Prikryl" creationdate="20151210T124801Z">
        <seg>Můžete zadat také příkaz `git push origin serverfix:serverfix`, který provede totéž. Vyjadřuje: „Vezmi mou větev `serverfix` a udělej z ní `serverfix` ve vzdáleném repozitáři.“ Tento formát můžete použít k odeslání lokální větve do vzdálené větve, která se jmenuje jinak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also do this with content in files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Totéž můžete udělat také s obsahem v souborech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also filter the list to commits that match some search criteria.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T200640Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ze seznamu také můžete vyfiltrovat revize, které odpovídají určitým vyhledávacím kritériím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also get the same sort of information that `svn info` gives you by running `git svn info`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejné informace, jaké poskytuje příkaz `svn info`, získáte příkazem `git svn info`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also have your rebase replay on something other than the rebase target branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T123310Z" creationid="Prikryl" creationdate="20151214T123310Z">
        <seg>Posloupnost změn můžete aplikovat i na něco jiného než na cílovou větev pro přeskládání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also install it as part of the GitHub for Mac install.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T234729Z" creationid="Prikryl" creationdate="20151027T234729Z">
        <seg>Můžete jej nainstalovat také jako součást instalace GitHub for Mac.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also leave off one side of the syntax to have Git assume HEAD.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednu stranu intervalu můžete zcela vynechat, Git na její místo automaticky dosadí HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also manually edit this file, but again a safer command exists to do so: `symbolic-ref`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor můžete editovat také ručně, ale opět existuje i bezpečnější příkaz: `symbolic-ref`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also run `git stash pop` to apply the stash and then immediately drop it from your stack.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete také spustit příkaz `git stash pop`, jímž odklad aplikujete a současně ho odstraníte ze zásobníku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also run something like `make` or `make tests` or whatever you have that runs automated tests for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podobně můžete spustit také příkaz `make` nebo `make tests` či cokoli jiného, čím spouštíte automatické testování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also search for tags with a particular pattern.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Značky lze vyhledávat také pomocí konkrétní masky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also see this easily with the `git log` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T171421Z" creationid="Prikryl" creationdate="20151108T171421Z">
        <seg>Můžete si to snadno zviditelnit příkazem `git log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also send the patches through an SMTP server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záplaty můžete odesílat i přes SMTP server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Své repozitáře můžete zpřístupnit ke čtení prostřednictvím protokolu HTTPS, což znamená, že se přenášený obsah šifruje. Nebo můžete zajít ještě dál a vyžadovat, aby klienti používali konkrétní podepsané SSL certifikáty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also set the value of HEAD:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodnotu pro soubor HEAD můžete také nastavit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T153852Z" creationid="Prikryl" creationdate="20151214T153852Z">
        <seg>Můžete si to trochu zjednodušit spuštěním `git pull --rebase` místo běžného `git pull`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify `-v`, which shows you the URLs that Git has stored for the shortname to be used when reading and writing to that remote:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T165007Z" creationid="Prikryl" creationdate="20151101T165007Z">
        <seg>Můžete také přidat `-v`, což vede k zobrazení adresy URL, kterou Git pro zkrácené jméno uložil a která se používá při čtení z a při zápisu na tento vzdálený server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify multiple refspecs for fetching in your configuration file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V konfiguračním souboru můžete také použít více vzorců refspec pro vyzvedávání dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify multiple refspecs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Použít lze také kombinaci několika vzorců refspec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also tag commits after you've moved past them.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223759Z" creationid="Prikryl" creationdate="20151107T223759Z">
        <seg>Označit můžete i revize, které už máte za sebou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also tell `git svn` not to include the metadata that Subversion normally imports, by passing `--no-metadata` to the `clone` or `init` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroji `git svn` můžete také zadat, aby ignoroval metadata, která systém Subversion normálně importuje: zadejte parametr `--no-metadata` k příkazu `clone` nebo `init`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use `-2`, which limits the output to only the last two entries:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T111001Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete přidat volbu `-2`, která omezí výpis pouze na dva poslední záznamy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use a series of summarizing options with `git log`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T112925Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve spojení s příkazem `git log` můžete použít také celou řadu shrnujících voleb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use interactive rebases to reorder or remove commits entirely.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Interaktivní přeskládání můžete použít rovněž ke změně pořadí revizí nebo k jejich odstranění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use the refspec to delete references from the remote server by running something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzorce refspec můžete využít také k mazání referencí ze vzdáleného serveru. Spustit lze například příkaz následujícího znění:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use this string as the target of a checkout or show command, although it relies on the abbreviated SHA-1 value at the end, so it may not be valid forever.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento řetězec můžete také použít jako cíl příkazu checkout nebo show, ačkoli ty pracují se zkrácenou hodnotou SHA-1, a tak nebudou platné navždy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use this syntax to see where a branch was some specific amount of time ago.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto syntaxi můžete použít také k zobrazení pozice, na níž se větev nacházela před určitou dobou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use two asterisks to match nested directories; `a/**/z` would match `a/z`, `a/b/z`, `a/b/c/z`, and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T202533Z" creationid="Prikryl" creationdate="20151029T202533Z">
        <seg>Použitím dvou hvězdiček můžeme popsat zanořené adresáře; `a/**/z` popisuje `a/z`, `a/b/z`, `a/b/c/z` a tak dále.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also verify that this is a tree object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete si také ověřit, že jde skutečně o objekt stromu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can bisect the code to find out.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K odhalení problému můžete použít příkaz bisect (tedy „rozpůlit“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can calculate the SHA-1 value of a string in Ruby by including the SHA1 digest library with the `require` command and then calling `Digest::SHA1.hexdigest()` with the string:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V Ruby můžete hodnotu SHA-1 daného řetězce spočítat tak, že příkazem `require` připojíte knihovnu pro počítání SHA1 a zavoláte `Digest::SHA1.hexdigest()` s daným řetězcem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can close the ticket in your ticket-tracking system, and delete the branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T155603Z" creationid="Prikryl" creationdate="20151115T155603Z">
        <seg>V systému sledování tiketů můžete tento tiket uzavřít a větev můžete smazat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can create a new directory and then run `git init` in it for a starting point, and then run your script:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete vytvořit nový adresář a spustit v něm příkaz `git init`, jímž si vytvoříte nový výchozí bod. Poté spusťte svůj skript:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can decide what files go into which commits right before you commit with the staging area, you can decide that you didn’t mean to be working on something yet with the stash command, and you can rewrite commits that already happened so they look like they happened in a different way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jaké soubory budou součástí jaké revize? To můžete rozhodnout až těsně před tím, než soubory zapíšete z oblasti připravených změn. Můžete se rozmyslet, že jste na něčem ještě nechtěli pracovat, a použít možnost odložení. A stejně tak můžete přepsat už jednou zapsané revize. Budou vypadat, jako by byly zapsány v jiné podobě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can delete a remote branch using the `--delete` option to `git push`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T074942Z" creationid="Prikryl" creationdate="20151214T074942Z">
        <seg>Vzdálenou větev můžete smazat příkazem `git push` s volbou `--delete`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can delete it with the `-d` option to `git branch`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152205Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev smažete přidáním volby `-d` k příkazu `git branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can disable settings by either leaving them out of the setting string or prepending a `-` in front of the value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Funkci vypnete buď tím, že ji z řetězce nastavení zcela vynecháte, nebo tím, že před hodnotu vložíte znak `-`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do so with the `sed` command on Unix systems:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systémech Unix to lze provést příkazem `sed`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do this by listing them with the `bisect start` command if you want, listing the known bad commit first and the known good commit second:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, můžete to provést příkazem `bisect start` –- jako první uvedete známou revizi s chybou, jako druhá bude následovat poslední známá dobrá revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can download that tool from the GitHub for Mac website, at http://mac.github.com[].</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T235046Z" creationid="Prikryl" creationdate="20151027T235046Z">
        <seg>GitHub for Mac můžete stáhnout z jeho domácí stránky http://mac.github.com[].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can download this from the GitHub for Windows website, at http://windows.github.com[].</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T000659Z" creationid="Prikryl" creationdate="20151028T000659Z">
        <seg>Instalátor GitHub for Windows můžete stáhnout z jeho webovské stránky http://windows.github.com[].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily check to see if you have a key already by going to that directory and listing the contents:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejsnazší způsob kontroly, zda už klíč vlastníte, je přejít do tohoto adresáře a zjistit jeho obsah:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily see that the file size and image dimensions have both changed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jasně vidíte, že se změnila jak velikost souboru, tak rozměry obrázku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily see this by running a simple `git log` command that shows you where the branch pointers are pointing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T163436Z" creationid="Prikryl" creationdate="20151108T163436Z">
        <seg>Snadno to můžeme zviditelnit spuštěním příkazu `git log`, který vám ukáže, kam reference větví ukazují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily see what commits modified this file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí snadného příkazu lze zjistit, jaké revize tento soubor změnil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can edit the message the same as always, but it overwrites your previous commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213540Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zprávu můžete editovat stejným způsobem jako vždy, ale předchozí revize se přepíše.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can either install it as a package or via another installer, or download the source code and compile it yourself.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T200601Z" creationid="Prikryl" creationdate="20151027T200601Z">
        <seg>Buď jej můžete nainstalovat jako balíček nebo přes nějaký jiný instalátor, nebo můžete stáhnout jeho zdrojový kód a zkompilovat ho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can exclude commits in the master branch by adding the `--not` option before the branch name.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revize v hlavní větvi lze vyloučit vložením parametru `--not` před název větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get a Git project using two main approaches.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T135410Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt lze v Gitu získat dvěma základními způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get a full list of remote references explicitly with `git ls-remote (remote)`, or `git remote show (remote)` for remote branches as well as more information.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T105257Z" creationid="Prikryl" creationdate="20151210T081817Z">
        <seg>Seznam vzdálených referencí pro vzdálené větve a také další informace můžete získat explicitním příkazem `git ls-remote (vzdálený)` nebo `git remote show (vzdálený)` footnote:[Pozn. překl.: V originále je příkaz zapsán jako `git remote show (remote)`, přičemž první „remote“ je název příkazu a druhé slovo „remote“ v závorkách je symbolické vyjádření, že se zde má uvést jméno „vzdáleného“... a teď čeho. Na jiných místech v knize se volněji pracuje s pojmy „server“ nebo „repozitář“ ve smyslu gitového serveru nebo repozitáře. V této kapitole bychom měli být přesnější, protože pojem „remote“ musíme navíc spojit s větvemi. Přesnější je použít spojení „vzdálený repozitář“, protože z hlediska Gitu není důležité, jakou podobu toto „úložiště dat“ má. Může to být „server“, ale může to být také „adresář na lokálním disku“. V anglicky mluvící komunitě si s tím hlavu nelámou a nazývají to prostě „remote“, přičemž mají současně na mysli „krátké jméno vzdáleného repozitáře“. Podle jejich vzoru proto ponechávám pro druhý výskyt tohoto slova v příkladu český překlad „vzdálený“.].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get a list of the SHA-1 values of all the commits that are being pushed by taking the `$newrev` and `$oldrev` values and passing them to a Git plumbing command called `git rev-list`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vezmete-li hodnoty `$newrev` a `$oldrev` a zadáte je k nízkoúrovňovému příkazu `git rev-list`, získáte seznam hodnot SHA-1 všech odesílaných revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get it via the Kernel.org site, at https://www.kernel.org/pub/software/scm/git[], or the mirror on the GitHub web site, at https://github.com/git/git/releases[].</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T102835Z" creationid="Prikryl" creationdate="20151028T102835Z">
        <seg>Najdete jej na serveru Kernel.org na stránce https://www.kernel.org/pub/software/scm/git[] nebo jeho kopii na webovém serveru GitHub na stránce https://github.com/git/git/releases[].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can have Git tell you the object type of any object in Git, given its SHA-1 key, with `cat-file -t`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li příkaz `cat-file -t` v kombinaci s klíčem SHA-1 objektu, Git vám sdělí jeho typ, ať se jedná o jakýkoli objekt Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can have several of them, each of which generally is either read-only or read/write for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T132731Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálených repozitářů můžete mít několik, každý pro vás bude přístupný buď pouze pro čtení (read-only) nebo pro čtení i zápis (read/write).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can insert any kind of content into it, and it will give you back a key that you can use to retrieve the content again at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete do něj vložit jakýkoli obsah a na oplátku dostanete klíč, který můžete kdykoli v budoucnu použít k vyzvednutí obsahu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can keep doing this for several levels of stability.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T140814Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takto můžete pokračovat pro několik úrovní stability.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can keep the changes there for minutes, days, or months, and merge them in when they're ready, regardless of the order in which they were created or worked on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T144330Z" creationid="Prikryl" creationdate="20151209T144330Z">
        <seg>Změny v nich můžete uchovávat několik minut, dní i měsíců a začlenit je až ve vhodnou chvíli -- nezávisle na pořadí, v jakém vznikly nebo byly vyvíjeny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can look into the packfile and see what Git did to save space.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do balíčkového souboru můžete ostatně nahlédnout a přesvědčit se, čím Git ušetřil místo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can make Git read and write to this file by passing the `--global` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git bude načítat a zapisovat výhradně do tohoto souboru, jestliže zadáte parametr `--global`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can make Git read and write to this file specifically by passing the `--global` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Čtení a zápis do tohoto souboru zajistíte zadáním parametru `--global`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can make a lightweight tag by running something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prostou značku lze vytvořit spuštěním například tohoto příkazu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can modify that message with details about how you resolved the merge if you think it would be helpful to others looking at this merge in the future – why you did what you did, if it's not obvious.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081801Z" creationid="Prikryl" creationdate="20151120T081801Z">
        <seg>Není-li zcela zřejmé co a proč jste udělali, můžete zprávu doplnit o detaily, jak jste konflikt vyřešili -- pokud si myslíte, že by to v budoucnu mohlo při zkoumání obsahu této revize vzniklé sloučením nějak pomoci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can modify these limits with the `gc.auto` and `gc.autopacklimit` config settings, respectively.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto hodnoty můžete změnit podle svých potřeb v konfiguračním nastavení `gc.auto` a `gc.autopacklimit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can name this file `expand_date` and put it in your path.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento soubor můžete pojmenovat `expand_date` a vložit ho do svého umístění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can now sync this project to your local machine by calling `svnsync init` with the to and from repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete tento projekt synchronizovat na svůj lokální počítač zadáním příkazu `svnsync init` s uvedením repozitářů „do“ a „z“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can obviously refer to a commit by the SHA-1 hash that it’s given, but there are more human-friendly ways to refer to commits as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revizi můžete samozřejmě specifikovat na základě otisku SHA-1, jenž jí byl přidělen. Existují však i uživatelsky příjemnější způsoby, jak označit konkrétní revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can override that by specifying the `+` in front of the refspec.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odmítnutí serveru můžete potlačit zadáním znaku `+` před vzorec refspec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can pass files, directories, and file-glob patterns to the `git rm` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T104648Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkazu `git rm` můžete zadat soubory, adresáře a jejich masky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can pretty easily see what files have been modified in a single commit with the `--name-only` option to the `git log` command (mentioned briefly in Chapter 2):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zjistit, které soubory byly v jedné revizi změněny, lze velmi snadno pomocí příkazu `git log` s parametrem `--name-only` (stručně popsáno v kapitole 2):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can provide this file to `git svn` to help it map the author data more accurately.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento soubor můžete dát k dispozici nástroji `git svn`, aby mohl přesněji zmapovat informace o autorech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can pull the content back out of Git with the `cat-file` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obsah můžete ze systému Git zase vytáhnout, k tomu slouží příkaz `cat-file`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can read the value of your HEAD via this command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodnotu souboru HEAD můžete načíst tímto příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can read trees into your staging area by calling `read-tree`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stromy můžete do oblasti připravených změn načíst příkazem `read-tree`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can reapply the one you just stashed by using the command shown in the help output of the original stash command: `git stash apply`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naposledy odložené soubory můžete znovu aplikovat příkazem, který byl uveden už v nápovědě ve výstupu původního příkazu stash: `git stash apply`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can rebase the server branch onto the `master` branch without having to check it out first by running `git rebase [basebranch] [topicbranch]` – which checks out the topic branch (in this case, `server`) for you and replays it onto the base branch (`master`):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T131100Z" creationid="Prikryl" creationdate="20151214T131100Z">
        <seg>Větev `server` můžete přeskládat na větev `master` -- aniž byste se na ni nejdříve museli nejdříve přepnout -- tak, že provedete `git rebase [základna] [tématická větev]` -- provede se tím přepnutí na tématickou větev (checkout, v tomto případě na větev `server`) a přeskládá její změny na základnu (angl. base branch, v tomto případě `master`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can remove the `client` and `server` branches because all the work is integrated and you don't need them anymore, leaving your history for this entire process looking like &lt;&lt;rbdiag_i&gt;&gt;:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T133446Z" creationid="Prikryl" creationdate="20151214T133446Z">
        <seg>Větve `client` a `server` můžete smazat, protože všechna práce z nich je integrována a tyto větve už nebudete potřebovat. Historie celého procesu bude vypadat jako na obrázku &lt;&lt;rbdiag_i&gt;&gt;:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T222309Z" creationid="Prikryl" creationdate="20151031T222309Z">
        <seg>Tyto komentáře můžete odstranit a napsat vlastní zprávu k revizi, nebo je můžete v souboru ponechat, abyste si lépe vzpomněli, co vlastně zapisujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run `git status` again to verify that all conflicts have been resolved:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ještě jednou můžete spustit příkaz `git status`, abyste si ověřili, že byly všechny konflikty vyřešeny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run `git svn fetch` to grab the new data, but `git svn rebase` does the fetch and then updates your local commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nová data sice můžete vyzvednout i příkazem `git svn fetch`, avšak příkaz `git svn rebase` data nejen stáhne, ale navíc aktualizuje vaše lokální revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run auto gc manually as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz auto gc můžete spustit také ručně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run rebase interactively by adding the `-i` option to `git rebase`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Interaktivní režim přeskládání spustíte příkazem `git rebase` s parametrem `-i`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run something like `git log 1a410e` to look through your whole history, but you still have to remember that `1a410e` is the last commit in order to walk that history to find all those objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li si prohlédnout celou svou historii, můžete zadat příkaz `git log 1a410e`. Problém je v tom, že si k prohlížení historie a nalezení objektů stále ještě musíte pamatovat, že poslední revizí byla `1a410e`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run tests or otherwise inspect the working tree with this script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto skriptem lze spouštět různé testy nebo jinak kontrolovat pracovní strom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run your tests, make sure the hotfix is what you want, and merge it back into your `master` branch to deploy to production.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T214614Z" creationid="Prikryl" creationdate="20151111T214300Z">
        <seg>Můžete spustit testy, abyste se ujistili, že oprava splňuje všechny požadavky, a pak můžete větev začlenit (merge) zpět do větve `master`, aby mohla být nasazena k používání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can save a stash on one branch, switch to another branch later, and try to reapply the changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odklad můžete uložit na jedné větvi, později přepnout na jinou větev a aplikovat změny tam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see a file in the `objects` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, že v adresáři `objects` přibyl nový soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see how powerful this technique can be for customized applications.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zde vidíte, jak může být tato metoda účinná pro uživatelsky nastavené aplikace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that it applied cleanly and automatically created the new commit for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, záplata byla aplikována čistě a automaticky byla vytvořena nová revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that the changes have been reverted.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215959Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, změny byly vráceny zpět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223129Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, že se po zapsání revize zobrazil výpis s informacemi: do jaké větve jste revizi zapsali (`master`), jaký má revize kontrolní součet SHA-1 (`463dc4f`), kolik souborů bylo změněno a statistiku přidaných a odstraněných řádků revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T222210Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, výchozí zpráva k revizi obsahuje zakomentovaný aktuální výstup příkazu `git status` a nahoře jeden prázdný řádek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that you've tagged the commit:(((git commands, tag)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224425Z" creationid="Prikryl" creationdate="20151107T224425Z">
        <seg>Můžete se podívat, že revize byla označena:(((git příkazy, tag)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that your new README file is untracked, because it's under the ``Untracked files'' heading in your status output.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110905Z" creationid="Prikryl" creationdate="20151029T110905Z">
        <seg>Vidíte, že nový soubor `README` není sledován, protože je ve výpisu stavů uveden v části „Untracked files“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see the ``master'' and ``testing'' branches that are right there next to the `f30ab` commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T163835Z" creationid="Prikryl" creationdate="20151108T163835Z">
        <seg>Vedle otisku revize `f30ab` vidíte větve `master` a `testing`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see the tag data along with the commit that was tagged by using the `git show` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150442Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zadání příkazu `git show` se informace značky zobrazí spolu s revizí, kterou značka označuje:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see your reflog by using `git reflog`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Svůj reflog si můžete nechat zobrazit příkazem `git reflog`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set up an attribute like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tom případě můžete nastavit tento atribut:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can start up interactive Ruby mode with the `irb` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Interaktivní režim Ruby spustíte příkazem `irb`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can take the changes on client that aren't on server (`C8` and `C9`) and replay them on your `master` branch by using the `--onto` option of `git rebase`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T124934Z" creationid="Prikryl" creationdate="20151214T124934Z">
        <seg>Můžete vzít změny na větvi `client`, které nejsou na větvi `server` (`C8` a `C9`) a aplikovat je na větev `master` příkazem `git rebase` s volbou `--onto`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Git not to export certain files or directories when generating an archive.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systému Git můžete zadat, aby při generování archivu neexportoval určité soubory nebo adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Git to convert CRLF to LF on commit but not the other way around by setting `core.autocrlf` to input:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systému Git tak můžete zadat, aby převáděl posloupnosti CRLF na LF (avšak nikoli obráceně) nastavením `core.autocrlf` na hodnotu input:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Git which of these you want enabled by setting `core.whitespace` to the values you want on or off, separated by commas.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Které z těchto funkcí si přejete zapnout a které vypnout, to můžete systému Git sdělit zadáním čárkami oddělených hodnot do parametru `core.whitespace`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell that it's staged because it's under the ``Changes to be committed'' heading.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120218Z" creationid="Prikryl" creationdate="20151029T120218Z">
        <seg>Můžeme říci, že je připraven k zapsání, protože je uveden v části „Changes to be committed“, tedy „Změny k zapsání“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can then clone the code by running</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zdrojový kód pak naklonujete příkazem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can then run this program and pipe its output through `git fast-import`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento program můžete spustit a jeho výstup nechat zpracovat příkazem `git fast-import`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can throw away the original `iss91` branch (losing commits `C5` and `C6`) and merge in the other two.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T185507Z" creationid="Prikryl" creationdate="20151209T185507Z">
        <seg>Původní větev `iss91` můžete zahodit (s ní i revize `C5` a `C6`) a začlenit zbylé dvě větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can turn on this functionality with the `core.autocrlf` setting.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato funkce se zapíná pomocí parametru `core.autocrlf`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use this hook to disallow rebasing any commits that have already been pushed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul můžete využít i k zakázání přeskládání všech revizí, které už byly odeslány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can zlib-uncompress it, strip off the header, and look at the commit content:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Objekt můžete rozbalit, extrahovat záhlaví a prohlédnout si obsah revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can't lose information in transit or get file corruption without Git being able to detect it.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T094351Z" creationid="Prikryl" creationdate="20151027T094351Z">
        <seg>Nemůže tak dojít ke ztrátě informací při přenosu dat nebo k poškození souboru, aniž by to Git byl schopen zjistit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can't really check out a tag in Git, since they can't be moved around.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T110828Z" creationid="Prikryl" creationdate="20151108T110828Z">
        <seg>V Gitu nemůžete získat pracovní kopii (check out) jen na základě značky (tag), protože značka se nedá posouvat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You clone a repository with `git clone [url]`.(((git commands, clone)))
For example, if you want to clone the Git linkable library called libgit2, you can do so like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T212131Z" creationid="Prikryl" creationdate="20151028T212131Z">
        <seg>Repozitář naklonujete příkazem `git clone [url]`.(((git příkazy, clone)))
Pokud například chcete naklonovat gitovou knihovnu zvanou libgit2, můžete to provést následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You could do that like this: `$ git fetch --all; git branch -vv`</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T220614Z" creationid="Prikryl" creationdate="20151213T220614Z">
        <seg>Můžete to provést následovně: `$ git fetch --all; git branch -vv`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170346Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořili jste novou větev, přepnuli se na ni, provedli změny a poté jste přepnuli zpět na hlavní větev, v níž jste provedli další změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You did a few commits on them and deleted them directly after merging them into your main branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T143217Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zapsali jste do nich pár revizí a smazali jste je hned po začlenění změn do hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T121754Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedete zápis (commit), který vezme soubory nacházející se v oblasti připravených změn, a tento snímek trvale uloží do adresáře Gitu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do that by having Git compare the last commit on your topic branch with the first common ancestor it has with the master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T142314Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tohoto srovnání dosáhnete tak, že necháte Git porovnat poslední revizi ve vaší tématické větvi s prvním předkem, kterého má společného s hlavní větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do this by telling Git how to convert your binary data to a text format that can be compared via the normal diff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dosáhnete toho tím, že systému Git sdělíte, jak má konvertovat binární data do textového formátu, který lze zpracovávat běžným algoritmem pro zjišťování rozdílů (diff).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do this with the `git branch` command:(((git commands, branch)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T151015Z" creationid="Prikryl" creationdate="20151108T151015Z">
        <seg>Učiníte tak příkazem `git branch`:(((git commands, branch)))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do this with the `git merge` command:(((git commands, merge)))</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T214709Z" creationid="Prikryl" creationdate="20151111T214709Z">
        <seg>Učiníte tak příkazem `git merge`:(((git příkazy, merge))))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do want to start including README, so let's start tracking the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T111252Z" creationid="Prikryl" creationdate="20151029T111252Z">
        <seg>Vy si ale přejete soubor README do snímku zahrnout, a proto ho začněme sledovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You end up with a single commit – the second commit replaces the results of the first.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213658Z" creationid="Prikryl" creationdate="20151106T213658Z">
        <seg>Výsledkem je jediná revize -- druhý příkaz `commit` nahradí výsledky prvního.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You fetch it and merge the new remote branch into your work, making your history look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T135400Z" creationid="Prikryl" creationdate="20151214T135400Z">
        <seg>Vy tyto změny vyzvednete a začleníte novou vzdálenou větev do své práce -- vaše historie teď vypadá nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You get a list of commits that have already been pushed up by running this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Seznam revizí, které už byly odeslány, získáte takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You get a list of new commits being pushed to your server with `git rev-list`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkazem `git rev-list` získáte výpis nových revizí odesílaných na váš server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You go back to your code, and it turns out you can reproduce the issue, but you can’t figure out what is going wrong.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vrátíte se zpět ke svému kódu, a ukáže se, že dokážete problém reprodukovat, ne však identifikovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You hardcode the time zone (-0700) because doing so is easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Časové pásmo definujete napevno (-0700), protože je to jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have a bona fide Git repository and a checkout or working copy of the files for that project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T140749Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte k dispozici opravdový gitový repozitář a pracovní kopii souborů projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have a lot of options at this point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto se nabízí celá řada možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have several options to get a remote Git repository up and running so that you can collaborate with others or share your work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144750Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existuje několik možností, jak vytvořit a zprovoznit vzdálený gitový repozitář tak, abyste mohli spolupracovat s ostatními uživateli nebo sdílet svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have three trees that specify the different snapshots of your project that you want to track, but the earlier problem remains: you must remember all three SHA-1 values in order to recall the snapshots.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte vytvořeny tři stromy označující různé snímky vašeho projektu, jež chcete sledovat. Původního problému jsme se však stále nezbavili: musíte si pamatovat všechny tři hodnoty SHA-1, abyste mohli snímky znovu vyvolat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to change the path to the ACL file from this</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Cestu k souboru ACL budete muset změnit z</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to figure out how to get the commit message from each of these commits to test.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete muset najít postup, jak získat zprávy všech těchto revizí, které mají být otestovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to merge it manually into your work when you're ready.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T171448Z" creationid="Prikryl" creationdate="20151101T171448Z">
        <seg>Sloučení s vaší prací musíte udělat ručně, až to uznáte za vhodné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to set it up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To budete muset nastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have your tree object, so you continue walking your commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stáhli jste objekt stromu, a můžete tak pokračovat v procházení revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T175854Z" creationid="Prikryl" creationdate="20151029T175854Z">
        <seg>Můžete rovněž přidat adresáře `log`, `tmp` nebo `pid`, automaticky vygenerovanou dokumentaci a další.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may be wondering what the difference is between _author_ and _committer_.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T212205Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná se ptáte, jaký je rozdíl mezi _autorem_ a _autorem revize_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may even want to add a `pre-receive` hook that checks each commit message for a `git-svn-id` and rejects pushes that contain commits without it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná by nebylo od věci ani vytvořit zásuvný modul `pre-receive`, který by kontroloval všechny zprávy k revizím, zda obsahují `git-svn-id`, a odmítl by všechna odeslání, která obsahují revize bez něj.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may not want to run `adduser` and set temporary passwords for every user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná nebudete mít chuť spouštět příkaz `adduser` (přidat uživatele) a nastavovat pro každého uživatele dočasná hesla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may recall that when you ran `git init` earlier, you then ran `git add (files)` – that was to begin tracking files in your directory.(((git commands, init)))(((git commands, add)))
The `git add` command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120723Z" creationid="Prikryl" creationdate="20151029T120723Z">
        <seg>Možná si vzpomínáte, že když jste před časem spustili příkaz `git init`, provedli jste potom příkaz `git add (soubory)`.(((git příkazy, init)))(((git příkazy, add)))
V příkazu `git add` je uvedena cesta buď k souboru, nebo k adresáři. Pokud se jedná o adresář, příkaz přidá rekurzivně všechny soubory v tomto adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T130118Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé klíče se mohou objevit víckrát, protože Git načítá stejný klíč z různých souborů (například z `/etc/gitconfig` a z `~/.gitconfig`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may think to run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete zadat následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may use it in conjunction with a commit template to programmatically insert information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul můžete v kombinaci se šablonou revize využívat k vložení informací programem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You modify files in your working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Změníte soubory ve svém pracovním adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby Git spustil skutečný příkaz gc, musíte mít kolem 7000 volných objektů nebo více než 50 balíčkových souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must indicate how far back you want to rewrite commits by telling the command which commit to rebase onto.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Musíte specifikovat, jak hluboko do historie se chcete vrátit a přepisovat revize. K příkazu proto musíte zadat, na jakou revizi si přejete přeskládání provést.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must look at each commit being pushed up, see if that string is in the commit message, and, if the string is absent from any of the commits, exit non-zero so the push is rejected.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každou odesílanou revizi si musíte prohlédnout, zjistit, zda zpráva k revizi obsahuje daný řetězec, a pokud v některé z nich chybí, vrátit nenulovou hodnotu, čímž odesílanou revizi odmítnete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must run two commands: `git submodule init` to initialize your local configuration file, and `git submodule update` to fetch all the data from that project and check out the appropriate commit listed in your superproject:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete muset použít dva příkazy: `git submodule init` k inicializaci lokálního konfiguračního souboru a `git submodule update` k vyzvednutí všech dat z tohoto projektu a checkoutu příslušné revize uvedené ve vašem superprojektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need a file in which you can store the SHA-1 value under a simple name so you can use that pointer rather than the raw SHA-1 value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodil by se soubor, do nějž budete pod jednoduchým názvem ukládat hodnotu SHA-1. Tento ukazatel pro vás bude srozumitelnější než nevlídná hodnota SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need the signer’s public key in your keyring for this to work properly:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby příkaz správně fungoval, musíte mít ve své klíčence veřejný klíč podepisujícího (signer).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to be careful with this technique because amending changes the SHA-1 of the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady byste měli být opatrní, protože oprava revize změní také její hodnotu SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to be sure your working directory is clean when you run this, though.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte však, že když příkaz spouštíte, je třeba, abyste měli čistý pracovní adresář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to edit the script so that it stops at the commit you want to edit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript je třeba upravit tak, aby zastavil na revizi, v níž chcete provést změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to get rid of anything that has a pointer to those old commits before you repack:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Před novým zabalením je třeba odstranit vše, co na tyto staré revize ukazuje:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to make some changes and commit snapshots of those changes into your repository each time the project reaches a state you want to record.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T083937Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že potřebujete udělat pár změn a zapsat snímky těchto změn do svého repozitáře pokaždé, když se projekt dostane do stavu, který chcete zaznamenat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You open it again and make that change, and you're ready to commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T125344Z" creationid="Prikryl" creationdate="20151029T125344Z">
        <seg>Soubor znovu otevřete, provedete změnu a chcete jej zapsat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You regularly push both of these branches to the public repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obě tyto větve pravidelně odesíláte do veřejného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You run `print_export` inside each directory, which takes the manifest and mark of the previous snapshot and returns the manifest and mark of this one; that way, you can link them properly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V každém adresáři spustíte soubor `print_export`, který vezme manifest a známku předchozího snímku a poskytne manifest a označovač tohoto snímku. Tímto způsobem je lze řádně spojit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You run your test again and find that this commit is broken, so you tell Git that with `git bisect bad`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znovu provedete svůj test a zjistíte, že tato revize vykazuje chybu. Systému Git to tedy sdělíte příkazem `git bisect bad`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You saw this in the last section with the `iss53` and `hotfix` branches you created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Viděli jste to v předchozí části, kdy jste si vytvořili větve `iss53` a `hotfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, jak je jednoduché vzít repozitář Git, vytvořit jeho holou verzi a umístit ji na server, k níž máte vy i vaši spolupracovníci SSH přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should also be able to share your branches by pushing them to a shared server, working with others on shared branches and rebasing your branches before they are shared.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T134150Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli byste teď umět odeslat své větve ke sdílení na server, spolupracovat s ostatními na sdílených větvích a přeskládat vaše větve před tím, než je budete sdílet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should also now have a working version of Git on your system that's set up with your personal identity.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T174257Z" creationid="Prikryl" creationdate="20151026T174109Z">
        <seg>Také byste nyní měli mít nainstalovanou fungující verzi Gitu, nastavenou na vaše osobní údaje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should feel comfortable creating and switching to new branches, switching between branches and merging local branches together.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T090946Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Neměli byste teď mít problém s vytvořením nové větve a s přepnutím na ni, s přepínáním mezi větvemi, ani se slučováním lokálních větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should feel fairly comfortable contributing to a project in Git as well as maintaining your own project or integrating other users' contributions.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160108T190118Z" creationid="Prikryl" creationdate="20160108T190118Z">
        <seg>Teď už byste měli mít pocit jistoty jak při přispívání do projektu v Gitu, tak při správě svého vlastního projektu, nebo při integraci příspěvků od ostatních uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should have a basic understanding of what Git is and how it's different from the centralized version control system you may have previously been using.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T174014Z" creationid="Prikryl" creationdate="20151026T174014Z">
        <seg>Nyní byste měli mít základní představu o tom, co je to Git a v čem se liší od centralizovaného systému pro správu verzí, který jste možná dosud používali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should have to do these things only once on any given computer; they'll stick around between upgrades.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T104021Z" creationid="Prikryl" creationdate="20151028T104021Z">
        <seg>Nastavení stačí provést pouze jednou -- zůstanou zachována i po aktualizacích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should know two important things about `git svn log`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>O příkazu `git svn log` byste měli vědět dvě důležité věci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should now be able to make Git fit nearly any workflow you can dream up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní byste měli systém Git bez potíží nastavit téměř na jakýkoli pracovní postup, který si vysníte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should now have a copy of the Git directory data in your `my_project.git` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V adresáři `my_project.git` byste nyní měli mít kopii dat z adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should only have to use `git apply` for legacy patches and things like that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git apply` je dobré používat jen pro starší záplaty a podobně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You stage the changes you want by editing a file and running `git add` on it or `git rm` to a tracked file, and the subsequent `git commit --amend` takes your current staging area and makes it the snapshot for the new commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změny, které chcete zapsat, připravíte tím způsobem, že upravíte příslušné soubory a použijete na ně příkaz `git add`, resp. `git rm`. Příkaz `git commit --amend` poté vezme vaši oblast připravených změn v aktuální podobě a vytvoří snímek nové revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You stage the files, adding snapshots of them to your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T121607Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Soubory připravíte k zapsání tak, že vložíte jejich snímky do oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You stage these modified files and then commit all your staged changes, and the cycle repeats.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T215512Z" creationid="Prikryl" creationdate="20151028T215512Z">
        <seg>Změněné soubory připravíte k zapsání (stage) a následně všechny připravené změny zapíšete (commit). A celý cyklus se opakuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You start a new branch based off the current `origin/master` branch, squash the `featureB` changes there, resolve any conflicts, make the implementation change, and then push that up as a new branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T191855Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začnete vytvořením nové větve z aktuální větve `origin/master`, nacpete (squash) do ní změny z `featureB`, vyřešíte případné konflikty, provedete požadovanou úpravu implementace a vše odešlete jako novou větev:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kopii holého repozitáře umístíte někam, kam mají všichni sdílený přístup, a nastavíte oprávnění ke čtení/zápisu stejně jako u jakéhokoli jiného sdíleného adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You still get the advantages of things like offline committing and vastly simpler branching and merging, but the workflow can be very similar; the main difference is that merges happen client-side rather than on the server at commit time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142641Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přesto získáte výhody v takových ohledech, jako je zapisování revizí offline a podstatně snazší větvení a slučování. Pracovní postup však bude velmi podobný. Hlavním rozdílem je to, že slučování probíhá na straně klienta, a ne během zapisování revize na straně serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You then fetch from that server, bringing down the new commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T130642Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy poté znovu vyzvednete data ze serveru (fetch), čímž získáte nové objekty revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You then need to add in this new repository URL as a second remote, in this case named `myfork`:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T192028Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté musíte URL adresu tohoto nového repozitáře přidat jako druhý vzdálený repozitář, v tomto případě pojmenovaný `myfork`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You use this command to artificially add the earlier version of the test.txt file to a new staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz lze použít, jestliže chcete uměle přidat starší verzi souboru test.txt do nové oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You want to see what is in your experiment branch that hasn’t yet been merged into your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy chcete vidět, co všechno obsahuje vaše experimentální větev, kterou jste ještě nezačlenili do hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You will see these hash values all over the place in Git because it uses them so much.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T094803Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>S těmito otisky se budete setkávat v Gitu všude, protože je používá opravdu často.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You work for a while, generally in a topic branch, and merge into your master branch when it's ready to be integrated.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T215027Z" creationid="Prikryl" creationdate="20160115T215027Z">
        <seg>Po určitou dobu pracujete, obvykle na nějaké tématické větvi, a když je připravena k integraci, začleníte ji do své větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You work on your web site and do some commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracujete na webových stránkách a zapíšete několik revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You'll also take this opportunity to move the work to be based off the project's current `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T191454Z" creationid="Prikryl" creationdate="20160122T191454Z">
        <seg>Této příležitosti využijete i k tomu, abyste za základ své práce vzali aktuální stav projektu ve větvi `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You'll do the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152847Z" creationid="Prikryl" creationdate="20151111T152847Z">
        <seg>Provedete následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You'll follow these steps:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T152536Z" creationid="Prikryl" creationdate="20151111T152536Z">
        <seg>Postupujete podle těchto kroků:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You'll have to pull down their work first and incorporate it into yours before you'll be allowed to push.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T142846Z" creationid="Prikryl" creationdate="20151107T111146Z">
        <seg>Nejdříve musíte jeho práci stáhnout, zahrnout ji do vaší a teprve potom budete moci vše odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You'll learn how to work in an environment where small groups collaborate on features and then those team-based contributions are integrated by another party.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T110831Z" creationid="Prikryl" creationdate="20160118T110831Z">
        <seg>Naučíte se, jak pracovat v prostředí, v němž na jednotlivých úkolech spolupracují malé skupiny a tyto týmové příspěvky jsou poté integrovány jinou skupinou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You'll notice the phrase ``fast-forward'' in that merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T123958Z" creationid="Prikryl" creationdate="20151111T214818Z">
        <seg>Ve výstupu příkazu `merge` si všimněte fráze „fast-forward“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You've decided that you're going to work on issue #53 in whatever issue-tracking system your company uses.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T110536Z" creationid="Prikryl" creationdate="20151111T153605Z">
        <seg>Rozhodli jste se, že budete pracovat na problému #53 (issue), zachyceném v jakémkoliv systému pro sledování chyb, který vaše společnost používá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You've seen one such option already – the `-2` option, which show only the last two commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T195604Z" creationid="Prikryl" creationdate="20151103T195604Z">
        <seg>S jednou takovou volbou už jsme se setkali -- šlo o volbu `-2`, která zobrazí pouze dvě poslední revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T143904Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš gitovský repozitář nyní obsahuje pět objektů: jeden blob pro obsah každého z vašich tří souborů, jeden strom, který zaznamenává obsah adresáře a udává, které názvy souborů jsou uloženy jako který blob, a jeden objekt revize s ukazatelem na kořenový objekt stromu a se všemi metadaty revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your `inline_data` method looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Metoda `inline_data` má tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your basic main loop looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Základní smyčka bude mít tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your branch will contain only work from that commit down:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše větev bude obsahovat pouze práci od této revize níže:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your change is now in the snapshot of the commit pointed to by the `master` branch, and you can deploy the fix.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T135025Z" creationid="Prikryl" creationdate="20151115T135025Z">
        <seg>Vaše změna je nyní obsažena ve snímku revize, na kterou ukazuje větev `master`, a vy můžete zveřejnit opravu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your commit history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T135129Z" creationid="Prikryl" creationdate="20151214T135129Z">
        <seg>Historie revizí bude vypadat nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your commit history will look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T145318Z" creationid="Prikryl" creationdate="20151209T145318Z">
        <seg>Historie revizí bude vypadat nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your database contains the two new versions of the file as well as the first content you stored there:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše databáze obsahuje dvě nové verze souboru a počáteční obsah, který jste do ní vložili:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your directory structure looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš adresář má tuto strukturu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your file contains a section that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073443Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor obsahuje část, která vypadá nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your history no longer contains a reference to that file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše historie už neobsahuje referenci na problémový soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your history then looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T185532Z" creationid="Prikryl" creationdate="20151209T185532Z">
        <seg>Vaše historie pak vypadá následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your import is ready to push up to your new Git server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš import je připraven k odeslání na nový server Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your local branches aren't automatically synchronized to the remotes you write to – you have to explicitly push the branches you want to share.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T110326Z" creationid="Prikryl" creationdate="20151210T123603Z">
        <seg>Vaše lokální větve nejsou automaticky synchronizovány se vzdálenými repozitáři, do kterých zapisujete –- ty, které chcete sdílet, musíte explicitně odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your method looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celý postup vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your object is there, so go ahead and get the whole packfile:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš objekt se v tomto souboru nachází, a proto neváhejte a stáhněte celý balíčkový soubor:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your staging area now has the new version of test.txt as well as the new file new.txt.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V oblasti připravených změn nyní máte jak novou verzi souboru test.txt, tak nový soubor new.txt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your strategy will be to go through the snapshots one at a time and create commits with the contents of each directory, linking each commit back to the previous one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše strategie tedy bude spočívat v tom, že postupně projdete jednotlivé snímky a vytvoříte revize s obsahem každého adresáře, přičemž každá revize bude odkazovat na revizi předchozí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your working directory is clean:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš pracovní adresář se vyčistil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll be able to watch Git rewriting trees and commits and then move the branch pointer at the end.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvidíte, jak Git přepisuje stromy a revize a poté přemístí ukazatel větve na konec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll learn a few of the common uses so you can get an idea of some of the things it’s capable of.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále poznáte několik běžných situací, v nichž ho lze použít, a získáte tak představu, co všechno příkaz dovede.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll often want to do two basic things to your last commit: change the commit message, or change the snapshot you just recorded by adding, changing and removing files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na poslední revizi budete často chtít měnit dvě věci: zprávu k revizi nebo čerstvě zapsaný snímek, v němž budete chtít přidat, změnit nebo odstranit soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re likely to have to either include this code from a shared library like a CPAN install or Ruby gem, or copy the source code into your own project tree.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravděpodobně budete muset použít tento kód ze sdílené knihovny, jako CPAN install nebo Ruby gem, nebo zkopírovat zdrojový kód do vlastního stromu projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve accomplished the basic tasks of tracking and committing files, and you’ve harnessed the power of the staging area and lightweight topic branching and merging.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zvládli jste základní úkony sledování a zapisování souborů a pochopili jste přednosti přípravy souborů k zapsání i snadného vytváření a začleňování větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve partially staged this file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor je částečně připraven k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve seen a number of advanced tools that allow you to manipulate your commits and staging area more precisely.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této kapitole jste poznali několik pokročilých nástrojů umožňujících preciznější manipulaci s revizemi a oblastí připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[IMPORTANT]
=====
It's important to understand that `git checkout -- [file]` is a dangerous command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T220204Z" creationid="Prikryl" creationdate="20151106T220204Z">
        <seg>[IMPORTANT]
=====
Je důležité, abyste porozuměli tomu, že příkaz `git checkout -- [soubor]` je nebezpečný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
.Don't type your password every time
====
If you're using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T125238Z" creationid="Prikryl" creationdate="20151210T125238Z">
        <seg>[NOTE]
.Nepište pokaždé své heslo
====
Pokud práci odesíláte přes HTTPS URL, vyptává se vás gitový server na jméno a heslo kvůli autentizaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
.Git Diff in an External Tool
====
We will continue to use the `git diff` command in various ways throughout the rest of the book.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T093310Z" creationid="Prikryl" creationdate="20151030T094145Z">
        <seg>[NOTE]
.Git diff v externím nástroji
====
Ve zbytku knihy budeme příkaz `git diff` používat různými způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T165802Z" creationid="Prikryl" creationdate="20151108T165802Z">
        <seg>[NOTE]
.Přepnutí větví mění soubory ve vašem pracovním adresáři
====
Považuji za důležité poznamenat, že v Gitu se při přepnutí větví změní soubory ve vašem pracovním adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
.Upstream shorthand
====
When you have a tracking branch set up, you can reference it with the `@{upstream}` or `@{u}` shorthand.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214017Z" creationid="Prikryl" creationdate="20151213T213916Z">
        <seg>[NOTE]
.Zkratka pro upstream
====
Pokud máte nastavenu sledující větev, můžete se na ni kdykoliv odkázat zkratkou `@{upstream}` nebo `@{u}`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
.``origin'' is not special
====
Just like the branch name ``master'' does not have any special meaning in Git, neither does ``origin''.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T105644Z" creationid="Prikryl" creationdate="20151210T105644Z">
        <seg>[NOTE]
.Název „origin“ není nijak speciální
====
Stejně jako jméno větve „master“ nemá pro Git žádný speciální význam, ani název „origin“ není nijak zvláštní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in &lt;&lt;_advanced_merging&gt;&gt;.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T083753Z" creationid="Prikryl" creationdate="20151120T080555Z">
        <seg>[NOTE]
====
Pokud pro řešení zapeklitých konfliktů potřebujete pokročilejší nástroje, podívejte se na podkapitolu &lt;&lt;_advanced_merging&gt;&gt;, která se slučováním zabývá podrobněji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
====
The ``master'' branch in Git is not a special branch.(((master)))
It is exactly like any other branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150352Z" creationid="Prikryl" creationdate="20151108T150352Z">
        <seg>[NOTE]
====
Větev „master“ se v Gitu nechápe jako speciální větev.(((master)))
Je úplně stejná jako všechny ostatní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
====
This book was written using Git version *2.0.0*.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T200647Z" creationid="Prikryl" creationdate="20151027T200647Z">
        <seg>[NOTE]
====
Tato kniha byla napsána s využitím Gitu verze *2.0.0*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix based systems like Linux and OS X or a Windows system.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T114901Z" creationid="Prikryl" creationdate="20151107T114901Z">
        <seg>[NOTE]
====
Vim, Emacs a Notepad++ jsou oblíbené textové editory používané vývojáři v systémech odvozených od Unixu, jako je Linux a OS X, a v systému Window.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
====
You may want to use `rebase -i` to squash your work down to a single commit, or rearrange the work in the commits to make the patch easier for the maintainer to review – see &lt;&lt;_rewriting_history&gt;&gt; for more information about interactive rebasing.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T190739Z" creationid="Prikryl" creationdate="20160121T190739Z">
        <seg>[NOTE]
====
Možná budete chtít použít `rebase -i`, abyste svou práci stlačili do jediného zápisu revize, nebo budete chtít práci přeuspořádat do posloupnosti revizí, která správci usnadní zkoumání záplat. Další informace o interaktivním přeskládání najdete v části &lt;&lt;_rewriting_history&gt;&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[NOTE]
=====
While `git reset` _can_ be a dangerous command if you call it with `--hard`, in this instance the file in your working directory is not touched.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T214436Z" creationid="Prikryl" creationdate="20151106T214436Z">
        <seg>[NOTE]
=====
Příkaz `git reset` sice _může_ být nebezpečný, pokud jej voláte s volbou `--hard`, ale v našem případě zůstane soubor v pracovním adresáři nedotčen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[TIP]
====
GitHub maintains a fairly comprehensive list of good `.gitignore` file examples for dozens of projects and languages at https://github.com/github/gitignore[] if you want a starting point for your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T091830Z" creationid="Prikryl" creationdate="20151029T203305Z">
        <seg>[TIP]
====
Pokud pro váš projekt potřebujete něco pro začátek, najdete na stránce https://github.com/github/gitignore[] serveru GitHub poměrně rozsáhlý seznam dobrých příkladů souboru `.gitignore` pro desítky projektů a jazyků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[WARNING]
====
You may find, if you don't setup an editor like this, you will likely get into a really confusing state when they are launched.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115128Z" creationid="Prikryl" creationdate="20151107T115128Z">
        <seg>[WARNING]
====
Pokud tak neučiníte, pak vás pravděpodobně velmi zmate, až se některý z nich spustí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_annotated_tags]]
==== Annotated Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150013Z" creationid="Prikryl" creationdate="20151107T150013Z">
        <seg>[[_annotated_tags]]
==== Anotované značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_basic_branching]]
==== Basic Branching</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153303Z" creationid="Prikryl" creationdate="20151111T153303Z">
        <seg>[[_basic_branching]]
==== Základní větvení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_basic_merge_conflicts]]
==== Basic Merge Conflicts</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T155618Z" creationid="Prikryl" creationdate="20151115T155618Z">
        <seg>[[_basic_merge_conflicts]]
==== Základní konflikty při slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_basic_merging]]
==== Basic Merging</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152800Z" creationid="Prikryl" creationdate="20151115T152800Z">
        <seg>[[_basic_merging]]
==== Základní slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_branch_management]]
=== Branch Management</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T084158Z" creationid="Prikryl" creationdate="20151120T084158Z">
        <seg>[[_branch_management]]
=== Správa větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_checking_status]]
==== Checking the Status of Your Files</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T105913Z" creationid="Prikryl" creationdate="20151029T105913Z">
        <seg>[[_checking_status]]
==== Kontrola stavu souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_commit_guidelines]]
==== Commit Guidelines</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T122901Z" creationid="Prikryl" creationdate="20160110T122901Z">
        <seg>[[_commit_guidelines]]
==== Pravidla pro zápis revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_committing_changes]]
==== Committing Your Changes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T094640Z" creationid="Prikryl" creationdate="20151030T094640Z">
        <seg>[[_committing_changes]]
==== Zapisování změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_contributing_project]]
=== Contributing to a Project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T110937Z" creationid="Prikryl" creationdate="20160110T110937Z">
        <seg>[[_contributing_project]]
=== Přispívání do projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_create_new_branch]]
==== Creating a New Branch</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T150808Z" creationid="Prikryl" creationdate="20151108T150808Z">
        <seg>[[_create_new_branch]]
==== Vytvoření nové větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_delete_branches]]
==== Deleting Remote Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T073658Z" creationid="Prikryl" creationdate="20151214T073658Z">
        <seg>[[_delete_branches]]
==== Mazání vzdálených větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_distributed_git]]
== Distributed Git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160107T211140Z" creationid="Prikryl" creationdate="20160107T211140Z">
        <seg>[[_distributed_git]]
== Distribuovaný Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_fetching_and_pulling]]
==== Fetching and Pulling from Your Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170631Z" creationid="Prikryl" creationdate="20151101T170631Z">
        <seg>[[_fetching_and_pulling]]
==== Vyzvedávání a stahování ze vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_first_time]]
=== First-Time Git Setup</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T200019Z" creationid="Prikryl" creationdate="20151027T200019Z">
        <seg>[[_first_time]]
=== První nastavení systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_getting_a_repo]]
=== Getting a Git Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T210345Z" creationid="Prikryl" creationdate="20151028T210345Z">
        <seg>[[_getting_a_repo]]
=== Získání repozitáře Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_getting_started]]
== Getting Started</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T173803Z" creationid="Prikryl" creationdate="20151026T173137Z">
        <seg>[[_getting_started]]
== Úvod</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_aliases]]
=== Git Aliases</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T134058Z" creationid="Prikryl" creationdate="20151107T134058Z">
        <seg>[[_git_aliases]]
=== Aliasy v Gitu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_basics_chapter]]
== Git Basics</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202435Z" creationid="Prikryl" creationdate="20151028T202435Z">
        <seg>[[_git_basics_chapter]]
== Základy práce se systémem Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_branches_overview]]
=== Branches in a Nutshell</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T134847Z" creationid="Prikryl" creationdate="20151108T134847Z">
        <seg>[[_git_branches_overview]]
=== Větve v kostce</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_branching]]
== Git Branching</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151105T152819Z" creationid="Prikryl" creationdate="20151105T152819Z">
        <seg>[[_git_branching]]
== Větve v systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_cloning]]
==== Cloning an Existing Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211141Z" creationid="Prikryl" creationdate="20151028T211141Z">
        <seg>[[_git_cloning]]
==== Klonování existujícího repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_diff_staged]]
==== Viewing Your Staged and Unstaged Changes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T203600Z" creationid="Prikryl" creationdate="20151029T203600Z">
        <seg>[[_git_diff_staged]]
==== Zobrazení připravených a nepřipravených změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_help]]
=== Getting Help</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T133504Z" creationid="Prikryl" creationdate="20151028T133504Z">
        <seg>[[_git_help]]
=== Získání nápovědy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_mv]]
==== Moving Files</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230456Z" creationid="Prikryl" creationdate="20151031T230456Z">
        <seg>[[_git_mv]]
==== Přesouvání souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_git_tagging]]
=== Tagging</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T222949Z" creationid="Prikryl" creationdate="20151107T144715Z">
        <seg>[[_git_tagging]]
=== Používání značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_ignoring]]
==== Ignoring Files</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T175240Z" creationid="Prikryl" creationdate="20151029T175240Z">
        <seg>[[_ignoring]]
==== Ignorované soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_inspecting_remote]]
==== Inspecting a Remote</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121311Z" creationid="Prikryl" creationdate="20151107T121311Z">
        <seg>[[_inspecting_remote]]
==== Prohlížení vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_integration_manager]]
==== Integration-Manager Workflow</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T154529Z" creationid="Prikryl" creationdate="20160109T154529Z">
        <seg>[[_integration_manager]]
==== Pracovní postup s integračním manažerem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_merge_rebase_work]]
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T152504Z" creationid="Prikryl" creationdate="20151214T141250Z">
        <seg>[[_merge_rebase_work]]
.Opakované začlenění stejné práce do nového bodu sloučení
image::images/perils-of-rebasing-4.png[Opakované začlenění stejné práce do nového bodu sloučení.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_pre_merge_rebase_work]]
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png["Someone pushes rebased commits, abandoning commits you've based your work on."]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151215T132816Z" creationid="Prikryl" creationdate="20151214T135947Z">
        <seg>[[_pre_merge_rebase_work]]
.Někdo odešle přeskládané objekty revize a zahodí ty, z kterých jste při své práci vycházeli
image::images/perils-of-rebasing-3.png["Někdo odešle přeskládané objekty revize a zahodí ty, z kterých jste při své práci vycházeli."]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_private_team]]
==== Private Small Team</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T141754Z" creationid="Prikryl" creationdate="20160115T141754Z">
        <seg>[[_private_team]]
==== Malý soukromý tým</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_project_over_email]]
==== Public Project over Email</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T195611Z" creationid="Prikryl" creationdate="20160122T195611Z">
        <seg>[[_project_over_email]]
==== Veřejný projekt využívající elektronickou poštu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_public_project]]
==== Forked Public Project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T170336Z" creationid="Prikryl" creationdate="20160121T170336Z">
        <seg>[[_public_project]]
==== Odštěpený veřejný projekt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_pushing_branches]]
==== Pushing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T123429Z" creationid="Prikryl" creationdate="20151210T123429Z">
        <seg>[[_pushing_branches]]
==== Odesílání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_pushing_remotes]]
==== Pushing to Your Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T100112Z" creationid="Prikryl" creationdate="20151107T100112Z">
        <seg>[[_pushing_remotes]]
==== Odesílání do vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_rebase_peril]]
==== The Perils of Rebasing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T133636Z" creationid="Prikryl" creationdate="20151214T133636Z">
        <seg>[[_rebase_peril]]
==== Rizika spojená s přeskládáním</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_rebase_rebase]]
==== Rebase When You Rebase</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T184035Z" creationid="Prikryl" creationdate="20151214T184035Z">
        <seg>[[_rebase_rebase]]
==== Přeskládejte po přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T152022Z" creationid="Prikryl" creationdate="20151214T152022Z">
        <seg>[[_rebase_rebase_work]]
.Přeskládání nad vynuceně odeslaným výsledkem přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_rebasing]]
=== Rebasing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T081945Z" creationid="Prikryl" creationdate="20151214T081945Z">
        <seg>[[_rebasing]]
=== Přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_remote_branches]]
=== Remote Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T080902Z" creationid="Prikryl" creationdate="20151210T075933Z">
        <seg>[[_remote_branches]]
=== Vzdálené větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_remote_repos]]
=== Working with Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T161308Z" creationid="Prikryl" creationdate="20151101T161308Z">
        <seg>[[_remote_repos]]
=== Práce se vzdálenými repozitáři</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_removing_files]]
==== Removing Files</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224116Z" creationid="Prikryl" creationdate="20151031T224116Z">
        <seg>[[_removing_files]]
==== Odstraňování souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_sharing_tags]]
==== Sharing Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224507Z" creationid="Prikryl" creationdate="20151107T224507Z">
        <seg>[[_sharing_tags]]
==== Sdílení značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_switching_branches]]
==== Switching Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T163852Z" creationid="Prikryl" creationdate="20151108T163852Z">
        <seg>[[_switching_branches]]
==== Přepínání větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_topic_branch]]
==== Topic Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T141758Z" creationid="Prikryl" creationdate="20151209T141758Z">
        <seg>[[_topic_branch]]
==== Tématické větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_tracking_branches]]
==== Tracking Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T111353Z" creationid="Prikryl" creationdate="20151213T111353Z">
        <seg>[[_tracking_branches]]
==== Sledující větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_tracking_files]]
==== Tracking New Files</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T111300Z" creationid="Prikryl" creationdate="20151029T111300Z">
        <seg>[[_tracking_files]]
==== Sledování nových souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_undoing]]
=== Undoing Things</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T123720Z" creationid="Prikryl" creationdate="20151105T214007Z">
        <seg>[[_undoing]]
=== Návrat do předchozího stavu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_unstaging]]
==== Unstaging a Staged File</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213728Z" creationid="Prikryl" creationdate="20151106T213728Z">
        <seg>[[_unstaging]]
==== Odstranění souboru z oblasti připravených změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[_viewing_history]]
=== Viewing the Commit History</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T143939Z" creationid="Prikryl" creationdate="20151102T143939Z">
        <seg>[[_viewing_history]]
=== Zobrazení historie revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170537Z" creationid="Prikryl" creationdate="20151108T170537Z">
        <seg>[[divergent_history]]
.Rozbíhající se historie
image::images/advance-master.png[Rozbíhající se historie.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T213145Z" creationid="Prikryl" creationdate="20151104T213145Z">
        <seg>[[limit_options]]
.Volby pro omezení výstupu příkazu `git log`
[cols="2,4",options="header"]
|================================
| Volba                 | Popis
| `-(n)`                | Zobrazí pouze posledních n revizí.
| `--since`, `--after`  | Omezí výpis na revize zapsané po zadaném datu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T214528Z" creationid="Prikryl" creationdate="20151102T214208Z">
        <seg>[[log_options]]
.Běžné volby příkazu `git log`
[cols="1,4",options="header"]
|================================
| Volba             | Popis
| `-p`              | Zobrazí záplatu (**p**atch) zahrnutou do každé revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[lrbranch_b]]
.A ``silo'' view of progressive-stability branching
image::images/lr-branches-2.png[A ``silo'' view of progressive-stability branching.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T140453Z" creationid="Prikryl" creationdate="20151209T140453Z">
        <seg>[[lrbranch_b]]
.„Zásobníkový“ pohled na větvení podle stupně stability
image::images/lr-branches-2.png[„Zásobníkový“ pohled na větvení podle stupně stability.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[pretty_format]]
.Useful options for `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Option   | Description of Output
| `%H`     | Commit hash
| `%h`     | Abbreviated commit hash
| `%T`     | Tree hash
| `%t`     | Abbreviated tree hash
| `%P`     | Parent hashes
| `%p`     | Abbreviated parent hashes
| `%an`    | Author name
| `%ae`    | Author email
| `%ad`    | Author date (format respects the --date=option)
| `%ar`    | Author date, relative
| `%cn`    | Committer name
| `%ce`    | Committer email
| `%cd`    | Committer date
| `%cr`    | Committer date, relative
| `%s`     | Subject
|================================</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T132858Z" creationid="Prikryl" creationdate="20151107T132858Z">
        <seg>[[pretty_format]]
.Užitečné volby pro `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Parametr | Popis výstupu
| %H       | Otisk revize (*H* jako hash)
| %h       | Zkrácený otisk revize
| %T       | Otisk stromu (*T* jako tree)
| %t       | Zkrácený otisk stromu
| %P       | Otisky rodičovských revizí (*P* jako parent)
| %p       | Zkrácené otisky rodičovských revizí
| %an      | Jméno autora (**a**uthor **n**ame)
| %ae      | E-mail autora (**a**uthor **e**-mail)
| %ad      | Datum autora (formát respektuje --date=volba)
| %ar      | Datum autora, relativní
| %cn      | Jméno autora revize (**c**ommitter **n**ame)
| %ce      | E-mail autora revize (**c**ommitter **e**-mail)
| %cd      | Datum autora revize (**c**ommitter **d**ate)
| %cr      | Datum autora revize, relativní
| %s       | Předmět (**s**ubject)
|================================</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[psp_b]]
.Commit history after `featureA` work.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T184214Z" creationid="Prikryl" creationdate="20160122T184214Z">
        <seg>[[psp_b]]
.Historie revizí po přeskládání práce z `featureA`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[rbdiag_e]]
.A history with a topic branch off another topic branch
image::images/interesting-rebase-1.png[A history with a topic branch off another topic branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151216T080759Z" creationid="Prikryl" creationdate="20151214T124521Z">
        <seg>[[rbdiag_e]]
.Historie s tématickou větví vytvořenou z jiné tématické větve
image::images/interesting-rebase-1.png[Historie s tématickou větví vytvořenou z jiné tématické větve.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[rbdiag_g]]
.Fast-forwarding your master branch to include the client branch changes
image::images/interesting-rebase-3.png[Fast-forwarding your master branch to include the client branch changes.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T130446Z" creationid="Prikryl" creationdate="20151214T130446Z">
        <seg>[[rbdiag_g]]
.Přidání změn z větve `client` posunutím větve `master` „rychle vpřed“
image::images/interesting-rebase-3.png[Přidání změn z větve `client` posunutím větve `master` „rychle vpřed“.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[rbdiag_h]]
.Rebasing your server branch on top of your master branch
image::images/interesting-rebase-4.png[Rebasing your server branch on top of your master branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T131434Z" creationid="Prikryl" creationdate="20151214T131434Z">
        <seg>[[rbdiag_h]]
.Přeskládání větve `server` na vrchol větve `master`
image::images/interesting-rebase-4.png[Přeskládání větve `server` na vrchol větve `master`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[rbdiag_i]]
.Final commit history
image::images/interesting-rebase-5.png[Final commit history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T133558Z" creationid="Prikryl" creationdate="20151214T133558Z">
        <seg>[[rbdiag_i]]
.Historie poslední revize
image::images/interesting-rebase-5.png[Historie poslední revize.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[wfdiag_b]]
.Integration-manager workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T164257Z" creationid="Prikryl" creationdate="20160109T160514Z">
        <seg>[[wfdiag_b]]
.Pracovní postup s integračním manažerem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[[wfdiag_c]]
.Benevolent dictator workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T232922Z" creationid="Prikryl" creationdate="20160109T232922Z">
        <seg>[[wfdiag_c]]
.Pracovní postup s benevolentním diktátorem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[preface]
== Dedications</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T151708Z" creationid="Prikryl" creationdate="20151026T151708Z">
        <seg>[preface]
== Věnování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[preface]
== Preface by Ben Straub</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T150246Z" creationid="Prikryl" creationdate="20151026T150246Z">
        <seg>[preface]
== Předmluva Bena Strauba</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[preface]
== Preface by Scott Chacon</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T122050Z" creationid="Prikryl" creationdate="20151026T122050Z">
        <seg>[preface]
== Předmluva Scotta Chacona</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[rejected]        master -&gt; master (non-fast forward)
error: failed to push some refs to 'john@githost:simplegit.git'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143159Z" creationid="Prikryl" creationdate="20160115T143159Z">
        <seg>[rejected]        master -&gt; master (non-fast forward)
error: failed to push some refs to 'john@githost:simplegit.git'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
# Jessica's Machine
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ vim lib/simplegit.rb
$ git commit -am 'add limit to log function'
[featureA 3300904] add limit to log function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111508Z" creationid="Prikryl" creationdate="20160118T111508Z">
        <seg>[source,console]
----
# Jessica's Machine
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ vim lib/simplegit.rb
$ git commit -am 'add limit to log function'
[featureA 3300904] add limit to log function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
# Jessica's Machine
$ git clone jessica@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim TODO
$ git commit -am 'add reset task'
[master fbff5bc] add reset task</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143037Z" creationid="Prikryl" creationdate="20160115T143037Z">
        <seg>[source,console]
----
# Jessica's Machine
$ git clone jessica@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim TODO
$ git commit -am 'add reset task'
[master fbff5bc] add reset task</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
# Jessica's Machine
$ git fetch origin
$ git checkout -b featureB origin/master
Switched to a new branch 'featureB'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111907Z" creationid="Prikryl" creationdate="20160118T111907Z">
        <seg>[source,console]
----
# Jessica's Machine
$ git fetch origin
$ git checkout -b featureB origin/master
Switched to a new branch 'featureB'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
# Jessica's Machine
$ git fetch origin
...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145627Z" creationid="Prikryl" creationdate="20160115T145627Z">
        <seg>[source,console]
----
# Jessica's Machine
$ git fetch origin
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
# Jessica's Machine
$ git push origin master
...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143127Z" creationid="Prikryl" creationdate="20160115T143127Z">
        <seg>[source,console]
----
# Jessica's Machine
$ git push origin master
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
# John's Machine
$ git clone john@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim lib/simplegit.rb
$ git commit -am 'removed invalid default value'
[master 738ee87] removed invalid default value</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142852Z" creationid="Prikryl" creationdate="20160115T142852Z">
        <seg>[source,console]
----
# John's Machine
$ git clone john@githost:simplegit.git
Cloning into 'simplegit'...
...
$ cd simplegit/
$ vim lib/simplegit.rb
$ git commit -am 'removed invalid default value'
[master 738ee87] removed invalid default value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
# John's Machine
$ git push origin master
To john@githost:simplegit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T143152Z" creationid="Prikryl" creationdate="20160115T143152Z">
        <seg>[source,console]
----
# John's Machine
$ git push origin master
To john@githost:simplegit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ cat .gitignore
*.[oa]
*~
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T175539Z" creationid="Prikryl" creationdate="20151029T175539Z">
        <seg>[source,console]
----
$ cat .gitignore
*.[oa]
*~
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T165300Z" creationid="Prikryl" creationdate="20151101T165300Z">
        <seg>[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ echo 'My Project' &gt; README
$ git status
On branch master
Untracked files:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110822Z" creationid="Prikryl" creationdate="20151029T110822Z">
        <seg>[source,console]
----
$ echo 'My Project' &gt; README
$ git status
On branch master
Untracked files:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T132700Z" creationid="Prikryl" creationdate="20151107T132700Z">
        <seg>[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T211045Z" creationid="Prikryl" creationdate="20151028T211045Z">
        <seg>[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' &gt;&gt; CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120815Z" creationid="Prikryl" creationdate="20151107T120815Z">
        <seg>[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' &gt;&gt; CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T125141Z" creationid="Prikryl" creationdate="20151029T125141Z">
        <seg>[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git add README
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120009Z" creationid="Prikryl" creationdate="20151029T120009Z">
        <seg>[source,console]
----
$ git add README
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T143210Z" creationid="Prikryl" creationdate="20151108T143210Z">
        <seg>[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T205854Z" creationid="Prikryl" creationdate="20151124T205854Z">
        <seg>[source,console]
----
$ git branch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch --merged</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210946Z" creationid="Prikryl" creationdate="20151124T210946Z">
        <seg>[source,console]
----
$ git branch --merged</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch --no-merged</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211500Z" creationid="Prikryl" creationdate="20151124T211500Z">
        <seg>[source,console]
----
$ git branch --no-merged</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch -d client
$ git branch -d server
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T133449Z" creationid="Prikryl" creationdate="20151214T133449Z">
        <seg>[source,console]
----
$ git branch -d client
$ git branch -d server
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152216Z" creationid="Prikryl" creationdate="20151115T152216Z">
        <seg>[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch -d iss53
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T155606Z" creationid="Prikryl" creationdate="20151115T155606Z">
        <seg>[source,console]
----
$ git branch -d iss53
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T211614Z" creationid="Prikryl" creationdate="20151124T211614Z">
        <seg>[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T213812Z" creationid="Prikryl" creationdate="20151213T213812Z">
        <seg>[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch -v</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210431Z" creationid="Prikryl" creationdate="20151124T210431Z">
        <seg>[source,console]
----
$ git branch -v</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch -vv</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214811Z" creationid="Prikryl" creationdate="20151213T214811Z">
        <seg>[source,console]
----
$ git branch -vv</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch iss53
$ git checkout iss53
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153716Z" creationid="Prikryl" creationdate="20151111T153716Z">
        <seg>[source,console]
----
$ git branch iss53
$ git checkout iss53
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git branch testing
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T151016Z" creationid="Prikryl" creationdate="20151108T151016Z">
        <seg>[source,console]
----
$ git branch testing
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215817Z" creationid="Prikryl" creationdate="20151106T215817Z">
        <seg>[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T113442Z" creationid="Prikryl" creationdate="20151213T113442Z">
        <seg>[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout -b featureB origin/master
# (work)
$ git commit
$ git push myfork featureB
# (email maintainer)
$ git fetch origin
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T201354Z" creationid="Prikryl" creationdate="20160121T201354Z">
        <seg>[source,console]
----
$ git checkout -b featureB origin/master
# (nějaká práce)
$ git commit
$ git push myfork featureB
# (odeslání e-mailu správci)
$ git fetch origin
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T213957Z" creationid="Prikryl" creationdate="20151111T213957Z">
        <seg>[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T153647Z" creationid="Prikryl" creationdate="20151111T153647Z">
        <seg>[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T145015Z" creationid="Prikryl" creationdate="20151210T145015Z">
        <seg>[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T114023Z" creationid="Prikryl" creationdate="20151213T114023Z">
        <seg>[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T111131Z" creationid="Prikryl" creationdate="20151108T111131Z">
        <seg>[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T091447Z" creationid="Prikryl" creationdate="20151214T091447Z">
        <seg>[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout featureA
$ git rebase origin/master
$ git push -f myfork featureA
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T183937Z" creationid="Prikryl" creationdate="20160122T183937Z">
        <seg>[source,console]
----
$ git checkout featureA
$ git rebase origin/master
$ git push -f myfork featureA
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout featureA
Switched to branch 'featureA'
$ git merge origin/featureA
Updating 3300904..aad881d
Fast forward</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113301Z" creationid="Prikryl" creationdate="20160118T113301Z">
        <seg>[source,console]
----
$ git checkout featureA
Switched to branch 'featureA'
$ git merge origin/featureA
Updating 3300904..aad881d
Fast forward</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T152339Z" creationid="Prikryl" creationdate="20151115T152339Z">
        <seg>[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
$ git merge client
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T130246Z" creationid="Prikryl" creationdate="20151214T130246Z">
        <seg>[source,console]
----
$ git checkout master
$ git merge client
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
$ git merge experiment
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T112311Z" creationid="Prikryl" creationdate="20151214T112311Z">
        <seg>[source,console]
----
$ git checkout master
$ git merge experiment
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T214711Z" creationid="Prikryl" creationdate="20151111T214711Z">
        <seg>[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
$ git merge server
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T131521Z" creationid="Prikryl" creationdate="20151214T131521Z">
        <seg>[source,console]
----
$ git checkout master
$ git merge server
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164731Z" creationid="Prikryl" creationdate="20151108T164731Z">
        <seg>[source,console]
----
$ git checkout master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T153345Z" creationid="Prikryl" creationdate="20151115T153345Z">
        <seg>[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
Switched to branch 'master'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T213022Z" creationid="Prikryl" creationdate="20151111T213022Z">
        <seg>[source,console]
----
$ git checkout master
Switched to branch 'master'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout master
Switched to branch 'master'
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T212455Z" creationid="Prikryl" creationdate="20160115T212455Z">
        <seg>[source,console]
----
$ git checkout master
Switched to branch 'master'
Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T113853Z" creationid="Prikryl" creationdate="20151213T113853Z">
        <seg>[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git checkout testing
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164021Z" creationid="Prikryl" creationdate="20151108T164021Z">
        <seg>[source,console]
----
$ git checkout testing
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone (url)
$ cd project
$ git checkout -b featureA
# (work)
$ git commit
# (work)
$ git commit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T190050Z" creationid="Prikryl" creationdate="20160121T185957Z">
        <seg>[source,console]
----
$ git clone (url)
$ cd project
$ git checkout -b featureA
# (něco uděláte)
$ git commit
# (něco uděláte)
$ git commit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone /opt/git/project.git
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T193536Z" creationid="Prikryl" creationdate="20151219T193536Z">
        <seg>[source,console]
----
$ git clone /opt/git/project.git
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone file:///opt/git/project.git
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T193548Z" creationid="Prikryl" creationdate="20151219T193548Z">
        <seg>[source,console]
----
$ git clone file:///opt/git/project.git
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone git://git.kernel.org/pub/scm/git/git.git
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120144Z" creationid="Prikryl" creationdate="20151107T120144Z">
        <seg>[source,console]
----
$ git clone git://git.kernel.org/pub/scm/git/git.git
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T212137Z" creationid="Prikryl" creationdate="20151028T212137Z">
        <seg>[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T212437Z" creationid="Prikryl" creationdate="20151028T212437Z">
        <seg>[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T132817Z" creationid="Prikryl" creationdate="20151107T132817Z">
        <seg>[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T164522Z" creationid="Prikryl" creationdate="20151101T164522Z">
        <seg>[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git commit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T095355Z" creationid="Prikryl" creationdate="20151030T095355Z">
        <seg>[source,console]
----
$ git commit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git commit --amend
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213128Z" creationid="Prikryl" creationdate="20151106T213128Z">
        <seg>[source,console]
----
$ git commit --amend
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git commit -am 'small tweak'
[featureA 774b3ed] small tweak</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113325Z" creationid="Prikryl" creationdate="20160118T113325Z">
        <seg>[source,console]
----
$ git commit -am 'small tweak'
[featureA 774b3ed] small tweak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223005Z" creationid="Prikryl" creationdate="20151031T223005Z">
        <seg>[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213604Z" creationid="Prikryl" creationdate="20151106T213604Z">
        <seg>[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143146Z" creationid="Prikryl" creationdate="20151107T143146Z">
        <seg>[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143500Z" creationid="Prikryl" creationdate="20151107T143500Z">
        <seg>[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143422Z" creationid="Prikryl" creationdate="20151107T143422Z">
        <seg>[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config --global alias.visual '!gitk'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143644Z" creationid="Prikryl" creationdate="20151107T143644Z">
        <seg>[source,console]
----
$ git config --global alias.visual '!gitk'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config --global core.editor emacs
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T131227Z" creationid="Prikryl" creationdate="20151028T131227Z">
        <seg>[source,console]
----
$ git config --global core.editor emacs
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T110849Z" creationid="Prikryl" creationdate="20151028T110849Z">
        <seg>[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T132016Z" creationid="Prikryl" creationdate="20151028T132016Z">
        <seg>[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git config user.name
John Doe
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T132307Z" creationid="Prikryl" creationdate="20151028T132307Z">
        <seg>[source,console]
----
$ git config user.name
John Doe
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T093406Z" creationid="Prikryl" creationdate="20151030T093406Z">
        <seg>[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091752Z" creationid="Prikryl" creationdate="20151030T091752Z">
        <seg>[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T093849Z" creationid="Prikryl" creationdate="20151030T093849Z">
        <seg>[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T092327Z" creationid="Prikryl" creationdate="20151030T092327Z">
        <seg>[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git fetch [remote-name]
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T141332Z" creationid="Prikryl" creationdate="20151101T170805Z">
        <seg>[source,console]
----
$ git fetch [jméno-vzdáleného-repozitáře]
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git fetch origin
...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144503Z" creationid="Prikryl" creationdate="20160115T144503Z">
        <seg>[source,console]
----
$ git fetch origin
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144114Z" creationid="Prikryl" creationdate="20151210T144114Z">
        <seg>[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170407Z" creationid="Prikryl" creationdate="20151101T170407Z">
        <seg>[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git help &lt;verb&gt;
$ git &lt;verb&gt; --help
$ man git-&lt;verb&gt;
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T133633Z" creationid="Prikryl" creationdate="20151028T133633Z">
        <seg>[source,console]
----
$ git help &lt;příkaz&gt;
$ git &lt;příkaz&gt; --help
$ man git-&lt;příkaz&gt;
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git help config
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T133829Z" creationid="Prikryl" creationdate="20151028T133829Z">
        <seg>[source,console]
----
$ git help config
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git init
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T210621Z" creationid="Prikryl" creationdate="20151028T210621Z">
        <seg>[source,console]
----
$ git init
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel &lt;dreamer3@example.com&gt;
Date:   Tue Aug 26 19:48:51 2008 +0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143505Z" creationid="Prikryl" creationdate="20151107T143505Z">
        <seg>[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel &lt;dreamer3@example.com&gt;
Date:   Tue Aug 26 19:48:51 2008 +0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T144723Z" creationid="Prikryl" creationdate="20151102T144723Z">
        <seg>[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --no-merges issue54..origin/master
commit 738ee872852dfaa9d6634e0dea7a324040193016
Author: John Smith &lt;jsmith@example.com&gt;
Date:   Fri May 29 16:01:27 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145957Z" creationid="Prikryl" creationdate="20160115T145957Z">
        <seg>[source,console]
----
$ git log --no-merges issue54..origin/master
commit 738ee872852dfaa9d6634e0dea7a324040193016
Author: John Smith &lt;jsmith@example.com&gt;
Date:   Fri May 29 16:01:27 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T163524Z" creationid="Prikryl" creationdate="20151108T163524Z">
        <seg>[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD, master, testing) add feature #32 - ability to add new
34ac2 fixed bug #1328 - stack overflow under certain conditions
98ca9 initial commit of my project
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T171612Z" creationid="Prikryl" creationdate="20151108T171612Z">
        <seg>[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T213941Z" creationid="Prikryl" creationdate="20151104T213941Z">
        <seg>[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T213230Z" creationid="Prikryl" creationdate="20151102T213230Z">
        <seg>[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T150155Z" creationid="Prikryl" creationdate="20151102T150155Z">
        <seg>[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223808Z" creationid="Prikryl" creationdate="20151107T223808Z">
        <seg>[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145952Z" creationid="Prikryl" creationdate="20151102T145952Z">
        <seg>[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --since=2.weeks
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151103T200216Z" creationid="Prikryl" creationdate="20151103T200216Z">
        <seg>[source,console]
----
$ git log --since=2.weeks
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145519Z" creationid="Prikryl" creationdate="20151102T145519Z">
        <seg>[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log -Sfunction_name
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T121349Z" creationid="Prikryl" creationdate="20151104T212510Z">
        <seg>[source,console]
----
$ git log -Sjmeno_funkce
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145248Z" creationid="Prikryl" creationdate="20151102T145248Z">
        <seg>[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git log featureA..origin/featureA
commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
Author: John Smith &lt;jsmith@example.com&gt;
Date:   Fri May 29 19:57:33 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113242Z" creationid="Prikryl" creationdate="20160118T113242Z">
        <seg>[source,console]
----
$ git log featureA..origin/featureA
commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
Author: John Smith &lt;jsmith@example.com&gt;
Date:   Fri May 29 19:57:33 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T072719Z" creationid="Prikryl" creationdate="20151120T072719Z">
        <seg>[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git merge issue54
Updating fbff5bc..4af4298
Fast forward</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T213234Z" creationid="Prikryl" creationdate="20160115T213234Z">
        <seg>[source,console]
----
$ git merge issue54
Updating fbff5bc..4af4298
Fast forward</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git merge origin/featureBee
Auto-merging lib/simplegit.rb
Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112319Z" creationid="Prikryl" creationdate="20160118T112319Z">
        <seg>[source,console]
----
$ git merge origin/featureBee
Auto-merging lib/simplegit.rb
Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git merge origin/master
Auto-merging lib/simplegit.rb
Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214137Z" creationid="Prikryl" creationdate="20160115T214137Z">
        <seg>[source,console]
----
$ git merge origin/master
Auto-merging lib/simplegit.rb
Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git merge origin/master
Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144842Z" creationid="Prikryl" creationdate="20160115T144842Z">
        <seg>[source,console]
----
$ git merge origin/master
Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git mergetool</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T075159Z" creationid="Prikryl" creationdate="20151120T075159Z">
        <seg>[source,console]
----
$ git mergetool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T231326Z" creationid="Prikryl" creationdate="20151031T231326Z">
        <seg>[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git mv file_from file_to
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151217T104947Z" creationid="Prikryl" creationdate="20151031T231136Z">
        <seg>[source,console]
----
$ git mv stare_jmeno_souboru nove_jmeno_souboru
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push -u myfork featureA
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T193931Z" creationid="Prikryl" creationdate="20160121T193931Z">
        <seg>[source,console]
----
$ git push -u myfork featureA
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push -u origin featureA
...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111734Z" creationid="Prikryl" creationdate="20160118T111734Z">
        <seg>[source,console]
----
$ git push -u origin featureA
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push -u origin featureB:featureBee
...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112510Z" creationid="Prikryl" creationdate="20160118T112510Z">
        <seg>[source,console]
----
$ git push -u origin featureB:featureBee
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T075057Z" creationid="Prikryl" creationdate="20151214T075057Z">
        <seg>[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push origin --tags
Counting objects: 1, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T225221Z" creationid="Prikryl" creationdate="20151107T225221Z">
        <seg>[source,console]
----
$ git push origin --tags
Counting objects: 1, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push origin master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T100919Z" creationid="Prikryl" creationdate="20151107T100919Z">
        <seg>[source,console]
----
$ git push origin master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push origin master
...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145141Z" creationid="Prikryl" creationdate="20160115T145141Z">
        <seg>[source,console]
----
$ git push origin master
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T124209Z" creationid="Prikryl" creationdate="20151210T124209Z">
        <seg>[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224853Z" creationid="Prikryl" creationdate="20151107T224853Z">
        <seg>[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git rebase --onto master server client
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T124953Z" creationid="Prikryl" creationdate="20151214T124953Z">
        <seg>[source,console]
----
$ git rebase --onto master server client
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git rebase master server
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T131109Z" creationid="Prikryl" creationdate="20151214T131109Z">
        <seg>[source,console]
----
$ git rebase master server
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170242Z" creationid="Prikryl" creationdate="20151101T170242Z">
        <seg>[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T165009Z" creationid="Prikryl" creationdate="20151101T165009Z">
        <seg>[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git remote add local_proj /opt/git/project.git
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151219T194731Z" creationid="Prikryl" creationdate="20151219T194731Z">
        <seg>[source,console]
----
$ git remote add local_proj /opt/git/project.git
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git remote add myfork (url)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T192031Z" creationid="Prikryl" creationdate="20160121T192031Z">
        <seg>[source,console]
----
$ git remote add myfork (url)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131858Z" creationid="Prikryl" creationdate="20151107T131858Z">
        <seg>[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git remote rm paul
$ git remote
origin
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T132208Z" creationid="Prikryl" creationdate="20151107T132208Z">
        <seg>[source,console]
----
$ git remote rm paul
$ git remote
origin
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git remote show origin
* remote origin</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121504Z" creationid="Prikryl" creationdate="20151107T121504Z">
        <seg>[source,console]
----
$ git remote show origin
* remote origin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git request-pull origin/master myfork
The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T195941Z" creationid="Prikryl" creationdate="20160121T195941Z">
        <seg>[source,console]
----
$ git request-pull origin/master myfork
The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T214029Z" creationid="Prikryl" creationdate="20151106T214029Z">
        <seg>[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git rm --cached README
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T225948Z" creationid="Prikryl" creationdate="20151031T225948Z">
        <seg>[source,console]
----
$ git rm --cached README
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224753Z" creationid="Prikryl" creationdate="20151031T224753Z">
        <seg>[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git rm \*~
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230439Z" creationid="Prikryl" creationdate="20151031T230439Z">
        <seg>[source,console]
----
$ git rm \*~
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git rm log/\*.log
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T230200Z" creationid="Prikryl" creationdate="20151031T230200Z">
        <seg>[source,console]
----
$ git rm log/\*.log
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub &lt;ben@straub.cc&gt;
Date:   Sat May 3 20:19:12 2014 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150444Z" creationid="Prikryl" creationdate="20151107T150444Z">
        <seg>[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub &lt;ben@straub.cc&gt;
Date:   Sat May 3 20:19:12 2014 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223648Z" creationid="Prikryl" creationdate="20151107T223648Z">
        <seg>[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T080726Z" creationid="Prikryl" creationdate="20151120T080726Z">
        <seg>[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git status
On branch master
Changes not staged for commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223937Z" creationid="Prikryl" creationdate="20151031T223937Z">
        <seg>[source,console]
----
$ git status
On branch master
Changes not staged for commit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120124Z" creationid="Prikryl" creationdate="20151029T120124Z">
        <seg>[source,console]
----
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git status
On branch master
You have unmerged paths.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073009Z" creationid="Prikryl" creationdate="20151120T073009Z">
        <seg>[source,console]
----
$ git status
On branch master
You have unmerged paths.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110007Z" creationid="Prikryl" creationdate="20151029T110007Z">
        <seg>[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git status -s</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T131222Z" creationid="Prikryl" creationdate="20151029T131222Z">
        <seg>[source,console]
----
$ git status -s</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224429Z" creationid="Prikryl" creationdate="20151107T224429Z">
        <seg>[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git tag
v0.1
v1.3
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T145021Z" creationid="Prikryl" creationdate="20151107T145021Z">
        <seg>[source,console]
----
$ git tag
v0.1
v1.3
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git tag -a v1.2 9fceb02
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224255Z" creationid="Prikryl" creationdate="20151107T224255Z">
        <seg>[source,console]
----
$ git tag -a v1.2 9fceb02
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T190937Z" creationid="Prikryl" creationdate="20151209T190937Z">
        <seg>[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151209T190923Z" creationid="Prikryl" creationdate="20151209T190923Z">
        <seg>[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T223454Z" creationid="Prikryl" creationdate="20151107T223454Z">
        <seg>[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T143437Z" creationid="Prikryl" creationdate="20151107T143437Z">
        <seg>[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T231347Z" creationid="Prikryl" creationdate="20151031T231347Z">
        <seg>[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224533Z" creationid="Prikryl" creationdate="20151031T224533Z">
        <seg>[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ sudo apt-get install git-all
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T134437Z" creationid="Prikryl" creationdate="20151115T134437Z">
        <seg>[source,console]
----
$ sudo apt-get install git-all
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ sudo ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120010Z" creationid="Prikryl" creationdate="20151107T120010Z">
        <seg>[source,console]
----
$ sudo ln -s /usr/bin/db2x_docbook2texi /usr/bin/docbook2x-texi
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ sudo yum install asciidoc xmlto docbook2X
$ sudo apt-get install asciidoc xmlto docbook2x
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115844Z" creationid="Prikryl" creationdate="20151107T115844Z">
        <seg>[source,console]
----
$ sudo yum install asciidoc xmlto docbook2X
$ sudo apt-get install asciidoc xmlto docbook2x
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ sudo yum install curl-devel expat-devel gettext-devel \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115504Z" creationid="Prikryl" creationdate="20151107T115504Z">
        <seg>[source,console]
----
$ sudo yum install curl-devel expat-devel gettext-devel \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ sudo yum install git-all
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T134408Z" creationid="Prikryl" creationdate="20151115T134408Z">
        <seg>[source,console]
----
$ sudo yum install git-all
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ tar -zxf git-2.0.0.tar.gz
$ cd git-2.0.0
$ make configure
$ ./configure --prefix=/usr
$ make all doc info
$ sudo make install install-doc install-html install-info
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120129Z" creationid="Prikryl" creationdate="20151107T120129Z">
        <seg>[source,console]
----
$ tar -zxf git-2.0.0.tar.gz
$ cd git-2.0.0
$ make configure
$ ./configure --prefix=/usr
$ make all doc info
$ sudo make install install-doc install-html install-info
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T125357Z" creationid="Prikryl" creationdate="20151029T125357Z">
        <seg>[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T154028Z" creationid="Prikryl" creationdate="20151111T154028Z">
        <seg>[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ vim lib/simplegit.rb
$ git commit -am 'made the ls-tree function recursive'
[featureB e5b0fdc] made the ls-tree function recursive</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T111917Z" creationid="Prikryl" creationdate="20160118T111917Z">
        <seg>[source,console]
----
$ vim lib/simplegit.rb
$ git commit -am 'made the ls-tree function recursive'
[featureB e5b0fdc] made the ls-tree function recursive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T164328Z" creationid="Prikryl" creationdate="20151108T164328Z">
        <seg>[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T170044Z" creationid="Prikryl" creationdate="20151108T170044Z">
        <seg>[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
Changes not staged for commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T215630Z" creationid="Prikryl" creationdate="20151106T215630Z">
        <seg>[source,console]
----
Changes not staged for commit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,console]
----
Merge branch 'iss53'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081108Z" creationid="Prikryl" creationdate="20151120T081108Z">
        <seg>[source,console]
----
Merge branch 'iss53'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,html]
----
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html
&lt;div id="footer"&gt;contact : email.support@github.com&lt;/div&gt;
=======
&lt;div id="footer"&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073445Z" creationid="Prikryl" creationdate="20151120T073445Z">
        <seg>[source,html]
----
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html
&lt;div id="footer"&gt;contact : email.support@github.com&lt;/div&gt;
=======
&lt;div id="footer"&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,html]
----
&lt;div id="footer"&gt;
please contact us at email.support@github.com
&lt;/div&gt;
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T074111Z" creationid="Prikryl" creationdate="20151120T074111Z">
        <seg>[source,html]
----
&lt;div id="footer"&gt;
please contact us at email.support@github.com
&lt;/div&gt;
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source,text]
----
Short (50 chars or less) summary of changes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160114T153154Z" creationid="Prikryl" creationdate="20160114T153154Z">
        <seg>[source,text]
----
Krátké shrnutí změn (do 50 znaků)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source]
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T222101Z" creationid="Prikryl" creationdate="20151031T222101Z">
        <seg>[source]
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source]
----
# no .a files
*.a</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T202634Z" creationid="Prikryl" creationdate="20151029T202634Z">
        <seg>[source]
----
# žádné soubory s příponou .a
*.a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T094706Z" creationid="Prikryl" creationdate="20151027T094706Z">
        <seg>[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>_This edition is dedicated to my girls.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T164144Z" creationid="Prikryl" creationdate="20151026T151840Z">
        <seg>_Toto vydání je věnováno mým děvčatům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>_To my wife, Becky, without whom this adventure never would have begun.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T151812Z" creationid="Prikryl" creationdate="20151026T151812Z">
        <seg>_Mé ženě Becky, bez které by toto dobrodružství nikdy nemohlo začít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`--reuseaddr` allows the server to restart without waiting for old connections to time out, the `--base-path` option allows people to clone projects without specifying the entire path, and the path at the end tells the Git daemon where to look for repositories to export.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>`--reuseaddr` umožňuje serveru restartování bez nutnosti čekat na vypršení časového limitu pro stará spojení, parametr `--base-path` umožňuje uživatelům klonovat projekty, aniž by museli zadávat celou cestu, a cesta na konci příkazu říká démonovi Git, kde má hledat repozitáře určené k exportu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`/etc/gitconfig` file: Contains values for every user on the system and all their repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T104643Z" creationid="Prikryl" creationdate="20151028T104643Z">
        <seg>Soubor `/etc/gitconfig`: Obsahuje údaje pro každého uživatele systému a pro všechny jejich repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>``Private,'' in this context, means closed-source – not accessible to the outside world.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T142211Z" creationid="Prikryl" creationdate="20160115T142211Z">
        <seg>„Soukromý“ v této souvislosti znamená s uzavřeným zdrojovým kódem -- okolní svět k němu nemá přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T105613Z" creationid="Prikryl" creationdate="20151028T105613Z">
        <seg>Soubor `config` v gitovém adresáři (tj. `.git/config`) repozitáře, který momentálně používáte: Patří konkrétně k tomuto jedinému repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`experiment..master` shows you everything in `master` not reachable from `experiment`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výraz `experiment..master` zobrazí vše ve větvi `master`, co není dostupné ve větvi `experiment`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`filter-branch` is the tool you probably want to use to scrub your entire history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástrojem, který hledáte k opravení celé historie, je `filter-branch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`git add` is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T121313Z" creationid="Prikryl" creationdate="20151029T121313Z">
        <seg>Příkaz `git add` je víceúčelový -- používá se k zahájení sledování nových souborů, k přípravě souborů k zapsání a k dalším věcem, jako je například označení vyřešených případů kolize souborů při slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`git svn` has two commands to help with this issue.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroj `git svn` vám k řešení tohoto problému nabízí dva příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`~/.gitconfig` or `~/.config/git/config` file: Specific to your user.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T105217Z" creationid="Prikryl" creationdate="20151028T105217Z">
        <seg>Soubor `~/.gitconfig` nebo `~/.config/git/config`: Patří k vašemu uživatelskému účtu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>access = get_acl_access_data('.git/acl')</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090919Z" creationid="Prikryl" creationdate="20151024T090919Z">
        <seg>access = get_acl_access_data('.git/acl')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>access = get_acl_access_data('acl')</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090918Z" creationid="Prikryl" creationdate="20151024T090918Z">
        <seg>access = get_acl_access_data('acl')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>add limit to log function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221114Z" creationid="Prikryl" creationdate="20151023T221114Z">
        <seg>add limit to log function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>added a new function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T195948Z" creationid="Prikryl" creationdate="20160121T195948Z">
        <seg>added a new function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>added some blame and merge stuff</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221528Z" creationid="Prikryl" creationdate="20151023T221528Z">
        <seg>added some blame and merge stuff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>and `git diff --cached` to see what you've staged so far (--staged and --cached are synonyms):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T093834Z" creationid="Prikryl" creationdate="20151030T093834Z">
        <seg>a příkaz `git diff --cached` ukáže změny, které už jsou připraveny k zapsání (`--staged` a `--cached` jsou synonyma):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>and it works fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T231203Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>a vše bezvadně funguje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>are available in the git repository at:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220920Z" creationid="Prikryl" creationdate="20151023T220920Z">
        <seg>are available in the git repository at:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>autogen change</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091349Z" creationid="Prikryl" creationdate="20151024T091349Z">
        <seg>autogen change</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>between, but conventions vary here
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T140540Z" creationid="Prikryl" creationdate="20160114T154021Z">
        <seg>prázdné řádky, ale tady se zvyklosti mohou lišit.
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>both modified:      index.html</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073018Z" creationid="Prikryl" creationdate="20151120T073018Z">
        <seg>both modified:      index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>change log output to 30 from 25</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T200020Z" creationid="Prikryl" creationdate="20160121T200020Z">
        <seg>change log output to 30 from 25</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>changed log output to 30 from 25
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113245Z" creationid="Prikryl" creationdate="20160118T113245Z">
        <seg>changed log output to 30 from 25
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>changed the version number</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205800Z" creationid="Prikryl" creationdate="20151022T205800Z">
        <seg>changed the version number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>changed the version number
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150452Z" creationid="Prikryl" creationdate="20151107T150452Z">
        <seg>changed the version number
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 16:40:33 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T144730Z" creationid="Prikryl" creationdate="20151102T144730Z">
        <seg>commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 16:40:33 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 10:31:28 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T144736Z" creationid="Prikryl" creationdate="20151102T144736Z">
        <seg>commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 10:31:28 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T150448Z" creationid="Prikryl" creationdate="20151107T150448Z">
        <seg>commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>create mode 100644 README
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223011Z" creationid="Prikryl" creationdate="20151031T223011Z">
        <seg>create mode 100644 README
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>date = convert_dir_to_date(dir)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091450Z" creationid="Prikryl" creationdate="20151024T091450Z">
        <seg>date = convert_dir_to_date(dir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>deleted:    PROJECTS.md</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224543Z" creationid="Prikryl" creationdate="20151031T224543Z">
        <seg>deleted:    PROJECTS.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>deleted:    PROJECTS.md
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224759Z" creationid="Prikryl" creationdate="20151031T224759Z">
        <seg>deleted:    PROJECTS.md
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>dev-branch                           tracked</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121533Z" creationid="Prikryl" creationdate="20151107T121533Z">
        <seg>dev-branch                           tracked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>dev-branch                       tracked</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131325Z" creationid="Prikryl" creationdate="20151107T131325Z">
        <seg>dev-branch                       tracked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>dev-branch                     pushes to dev-branch                     (up to date)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131349Z" creationid="Prikryl" creationdate="20151107T131349Z">
        <seg>dev-branch                     pushes to dev-branch                     (up to date)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>dev-branch merges with remote dev-branch</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131341Z" creationid="Prikryl" creationdate="20151107T131341Z">
        <seg>dev-branch merges with remote dev-branch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145254Z" creationid="Prikryl" creationdate="20151102T145254Z">
        <seg>diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145312Z" creationid="Prikryl" creationdate="20151102T145312Z">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>due to binary name differences.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120110Z" creationid="Prikryl" creationdate="20151107T120110Z">
        <seg>kvůli odlišnosti jmen binárních souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>else</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091409Z" creationid="Prikryl" creationdate="20151024T091409Z">
        <seg>else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145314Z" creationid="Prikryl" creationdate="20151102T145314Z">
        <seg>end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145317Z" creationid="Prikryl" creationdate="20151102T145317Z">
        <seg>end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fba9af8..cd685d1  featureB -&gt; featureBee
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112516Z" creationid="Prikryl" creationdate="20160118T112516Z">
        <seg>fba9af8..cd685d1  featureB -&gt; featureBee
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fbff5bc..72bbc59  master     -&gt; origin/master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145631Z" creationid="Prikryl" creationdate="20160115T145631Z">
        <seg>fbff5bc..72bbc59  master     -&gt; origin/master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fbff5bc..72bbc59  master -&gt; master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145144Z" creationid="Prikryl" creationdate="20160115T145144Z">
        <seg>fbff5bc..72bbc59  master -&gt; master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205808Z" creationid="Prikryl" creationdate="20151022T205808Z">
        <seg>first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>first commit
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T144738Z" creationid="Prikryl" creationdate="20151102T144738Z">
        <seg>first commit
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fixed install - go to trunk</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091418Z" creationid="Prikryl" creationdate="20151024T091418Z">
        <seg>fixed install - go to trunk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fixed refs handling, added gc auto, updated tests</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221523Z" creationid="Prikryl" creationdate="20151023T221523Z">
        <seg>fixed refs handling, added gc auto, updated tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git commit --amend</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222707Z" creationid="Prikryl" creationdate="20151023T222707Z">
        <seg>git commit --amend</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git://githost/simplegit.git featureA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220922Z" creationid="Prikryl" creationdate="20151023T220922Z">
        <seg>git://githost/simplegit.git featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>if we have to read the whole diff to figure out why you're contributing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091826Z" creationid="Prikryl" creationdate="20151030T091826Z">
        <seg>if we have to read the whole diff to figure out why you're contributing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/areas.png["Working directory, staging area, and Git directory."]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T115539Z" creationid="Prikryl" creationdate="20151027T115539Z">
        <seg>image::images/areas.png["Pracovní adresář, oblast připravených změn a adresář Git."]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/benevolent-dictator.png[Benevolent dictator workflow.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T232929Z" creationid="Prikryl" creationdate="20160109T232929Z">
        <seg>image::images/benevolent-dictator.png[Pracovní postup s benevolentním diktátorem.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/centralized.png[Centralized version control diagram]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T184405Z" creationid="Prikryl" creationdate="20151026T184405Z">
        <seg>image::images/centralized.png[Centralizovaná správa verzí.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/centralized_workflow.png[Centralized workflow.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T152527Z" creationid="Prikryl" creationdate="20160109T152527Z">
        <seg>image::images/centralized_workflow.png[Centralizovaný pracovní postup.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/deltas.png[Storing data as changes to a base version of each file.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T081546Z" creationid="Prikryl" creationdate="20151027T081546Z">
        <seg>image::images/deltas.png[Ukládání dat jako změn vůči základní verzi každého souboru.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/distributed.png[Distributed version control diagram]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T193426Z" creationid="Prikryl" creationdate="20151026T193426Z">
        <seg>image::images/distributed.png[Diagram pro distribuovaný systém správy verzí.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/git-diff-check.png[Output of `git diff --check`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160110T123837Z" creationid="Prikryl" creationdate="20160110T123837Z">
        <seg>image::images/git-diff-check.png[Výstup příkazu `git diff --check`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/git-osx-installer.png[Git OS X installer.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T215126Z" creationid="Prikryl" creationdate="20151027T215126Z">
        <seg>image::images/git-osx-installer.png[Instalátor Gitu pro OS X.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/integration-manager.png[Integration-manager workflow.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160109T160521Z" creationid="Prikryl" creationdate="20160109T160521Z">
        <seg>image::images/integration-manager.png[Pracovní postup s integračním manažerem.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/lifecycle.png[The lifecycle of the status of your files.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T105854Z" creationid="Prikryl" creationdate="20151029T105854Z">
        <seg>image::images/lifecycle.png[Cyklus stavů vašich souborů.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/local.png[Local version control diagram]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T182734Z" creationid="Prikryl" creationdate="20151026T182734Z">
        <seg>image::images/local.png[Diagram lokální správy verzí.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/managed-team-1.png[Jessica's initial commit history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112027Z" creationid="Prikryl" creationdate="20160118T112027Z">
        <seg>image::images/managed-team-1.png[Jessičina výchozí historie revizí.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/managed-team-2.png[Jessica's history after committing on a feature branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113547Z" creationid="Prikryl" creationdate="20160118T113547Z">
        <seg>image::images/managed-team-2.png[Jessičina historie po zapsání revizí do větve s úkolem.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/managed-team-3.png[Jessica's history after merging both her topic branches.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T114056Z" creationid="Prikryl" creationdate="20160118T114056Z">
        <seg>image::images/managed-team-3.png[Historie Jessicy po začlenění obou jejích tématických větví.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/managed-team-flow.png[Basic sequence of this managed-team workflow.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T150558Z" creationid="Prikryl" creationdate="20160118T150558Z">
        <seg>image::images/managed-team-flow.png[Základní posloupnost událostí pracovního postupu řízeného týmu.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151214T152045Z" creationid="Prikryl" creationdate="20151214T152045Z">
        <seg>image::images/perils-of-rebasing-5.png[Přeskládání nad vynuceně odeslaným výsledkem přeskládání.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/public-small-1.png[Initial commit history with `featureB` work.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T183555Z" creationid="Prikryl" creationdate="20160122T183555Z">
        <seg>image::images/public-small-1.png[Počáteční historie revizí s prací na `featureB`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/public-small-2.png[Commit history after `featureA` work.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T184223Z" creationid="Prikryl" creationdate="20160122T184223Z">
        <seg>image::images/public-small-2.png[Historie revizí po přeskládání práce z `featureA`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/public-small-3.png[Commit history after `featureBv2` work.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160122T195509Z" creationid="Prikryl" creationdate="20160122T195509Z">
        <seg>image::images/public-small-3.png[Historie revizí po práci ve větvi `featureBv2`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-1.png[John's divergent history.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T144725Z" creationid="Prikryl" creationdate="20160115T144725Z">
        <seg>image::images/small-team-1.png[Johnova odchylující se historie.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-2.png[John's repository after merging `origin/master`.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145049Z" creationid="Prikryl" creationdate="20160115T145049Z">
        <seg>image::images/small-team-2.png[Johnův repozitář po začlenění `origin/master`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-3.png[John's history after pushing to the `origin` server.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145333Z" creationid="Prikryl" creationdate="20160115T145333Z">
        <seg>image::images/small-team-3.png[Johnova historie po odeslání revize na server `origin`.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-4.png[Jessica's topic branch.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145606Z" creationid="Prikryl" creationdate="20160115T145606Z">
        <seg>image::images/small-team-4.png[Jessičina tématická větev.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-5.png[Jessica's history after fetching John's changes.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T145806Z" creationid="Prikryl" creationdate="20160115T145806Z">
        <seg>image::images/small-team-5.png[Historie Jessicy po vyzvednutí Johnových změn.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-6.png[Jessica's history after merging John's changes.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214321Z" creationid="Prikryl" creationdate="20160115T214321Z">
        <seg>image::images/small-team-6.png[Jessičina historie po začlenění Johnových změn.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-7.png[Jessica's history after pushing all changes back to the server.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214912Z" creationid="Prikryl" creationdate="20160115T214912Z">
        <seg>image::images/small-team-7.png[Jessičina historie po odeslání všech změn zpět na server.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/small-team-flow.png[General sequence of events for a simple multiple-developer Git workflow.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T221930Z" creationid="Prikryl" creationdate="20160115T221649Z">
        <seg>image::images/small-team-flow.png[Obecná posloupnost událostí pro jednoduchý pracovní postup s více vývojáři.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>image::images/snapshots.png[Git stores data as snapshots of the project over time.]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151027T084026Z" creationid="Prikryl" creationdate="20151027T084026Z">
        <seg>image::images/snapshots.png[Git ukládá data jako snímky projektu v daném čase.]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>imported from current</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091520Z" creationid="Prikryl" creationdate="20151024T091520Z">
        <seg>imported from current</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>in the first place, you're less likely to get feedback and have your change
-merged in.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091828Z" creationid="Prikryl" creationdate="20151030T091828Z">
        <seg>in the first place, you're less likely to get feedback and have your change
-merged in.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/01-introduction/1-introduction.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123324Z" creationid="Prikryl" creationdate="20151026T123324Z">
        <seg>include::book/01-introduction/1-introduction.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/02-git-basics/1-git-basics.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123325Z" creationid="Prikryl" creationdate="20151026T123325Z">
        <seg>include::book/02-git-basics/1-git-basics.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/03-git-branching/1-git-branching.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123326Z" creationid="Prikryl" creationdate="20151026T123326Z">
        <seg>include::book/03-git-branching/1-git-branching.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/04-git-server/1-git-server.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123327Z" creationid="Prikryl" creationdate="20151026T123327Z">
        <seg>include::book/04-git-server/1-git-server.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/05-distributed-git/1-distributed-git.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123327Z" creationid="Prikryl" creationdate="20151026T123327Z">
        <seg>include::book/05-distributed-git/1-distributed-git.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/06-github/1-github.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123328Z" creationid="Prikryl" creationdate="20151026T123328Z">
        <seg>include::book/06-github/1-github.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/07-git-tools/1-git-tools.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123329Z" creationid="Prikryl" creationdate="20151026T123329Z">
        <seg>include::book/07-git-tools/1-git-tools.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/08-customizing-git/1-customizing-git.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123330Z" creationid="Prikryl" creationdate="20151026T123330Z">
        <seg>include::book/08-customizing-git/1-customizing-git.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/09-git-and-other-scms/1-git-and-other-scms.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123339Z" creationid="Prikryl" creationdate="20151026T123339Z">
        <seg>include::book/09-git-and-other-scms/1-git-and-other-scms.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/10-git-internals/1-git-internals.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123348Z" creationid="Prikryl" creationdate="20151026T123348Z">
        <seg>include::book/10-git-internals/1-git-internals.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/A-git-in-other-environments/1-git-other-environments.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123355Z" creationid="Prikryl" creationdate="20151026T123355Z">
        <seg>include::book/A-git-in-other-environments/1-git-other-environments.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/B-embedding-git/1-embedding-git.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123356Z" creationid="Prikryl" creationdate="20151026T123356Z">
        <seg>include::book/B-embedding-git/1-embedding-git.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/C-git-commands/1-git-commands.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123400Z" creationid="Prikryl" creationdate="20151026T123400Z">
        <seg>include::book/C-git-commands/1-git-commands.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::book/preface.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T123322Z" creationid="Prikryl" creationdate="20151026T123322Z">
        <seg>include::book/preface.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/about-version-control.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173756Z" creationid="Prikryl" creationdate="20151026T173756Z">
        <seg>include::sections/about-version-control.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/aliases.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202856Z" creationid="Prikryl" creationdate="20151028T202856Z">
        <seg>include::sections/aliases.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/basic-branching-and-merging.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T133639Z" creationid="Prikryl" creationdate="20151108T133639Z">
        <seg>include::sections/basic-branching-and-merging.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/basics.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173812Z" creationid="Prikryl" creationdate="20151026T173812Z">
        <seg>include::sections/basics.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/branch-management.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T134429Z" creationid="Prikryl" creationdate="20151108T134429Z">
        <seg>include::sections/branch-management.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/command-line.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173815Z" creationid="Prikryl" creationdate="20151026T173815Z">
        <seg>include::sections/command-line.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/contributing.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160108T185259Z" creationid="Prikryl" creationdate="20160108T185259Z">
        <seg>include::sections/contributing.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/distributed-workflows.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160108T185256Z" creationid="Prikryl" creationdate="20160108T185256Z">
        <seg>include::sections/distributed-workflows.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/first-time-setup.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173821Z" creationid="Prikryl" creationdate="20151026T173821Z">
        <seg>include::sections/first-time-setup.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/generating-ssh-key.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144639Z" creationid="Prikryl" creationdate="20151218T144639Z">
        <seg>include::sections/generating-ssh-key.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/getting-a-repository.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202850Z" creationid="Prikryl" creationdate="20151028T202850Z">
        <seg>include::sections/getting-a-repository.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/git-daemon.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144643Z" creationid="Prikryl" creationdate="20151218T144643Z">
        <seg>include::sections/git-daemon.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/git-on-a-server.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144636Z" creationid="Prikryl" creationdate="20151218T144636Z">
        <seg>include::sections/git-on-a-server.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/gitlab.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144650Z" creationid="Prikryl" creationdate="20151218T144650Z">
        <seg>include::sections/gitlab.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/gitweb.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144647Z" creationid="Prikryl" creationdate="20151218T144647Z">
        <seg>include::sections/gitweb.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/help.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173823Z" creationid="Prikryl" creationdate="20151026T173823Z">
        <seg>include::sections/help.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/history.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173810Z" creationid="Prikryl" creationdate="20151026T173810Z">
        <seg>include::sections/history.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/hosted.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144655Z" creationid="Prikryl" creationdate="20151218T144655Z">
        <seg>include::sections/hosted.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/installing.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T173817Z" creationid="Prikryl" creationdate="20151026T173817Z">
        <seg>include::sections/installing.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/maintaining.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160108T185303Z" creationid="Prikryl" creationdate="20160108T185303Z">
        <seg>include::sections/maintaining.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/nutshell.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T133637Z" creationid="Prikryl" creationdate="20151108T133637Z">
        <seg>include::sections/nutshell.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/protocols.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144633Z" creationid="Prikryl" creationdate="20151218T144633Z">
        <seg>include::sections/protocols.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/rebasing.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T133647Z" creationid="Prikryl" creationdate="20151108T133647Z">
        <seg>include::sections/rebasing.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/recording-changes.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202851Z" creationid="Prikryl" creationdate="20151028T202851Z">
        <seg>include::sections/recording-changes.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/remote-branches.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T133645Z" creationid="Prikryl" creationdate="20151108T133645Z">
        <seg>include::sections/remote-branches.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/remotes.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202854Z" creationid="Prikryl" creationdate="20151028T202854Z">
        <seg>include::sections/remotes.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/setting-up-server.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144641Z" creationid="Prikryl" creationdate="20151218T144641Z">
        <seg>include::sections/setting-up-server.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/smart-http.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151218T144645Z" creationid="Prikryl" creationdate="20151218T144645Z">
        <seg>include::sections/smart-http.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/tagging.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202855Z" creationid="Prikryl" creationdate="20151028T202855Z">
        <seg>include::sections/tagging.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/undoing.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202853Z" creationid="Prikryl" creationdate="20151028T202853Z">
        <seg>include::sections/undoing.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/viewing-history.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151028T202853Z" creationid="Prikryl" creationdate="20151028T202853Z">
        <seg>include::sections/viewing-history.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>include::sections/workflows.asc[]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151108T133643Z" creationid="Prikryl" creationdate="20151108T133643Z">
        <seg>include::sections/workflows.asc[]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>index.html
#
# It looks like you may be committing a merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T081135Z" creationid="Prikryl" creationdate="20151120T081135Z">
        <seg>index.html
#
# It looks like you may be committing a merge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>index.html |    1 +
1 file changed, 1 insertion(+)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151115T153348Z" creationid="Prikryl" creationdate="20151115T153348Z">
        <seg>index.html |    1 +
1 file changed, 1 insertion(+)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>index.html | 2 ++</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151111T214714Z" creationid="Prikryl" creationdate="20151111T214714Z">
        <seg>index.html | 2 ++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>iss53
* master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T205859Z" creationid="Prikryl" creationdate="20151124T205859Z">
        <seg>iss53
* master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>iss53
* master
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210949Z" creationid="Prikryl" creationdate="20151124T210949Z">
        <seg>iss53
* master
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214819Z" creationid="Prikryl" creationdate="20151213T214819Z">
        <seg>iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210434Z" creationid="Prikryl" creationdate="20151124T210434Z">
        <seg>iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>issue-43                         new (next fetch will store in remotes/origin)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131329Z" creationid="Prikryl" creationdate="20151107T131329Z">
        <seg>issue-43                         new (next fetch will store in remotes/origin)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>issue-45                         new (next fetch will store in remotes/origin)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131332Z" creationid="Prikryl" creationdate="20151107T131332Z">
        <seg>issue-45                         new (next fetch will store in remotes/origin)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |    2 +-</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T214140Z" creationid="Prikryl" creationdate="20160115T214140Z">
        <seg>lib/simplegit.rb |    2 +-</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |    4 ++++</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T112321Z" creationid="Prikryl" creationdate="20160118T112321Z">
        <seg>lib/simplegit.rb |    4 ++++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |    6 +++++-</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T213239Z" creationid="Prikryl" creationdate="20160115T213239Z">
        <seg>lib/simplegit.rb |    6 +++++-</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |   10 +++++++++-</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160121T200022Z" creationid="Prikryl" creationdate="20160121T200022Z">
        <seg>lib/simplegit.rb |   10 +++++++++-</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |   10 +++++++++-
1 files changed, 9 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160118T113303Z" creationid="Prikryl" creationdate="20160118T113303Z">
        <seg>lib/simplegit.rb |   10 +++++++++-
1 files changed, 9 insertions(+), 1 deletions(-)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb | 25 +++++++++++++++++++++++++</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145550Z" creationid="Prikryl" creationdate="20151102T145550Z">
        <seg>lib/simplegit.rb | 25 +++++++++++++++++++++++++</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb | 5 -----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145538Z" creationid="Prikryl" creationdate="20151102T145538Z">
        <seg>lib/simplegit.rb | 5 -----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>libz-dev libssl-dev
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115512Z" creationid="Prikryl" creationdate="20151107T115512Z">
        <seg>libz-dev libssl-dev
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>mark = convert_dir_to_mark(dir)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091448Z" creationid="Prikryl" creationdate="20151024T091448Z">
        <seg>mark = convert_dir_to_mark(dir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>markdown-strip                   tracked</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131327Z" creationid="Prikryl" creationdate="20151107T131327Z">
        <seg>markdown-strip                   tracked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>markdown-strip                 pushes to markdown-strip                 (up to date)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131351Z" creationid="Prikryl" creationdate="20151107T131351Z">
        <seg>markdown-strip                 pushes to markdown-strip                 (up to date)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>master                               tracked</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121530Z" creationid="Prikryl" creationdate="20151107T121530Z">
        <seg>master                               tracked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>master                           tracked</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131322Z" creationid="Prikryl" creationdate="20151107T131322Z">
        <seg>master                           tracked</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>master                         pushes to master                         (up to date)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131354Z" creationid="Prikryl" creationdate="20151107T131354Z">
        <seg>master                         pushes to master                         (up to date)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>master     merges with remote master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131343Z" creationid="Prikryl" creationdate="20151107T131343Z">
        <seg>master     merges with remote master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214829Z" creationid="Prikryl" creationdate="20151213T214829Z">
        <seg>master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>master merges with remote master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121539Z" creationid="Prikryl" creationdate="20151107T121539Z">
        <seg>master merges with remote master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>master pushes to master (up to date)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T121544Z" creationid="Prikryl" creationdate="20151107T121544Z">
        <seg>master pushes to master (up to date)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>modified:   CONTRIBUTING.md</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120909Z" creationid="Prikryl" creationdate="20151029T120909Z">
        <seg>modified:   CONTRIBUTING.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>modified:   CONTRIBUTING.md
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T130126Z" creationid="Prikryl" creationdate="20151029T130126Z">
        <seg>modified:   CONTRIBUTING.md
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>modified:   README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T120733Z" creationid="Prikryl" creationdate="20151107T120733Z">
        <seg>modified:   README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>modified:   index.html
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T080736Z" creationid="Prikryl" creationdate="20151120T080736Z">
        <seg>modified:   index.html
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my version 1.4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101847Z" creationid="Prikryl" creationdate="20151023T101847Z">
        <seg>my version 1.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>new file:   README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T120133Z" creationid="Prikryl" creationdate="20151029T120133Z">
        <seg>new file:   README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T223947Z" creationid="Prikryl" creationdate="20151031T223947Z">
        <seg>no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>no changes added to commit (use "git add" and/or "git commit -a")
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T224545Z" creationid="Prikryl" creationdate="20151031T224545Z">
        <seg>no changes added to commit (use "git add" and/or "git commit -a")
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>nothing added to commit but untracked files present (use "git add" to track)
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151029T110832Z" creationid="Prikryl" creationdate="20151029T110832Z">
        <seg>nothing added to commit but untracked files present (use "git add" to track)
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>openssl-devel perl-devel zlib-devel
$ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T115510Z" creationid="Prikryl" creationdate="20151107T115510Z">
        <seg>openssl-devel perl-devel zlib-devel
$ sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>or the second version:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo do druhé verze:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>please contact us at support@github.com
&lt;/div&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T073448Z" creationid="Prikryl" creationdate="20151120T073448Z">
        <seg>please contact us at support@github.com
&lt;/div&gt;
&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>preceded by a single space, with blank lines in</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T140533Z" creationid="Prikryl" creationdate="20160114T153951Z">
        <seg>před kterou se uvádí jedna mezera. Mezi odrážky se vkládají</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T131335Z" creationid="Prikryl" creationdate="20151107T131335Z">
        <seg>refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (1465/1465), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223118Z" creationid="Prikryl" creationdate="20151023T223118Z">
        <seg>remote: Compressing objects: 100% (1465/1465), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (2/2), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144116Z" creationid="Prikryl" creationdate="20151210T144116Z">
        <seg>remote: Compressing objects: 100% (2/2), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (3/3), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223057Z" creationid="Prikryl" creationdate="20151023T223057Z">
        <seg>remote: Compressing objects: 100% (3/3), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (36/36), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170409Z" creationid="Prikryl" creationdate="20151101T170409Z">
        <seg>remote: Compressing objects: 100% (36/36), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T164524Z" creationid="Prikryl" creationdate="20151101T164524Z">
        <seg>remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151210T144118Z" creationid="Prikryl" creationdate="20151210T144118Z">
        <seg>remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151101T170411Z" creationid="Prikryl" creationdate="20151101T170411Z">
        <seg>remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>removed invalid default value
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20160115T150000Z" creationid="Prikryl" creationdate="20160115T150000Z">
        <seg>removed invalid default value
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>removed unnecessary test</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T144734Z" creationid="Prikryl" creationdate="20151102T144734Z">
        <seg>removed unnecessary test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>renamed:    README.md -&gt; README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151106T213907Z" creationid="Prikryl" creationdate="20151106T213907Z">
        <seg>renamed:    README.md -&gt; README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>renamed:    README.md -&gt; README
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151031T231332Z" creationid="Prikryl" creationdate="20151031T231332Z">
        <seg>renamed:    README.md -&gt; README
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>s.author    =   "Scott Chacon"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145301Z" creationid="Prikryl" creationdate="20151102T145301Z">
        <seg>s.author    =   "Scott Chacon"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>s.email     =   "schacon@gee-mail.com"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145303Z" creationid="Prikryl" creationdate="20151102T145303Z">
        <seg>s.email     =   "schacon@gee-mail.com"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145300Z" creationid="Prikryl" creationdate="20151102T145300Z">
        <seg>s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>s.platform  =   Gem::Platform::RUBY</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145258Z" creationid="Prikryl" creationdate="20151102T145258Z">
        <seg>s.platform  =   Gem::Platform::RUBY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>s.summary   =   "A simple gem for using Git in Ruby code."</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145306Z" creationid="Prikryl" creationdate="20151102T145306Z">
        <seg>s.summary   =   "A simple gem for using Git in Ruby code."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>second commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091618Z" creationid="Prikryl" creationdate="20151024T091618Z">
        <seg>second commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>secure this thing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222946Z" creationid="Prikryl" creationdate="20151023T222946Z">
        <seg>secure this thing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>seeing if this helps the gem</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221358Z" creationid="Prikryl" creationdate="20151023T221358Z">
        <seg>seeing if this helps the gem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>spec = Gem::Specification.new do |s|</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T145256Z" creationid="Prikryl" creationdate="20151102T145256Z">
        <seg>spec = Gem::Specification.new do |s|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>test for current head</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102444Z" creationid="Prikryl" creationdate="20151023T102444Z">
        <seg>test for current head</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>testing
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T205901Z" creationid="Prikryl" creationdate="20151124T205901Z">
        <seg>testing
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>testing   5ea463a trying something new
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151213T214832Z" creationid="Prikryl" creationdate="20151213T214832Z">
        <seg>testing   5ea463a trying something new
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>testing 782fd34 add scott to the author list in the readmes
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151124T210437Z" creationid="Prikryl" creationdate="20151124T210437Z">
        <seg>testing 782fd34 add scott to the author list in the readmes
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>that highlights your work in progress (and note in the PR title that it's
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151030T091838Z" creationid="Prikryl" creationdate="20151030T091838Z">
        <seg>that highlights your work in progress (and note in the PR title that it's
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>third commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091610Z" creationid="Prikryl" creationdate="20151024T091610Z">
        <seg>third commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>to this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>na:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>updated README formatting and added blame</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222818Z" creationid="Prikryl" creationdate="20151023T222818Z">
        <seg>updated README formatting and added blame</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>updated rakefile
...
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224453Z" creationid="Prikryl" creationdate="20151107T224453Z">
        <seg>updated rakefile
...
----</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;
Date:   Sun Apr 27 20:43:35 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151107T224447Z" creationid="Prikryl" creationdate="20151107T224447Z">
        <seg>version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;
Date:   Sun Apr 27 20:43:35 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>what happened</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T172602Z" creationid="Prikryl" creationdate="20151023T223146Z">
        <seg>co bylo provedeno</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>y</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221036Z" creationid="Prikryl" creationdate="20151023T221036Z">
        <seg>y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>you have to use</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>budete muset použít:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>you put this script:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>vložte tento skript:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>{local}: modified file</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T075227Z" creationid="Prikryl" creationdate="20151120T075227Z">
        <seg>{local}: modified file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>{remote}: modified file
Hit return to start merge resolution tool (opendiff):
----</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151120T075850Z" creationid="Prikryl" creationdate="20151120T075235Z">
        <seg>{remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

Česky: Tato zpráva se zobrazila, protože hodnota `'merge.tool'` (nástroj pro slučování) není nakonfigurována... a následuje návod ke spuštění nápovědy. Dále... `'git mergetool'` se nyní pokusí spustit jeden z následujících nástrojů: ... Následuje informace o souboru s konfliktem a končí to... Stiskněte klávesu Return (Enter) pro spuštění opendiff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>{{ toc }}</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T152045Z" creationid="Prikryl" creationdate="20151026T152045Z">
        <seg>{{ toc }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T214830Z" creationid="Prikryl" creationdate="20151102T214830Z">
        <seg>| `--abbrev-commit` | Zobrazí jen několik prvních znaků kontrolního součtu SHA-1 místo všech 40.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--author`            | Only show commits in which the author entry matches the specified string.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T213503Z" creationid="Prikryl" creationdate="20151104T213255Z">
        <seg>| `--author`            | Zobrazí pouze revize, u kterých autor příspěvku odpovídá zadanému řetězci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--committer`         | Only show commits in which the committer entry matches the specified string.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T213523Z" creationid="Prikryl" creationdate="20151104T213357Z">
        <seg>| `--committer`         | Zobrací pouze revize, u kterých autor revize odpovídá zadanému řetězci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T224005Z" creationid="Prikryl" creationdate="20151102T224005Z">
        <seg>| `--graph`         | Zobrazí vedle výstupu logu ASCII graf větve a historii slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T213633Z" creationid="Prikryl" creationdate="20151104T213633Z">
        <seg>| `--grep`              | Zobrazí pouze revize, které ve zprávě k revizi obsahují zadaný řetězec.
| `-S`                  | Zobrazí pouze revize, které přidaly nebo odebraly kód se zadaným řetězcem.
|================================</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--name-only`     | Show the list of files modified after the commit information.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T214715Z" creationid="Prikryl" creationdate="20151102T214715Z">
        <seg>| `--name-only`     | Za informacemi o revizi zobrazí seznam změněných souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T214742Z" creationid="Prikryl" creationdate="20151102T214742Z">
        <seg>| `--name-status`   | Zobrazí seznam dotčených souborů spolu s informací přidáno/změněno/smazáno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--pretty`        | Show commits in an alternate format.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T224044Z" creationid="Prikryl" creationdate="20151102T224044Z">
        <seg>| `--pretty`        | Zobrazí revize v alternativním formátu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T223907Z" creationid="Prikryl" creationdate="20151102T223907Z">
        <seg>| `--relative-date` | Zobrazí datum v relativním formátu (např. „2 weeks ago“, tj. před 2 týdny) místo data v úplném tvaru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T214627Z" creationid="Prikryl" creationdate="20151102T214627Z">
        <seg>| `--shortstat`     | Zobrazí pouze řádek změněno/vloženo/smazáno z příkazu `--stat`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--stat`          | Show statistics for files modified in each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T214456Z" creationid="Prikryl" creationdate="20151102T214456Z">
        <seg>| `--stat`          | Zobrazí statistiku pro změněné soubory v každé revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>| `--until`, `--before` | Limit the commits to those made before the specified date.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151104T213211Z" creationid="Prikryl" creationdate="20151104T213211Z">
        <seg>| `--until`, `--before` | Omezí výpis na revize zapsané před zadaným datem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>|================================</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151102T224132Z" creationid="Prikryl" creationdate="20151102T224132Z">
        <seg>|================================</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>— Ben_</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T151820Z" creationid="Prikryl" creationdate="20151026T151820Z">
        <seg>— Ben_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>— Scott_</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151026T152041Z" creationid="Prikryl" creationdate="20151026T152041Z">
        <seg>— Scott_</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
