<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.5.2_1" segtype="sentence" srclang="EN"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN">
        <seg>"Mark" is the `fast-import` term for an identifier you give to a commit; as you create commits, you give each one a mark that you can use to link to it from other commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>„Označovač“ (angl. mark) je termín používaný v souvislosti s metodou `fast-import`. Jedná se o identifikátor, který jednoznačně přiřadíte revizi a lze ho použít k odkazování na tuto revizi z revizí ostatních.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103038Z" creationid="Prikryl" creationdate="20151023T103038Z">
        <seg>#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#
	
	exec git-update-server-info</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105152Z" creationid="Prikryl" creationdate="20151023T105152Z">
        <seg>#
	
	exec git-update-server-info</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#
	# Commands:
	#  p, pick = use commit
	#  r, reword = use commit, but edit the commit message
	#  e, edit = use commit, but stop for amending
	#  s, squash = use commit, but meld into previous commit
	#  f, fixup = like "squash", but discard this commit's log message
	#  x, exec = run command (the rest of the line) using shell
	#
	# These lines can be re-ordered; they are executed from top to bottom.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222802Z" creationid="Prikryl" creationdate="20151023T222802Z">
        <seg>#
	# Commands:
	#  p, pick = use commit
	#  r, reword = use commit, but edit the commit message
	#  e, edit = use commit, but stop for amending
	#  s, squash = use commit, but meld into previous commit
	#  f, fixup = like "squash", but discard this commit's log message
	#  x, exec = run command (the rest of the line) using shell
	#
	# These lines can be re-ordered; they are executed from top to bottom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#
	# However, if you remove everything, the rebase will be aborted.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222644Z" creationid="Prikryl" creationdate="20151023T222644Z">
        <seg>#
	# However, if you remove everything, the rebase will be aborted.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#
	# If you remove a line here THAT COMMIT WILL BE LOST.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222639Z" creationid="Prikryl" creationdate="20151023T222639Z">
        <seg>#
	# If you remove a line here THAT COMMIT WILL BE LOST.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#
	# Note that empty commits are commented out</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222646Z" creationid="Prikryl" creationdate="20151023T222646Z">
        <seg>#
	# Note that empty commits are commented out</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#
	# To enable this hook, rename this file to "post-update".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105151Z" creationid="Prikryl" creationdate="20151023T105151Z">
        <seg>#
	# To enable this hook, rename this file to "post-update".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Author: Philipp Kempgen</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090722Z" creationid="Prikryl" creationdate="20151024T090722Z">
        <seg># Author: Philipp Kempgen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Customizing Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Individuální přizpůsobení systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Distributed Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Distribuovaný charakter systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Getting Started</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>== Úvod</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git Basics</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Základy práce se systémem Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git Branching</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Větve v systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git Internals</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Git pod pokličkou</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git Tools</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Nástroje systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git and Other Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Git a ostatní systémy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>== Git on the Server</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>== Git na serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># If this is not correct, please remove the file
	#       .git/MERGE_HEAD
	# and try again.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103035Z" creationid="Prikryl" creationdate="20151023T103035Z">
        <seg># If this is not correct, please remove the file
	#       .git/MERGE_HEAD
	# and try again.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Jessica's Machine
	$ git checkout -b featureA
	Switched to a new branch "featureA"
	$ vim lib/simplegit.rb
	$ git commit -am 'add limit to log function'
	[featureA 3300904] add limit to log function
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220644Z" creationid="Prikryl" creationdate="20151023T220644Z">
        <seg># Jessica's Machine
	$ git checkout -b featureA
	Switched to a new branch "featureA"
	$ vim lib/simplegit.rb
	$ git commit -am 'add limit to log function'
	[featureA 3300904] add limit to log function
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Jessica's Machine
	$ git clone jessica@githost:simplegit.git
	Initialized empty Git repository in /home/jessica/simplegit/.git/
	...
	$ cd simplegit/
	$ vim TODO
	$ git commit -am 'add reset task'
	[master fbff5bc] add reset task
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220358Z" creationid="Prikryl" creationdate="20151023T220308Z">
        <seg># Jessica's Machine
	$ git clone jessica@githost:simplegit.git
	Initialized empty Git repository in /home/jessica/simplegit/.git/
	...
	$ cd simplegit/
	$ vim TODO
	$ git commit -am 'add reset task'
	[master fbff5bc] add reset task
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Jessica's Machine
	$ git fetch origin
	$ git checkout -b featureB origin/master
	Switched to a new branch "featureB"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220656Z" creationid="Prikryl" creationdate="20151023T220656Z">
        <seg># Jessica's Machine
	$ git fetch origin
	$ git checkout -b featureB origin/master
	Switched to a new branch "featureB"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Jessica's Machine
	$ git fetch origin
	...
	From jessica@githost:simplegit
	   fbff5bc..72bbc59  master     -&gt; origin/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220546Z" creationid="Prikryl" creationdate="20151023T220546Z">
        <seg># Jessica's Machine
	$ git fetch origin
	...
	From jessica@githost:simplegit
	   fbff5bc..72bbc59  master     -&gt; origin/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Jessica's Machine
	$ git push origin master
	...
	To jessica@githost:simplegit.git
	   1edee6b..fbff5bc  master -&gt; master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220408Z" creationid="Prikryl" creationdate="20151023T220408Z">
        <seg># Jessica's Machine
	$ git push origin master
	...
	To jessica@githost:simplegit.git
	   1edee6b..fbff5bc  master -&gt; master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># John's Machine
	$ git clone john@githost:simplegit.git
	Initialized empty Git repository in /home/john/simplegit/.git/
	...
	$ cd simplegit/
	$ vim lib/simplegit.rb
	$ git commit -am 'removed invalid default value'
	[master 738ee87] removed invalid default value
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220350Z" creationid="Prikryl" creationdate="20151023T220350Z">
        <seg># John's Machine
	$ git clone john@githost:simplegit.git
	Initialized empty Git repository in /home/john/simplegit/.git/
	...
	$ cd simplegit/
	$ vim lib/simplegit.rb
	$ git commit -am 'removed invalid default value'
	[master 738ee87] removed invalid default value
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># John's Machine
	$ git push origin master
	To john@githost:simplegit.git
	 !</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220413Z" creationid="Prikryl" creationdate="20151023T220413Z">
        <seg># John's Machine
	$ git push origin master
	To john@githost:simplegit.git
	 !</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># On branch master
	# Changes to be committed:
	#       new file:   README
	#       modified:   benchmarks.rb
	#
	~
	~
	~
	".git/COMMIT_EDITMSG" 10L, 283C</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205708Z" creationid="Prikryl" creationdate="20151022T205708Z">
        <seg># On branch master
	# Changes to be committed:
	#       new file:   README
	#       modified:   benchmarks.rb
	#
	~
	~
	~
	".git/COMMIT_EDITMSG" 10L, 283C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	# modified:   lib/test.rb
	#
	~
	~
	".git/COMMIT_EDITMSG" 14L, 297C</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223157Z" creationid="Prikryl" creationdate="20151023T223157Z">
        <seg># On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	# modified:   lib/test.rb
	#
	~
	~
	".git/COMMIT_EDITMSG" 14L, 297C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Please enter the commit message for your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205659Z" creationid="Prikryl" creationdate="20151022T205659Z">
        <seg># Please enter the commit message for your changes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># Rebase 710f0f8..a5f4a0d onto 710f0f8
	#
	# Commands:
	#  p, pick = use commit
	#  r, reword = use commit, but edit the commit message
	#  e, edit = use commit, but stop for amending
	#  s, squash = use commit, but meld into previous commit
	#  f, fixup = like "squash", but discard this commit's log message
	#  x, exec = run command (the rest of the line) using shell
	#
	# These lines can be re-ordered; they are executed from top to bottom.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222637Z" creationid="Prikryl" creationdate="20151023T222637Z">
        <seg># Rebase 710f0f8..a5f4a0d onto 710f0f8
	#
	# Commands:
	#  p, pick = use commit
	#  r, reword = use commit, but edit the commit message
	#  e, edit = use commit, but stop for amending
	#  s, squash = use commit, but meld into previous commit
	#  f, fixup = like "squash", but discard this commit's log message
	#  x, exec = run command (the rest of the line) using shell
	#
	# These lines can be re-ordered; they are executed from top to bottom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># The first commit's message is:
	changed my name a bit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222815Z" creationid="Prikryl" creationdate="20151023T222815Z">
        <seg># The first commit's message is:
	changed my name a bit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># This is a combination of 3 commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222811Z" creationid="Prikryl" creationdate="20151023T222811Z">
        <seg># This is a combination of 3 commits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># This is the 2nd commit message:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222816Z" creationid="Prikryl" creationdate="20151023T222816Z">
        <seg># This is the 2nd commit message:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># This is the 3rd commit message:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222926Z" creationid="Prikryl" creationdate="20151023T222926Z">
        <seg># This is the 3rd commit message:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># [ insert acl_access_data method from above ]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090915Z" creationid="Prikryl" creationdate="20151024T090915Z">
        <seg># [ insert acl_access_data method from above ]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># a comment - this is ignored
	# no .a files
	*.a
	# but do track lib.a, even though you're ignoring .a files above
	!lib.a
	# only ignore the root TODO file, not subdir/TODO
	/TODO
	# ignore all files in the build/ directory
	build/
	# ignore doc/notes.txt, but not doc/server/arch.txt
	doc/*.txt
	# ignore all .txt files in the doc/ directory
	doc/**/*.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210149Z" creationid="Prikryl" creationdate="20151022T205519Z">
        <seg># komentář – ignoruje se
	# žádné soubory s příponou .a
	*.a
	# ale sleduj soubor lib.a, přestože máš ignorovat soubory s příponou .a
	!lib.a
	# ignoruj soubor TODO pouze v kořenovém adresáři, ne v podadresářích
	/TODO
	# ignoruj všechny soubory v adresáři build/
	build/
	# ignoruj doc/notes.txt, ale nikoli doc/server/arch.txt
	doc/*.txt
	# ignoruj všechny .txt soubory v adresáři doc/
	doc/**/*.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># enforced custom commit message format
	def check_message_format
	  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
	  missed_revs.each do |rev|
	    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
	    if !$regex.match(message)
	      puts "[POLICY] Your message is not formatted correctly"
	      exit 1
	    end
	  end
	end
	check_message_format</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090837Z" creationid="Prikryl" creationdate="20151024T090837Z">
        <seg># enforced custom commit message format
	def check_message_format
	  missed_revs = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
	  missed_revs.each do |rev|
	    message = `git cat-file commit #{rev} | sed '1,/^$/d'`
	    if !$regex.match(message)
	      puts "[POLICY] Your message is not formatted correctly"
	      exit 1
	    end
	  end
	end
	check_message_format</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># enforces fast-forward only pushes
	def check_fast_forward
	  missed_refs = `git rev-list #{$newrev}..#{$oldrev}`
	  missed_ref_count = missed_refs.split("\n").size
	  if missed_ref_count &gt; 0
	    puts "[POLICY] Cannot push a non fast-forward reference"
	    exit 1
	  end
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090851Z" creationid="Prikryl" creationdate="20151024T090851Z">
        <seg># enforces fast-forward only pushes
	def check_fast_forward
	  missed_refs = `git rev-list #{$newrev}..#{$oldrev}`
	  missed_ref_count = missed_refs.split("\n").size
	  if missed_ref_count &gt; 0
	    puts "[POLICY] Cannot push a non fast-forward reference"
	    exit 1
	  end
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># loop through the directories
	Dir.chdir(ARGV[0]) do
	  Dir.glob("*").each do |dir|
	    next if File.file?(dir)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091445Z" creationid="Prikryl" creationdate="20151024T091445Z">
        <seg># loop through the directories
	Dir.chdir(ARGV[0]) do
	  Dir.glob("*").each do |dir|
	    next if File.file?(dir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># move into the target directory
	    Dir.chdir(dir) do
	      last_mark = print_export(dir, last_mark)
	    end
	  end
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091446Z" creationid="Prikryl" creationdate="20151024T091446Z">
        <seg># move into the target directory
	    Dir.chdir(dir) do
	      last_mark = print_export(dir, last_mark)
	    end
	  end
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># on Johns computer
	$ cd myproject
	$ git init
	$ git add .</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104949Z" creationid="Prikryl" creationdate="20151023T104949Z">
        <seg># on Johns computer
	$ cd myproject
	$ git init
	$ git add .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># on your local computer
	$ git clone git@gitserver:gitosis-admin.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105354Z" creationid="Prikryl" creationdate="20151023T105241Z">
        <seg># na vašem lokálním počítači
	$ git clone git@gitserver:gitosis-admin.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># only allows certain users to modify certain subdirectories in a project
	def check_directory_perms
	  access = get_acl_access_data('.git/acl')</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090916Z" creationid="Prikryl" creationdate="20151024T090916Z">
        <seg># only allows certain users to modify certain subdirectories in a project
	def check_directory_perms
	  access = get_acl_access_data('.git/acl')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># only allows certain users to modify certain subdirectories in a project
	def check_directory_perms
	  access = get_acl_access_data('acl')</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090847Z" creationid="Prikryl" creationdate="20151024T090847Z">
        <seg># only allows certain users to modify certain subdirectories in a project
	def check_directory_perms
	  access = get_acl_access_data('acl')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># print the import information
	puts 'commit refs/heads/master'
	puts 'mark :' + mark
	puts "committer #{$author} #{date} -0700"
	export_data('imported from ' + dir)
	puts 'from :' + last_mark if last_mark</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091453Z" creationid="Prikryl" creationdate="20151024T091453Z">
        <seg># print the import information
	puts 'commit refs/heads/master'
	puts 'mark :' + mark
	puts "committer #{$author} #{date} -0700"
	export_data('imported from ' + dir)
	puts 'from :' + last_mark if last_mark</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg># see if anyone is trying to push something they can't
	  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
	  new_commits.each do |rev|
	    files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split("\n")
	    files_modified.each do |path|
	      next if path.size == 0
	      has_file_access = false
	      access[$user].each do |access_path|
	        if !access_path || # user has access to everything
	          (path.index(access_path) == 0) # access to this path
	          has_file_access = true
	        end
	      end
	      if !has_file_access
	        puts "[POLICY] You do not have access to push to #{path}"
	        exit 1
	      end
	    end
	  end
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090848Z" creationid="Prikryl" creationdate="20151024T090848Z">
        <seg># see if anyone is trying to push something they can't
	  new_commits = `git rev-list #{$oldrev}..#{$newrev}`.split("\n")
	  new_commits.each do |rev|
	    files_modified = `git log -1 --name-only --pretty=format:'' #{rev}`.split("\n")
	    files_modified.each do |path|
	      next if path.size == 0
	      has_file_access = false
	      access[$user].each do |access_path|
	        if !access_path || # user has access to everything
	          (path.index(access_path) == 0) # access to this path
	          has_file_access = true
	        end
	      end
	      if !has_file_access
	        puts "[POLICY] You do not have access to push to #{path}"
	        exit 1
	      end
	    end
	  end
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#!</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090717Z" creationid="Prikryl" creationdate="20151024T090717Z">
        <seg>#!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#!/usr/bin/env bash</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091405Z" creationid="Prikryl" creationdate="20151024T091405Z">
        <seg>#!/usr/bin/env bash</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#!/usr/bin/env ruby</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090821Z" creationid="Prikryl" creationdate="20151024T090821Z">
        <seg>#!/usr/bin/env ruby</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>#!/usr/bin/env ruby
	message_file = ARGV[0]
	message = File.read(message_file)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090909Z" creationid="Prikryl" creationdate="20151024T090909Z">
        <seg>#!/usr/bin/env ruby
	message_file = ARGV[0]
	message = File.read(message_file)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== A Short History of Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>=== Stručná historie systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== About Version Control</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>=== Správa verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== An Example Git-Enforced Policy</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Příklad vynucení chování systémem Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Basic Branching and Merging</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Základy větvení a slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Branch Management</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Správa větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Branching Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Možnosti při práci s větvemi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Contributing to a Project</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Přispívání do projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Debugging with Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Ladění v systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Distributed Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Distribuované pracovní postupy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== First-Time Git Setup</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== První nastavení systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Generating Your SSH Public Key</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Vygenerování veřejného SSH klíče</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Getting Git on a Server</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Jak umístit Git na server</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Getting Help</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Získání nápovědy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Getting a Git Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Získání repozitáře Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Attributes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Atributy Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Basics</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>=== Základy systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Configuration</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Konfigurace systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Daemon</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Démon Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Zásuvné moduly Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git Objects</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Objekty Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git References</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Reference Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Git and Subversion</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Git a Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== GitWeb</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== GitWeb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Gitolite</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Gitolite</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Gitosis</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Gitosis</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Hosted Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Hostování projektů Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Installing Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Instalace systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Interactive Staging</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Interaktivní příprava k zapsání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Maintaining a Project</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Správa projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Maintenance and Data Recovery</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Správa a obnova dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Migrating to Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Přechod na systém Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Packfiles</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Balíčkové soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Plumbing and Porcelain</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Nízkoúrovňové a vysokoúrovňové příkazy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Public Access</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Veřejný přístup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Rebasing</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Recording Changes to the Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Nahrávání změn do repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Remote Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Vzdálené větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Revision Selection</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Výběr revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Rewriting History</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Přepis historie</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Setting Up the Server</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Nastavení serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Stashing</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Odložení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Submodules</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Submoduly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Subtree Merging</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Začlenění podstromu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Summary</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Shrnutí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Tagging</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== The Protocols</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Protokoly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== The Refspec</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Refspec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Tips and Tricks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Tipy a triky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Transfer Protocols</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Přenosové protokoly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Undoing Things</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Rušení změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Viewing the Commit History</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Zobrazení historie revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== What a Branch Is</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Co je to větev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=== Working with Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>=== Práce se vzdálenými repozitáři</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== "Wildcard" repositories</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== „Wildcard“ repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== A Custom Importer</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vlastní importér</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== A SHORT NOTE ABOUT SHA-1</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Krátká poznámka k hodnotě SHA-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Adding Collaborators</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přidávání spolupracovníků</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Adding Remote Repositories</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přidávání vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Advanced Access Control with "deny" rules</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Rozšířené řízení přístupu pravidly typu „odmítnutí“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Ancestry References</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Reference podle původu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Annotated Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Anotované značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Applying Patches from E-mail</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Aplikace záplat z e-mailu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Auto-Completion</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Automatické dokončování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Basic Branching</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Základní větvení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Basic Client Configuration</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Základní konfigurace klienta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Basic Merge Conflicts</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Základní konflikty při slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Basic Merging</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Základní slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Binary Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Binární soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Binary Search</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Binární vyhledávání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Branch References</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Reference větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Centralized Version Control Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Centralizované systémy správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Centralized Workflow</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Centralizovaný pracovní postup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Changing Multiple Commit Messages</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Změna několika zpráv k revizím</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Changing Your Last Commit</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Změna poslední revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Changing the Last Commit</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Změna poslední revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Checking Out Remote Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Checkout vzdálených větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Checking Your Settings</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Kontrola vašeho nastavení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Checking the Status of Your Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Kontrola stavu souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Client-Side Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zásuvné moduly na straně klienta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Cloning a Project with Submodules</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Klonování projektu se submoduly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Cloning an Existing Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Klonování existujícího repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Colors in Git</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Barvy systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Commit Guidelines</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Pravidla pro revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Commit Objects</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Objekty revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Commit Ranges</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Intervaly revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Committing Back to Subversion</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zapisování zpět do systému Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Committing Your Changes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zapisování změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Config File and Access Control Rules</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Konfigurační soubor a pravidla přístupu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Creating Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vytváření značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Creating a Branch from a Stash</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vytvoření větve z odkladu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Creating a New Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vytvoření nového repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Customising the Install</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přizpůsobení instalace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Data Recovery</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Obnova dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Deleting References</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Mazání referencí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Deleting Remote Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Mazání vzdálených větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Determining What Is Introduced</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Jak zjistit provedené změny</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Dictator and Lieutenants Workflow</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Pracovní postup s diktátorem a poručíky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Distributed Version Control Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Distribuované systémy správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Exporting Your Repository</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Export repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== External Merge and Diff Tools</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Externí nástroje pro diff a slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Fetching and Pulling from Your Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vyzvedávání a stahování ze vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== File Annotation</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Anotace souboru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Forking Projects</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Štěpení projektů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Formatting and Whitespace</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Formátování a prázdné znaky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Generating a Build Number</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vygenerování čísla sestavení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Getting Started</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== První kroky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Git Aliases</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Aliasy Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Git Branching Issues</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Problémy s větvemi systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Git Generally Only Adds Data</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Git většinou jen přidává data</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Git Has Integrity</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Git pracuje důsledně</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Git-Svn Summary</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Git-Svn: shrnutí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== GitHub</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== GitHub Summary</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Shrnutí k serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Ignoring Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Ignorované soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Importing</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Import</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Importing from Subversion</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Import ze systému Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Initializing a Repository in an Existing Directory</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Inicializace repozitáře v existujícím adresáři</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Inspecting a Remote</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Prohlížení vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing a Hook</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace zásuvného modulu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing from Source</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace ze zdrojových souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing on Linux</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace v Linuxu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing on Mac</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace v systému Mac</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Installing on Windows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Instalace v systému Windows</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Integrating Contributed Work</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Integrace příspěvků</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Integration-Manager Workflow</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Pracovní postup s integračním manažerem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Issues with Submodules</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Problémy se submoduly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Keyword Expansion</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Rozšíření klíčového slova</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Lightweight Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Prosté značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Limiting Log Output</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Omezení výstupu logu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Limiting Log Output according to Date/Time</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Omezení výstupního logu na určité datum nebo čas</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Listing Your Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Výpis značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Local Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Lokální protokol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Local Version Control Systems</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Lokální systémy správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Long-Running Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Dlouhé větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Maintenance</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Správa</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Merge Strategies</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Strategie slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== More Interesting Rebases</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zajímavější možnosti přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Moving Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přesouvání souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Nearly Every Operation Is Local</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Téměř každá operace je lokální</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Object Storage</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Ukládání objektů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Other Features</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Další vlastnosti</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Perforce</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Perforce</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Personal Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Osobní větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Preparing a Release</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příprava vydání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Private Managed Team</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Soukromý řízený tým</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Private Small Team</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Malý soukromý tým</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Public Large Project</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Velký veřejný projekt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Public Small Project</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Malý veřejný projekt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Pulling in New Changes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Stažení nových změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Pushing</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odesílání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Pushing Refspecs</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odesílání vzorců refspec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Pushing to Your Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odesílání do vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Putting the Bare Repository on a Server</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Umístění holého repozitáře na server</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== RefLog Shortnames</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zkrácené názvy v záznamu RefLog</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Reference na vzdálené repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Removing Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odstraňování souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Removing Objects</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odstraňování objektů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Removing and Renaming Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odstraňování a přejmenovávání vzdálených repozitářů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Reordering Commits</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Změna pořadí revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Restricting pushes by files changed</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Omezení odesílání změn vázané na soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Server Configuration</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Konfigurace serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Server-Side Hook</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zásuvný modul na straně serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Server-Side Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zásuvné moduly na straně serveru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Setting Up</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vytvoření repozitáře</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Setting Up a User Account</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Založení uživatelského účtu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Sharing Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Sdílení značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Short SHA</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zkrácená hodnota SHA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Showing Your Remotes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zobrazení vzdálených serverů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Signed Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Podepsané značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Single Revisions</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Jednotlivé revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Skipping the Staging Area</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přeskočení oblasti připravených změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Small Setups</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Nastavení pro malou skupinu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Snapshots, Not Differences</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Snímky, nikoli rozdíly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Splitting a Commit</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Rozdělení revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Squashing Commits</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Komprimace revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Staging Modified Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příprava změněných souborů k zapsání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Staging Patches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příprava záplat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Staging and Unstaging Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příprava souborů k zapsání a jejich vracení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Starting with Submodules</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Začátek práce se submoduly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Stashing Your Work</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odložení práce</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Subversion</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Subversion Branching</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Větve v systému Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Subversion Commands</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příkazy systému Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Summary</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Shrnutí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Superprojects</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Superprojekty</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Switching Active Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Přepínání aktivních větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tagging Later</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Dodatečné označení</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tagging Your Releases</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Označení vydání značkou</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Značky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Basic Rebase</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Základní přeskládání</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Dumb Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Hloupý protokol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Git Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Protokol Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The HEAD</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Soubor HEAD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The HTTP/S Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Protokol HTTP/S</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Nuclear Option: filter-branch</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Pitbul mezi příkazy: filter-branch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Perils of Rebasing</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Rizika spojená s přeskládáním</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The SSH Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Protokol SSH</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Shortlog</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Příkaz „shortlog“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Smart Protocol</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Chytrý protokol</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Three States</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>==== Tři stavy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== The Very Fast Nuclear Option: Big Friendly Giant Repo Cleaner (BFG)</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Velmi rychlá a nebezpečná zbraň: Big Friendly Giant Repo Cleaner (BFG)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Topic Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Tematické větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tracking Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Sledující větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tracking New Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Sledování nových souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Tree Objects</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Objekty stromu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Un-applying a Stash</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odvolání odkladu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Unmodifying a Modified File</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Rušení změn ve změněných souborech</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Unstaging a Staged File</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Odstranění souboru z oblasti připravených změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Using a GUI to Visualize History</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Grafické uživatelské rozhraní pro procházení historie</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Verifying Tags</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Ověřování značek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Viewing Your Staged and Unstaged Changes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Zobrazení připravených a nepřipravených změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Working in Topic Branches</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Práce v tematických větvích</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Your Diff Tool</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Váš nástroj diff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Your Editor</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Váš editor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Your Identity</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Vaše totožnost</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== Your Project</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== Váš projekt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>==== git svn</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>==== git svn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Applying a Patch with am</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Aplikace záplaty příkazem „am“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Applying a Patch with apply</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Aplikace záplaty příkazem „apply“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Changing E-Mail Addresses Globally</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Globální změna e-mailové adresy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Committing-Workflow Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Zásuvné moduly k zapisování revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Creating a New SVN Branch</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Vytvoření nové větve SVN</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Diffing Binary Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Nástroj diff pro binární soubory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Double Dot</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Dvě tečky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Downloading Data</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Stahování dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== E-mail Workflow Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Zásuvné moduly pro práci s e-maily</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Enforcing Fast-Forward-Only Pushes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Pouze „rychle vpřed“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Enforcing a Specific Commit-Message Format</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Standardizovaná zpráva k revizi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Enforcing a User-Based ACL System</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Systém ACL podle uživatelů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Identifying Binary Files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Identifikace binárních souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Ignoring What Subversion Ignores</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Ignorování souborů, které ignoruje Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Large-Merging Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Pracovní postupy se začleňováním velkého objemu dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Making a Subdirectory the New Root</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Povýšení podadresáře na nový kořenový adresář</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Merging Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Pracovní postupy založené na slučování</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Multiple Points</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Několik bodů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Other Client Hooks</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Ostatní zásuvné moduly na straně klienta</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Rebasing and Cherry Picking Workflows</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Pracovní postupy s přeskládáním a částečným převzetím</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Removing a File from Every Commit</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Odstranění souboru ze všech revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== SSH Access</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== SSH přístup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== SVN Annotation</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Anotace SVN</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== SVN Server Information</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Informace o serveru SVN</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== SVN Style History</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Historie ve stylu SVN</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== The Cons</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Nevýhody</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== The Pros</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Výhody</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Triple Dot</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Tři tečky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== Uploading Data</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Upload dat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== `color.*`</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== `color.*`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== color.ui</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== color.ui</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== commit.template</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== commit.template</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== core.autocrlf</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== core.autocrlf</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== core.editor</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== core.editor</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== core.excludesfile</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== core.excludesfile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== core.pager</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== core.pager</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== core.whitespace</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== core.whitespace</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== export-ignore</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== export-ignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== export-subst</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== export-subst</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== help.autocorrect</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== help.autocorrect</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== pre-receive and post-receive</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== pre-receive a post-receive</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== receive.denyDeletes</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== receive.denyDeletes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== receive.denyNonFastForwards</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== receive.denyNonFastForwards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== receive.fsckObjects</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== receive.fsckObjects</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== update</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== update</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>===== user.signingkey</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== user.signingkey</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>====== Image files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Soubory s obrázky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>====== MS Word files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>===== Soubory MS Word</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>====== OpenDocument Text files</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>====== OpenDocument Text files</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>##pp Grit::GitRuby.cache_client.stats
	+# test line</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205630Z" creationid="Prikryl" creationdate="20151022T205630Z">
        <seg>##pp Grit::GitRuby.cache_client.stats
	+# test line</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ #... work work work</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222630Z" creationid="Prikryl" creationdate="20151023T222630Z">
        <seg>$ #... work work work</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ (fix the file)
	$ git add ticgit.gemspec
	$ git am --resolved
	Applying: seeing if this helps the gem</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221316Z" creationid="Prikryl" creationdate="20151023T221316Z">
        <seg>$ (fix the file)
	$ git add ticgit.gemspec
	$ git am --resolved
	Applying: seeing if this helps the gem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ apt-get install git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204819Z" creationid="Prikryl" creationdate="20151022T204819Z">
        <seg>$ apt-get install git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \
	  libz-dev libssl-dev</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204729Z" creationid="Prikryl" creationdate="20151022T204729Z">
        <seg>$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \
	  libz-dev libssl-dev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ apt-get install python-setuptools</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105232Z" creationid="Prikryl" creationdate="20151023T105232Z">
        <seg>$ apt-get install python-setuptools</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ brew install git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204843Z" creationid="Prikryl" creationdate="20151022T204843Z">
        <seg>$ brew install git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat *.patch |git imap-send
	Resolving imap.gmail.com... ok
	Connecting to [74.125.142.109]:993... ok
	Logging in...
	sending 2 messages
	100% (2/2) done</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221023Z" creationid="Prikryl" creationdate="20151023T221023Z">
        <seg>$ cat *.patch |git imap-send
	Resolving imap.gmail.com... ok
	Connecting to [74.125.142.109]:993... ok
	Logging in...
	sending 2 messages
	100% (2/2) done</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .git/HEAD
	ref: refs/heads/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091656Z" creationid="Prikryl" creationdate="20151024T091656Z">
        <seg>$ cat .git/HEAD
	ref: refs/heads/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .git/HEAD
	ref: refs/heads/test</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091657Z" creationid="Prikryl" creationdate="20151024T091657Z">
        <seg>$ cat .git/HEAD
	ref: refs/heads/test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .git/hooks/post-update
	#!/bin/sh
	#
	# An example hook script to prepare a packed repository for use over
	# dumb transports.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105148Z" creationid="Prikryl" creationdate="20151023T105148Z">
        <seg>$ cat .git/hooks/post-update
	#!/bin/sh
	#
	# An example hook script to prepare a packed repository for use over
	# dumb transports.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .git/packed-refs
	# pack-refs with: peeled
	cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment
	ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master
	cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0
	9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1
	^1a410efbd13591db07496601ebc7a059dd55cfe9</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091811Z" creationid="Prikryl" creationdate="20151024T091811Z">
        <seg>$ cat .git/packed-refs
	# pack-refs with: peeled
	cac0cab538b970a37ea1e769cbbde608743bc96d refs/heads/experiment
	ab1afef80fac8e34258ff41fc1b867c702daa24b refs/heads/master
	cac0cab538b970a37ea1e769cbbde608743bc96d refs/tags/v1.0
	9585191f37f7b0fb9444f35a9bf50de191beadc2 refs/tags/v1.1
	^1a410efbd13591db07496601ebc7a059dd55cfe9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .git/refs/remotes/origin/master
	ca82a6dff817ec66f44342007202690a93763949</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091716Z" creationid="Prikryl" creationdate="20151024T091716Z">
        <seg>$ cat .git/refs/remotes/origin/master
	ca82a6dff817ec66f44342007202690a93763949</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .git/refs/tags/v1.1
	9585191f37f7b0fb9444f35a9bf50de191beadc2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091704Z" creationid="Prikryl" creationdate="20151024T091704Z">
        <seg>$ cat .git/refs/tags/v1.1
	9585191f37f7b0fb9444f35a9bf50de191beadc2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .gitignore
	*.[oa]
	*~</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205119Z" creationid="Prikryl" creationdate="20151022T205119Z">
        <seg>$ cat .gitignore
	*.[oa]
	*~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat .gitmodules
	[submodule "rack"]
	      path = rack
	      url = git://github.com/chneukirchen/rack.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223023Z" creationid="Prikryl" creationdate="20151023T223023Z">
        <seg>$ cat .gitmodules
	[submodule "rack"]
	      path = rack
	      url = git://github.com/chneukirchen/rack.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat /tmp/id_rsa.john.pub
	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
	ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
	Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
	Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
	O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
	dAv8JggJICUvax2T9va5 gsg-keypair</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104944Z" creationid="Prikryl" creationdate="20151023T104944Z">
        <seg>$ cat /tmp/id_rsa.john.pub
	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
	ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
	Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
	Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
	O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
	dAv8JggJICUvax2T9va5 gsg-keypair</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat /tmp/id_rsa.john.pub &gt;&gt; ~/.ssh/authorized_keys
	$ cat /tmp/id_rsa.josie.pub &gt;&gt; ~/.ssh/authorized_keys
	$ cat /tmp/id_rsa.jessica.pub &gt;&gt; ~/.ssh/authorized_keys</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104945Z" creationid="Prikryl" creationdate="20151023T104945Z">
        <seg>$ cat /tmp/id_rsa.john.pub &gt;&gt; ~/.ssh/authorized_keys
	$ cat /tmp/id_rsa.josie.pub &gt;&gt; ~/.ssh/authorized_keys
	$ cat /tmp/id_rsa.jessica.pub &gt;&gt; ~/.ssh/authorized_keys</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat /tmp/test-svn/hooks/pre-revprop-change
	#!/bin/sh
	exit 0;
	$ chmod +x /tmp/test-svn/hooks/pre-revprop-change</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090929Z" creationid="Prikryl" creationdate="20151024T090929Z">
        <seg>$ cat /tmp/test-svn/hooks/pre-revprop-change
	#!/bin/sh
	exit 0;
	$ chmod +x /tmp/test-svn/hooks/pre-revprop-change</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat /usr/local/bin/extDiff
	#!/bin/sh
	[ $# -eq 7 ] &amp;&amp; /usr/local/bin/extMerge "$2" "$5"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090303Z" creationid="Prikryl" creationdate="20151024T090303Z">
        <seg>$ cat /usr/local/bin/extDiff
	#!/bin/sh
	[ $# -eq 7 ] &amp;&amp; /usr/local/bin/extMerge "$2" "$5"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat /usr/local/bin/extMerge
	#!/bin/sh
	/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090335Z" creationid="Prikryl" creationdate="20151024T090335Z">
        <seg>$ cat /usr/local/bin/extMerge
	#!/bin/sh
	/Applications/kdiff3.app/Contents/MacOS/kdiff3 $*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat /usr/local/bin/extMerge
	#!/bin/sh
	/Applications/p4merge.app/Contents/MacOS/p4merge $*</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090243Z" creationid="Prikryl" creationdate="20151024T090243Z">
        <seg>$ cat /usr/local/bin/extMerge
	#!/bin/sh
	/Applications/p4merge.app/Contents/MacOS/p4merge $*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat 0001-add-limit-to-log-function.patch
	From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
	From: Jessica Smith &lt;jessica@example.com&gt;
	Date: Sun, 6 Apr 2008 10:17:23 -0700
	Subject: [PATCH 1/2] add limit to log function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221008Z" creationid="Prikryl" creationdate="20151023T221008Z">
        <seg>$ cat 0001-add-limit-to-log-function.patch
	From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
	From: Jessica Smith &lt;jessica@example.com&gt;
	Date: Sun, 6 Apr 2008 10:17:23 -0700
	Subject: [PATCH 1/2] add limit to log function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat LAST_COMMIT
	Last commit date: $Format:Tue Apr 21 08:38:48 2009 -0700$</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090814Z" creationid="Prikryl" creationdate="20151024T090814Z">
        <seg>$ cat LAST_COMMIT
	Last commit date: $Format:Tue Apr 21 08:38:48 2009 -0700$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat gitosis.conf
	[gitosis]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105403Z" creationid="Prikryl" creationdate="20151023T105403Z">
        <seg>$ cat gitosis.conf
	[gitosis]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cat ~/.ssh/id_rsa.pub
	ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
	GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
	Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
	t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
	mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
	NrRFi9wrf+M7Q== schacon@agadorlaptop.local</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104941Z" creationid="Prikryl" creationdate="20151023T104941Z">
        <seg>$ cat ~/.ssh/id_rsa.pub
	ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
	GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
	Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
	t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
	mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
	NrRFi9wrf+M7Q== schacon@agadorlaptop.local</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd /opt/git
	$ mkdir project.git
	$ cd project.git
	$ git --bare init</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104947Z" creationid="Prikryl" creationdate="20151023T104947Z">
        <seg>$ cd /opt/git
	$ mkdir project.git
	$ cd project.git
	$ git --bare init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd /path/to/project.git
	$ touch git-daemon-export-ok</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105521Z" creationid="Prikryl" creationdate="20151023T105521Z">
        <seg>$ cd /path/to/project.git
	$ touch git-daemon-export-ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd /var/www/htdocs/
	$ git clone --bare /path/to/git_project gitproject.git
	$ cd gitproject.git
	$ mv hooks/post-update.sample hooks/post-update
	$ chmod a+x hooks/post-update</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104922Z" creationid="Prikryl" creationdate="20151023T104922Z">
        <seg>$ cd /var/www/htdocs/
	$ git clone --bare /path/to/git_project gitproject.git
	$ cd gitproject.git
	$ mv hooks/post-update.sample hooks/post-update
	$ chmod a+x hooks/post-update</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd gitosis-admin
	$ find .</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105400Z" creationid="Prikryl" creationdate="20151023T105400Z">
        <seg>$ cd gitosis-admin
	$ find .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd grit
	$ git remote -v
	bakkdoor  git://github.com/bakkdoor/grit.git
	cho45     git://github.com/cho45/grit.git
	defunkt   git://github.com/defunkt/grit.git
	koke      git://github.com/koke/grit.git
	origin    git@github.com:mojombo/grit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101816Z" creationid="Prikryl" creationdate="20151023T101816Z">
        <seg>$ cd grit
	$ git remote -v
	bakkdoor  git://github.com/bakkdoor/grit.git
	cho45     git://github.com/cho45/grit.git
	defunkt   git://github.com/defunkt/grit.git
	koke      git://github.com/koke/grit.git
	origin    git@github.com:mojombo/grit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd myproject
	$ ls -l
	total 8
	-rw-r--r--  1 schacon  admin   3 Apr  9 09:11 README
	drwxr-xr-x  2 schacon  admin  68 Apr  9 09:11 rack
	$ ls rack/
	$</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223043Z" creationid="Prikryl" creationdate="20151023T223043Z">
        <seg>$ cd myproject
	$ ls -l
	total 8
	-rw-r--r--  1 schacon  admin   3 Apr  9 09:11 README
	drwxr-xr-x  2 schacon  admin  68 Apr  9 09:11 rack
	$ ls rack/
	$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd project.git
	$ mv hooks/post-update.sample hooks/post-update
	$ chmod a+x hooks/post-update</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105146Z" creationid="Prikryl" creationdate="20151023T105146Z">
        <seg>$ cd project.git
	$ mv hooks/post-update.sample hooks/post-update
	$ chmod a+x hooks/post-update</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd ticgit
	$ git remote
	origin</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101813Z" creationid="Prikryl" creationdate="20151023T101813Z">
        <seg>$ cd ticgit
	$ git remote
	origin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd ~/.ssh
	$ ls
	authorized_keys2  id_dsa       known_hosts
	config            id_dsa.pub</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104932Z" creationid="Prikryl" creationdate="20151023T104932Z">
        <seg>$ cd ~/.ssh
	$ ls
	authorized_keys2  id_dsa       known_hosts
	config            id_dsa.pub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cd ~/gitolite-admin/
	$ ls
	conf/  keydir/
	$ find conf keydir -type f
	conf/gitolite.conf
	keydir/scott.pub
	$ cat conf/gitolite.conf</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105435Z" creationid="Prikryl" creationdate="20151023T105435Z">
        <seg>$ cd ~/gitolite-admin/
	$ ls
	conf/  keydir/
	$ find conf keydir -type f
	conf/gitolite.conf
	keydir/scott.pub
	$ cat conf/gitolite.conf</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ chgrp -R www-data /opt/git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105156Z" creationid="Prikryl" creationdate="20151023T105156Z">
        <seg>$ chgrp -R www-data /opt/git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ chmod -R go= ~/.ssh</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104946Z" creationid="Prikryl" creationdate="20151023T104946Z">
        <seg>$ chmod -R go= ~/.ssh</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cp -Rf my_project/.git my_project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104927Z" creationid="Prikryl" creationdate="20151023T104927Z">
        <seg>$ cp -Rf my_project/.git my_project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ cp /tmp/id_rsa.john.pub keydir/john.pub
	$ cp /tmp/id_rsa.josie.pub keydir/josie.pub
	$ cp /tmp/id_rsa.jessica.pub keydir/jessica.pub</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105420Z" creationid="Prikryl" creationdate="20151023T105420Z">
        <seg>$ cp /tmp/id_rsa.john.pub keydir/john.pub
	$ cp /tmp/id_rsa.josie.pub keydir/josie.pub
	$ cp /tmp/id_rsa.jessica.pub keydir/jessica.pub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ curl -L https://raw.github.com/mojombo/grit/master/lib/grit/repo.rb &gt; repo.rb
	$ git add repo.rb
	$ git commit -m 'added repo.rb'
	[master 484a592] added repo.rb
	 3 files changed, 459 insertions(+), 2 deletions(-)
	 delete mode 100644 bak/test.txt
	 create mode 100644 repo.rb
	 rewrite test.txt (100%)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091718Z" creationid="Prikryl" creationdate="20151024T091718Z">
        <seg>$ curl -L https://raw.github.com/mojombo/grit/master/lib/grit/repo.rb &gt; repo.rb
	$ git add repo.rb
	$ git commit -m 'added repo.rb'
	[master 484a592] added repo.rb
	 3 files changed, 459 insertions(+), 2 deletions(-)
	 delete mode 100644 bak/test.txt
	 create mode 100644 repo.rb
	 rewrite test.txt (100%)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ curl http://kernel.org/pub/software/scm/git/git-1.6.3.1.tar.bz2 &gt; git.tbz2
	$ git add git.tbz2
	$ git commit -am 'added git tarball'
	[master 6df7640] added git tarball
	 1 files changed, 0 insertions(+), 0 deletions(-)
	 create mode 100644 git.tbz2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091819Z" creationid="Prikryl" creationdate="20151024T091819Z">
        <seg>$ curl http://kernel.org/pub/software/scm/git/git-1.6.3.1.tar.bz2 &gt; git.tbz2
	$ git add git.tbz2
	$ git commit -am 'added git tarball'
	[master 6df7640] added git tarball
	 1 files changed, 0 insertions(+), 0 deletions(-)
	 create mode 100644 git.tbz2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ du -b .git/objects/05/408d195263d853f09dca71d55116663690c27c
	4109	.git/objects/05/408d195263d853f09dca71d55116663690c27c</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091723Z" creationid="Prikryl" creationdate="20151024T091723Z">
        <seg>$ du -b .git/objects/05/408d195263d853f09dca71d55116663690c27c
	4109	.git/objects/05/408d195263d853f09dca71d55116663690c27c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ du -b .git/objects/9b/c1dc421dcd51b4ac296e3e5b6e2a99cf44391e
	4102	.git/objects/9b/c1dc421dcd51b4ac296e3e5b6e2a99cf44391e</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091720Z" creationid="Prikryl" creationdate="20151024T091720Z">
        <seg>$ du -b .git/objects/9b/c1dc421dcd51b4ac296e3e5b6e2a99cf44391e
	4102	.git/objects/9b/c1dc421dcd51b4ac296e3e5b6e2a99cf44391e</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo "1a410efbd13591db07496601ebc7a059dd55cfe9" &gt; .git/refs/heads/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091634Z" creationid="Prikryl" creationdate="20151024T091634Z">
        <seg>$ echo "1a410efbd13591db07496601ebc7a059dd55cfe9" &gt; .git/refs/heads/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo '# $Date$' &gt; date_test.txt
	$ echo 'date*.txt filter=dater' &gt;&gt; .gitattributes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090808Z" creationid="Prikryl" creationdate="20151024T090808Z">
        <seg>$ echo '# $Date$' &gt; date_test.txt
	$ echo 'date*.txt filter=dater' &gt;&gt; .gitattributes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo '# testing' &gt;&gt; repo.rb
	$ git commit -am 'modified repo a bit'
	[master ab1afef] modified repo a bit
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091721Z" creationid="Prikryl" creationdate="20151024T091721Z">
        <seg>$ echo '# testing' &gt;&gt; repo.rb
	$ git commit -am 'modified repo a bit'
	[master ab1afef] modified repo a bit
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo '*.png diff=exif' &gt;&gt; .gitattributes
	$ git config diff.exif.textconv exiftool</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090732Z" creationid="Prikryl" creationdate="20151024T090732Z">
        <seg>$ echo '*.png diff=exif' &gt;&gt; .gitattributes
	$ git config diff.exif.textconv exiftool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo '*.txt ident' &gt;&gt; .gitattributes
	$ echo '$Id$' &gt; test.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090737Z" creationid="Prikryl" creationdate="20151024T090737Z">
        <seg>$ echo '*.txt ident' &gt;&gt; .gitattributes
	$ echo '$Id$' &gt; test.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo 'Last commit date: $Format:%cd$' &gt; LAST_COMMIT
	$ echo "LAST_COMMIT export-subst" &gt;&gt; .gitattributes
	$ git add LAST_COMMIT .gitattributes
	$ git commit -am 'adding LAST_COMMIT file for archives'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090812Z" creationid="Prikryl" creationdate="20151024T090812Z">
        <seg>$ echo 'Last commit date: $Format:%cd$' &gt; LAST_COMMIT
	$ echo "LAST_COMMIT export-subst" &gt;&gt; .gitattributes
	$ git add LAST_COMMIT .gitattributes
	$ git commit -am 'adding LAST_COMMIT file for archives'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo 'first commit' | git commit-tree d8329f
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091606Z" creationid="Prikryl" creationdate="20151024T091606Z">
        <seg>$ echo 'first commit' | git commit-tree d8329f
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo 'new file' &gt; new.txt
	$ git update-index test.txt
	$ git update-index --add new.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091539Z" creationid="Prikryl" creationdate="20151024T091539Z">
        <seg>$ echo 'new file' &gt; new.txt
	$ git update-index test.txt
	$ git update-index --add new.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo 'second commit' | git commit-tree 0155eb -p fdf4fc3
	cac0cab538b970a37ea1e769cbbde608743bc96d
	$ echo 'third commit'  | git commit-tree 3c4e9c -p cac0cab
	1a410efbd13591db07496601ebc7a059dd55cfe9</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091608Z" creationid="Prikryl" creationdate="20151024T091608Z">
        <seg>$ echo 'second commit' | git commit-tree 0155eb -p fdf4fc3
	cac0cab538b970a37ea1e769cbbde608743bc96d
	$ echo 'third commit'  | git commit-tree 3c4e9c -p cac0cab
	1a410efbd13591db07496601ebc7a059dd55cfe9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo 'test content' | git hash-object -w --stdin
	d670460b4b4aece5915caf5c68d12f560a9fe3e4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091526Z" creationid="Prikryl" creationdate="20151024T091526Z">
        <seg>$ echo 'test content' | git hash-object -w --stdin
	d670460b4b4aece5915caf5c68d12f560a9fe3e4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo 'version 1' &gt; test.txt
	$ git hash-object -w test.txt
	83baae61804e65cc73a7201a7252750c76066a30</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091529Z" creationid="Prikryl" creationdate="20151024T091529Z">
        <seg>$ echo 'version 1' &gt; test.txt
	$ git hash-object -w test.txt
	83baae61804e65cc73a7201a7252750c76066a30</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ echo 'version 2' &gt; test.txt
	$ git hash-object -w test.txt
	1f7a7a472abf3dd9643fd615f6da379c4acb3e3a</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091530Z" creationid="Prikryl" creationdate="20151024T091530Z">
        <seg>$ echo 'version 2' &gt; test.txt
	$ git hash-object -w test.txt
	1f7a7a472abf3dd9643fd615f6da379c4acb3e3a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ export P4PORT=public.perforce.com:1666</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091428Z" creationid="Prikryl" creationdate="20151024T091428Z">
        <seg>$ export P4PORT=public.perforce.com:1666</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ find .git/objects -type f
	.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
	.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
	.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
	.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
	.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
	.git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag
	.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
	.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
	.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
	.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091717Z" creationid="Prikryl" creationdate="20151024T091717Z">
        <seg>$ find .git/objects -type f
	.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
	.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
	.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
	.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
	.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
	.git/objects/95/85191f37f7b0fb9444f35a9bf50de191beadc2 # tag
	.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
	.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
	.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
	.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ find .git/objects -type f
	.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
	.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
	.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
	.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
	.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
	.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
	.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
	.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
	.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091622Z" creationid="Prikryl" creationdate="20151024T091622Z">
        <seg>$ find .git/objects -type f
	.git/objects/01/55eb4229851634a0f03eb265b69f5a2d56f341 # tree 2
	.git/objects/1a/410efbd13591db07496601ebc7a059dd55cfe9 # commit 3
	.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a # test.txt v2
	.git/objects/3c/4e9cd789d88d8d89c1073707c3585e41b0e614 # tree 3
	.git/objects/83/baae61804e65cc73a7201a7252750c76066a30 # test.txt v1
	.git/objects/ca/c0cab538b970a37ea1e769cbbde608743bc96d # commit 2
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4 # 'test content'
	.git/objects/d8/329fc1cc938780ffdd9f94e0d364e0ea74f579 # tree 1
	.git/objects/fa/49b077972391ad58037050f2a75f74e3671e92 # new.txt
	.git/objects/fd/f4fc3344e67ab068f836878b6c4951e3b15f3d # commit 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ find .git/objects -type f
	.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a
	.git/objects/83/baae61804e65cc73a7201a7252750c76066a30
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091531Z" creationid="Prikryl" creationdate="20151024T091531Z">
        <seg>$ find .git/objects -type f
	.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a
	.git/objects/83/baae61804e65cc73a7201a7252750c76066a30
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ find .git/objects -type f
	.git/objects/71/08f7ecb345ee9d0084193f147cdad4d2998293
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
	.git/objects/info/packs
	.git/objects/pack/pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.idx
	.git/objects/pack/pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.pack</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091730Z" creationid="Prikryl" creationdate="20151024T091730Z">
        <seg>$ find .git/objects -type f
	.git/objects/71/08f7ecb345ee9d0084193f147cdad4d2998293
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
	.git/objects/info/packs
	.git/objects/pack/pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.idx
	.git/objects/pack/pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.pack</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ find .git/objects -type f
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091527Z" creationid="Prikryl" creationdate="20151024T091527Z">
        <seg>$ find .git/objects -type f
	.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ find .git/refs
	.git/refs
	.git/refs/heads
	.git/refs/tags
	$ find .git/refs -type f
	$</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091633Z" creationid="Prikryl" creationdate="20151024T091633Z">
        <seg>$ find .git/refs
	.git/refs
	.git/refs/heads
	.git/refs/tags
	$ find .git/refs -type f
	$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ find .git/refs -type f
	.git/refs/heads/experiment
	.git/refs/heads/master
	.git/refs/tags/v1.0
	.git/refs/tags/v1.1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091810Z" creationid="Prikryl" creationdate="20151024T091810Z">
        <seg>$ find .git/refs -type f
	.git/refs/heads/experiment
	.git/refs/heads/master
	.git/refs/tags/v1.0
	.git/refs/tags/v1.1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add *.c
	$ git add README
	$ git commit -m 'initial project version'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204952Z" creationid="Prikryl" creationdate="20151022T204952Z">
        <seg>$ git add *.c
	$ git add README
	$ git commit -m 'initial project version'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add -i
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:    unchanged        +1/-1 index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221620Z" creationid="Prikryl" creationdate="20151023T221620Z">
        <seg>$ git add -i
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:    unchanged        +1/-1 index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add .</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101753Z" creationid="Prikryl" creationdate="20151023T101753Z">
        <seg>$ git add .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205050Z" creationid="Prikryl" creationdate="20151022T205050Z">
        <seg>$ git add README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add README test.rb LICENSE
	$ git commit -m 'initial commit of my project'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102452Z" creationid="Prikryl" creationdate="20151023T102452Z">
        <seg>$ git add README test.rb LICENSE
	$ git commit -m 'initial commit of my project'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add benchmarks.rb
	$ echo '# test line' &gt;&gt; benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   benchmarks.rb
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205620Z" creationid="Prikryl" creationdate="20151022T205620Z">
        <seg>$ git add benchmarks.rb
	$ echo '# test line' &gt;&gt; benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   benchmarks.rb
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README
	        modified:   benchmarks.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205105Z" creationid="Prikryl" creationdate="20151022T205105Z">
        <seg>$ git add benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README
	        modified:   benchmarks.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git add date_test.txt .gitattributes
	$ git commit -m "Testing date expansion in Git"
	$ rm date_test.txt
	$ git checkout date_test.txt
	$ cat date_test.txt
	# $Date: Tue Apr 21 07:26:52 2009 -0700$</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090809Z" creationid="Prikryl" creationdate="20151024T090809Z">
        <seg>$ git add date_test.txt .gitattributes
	$ git commit -m "Testing date expansion in Git"
	$ rm date_test.txt
	$ git checkout date_test.txt
	$ cat date_test.txt
	# $Date: Tue Apr 21 07:26:52 2009 -0700$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git am -3 -i mbox
	Commit Body is:
	--------------------------
	seeing if this helps the gem
	--------------------------
	Apply?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221318Z" creationid="Prikryl" creationdate="20151023T221318Z">
        <seg>$ git am -3 -i mbox
	Commit Body is:
	--------------------------
	seeing if this helps the gem
	--------------------------
	Apply?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git am -3 0001-seeing-if-this-helps-the-gem.patch
	Applying: seeing if this helps the gem
	error: patch failed: ticgit.gemspec:1
	error: ticgit.gemspec: patch does not apply
	Using index info to reconstruct a base tree...
	Falling back to patching base and 3-way merge...
	No changes -- Patch already applied.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221317Z" creationid="Prikryl" creationdate="20151023T221317Z">
        <seg>$ git am -3 0001-seeing-if-this-helps-the-gem.patch
	Applying: seeing if this helps the gem
	error: patch failed: ticgit.gemspec:1
	error: ticgit.gemspec: patch does not apply
	Using index info to reconstruct a base tree...
	Falling back to patching base and 3-way merge...
	No changes -- Patch already applied.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git am 0001-limit-log-function.patch
	Applying: add limit to log function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221111Z" creationid="Prikryl" creationdate="20151023T221111Z">
        <seg>$ git am 0001-limit-log-function.patch
	Applying: add limit to log function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git am 0001-seeing-if-this-helps-the-gem.patch
	Applying: seeing if this helps the gem
	error: patch failed: ticgit.gemspec:1
	error: ticgit.gemspec: patch does not apply
	Patch failed at 0001.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221116Z" creationid="Prikryl" creationdate="20151023T221116Z">
        <seg>$ git am 0001-seeing-if-this-helps-the-gem.patch
	Applying: seeing if this helps the gem
	error: patch failed: ticgit.gemspec:1
	error: ticgit.gemspec: patch does not apply
	Patch failed at 0001.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git apply --check 0001-seeing-if-this-helps-the-gem.patch
	error: patch failed: ticgit.gemspec:1
	error: ticgit.gemspec: patch does not apply</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221107Z" creationid="Prikryl" creationdate="20151023T221107Z">
        <seg>$ git apply --check 0001-seeing-if-this-helps-the-gem.patch
	error: patch failed: ticgit.gemspec:1
	error: ticgit.gemspec: patch does not apply</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git apply --whitespace=fix &lt;patch&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090345Z" creationid="Prikryl" creationdate="20151024T090345Z">
        <seg>$ git apply --whitespace=fix &lt;patch&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git apply --whitespace=warn &lt;patch&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090344Z" creationid="Prikryl" creationdate="20151024T090344Z">
        <seg>$ git apply --whitespace=warn &lt;patch&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git apply /tmp/patch-ruby-client.patch</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221106Z" creationid="Prikryl" creationdate="20151023T221106Z">
        <seg>$ git apply /tmp/patch-ruby-client.patch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git archive master --prefix='project/' --format=zip &gt; `git describe master`.zip</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221513Z" creationid="Prikryl" creationdate="20151023T221513Z">
        <seg>$ git archive master --prefix='project/' --format=zip &gt; `git describe master`.zip</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git archive master --prefix='project/' | gzip &gt; `git describe master`.tar.gz
	$ ls *.tar.gz
	v1.6.2-rc1-20-g8c5b85c.tar.gz</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221511Z" creationid="Prikryl" creationdate="20151023T221511Z">
        <seg>$ git archive master --prefix='project/' | gzip &gt; `git describe master`.tar.gz
	$ ls *.tar.gz
	v1.6.2-rc1-20-g8c5b85c.tar.gz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git bisect bad
	Bisecting: 1 revisions left to test after this
	[f71ce38690acf49c1f3c9bea38e09d82a5ce6014] drop exceptions table</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222943Z" creationid="Prikryl" creationdate="20151023T222943Z">
        <seg>$ git bisect bad
	Bisecting: 1 revisions left to test after this
	[f71ce38690acf49c1f3c9bea38e09d82a5ce6014] drop exceptions table</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git bisect good
	Bisecting: 3 revisions left to test after this
	[b047b02ea83310a70fd603dc8cd7a6cd13d15c04] secure this thing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222942Z" creationid="Prikryl" creationdate="20151023T222942Z">
        <seg>$ git bisect good
	Bisecting: 3 revisions left to test after this
	[b047b02ea83310a70fd603dc8cd7a6cd13d15c04] secure this thing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git bisect good
	b047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit
	commit b047b02ea83310a70fd603dc8cd7a6cd13d15c04
	Author: PJ Hyett &lt;pjhyett@example.com&gt;
	Date:   Tue Jan 27 14:48:32 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222944Z" creationid="Prikryl" creationdate="20151023T222944Z">
        <seg>$ git bisect good
	b047b02ea83310a70fd603dc8cd7a6cd13d15c04 is first bad commit
	commit b047b02ea83310a70fd603dc8cd7a6cd13d15c04
	Author: PJ Hyett &lt;pjhyett@example.com&gt;
	Date:   Tue Jan 27 14:48:32 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git bisect reset</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223011Z" creationid="Prikryl" creationdate="20151023T223011Z">
        <seg>$ git bisect reset</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git bisect start
	$ git bisect bad
	$ git bisect good v1.0
	Bisecting: 6 revisions left to test after this
	[ecb6e1bc347ccecc5f9350d878ce677feb13d3b2] error handling on repo</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222939Z" creationid="Prikryl" creationdate="20151023T222939Z">
        <seg>$ git bisect start
	$ git bisect bad
	$ git bisect good v1.0
	Bisecting: 6 revisions left to test after this
	[ecb6e1bc347ccecc5f9350d878ce677feb13d3b2] error handling on repo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git bisect start HEAD v1.0
	$ git bisect run test-error.sh</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223012Z" creationid="Prikryl" creationdate="20151023T223012Z">
        <seg>$ git bisect start HEAD v1.0
	$ git bisect run test-error.sh</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git blame -C -L 141,153 GITPackUpload.m
	f344f58d GITServerHandler.m (Scott 2009-01-04 141)
	f344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromC
	f344f58d GITServerHandler.m (Scott 2009-01-04 143) {
	70befddd GITServerHandler.m (Scott 2009-03-22 144)         //NSLog(@"GATHER COMMI
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [g
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@"GATHER COMMI
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 150)
	56ef2caf GITServerHandler.m (Scott 2009-01-05 151)         if(commit) {
	56ef2caf GITServerHandler.m (Scott 2009-01-05 152)                 [refDict setOb
	56ef2caf GITServerHandler.m (Scott 2009-01-05 153)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222938Z" creationid="Prikryl" creationdate="20151023T222938Z">
        <seg>$ git blame -C -L 141,153 GITPackUpload.m
	f344f58d GITServerHandler.m (Scott 2009-01-04 141)
	f344f58d GITServerHandler.m (Scott 2009-01-04 142) - (void) gatherObjectShasFromC
	f344f58d GITServerHandler.m (Scott 2009-01-04 143) {
	70befddd GITServerHandler.m (Scott 2009-03-22 144)         //NSLog(@"GATHER COMMI
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 145)
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 146)         NSString *parentSha;
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 147)         GITCommit *commit = [g
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 148)
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 149)         //NSLog(@"GATHER COMMI
	ad11ac80 GITPackUpload.m    (Scott 2009-03-24 150)
	56ef2caf GITServerHandler.m (Scott 2009-01-05 151)         if(commit) {
	56ef2caf GITServerHandler.m (Scott 2009-01-05 152)                 [refDict setOb
	56ef2caf GITServerHandler.m (Scott 2009-01-05 153)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git blame -L 12,22 simplegit.rb
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 12)  def show(tree = 'master')
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 13)   command("git show #{tree}")
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 14)  end
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 15)
	9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 16)  def log(tree = 'master')
	79eaf55d (Scott Chacon  2008-04-06 10:15:08 -0700 17)   command("git log #{tree}")
	9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 18)  end
	9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 19)
	42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 20)  def blame(path)
	42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 21)   command("git blame #{path}")
	42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 22)  end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222937Z" creationid="Prikryl" creationdate="20151023T222937Z">
        <seg>$ git blame -L 12,22 simplegit.rb
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 12)  def show(tree = 'master')
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 13)   command("git show #{tree}")
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 14)  end
	^4832fe2 (Scott Chacon  2008-03-15 10:31:28 -0700 15)
	9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 16)  def log(tree = 'master')
	79eaf55d (Scott Chacon  2008-04-06 10:15:08 -0700 17)   command("git log #{tree}")
	9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 18)  end
	9f6560e4 (Scott Chacon  2008-03-17 21:52:20 -0700 19)
	42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 20)  def blame(path)
	42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 21)   command("git blame #{path}")
	42cf2861 (Magnus Chacon 2008-04-13 10:45:01 -0700 22)  end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch
	  iss53
	* master
	  testing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103043Z" creationid="Prikryl" creationdate="20151023T103043Z">
        <seg>$ git branch
	  iss53
	* master
	  testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch --merged
	  iss53
	* master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103045Z" creationid="Prikryl" creationdate="20151023T103045Z">
        <seg>$ git branch --merged
	  iss53
	* master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch --no-merged
	  testing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103046Z" creationid="Prikryl" creationdate="20151023T103046Z">
        <seg>$ git branch --no-merged
	  testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch -D recover-branch
	$ rm -Rf .git/logs/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091818Z" creationid="Prikryl" creationdate="20151024T091818Z">
        <seg>$ git branch -D recover-branch
	$ rm -Rf .git/logs/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch -a
	* master
	  my-calc-branch
	  tags/2.0.2
	  tags/release-2.0.1
	  tags/release-2.0.2
	  tags/release-2.0.2rc1
	  trunk</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091113Z" creationid="Prikryl" creationdate="20151024T091113Z">
        <seg>$ git branch -a
	* master
	  my-calc-branch
	  tags/2.0.2
	  tags/release-2.0.1
	  tags/release-2.0.2
	  tags/release-2.0.2rc1
	  trunk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch -d client
	$ git branch -d server</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104821Z" creationid="Prikryl" creationdate="20151023T104821Z">
        <seg>$ git branch -d client
	$ git branch -d server</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch -d hotfix
	Deleted branch hotfix (was 3a0874c).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102507Z" creationid="Prikryl" creationdate="20151023T102507Z">
        <seg>$ git branch -d hotfix
	Deleted branch hotfix (was 3a0874c).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch -d iss53</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102620Z" creationid="Prikryl" creationdate="20151023T102620Z">
        <seg>$ git branch -d iss53</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch -d testing
	error: The branch 'testing' is not fully merged.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103047Z" creationid="Prikryl" creationdate="20151023T103047Z">
        <seg>$ git branch -d testing
	error: The branch 'testing' is not fully merged.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch -v
	  iss53   93b412c fix javascript issue
	* master  7a98805 Merge branch 'iss53'
	  testing 782fd34 add scott to the author list in the readmes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103044Z" creationid="Prikryl" creationdate="20151023T103044Z">
        <seg>$ git branch -v
	  iss53   93b412c fix javascript issue
	* master  7a98805 Merge branch 'iss53'
	  testing 782fd34 add scott to the author list in the readmes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch iss53
	$ git checkout iss53</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102501Z" creationid="Prikryl" creationdate="20151023T102501Z">
        <seg>$ git branch iss53
	$ git checkout iss53</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch opera remotes/opera</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091345Z" creationid="Prikryl" creationdate="20151024T091345Z">
        <seg>$ git branch opera remotes/opera</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch recover-branch ab1afef
	$ git log --pretty=oneline recover-branch
	ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
	484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091817Z" creationid="Prikryl" creationdate="20151024T091817Z">
        <seg>$ git branch recover-branch ab1afef
	$ git log --pretty=oneline recover-branch
	ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
	484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch sc/ruby_client master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221047Z" creationid="Prikryl" creationdate="20151023T221047Z">
        <seg>$ git branch sc/ruby_client master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git branch testing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102454Z" creationid="Prikryl" creationdate="20151023T102454Z">
        <seg>$ git branch testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a &gt; test.txt
	$ cat test.txt
	version 2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091532Z" creationid="Prikryl" creationdate="20151024T091532Z">
        <seg>$ git cat-file -p 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a &gt; test.txt
	$ cat test.txt
	version 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 &gt; test.txt
	$ cat test.txt
	version 1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091532Z" creationid="Prikryl" creationdate="20151024T091532Z">
        <seg>$ git cat-file -p 83baae61804e65cc73a7201a7252750c76066a30 &gt; test.txt
	$ cat test.txt
	version 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2
	object 1a410efbd13591db07496601ebc7a059dd55cfe9
	type commit
	tag v1.1
	tagger Scott Chacon &lt;schacon@gmail.com&gt; Sat May 23 16:48:58 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091705Z" creationid="Prikryl" creationdate="20151024T091705Z">
        <seg>$ git cat-file -p 9585191f37f7b0fb9444f35a9bf50de191beadc2
	object 1a410efbd13591db07496601ebc7a059dd55cfe9
	type commit
	tag v1.1
	tagger Scott Chacon &lt;schacon@gmail.com&gt; Sat May 23 16:48:58 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0
	100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091535Z" creationid="Prikryl" creationdate="20151024T091535Z">
        <seg>$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0
	100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p ca82a6dff817ec66f44342007202690a93763949
	tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
	parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	author Scott Chacon &lt;schacon@gmail.com&gt; 1205815931 -0700
	committer Scott Chacon &lt;schacon@gmail.com&gt; 1240030591 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091753Z" creationid="Prikryl" creationdate="20151024T091753Z">
        <seg>$ git cat-file -p ca82a6dff817ec66f44342007202690a93763949
	tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
	parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	author Scott Chacon &lt;schacon@gmail.com&gt; 1205815931 -0700
	committer Scott Chacon &lt;schacon@gmail.com&gt; 1240030591 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
	test content</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091528Z" creationid="Prikryl" creationdate="20151024T091528Z">
        <seg>$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
	test content</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p fdf4fc3
	tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	author Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700
	committer Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091607Z" creationid="Prikryl" creationdate="20151024T091607Z">
        <seg>$ git cat-file -p fdf4fc3
	tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	author Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700
	committer Scott Chacon &lt;schacon@gmail.com&gt; 1243040974 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p master^{tree}
	100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README
	100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile
	040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091534Z" creationid="Prikryl" creationdate="20151024T091534Z">
        <seg>$ git cat-file -p master^{tree}
	100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README
	100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile
	040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p master^{tree}
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 05408d195263d853f09dca71d55116663690c27c      repo.rb
	100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091722Z" creationid="Prikryl" creationdate="20151024T091722Z">
        <seg>$ git cat-file -p master^{tree}
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 05408d195263d853f09dca71d55116663690c27c      repo.rb
	100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -p master^{tree}
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 9bc1dc421dcd51b4ac296e3e5b6e2a99cf44391e      repo.rb
	100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091719Z" creationid="Prikryl" creationdate="20151024T091719Z">
        <seg>$ git cat-file -p master^{tree}
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 9bc1dc421dcd51b4ac296e3e5b6e2a99cf44391e      repo.rb
	100644 blob e3f094f522629ae358806b17daf78246c27c007b      test.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
	blob</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091533Z" creationid="Prikryl" creationdate="20151024T091533Z">
        <seg>$ git cat-file -t 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
	blob</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	tree</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091538Z" creationid="Prikryl" creationdate="20151024T091538Z">
        <seg>$ git cat-file -t d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	tree</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file blob junio-gpg-pub</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091708Z" creationid="Prikryl" creationdate="20151024T091708Z">
        <seg>$ git cat-file blob junio-gpg-pub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file commit ca82a6
	tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
	parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	author Scott Chacon &lt;schacon@gmail.com&gt; 1205815931 -0700
	committer Scott Chacon &lt;schacon@gmail.com&gt; 1240030591 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090827Z" creationid="Prikryl" creationdate="20151024T090827Z">
        <seg>$ git cat-file commit ca82a6
	tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf
	parent 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	author Scott Chacon &lt;schacon@gmail.com&gt; 1205815931 -0700
	committer Scott Chacon &lt;schacon@gmail.com&gt; 1240030591 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cat-file commit ca82a6 | sed '1,/^$/d'
	changed the version number</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090828Z" creationid="Prikryl" creationdate="20151024T090828Z">
        <seg>$ git cat-file commit ca82a6 | sed '1,/^$/d'
	changed the version number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -- benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   README.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101800Z" creationid="Prikryl" creationdate="20151023T101800Z">
        <seg>$ git checkout -- benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   README.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout --track origin/serverfix
	Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104700Z" creationid="Prikryl" creationdate="20151023T104700Z">
        <seg>$ git checkout --track origin/serverfix
	Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b featureB origin/master
	$ (work)
	$ git commit
	$ git push myfork featureB
	$ (email maintainer)
	$ git fetch origin</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220929Z" creationid="Prikryl" creationdate="20151023T220929Z">
        <seg>$ git checkout -b featureB origin/master
	$ (work)
	$ git commit
	$ git push myfork featureB
	$ (email maintainer)
	$ git fetch origin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b featureBv2 origin/master
	$ git merge --no-commit --squash featureB
	$ (change implementation)
	$ git commit
	$ git push myfork featureBv2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220948Z" creationid="Prikryl" creationdate="20151023T220948Z">
        <seg>$ git checkout -b featureBv2 origin/master
	$ git merge --no-commit --squash featureB
	$ (change implementation)
	$ git commit
	$ git push myfork featureBv2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b hotfix
	Switched to a new branch 'hotfix'
	$ vim index.html
	$ git commit -a -m 'fix the broken email address'
	[hotfix 3a0874c] fix the broken email address
	 1 files changed, 1 deletion(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102504Z" creationid="Prikryl" creationdate="20151023T102504Z">
        <seg>$ git checkout -b hotfix
	Switched to a new branch 'hotfix'
	$ vim index.html
	$ git commit -a -m 'fix the broken email address'
	[hotfix 3a0874c] fix the broken email address
	 1 files changed, 1 deletion(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b iss53
	Switched to a new branch 'iss53'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102500Z" creationid="Prikryl" creationdate="20151023T102500Z">
        <seg>$ git checkout -b iss53
	Switched to a new branch 'iss53'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b rack
	Switched to a new branch "rack"
	$ git submodule add git@github.com:schacon/rack.git rack
	Initialized empty Git repository in /opt/myproj/rack/.git/
	...
	Receiving objects: 100% (3184/3184), 677.42 KiB | 34 KiB/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223111Z" creationid="Prikryl" creationdate="20151023T223111Z">
        <seg>$ git checkout -b rack
	Switched to a new branch "rack"
	$ git submodule add git@github.com:schacon/rack.git rack
	Initialized empty Git repository in /opt/myproj/rack/.git/
	...
	Receiving objects: 100% (3184/3184), 677.42 KiB | 34 KiB/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b sc/ruby_client master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221103Z" creationid="Prikryl" creationdate="20151023T221103Z">
        <seg>$ git checkout -b sc/ruby_client master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b serverfix origin/serverfix
	Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104637Z" creationid="Prikryl" creationdate="20151023T104637Z">
        <seg>$ git checkout -b serverfix origin/serverfix
	Branch serverfix set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b sf origin/serverfix
	Branch sf set up to track remote branch serverfix from origin.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104701Z" creationid="Prikryl" creationdate="20151023T104701Z">
        <seg>$ git checkout -b sf origin/serverfix
	Branch sf set up to track remote branch serverfix from origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout -b topicA
	$ (work)
	$ git commit
	$ (work)
	$ git commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220959Z" creationid="Prikryl" creationdate="20151023T220959Z">
        <seg>$ git checkout -b topicA
	$ (work)
	$ git commit
	$ (work)
	$ git commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout experiment
	$ git rebase master
	First, rewinding head to replay your work on top of it...
	Applying: added staged command</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104724Z" creationid="Prikryl" creationdate="20151023T104724Z">
        <seg>$ git checkout experiment
	$ git rebase master
	First, rewinding head to replay your work on top of it...
	Applying: added staged command</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout featureA
	$ git rebase origin/master
	$ git push -f myfork featureA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220938Z" creationid="Prikryl" creationdate="20151023T220938Z">
        <seg>$ git checkout featureA
	$ git rebase origin/master
	$ git push -f myfork featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout featureA
	Switched to branch "featureA"
	$ git merge origin/featureA
	Updating 3300904..aad881d
	Fast forward
	 lib/simplegit.rb |   10 +++++++++-
	1 files changed, 9 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220913Z" creationid="Prikryl" creationdate="20151023T220913Z">
        <seg>$ git checkout featureA
	Switched to branch "featureA"
	$ git merge origin/featureA
	Updating 3300904..aad881d
	Fast forward
	 lib/simplegit.rb |   10 +++++++++-
	1 files changed, 9 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout iss53
	Switched to branch 'iss53'
	$ vim index.html
	$ git commit -a -m 'finish the new footer [issue 53]'
	[iss53 ad82d7a] finish the new footer [issue 53]
	 1 file changed, 1 insertion(+)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102519Z" creationid="Prikryl" creationdate="20151023T102519Z">
        <seg>$ git checkout iss53
	Switched to branch 'iss53'
	$ vim index.html
	$ git commit -a -m 'finish the new footer [issue 53]'
	[iss53 ad82d7a] finish the new footer [issue 53]
	 1 file changed, 1 insertion(+)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102457Z" creationid="Prikryl" creationdate="20151023T102457Z">
        <seg>$ git checkout master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	$ git merge --squash -s subtree --no-commit rack_branch
	Squash commit -- not updating HEAD
	Automatic merge went well; stopped before committing as requested</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223137Z" creationid="Prikryl" creationdate="20151023T223137Z">
        <seg>$ git checkout master
	$ git merge --squash -s subtree --no-commit rack_branch
	Squash commit -- not updating HEAD
	Automatic merge went well; stopped before committing as requested</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	$ git merge client</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104800Z" creationid="Prikryl" creationdate="20151023T104800Z">
        <seg>$ git checkout master
	$ git merge client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	$ git merge hotfix
	Updating f42c576..3a0874c
	Fast-forward
	 README | 1 -
	 1 file changed, 1 deletion(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102505Z" creationid="Prikryl" creationdate="20151023T102505Z">
        <seg>$ git checkout master
	$ git merge hotfix
	Updating f42c576..3a0874c
	Fast-forward
	 README | 1 -
	 1 file changed, 1 deletion(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	$ git merge iss53
	Auto-merging README
	Merge made by the 'recursive' strategy.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102544Z" creationid="Prikryl" creationdate="20151023T102544Z">
        <seg>$ git checkout master
	$ git merge iss53
	Auto-merging README
	Merge made by the 'recursive' strategy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	$ git merge server</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104818Z" creationid="Prikryl" creationdate="20151023T104818Z">
        <seg>$ git checkout master
	$ git merge server</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	Switched to branch "master"
	Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220608Z" creationid="Prikryl" creationdate="20151023T220608Z">
        <seg>$ git checkout master
	Switched to branch "master"
	Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	Switched to branch 'master'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102503Z" creationid="Prikryl" creationdate="20151023T102503Z">
        <seg>$ git checkout master
	Switched to branch 'master'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout master
	error: Untracked working tree file 'rack/AUTHORS' would be overwritten by merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223120Z" creationid="Prikryl" creationdate="20151023T223120Z">
        <seg>$ git checkout master
	error: Untracked working tree file 'rack/AUTHORS' would be overwritten by merge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout rack_branch
	$ git pull</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223136Z" creationid="Prikryl" creationdate="20151023T223136Z">
        <seg>$ git checkout rack_branch
	$ git pull</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git checkout testing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102455Z" creationid="Prikryl" creationdate="20151023T102455Z">
        <seg>$ git checkout testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf
	Finished one cherry-pick.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221442Z" creationid="Prikryl" creationdate="20151023T221442Z">
        <seg>$ git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf
	Finished one cherry-pick.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone (url)
	$ cd project
	$ git checkout -b featureA
	$ (work)
	$ git commit
	$ (work)
	$ git commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220756Z" creationid="Prikryl" creationdate="20151023T220756Z">
        <seg>$ git clone (url)
	$ cd project
	$ git checkout -b featureA
	$ (work)
	$ git commit
	$ (work)
	$ git commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone --bare my_project my_project.git
	Cloning into bare repository 'my_project.git'...
	done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104926Z" creationid="Prikryl" creationdate="20151023T104926Z">
        <seg>$ git clone --bare my_project my_project.git
	Cloning into bare repository 'my_project.git'...
	done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone /opt/git/project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104910Z" creationid="Prikryl" creationdate="20151023T104910Z">
        <seg>$ git clone /opt/git/project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone file:///opt/git/project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104915Z" creationid="Prikryl" creationdate="20151023T104915Z">
        <seg>$ git clone file:///opt/git/project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://git.kernel.org/pub/scm/git/git.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204807Z" creationid="Prikryl" creationdate="20151022T204807Z">
        <seg>$ git clone git://git.kernel.org/pub/scm/git/git.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://git.kernel.org/pub/scm/git/git.git
	$ cd git/
	$ make GITWEB_PROJECTROOT="/opt/git" \
	        prefix=/usr gitweb
	$ sudo cp -Rf gitweb /var/www/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105228Z" creationid="Prikryl" creationdate="20151023T105228Z">
        <seg>$ git clone git://git.kernel.org/pub/scm/git/git.git
	$ cd git/
	$ make GITWEB_PROJECTROOT="/opt/git" \
	        prefix=/usr gitweb
	$ sudo cp -Rf gitweb /var/www/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://git.kernel.org/pub/scm/git/git.git
	$ cd git/contrib/fast-import</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091425Z" creationid="Prikryl" creationdate="20151024T091425Z">
        <seg>$ git clone git://git.kernel.org/pub/scm/git/git.git
	$ cd git/contrib/fast-import</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://github.com/schacon/grit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205013Z" creationid="Prikryl" creationdate="20151022T205013Z">
        <seg>$ git clone git://github.com/schacon/grit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://github.com/schacon/grit.git mygrit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205016Z" creationid="Prikryl" creationdate="20151022T205016Z">
        <seg>$ git clone git://github.com/schacon/grit.git mygrit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://github.com/schacon/myproject.git
	Initialized empty Git repository in /opt/myproject/.git/
	remote: Counting objects: 6, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223038Z" creationid="Prikryl" creationdate="20151023T223038Z">
        <seg>$ git clone git://github.com/schacon/myproject.git
	Initialized empty Git repository in /opt/myproject/.git/
	remote: Counting objects: 6, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://github.com/schacon/ticgit.git
	Cloning into 'ticgit'...
	remote: Reusing existing pack: 1857, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101802Z" creationid="Prikryl" creationdate="20151023T101802Z">
        <seg>$ git clone git://github.com/schacon/ticgit.git
	Cloning into 'ticgit'...
	remote: Reusing existing pack: 1857, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git://github.com/sitaramc/gitolite
	$ gitolite/install -ln
	    # assumes $HOME/bin exists and is in your $PATH
	$ gitolite setup -pk $HOME/scott.pub</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105433Z" creationid="Prikryl" creationdate="20151023T105433Z">
        <seg>$ git clone git://github.com/sitaramc/gitolite
	$ gitolite/install -ln
	    # assumes $HOME/bin exists and is in your $PATH
	$ gitolite setup -pk $HOME/scott.pub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone git@gitserver:/opt/git/project.git
	$ cd project
	$ vim README
	$ git commit -am 'fix for the README file'
	$ git push origin master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105001Z" creationid="Prikryl" creationdate="20151023T105001Z">
        <seg>$ git clone git@gitserver:/opt/git/project.git
	$ cd project
	$ vim README
	$ git commit -am 'fix for the README file'
	$ git push origin master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone http://example.com/gitproject.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104924Z" creationid="Prikryl" creationdate="20151023T104924Z">
        <seg>$ git clone http://example.com/gitproject.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone http://git.gitserver/project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105211Z" creationid="Prikryl" creationdate="20151023T105211Z">
        <seg>$ git clone http://git.gitserver/project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone http://github.com/schacon/simplegit-progit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091748Z" creationid="Prikryl" creationdate="20151024T091748Z">
        <seg>$ git clone http://github.com/schacon/simplegit-progit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone http://github.com/schacon/simplegit-progit.git
	Initialized empty Git repository in /private/tmp/simplegit-progit/.git/
	got ca82a6dff817ec66f44342007202690a93763949
	walk ca82a6dff817ec66f44342007202690a93763949
	got 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	Getting alternates list for http://github.com/schacon/simplegit-progit.git
	Getting pack list for http://github.com/schacon/simplegit-progit.git
	Getting index for pack 816a9b2334da9953e530f27bcac22082a9f5b835
	Getting pack 816a9b2334da9953e530f27bcac22082a9f5b835
	 which contains cfda3bf379e4f8dba8717dee55aab78aef7f4daf
	walk 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	walk a11bef06a3f659402fe7563abf99ad00de2209e6</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091800Z" creationid="Prikryl" creationdate="20151024T091800Z">
        <seg>$ git clone http://github.com/schacon/simplegit-progit.git
	Initialized empty Git repository in /private/tmp/simplegit-progit/.git/
	got ca82a6dff817ec66f44342007202690a93763949
	walk ca82a6dff817ec66f44342007202690a93763949
	got 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	Getting alternates list for http://github.com/schacon/simplegit-progit.git
	Getting pack list for http://github.com/schacon/simplegit-progit.git
	Getting index for pack 816a9b2334da9953e530f27bcac22082a9f5b835
	Getting pack 816a9b2334da9953e530f27bcac22082a9f5b835
	 which contains cfda3bf379e4f8dba8717dee55aab78aef7f4daf
	walk 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	walk a11bef06a3f659402fe7563abf99ad00de2209e6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone https://github.com/tv42/gitosis.git
	$ cd gitosis
	$ sudo python setup.py install</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105233Z" creationid="Prikryl" creationdate="20151023T105233Z">
        <seg>$ git clone https://github.com/tv42/gitosis.git
	$ cd gitosis
	$ sudo python setup.py install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone ssh://user@server/project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104919Z" creationid="Prikryl" creationdate="20151023T104919Z">
        <seg>$ git clone ssh://user@server/project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone user@git.example.com:/opt/git/my_project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104930Z" creationid="Prikryl" creationdate="20151023T104930Z">
        <seg>$ git clone user@git.example.com:/opt/git/my_project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git clone user@server:project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104921Z" creationid="Prikryl" creationdate="20151023T104921Z">
        <seg>$ git clone user@server:project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git co&lt;tab&gt;&lt;tab&gt;
	commit config</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102310Z" creationid="Prikryl" creationdate="20151023T102310Z">
        <seg>$ git co&lt;tab&gt;&lt;tab&gt;
	commit config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git com
	git: 'com' is not a git-command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090223Z" creationid="Prikryl" creationdate="20151024T090223Z">
        <seg>$ git com
	git: 'com' is not a git-command.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205646Z" creationid="Prikryl" creationdate="20151022T205646Z">
        <seg>$ git commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit --amend</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101741Z" creationid="Prikryl" creationdate="20151023T101741Z">
        <seg>$ git commit --amend</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -am 'Adding git-svn instructions to the README'
	[master 97031e5] Adding git-svn instructions to the README
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091118Z" creationid="Prikryl" creationdate="20151024T091118Z">
        <seg>$ git commit -am 'Adding git-svn instructions to the README'
	[master 97031e5] Adding git-svn instructions to the README
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -am 'add iphone_project and mobile group'
	[master 8962da8] add iphone_project and mobile group
	 1 file changed, 4 insertions(+)
	$ git push origin master
	Counting objects: 5, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105407Z" creationid="Prikryl" creationdate="20151023T105407Z">
        <seg>$ git commit -am 'add iphone_project and mobile group'
	[master 8962da8] add iphone_project and mobile group
	 1 file changed, 4 insertions(+)
	$ git push origin master
	Counting objects: 5, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -am 'added rack submodule'
	[rack cc49a69] added rack submodule
	 2 files changed, 4 insertions(+), 0 deletions(-)
	 create mode 100644 .gitmodules
	 create mode 160000 rack
	$ git checkout master
	Switched to branch "master"
	$ git status
	# On branch master
	# Untracked files:
	#   (use "git add &lt;file&gt;..." to include in what will be committed)
	#
	#      rack/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223113Z" creationid="Prikryl" creationdate="20151023T223113Z">
        <seg>$ git commit -am 'added rack submodule'
	[rack cc49a69] added rack submodule
	 2 files changed, 4 insertions(+), 0 deletions(-)
	 create mode 100644 .gitmodules
	 create mode 160000 rack
	$ git checkout master
	Switched to branch "master"
	$ git status
	# On branch master
	# Untracked files:
	#   (use "git add &lt;file&gt;..." to include in what will be committed)
	#
	#      rack/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -am 'small tweak'
	[featureA 774b3ed] small tweak
	 1 files changed, 1 insertions(+), 1 deletions(-)
	$ git push origin featureA
	...
	To jessica@githost:simplegit.git
	   3300904..774b3ed  featureA -&gt; featureA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220735Z" creationid="Prikryl" creationdate="20151023T220735Z">
        <seg>$ git commit -am 'small tweak'
	[featureA 774b3ed] small tweak
	 1 files changed, 1 insertions(+), 1 deletions(-)
	$ git push origin featureA
	...
	To jessica@githost:simplegit.git
	   3300904..774b3ed  featureA -&gt; featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -am 'test [ref: 132]'
	[master e05c914] test [ref: 132]
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090913Z" creationid="Prikryl" creationdate="20151024T090913Z">
        <seg>$ git commit -am 'test [ref: 132]'
	[master e05c914] test [ref: 132]
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -am 'test'
	[POLICY] Your message is not formatted correctly</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090912Z" creationid="Prikryl" creationdate="20151024T090912Z">
        <seg>$ git commit -am 'test'
	[POLICY] Your message is not formatted correctly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -m "Story 182: Fix benchmarks for speed"
	[master 463dc4f] Story 182: Fix benchmarks for speed
	 2 files changed, 3 insertions(+)
	 create mode 100644 README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205722Z" creationid="Prikryl" creationdate="20151022T205722Z">
        <seg>$ git commit -m "Story 182: Fix benchmarks for speed"
	[master 463dc4f] Story 182: Fix benchmarks for speed
	 2 files changed, 3 insertions(+)
	 create mode 100644 README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -m 'first commit with submodule rack'
	[master 0550271] first commit with submodule rack
	 2 files changed, 4 insertions(+), 0 deletions(-)
	 create mode 100644 .gitmodules
	 create mode 160000 rack</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223026Z" creationid="Prikryl" creationdate="20151023T223026Z">
        <seg>$ git commit -m 'first commit with submodule rack'
	[master 0550271] first commit with submodule rack
	 2 files changed, 4 insertions(+), 0 deletions(-)
	 create mode 100644 .gitmodules
	 create mode 160000 rack</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -m 'initial commit'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105610Z" creationid="Prikryl" creationdate="20151023T105610Z">
        <seg>$ git commit -m 'initial commit'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -m 'initial commit'
	$ git add forgotten_file
	$ git commit --amend</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101743Z" creationid="Prikryl" creationdate="20151023T101743Z">
        <seg>$ git commit -m 'initial commit'
	$ git add forgotten_file
	$ git commit --amend</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git commit -m 'initial commit'
	$ git remote add origin git@gitserver:/opt/git/project.git
	$ git push origin master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104952Z" creationid="Prikryl" creationdate="20151023T104952Z">
        <seg>$ git commit -m 'initial commit'
	$ git remote add origin git@gitserver:/opt/git/project.git
	$ git push origin master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global alias.co checkout
	$ git config --global alias.br branch
	$ git config --global alias.ci commit
	$ git config --global alias.st status</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102330Z" creationid="Prikryl" creationdate="20151023T102330Z">
        <seg>$ git config --global alias.co checkout
	$ git config --global alias.br branch
	$ git config --global alias.ci commit
	$ git config --global alias.st status</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global alias.last 'log -1 HEAD'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102335Z" creationid="Prikryl" creationdate="20151023T102335Z">
        <seg>$ git config --global alias.last 'log -1 HEAD'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global alias.stash-unapply '!git stash show -p | git apply -R'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222627Z" creationid="Prikryl" creationdate="20151023T222627Z">
        <seg>$ git config --global alias.stash-unapply '!git stash show -p | git apply -R'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global alias.unstage 'reset HEAD --'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102332Z" creationid="Prikryl" creationdate="20151023T102332Z">
        <seg>$ git config --global alias.unstage 'reset HEAD --'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global alias.visual '!gitk'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102449Z" creationid="Prikryl" creationdate="20151023T102449Z">
        <seg>$ git config --global alias.visual '!gitk'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global color.diff.meta "blue black bold"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090239Z" creationid="Prikryl" creationdate="20151024T090239Z">
        <seg>$ git config --global color.diff.meta "blue black bold"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global color.ui true</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090236Z" creationid="Prikryl" creationdate="20151024T090236Z">
        <seg>$ git config --global color.ui true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global commit.template $HOME/.gitmessage.txt
	$ git commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223154Z" creationid="Prikryl" creationdate="20151023T223154Z">
        <seg>$ git config --global commit.template $HOME/.gitmessage.txt
	$ git commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global core.autocrlf false</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090341Z" creationid="Prikryl" creationdate="20151024T090341Z">
        <seg>$ git config --global core.autocrlf false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global core.autocrlf input</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090340Z" creationid="Prikryl" creationdate="20151024T090340Z">
        <seg>$ git config --global core.autocrlf input</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global core.autocrlf true</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090339Z" creationid="Prikryl" creationdate="20151024T090339Z">
        <seg>$ git config --global core.autocrlf true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global core.editor emacs</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204903Z" creationid="Prikryl" creationdate="20151022T204903Z">
        <seg>$ git config --global core.editor emacs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global core.pager ''</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223158Z" creationid="Prikryl" creationdate="20151023T223158Z">
        <seg>$ git config --global core.pager ''</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global core.whitespace \
	    trailing-space,space-before-tab,indent-with-non-tab</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090343Z" creationid="Prikryl" creationdate="20151024T090343Z">
        <seg>$ git config --global core.whitespace \
	    trailing-space,space-before-tab,indent-with-non-tab</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global filter.indent.clean indent
	$ git config --global filter.indent.smudge cat</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090759Z" creationid="Prikryl" creationdate="20151024T090759Z">
        <seg>$ git config --global filter.indent.clean indent
	$ git config --global filter.indent.smudge cat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global merge.tool extMerge
	$ git config --global mergetool.extMerge.cmd \
	    'extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"'
	$ git config --global mergetool.trustExitCode false
	$ git config --global diff.external extDiff</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090306Z" creationid="Prikryl" creationdate="20151024T090306Z">
        <seg>$ git config --global merge.tool extMerge
	$ git config --global mergetool.extMerge.cmd \
	    'extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"'
	$ git config --global mergetool.trustExitCode false
	$ git config --global diff.external extDiff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global merge.tool kdiff3</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090337Z" creationid="Prikryl" creationdate="20151024T090337Z">
        <seg>$ git config --global merge.tool kdiff3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global merge.tool vimdiff</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204909Z" creationid="Prikryl" creationdate="20151022T204909Z">
        <seg>$ git config --global merge.tool vimdiff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204853Z" creationid="Prikryl" creationdate="20151022T204853Z">
        <seg>$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --global user.signingkey &lt;gpg-key-id&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223200Z" creationid="Prikryl" creationdate="20151023T223200Z">
        <seg>$ git config --global user.signingkey &lt;gpg-key-id&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --help</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223142Z" creationid="Prikryl" creationdate="20151023T223142Z">
        <seg>$ git config --help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --list
	user.name=Scott Chacon
	user.email=schacon@gmail.com
	color.status=auto
	color.branch=auto
	color.interactive=auto
	color.diff=auto
	...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204917Z" creationid="Prikryl" creationdate="20151022T204917Z">
        <seg>$ git config --list
	user.name=Scott Chacon
	user.email=schacon@gmail.com
	color.status=auto
	color.branch=auto
	color.interactive=auto
	color.diff=auto
	...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --system receive.denyDeletes true</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090348Z" creationid="Prikryl" creationdate="20151024T090348Z">
        <seg>$ git config --system receive.denyDeletes true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --system receive.denyNonFastForwards true</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090347Z" creationid="Prikryl" creationdate="20151024T090347Z">
        <seg>$ git config --system receive.denyNonFastForwards true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config --system receive.fsckObjects true</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090346Z" creationid="Prikryl" creationdate="20151024T090346Z">
        <seg>$ git config --system receive.fsckObjects true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config diff.word.textconv catdoc</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090355Z" creationid="Prikryl" creationdate="20151024T090355Z">
        <seg>$ git config diff.word.textconv catdoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config filter.dater.smudge expand_date
	$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090807Z" creationid="Prikryl" creationdate="20151024T090807Z">
        <seg>$ git config filter.dater.smudge expand_date
	$ git config filter.dater.clean 'perl -pe "s/\\\$Date[^\\\$]*\\\$/\\\$Date\\\$/"'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git config user.name
	Scott Chacon</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204921Z" creationid="Prikryl" creationdate="20151022T204921Z">
        <seg>$ git config user.name
	Scott Chacon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git count-objects -v
	count: 4
	size: 16
	in-pack: 21
	packs: 1
	size-pack: 2016
	prune-packable: 0
	garbage: 0</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091824Z" creationid="Prikryl" creationdate="20151024T091824Z">
        <seg>$ git count-objects -v
	count: 4
	size: 16
	in-pack: 21
	packs: 1
	size-pack: 2016
	prune-packable: 0
	garbage: 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git count-objects -v
	count: 8
	size: 2040
	in-pack: 19
	packs: 1
	size-pack: 7
	prune-packable: 0
	garbage: 0</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091833Z" creationid="Prikryl" creationdate="20151024T091833Z">
        <seg>$ git count-objects -v
	count: 8
	size: 2040
	in-pack: 19
	packs: 1
	size-pack: 7
	prune-packable: 0
	garbage: 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git describe master
	v1.6.2-rc1-20-g8c5b85c</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221510Z" creationid="Prikryl" creationdate="20151023T221510Z">
        <seg>$ git describe master
	v1.6.2-rc1-20-g8c5b85c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff
	diff --git a/benchmarks.rb b/benchmarks.rb
	index 3cb747f..da65585 100644
	--- a/benchmarks.rb
	+++ b/benchmarks.rb
	@@ -36,6 +36,10 @@ def main
	           @commit.parents[0].parents[0].parents[0]
	         end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205602Z" creationid="Prikryl" creationdate="20151022T205602Z">
        <seg>$ git diff
	diff --git a/benchmarks.rb b/benchmarks.rb
	index 3cb747f..da65585 100644
	--- a/benchmarks.rb
	+++ b/benchmarks.rb
	@@ -36,6 +36,10 @@ def main
	           @commit.parents[0].parents[0].parents[0]
	         end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff
	diff --git a/benchmarks.rb b/benchmarks.rb
	index e445e28..86b2f7c 100644
	--- a/benchmarks.rb
	+++ b/benchmarks.rb
	@@ -127,3 +127,4 @@ end
	 main()</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205624Z" creationid="Prikryl" creationdate="20151022T205624Z">
        <seg>$ git diff
	diff --git a/benchmarks.rb b/benchmarks.rb
	index e445e28..86b2f7c 100644
	--- a/benchmarks.rb
	+++ b/benchmarks.rb
	@@ -127,3 +127,4 @@ end
	 main()</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff
	diff --git a/chapter1.doc b/chapter1.doc
	index 88839c4..4afcb7c 100644
	Binary files a/chapter1.doc and b/chapter1.doc differ</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090352Z" creationid="Prikryl" creationdate="20151024T090352Z">
        <seg>$ git diff
	diff --git a/chapter1.doc b/chapter1.doc
	index 88839c4..4afcb7c 100644
	Binary files a/chapter1.doc and b/chapter1.doc differ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff
	diff --git a/chapter1.doc b/chapter1.doc
	index c1c8a0a..b93c9e4 100644
	--- a/chapter1.doc
	+++ b/chapter1.doc
	@@ -128,7 +128,7 @@ and data size)
	 Since its birth in 2005, Git has evolved and matured to be easy to use
	 and yet retain these initial qualities.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090357Z" creationid="Prikryl" creationdate="20151024T090357Z">
        <seg>$ git diff
	diff --git a/chapter1.doc b/chapter1.doc
	index c1c8a0a..b93c9e4 100644
	--- a/chapter1.doc
	+++ b/chapter1.doc
	@@ -128,7 +128,7 @@ and data size)
	 Since its birth in 2005, Git has evolved and matured to be easy to use
	 and yet retain these initial qualities.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff
	diff --git a/rack b/rack
	index 6c5e70b..08d709f 160000
	--- a/rack
	+++ b/rack
	@@ -1 +1 @@
	-Subproject commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
	+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223053Z" creationid="Prikryl" creationdate="20151023T223053Z">
        <seg>$ git diff
	diff --git a/rack b/rack
	index 6c5e70b..08d709f 160000
	--- a/rack
	+++ b/rack
	@@ -1 +1 @@
	-Subproject commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
	+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff --cached
	diff --git a/README b/README
	new file mode 100644
	index 0000000..03902a1
	--- /dev/null
	+++ b/README2
	@@ -0,0 +1,5 @@
	+grit
	+ by Tom Preston-Werner, Chris Wanstrath
	+ http://github.com/mojombo/grit
	+
	+Grit is a Ruby library for extracting information from a Git repository</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205614Z" creationid="Prikryl" creationdate="20151022T205614Z">
        <seg>$ git diff --cached
	diff --git a/README b/README
	new file mode 100644
	index 0000000..03902a1
	--- /dev/null
	+++ b/README2
	@@ -0,0 +1,5 @@
	+grit
	+ by Tom Preston-Werner, Chris Wanstrath
	+ http://github.com/mojombo/grit
	+
	+Grit is a Ruby library for extracting information from a Git repository</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff --cached
	diff --git a/benchmarks.rb b/benchmarks.rb
	index 3cb747f..e445e28 100644
	--- a/benchmarks.rb
	+++ b/benchmarks.rb
	@@ -36,6 +36,10 @@ def main
	          @commit.parents[0].parents[0].parents[0]
	        end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205634Z" creationid="Prikryl" creationdate="20151022T205634Z">
        <seg>$ git diff --cached
	diff --git a/benchmarks.rb b/benchmarks.rb
	index 3cb747f..e445e28 100644
	--- a/benchmarks.rb
	+++ b/benchmarks.rb
	@@ -36,6 +36,10 @@ def main
	          @commit.parents[0].parents[0].parents[0]
	        end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff --cached rack
	diff --git a/rack b/rack
	new file mode 160000
	index 0000000..08d709f
	--- /dev/null
	+++ b/rack
	@@ -0,0 +1 @@
	+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223024Z" creationid="Prikryl" creationdate="20151023T223024Z">
        <seg>$ git diff --cached rack
	diff --git a/rack b/rack
	new file mode 160000
	index 0000000..08d709f
	--- /dev/null
	+++ b/rack
	@@ -0,0 +1 @@
	+Subproject commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff --check
	lib/simplegit.rb:5: trailing whitespace.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110949Z" creationid="Prikryl" creationdate="20151023T110949Z">
        <seg>$ git diff --check
	lib/simplegit.rb:5: trailing whitespace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff 32d1776b1^ 32d1776b1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090309Z" creationid="Prikryl" creationdate="20151024T090309Z">
        <seg>$ git diff 32d1776b1^ 32d1776b1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221404Z" creationid="Prikryl" creationdate="20151023T221404Z">
        <seg>$ git diff master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff master...contrib</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221407Z" creationid="Prikryl" creationdate="20151023T221407Z">
        <seg>$ git diff master...contrib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff-tree -p rack_branch</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223139Z" creationid="Prikryl" creationdate="20151023T223139Z">
        <seg>$ git diff-tree -p rack_branch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git diff-tree -p rack_remote/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223140Z" creationid="Prikryl" creationdate="20151023T223140Z">
        <seg>$ git diff-tree -p rack_remote/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch [remote-name]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T170909Z" creationid="Prikryl" creationdate="20151023T101827Z">
        <seg>$ git fetch [název vzdáleného repozitáře]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch origin
	...
	From jessica@githost:simplegit
	   3300904..aad881d  featureA   -&gt; origin/featureA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220729Z" creationid="Prikryl" creationdate="20151023T220729Z">
        <seg>$ git fetch origin
	...
	From jessica@githost:simplegit
	   3300904..aad881d  featureA   -&gt; origin/featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch origin
	...
	From jessica@githost:simplegit
	 * [new branch]      featureBee -&gt; origin/featureBee</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220707Z" creationid="Prikryl" creationdate="20151023T220707Z">
        <seg>$ git fetch origin
	...
	From jessica@githost:simplegit
	 * [new branch]      featureBee -&gt; origin/featureBee</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch origin
	...
	From john@githost:simplegit
	 + 049d078...fbff5bc master     -&gt; origin/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220419Z" creationid="Prikryl" creationdate="20151023T220419Z">
        <seg>$ git fetch origin
	...
	From john@githost:simplegit
	 + 049d078...fbff5bc master     -&gt; origin/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch origin
	remote: Counting objects: 20, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104629Z" creationid="Prikryl" creationdate="20151023T104629Z">
        <seg>$ git fetch origin
	remote: Counting objects: 20, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch origin master:refs/remotes/origin/mymaster</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091739Z" creationid="Prikryl" creationdate="20151024T091739Z">
        <seg>$ git fetch origin master:refs/remotes/origin/mymaster</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch origin master:refs/remotes/origin/mymaster \
	   topic:refs/remotes/origin/topic
	From git@github.com:schacon/simplegit
	 !</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091740Z" creationid="Prikryl" creationdate="20151024T091740Z">
        <seg>$ git fetch origin master:refs/remotes/origin/mymaster \
	   topic:refs/remotes/origin/topic
	From git@github.com:schacon/simplegit
	 !</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fetch pb
	remote: Counting objects: 58, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101820Z" creationid="Prikryl" creationdate="20151023T101820Z">
        <seg>$ git fetch pb
	remote: Counting objects: 58, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git filter-branch --commit-filter '
	        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
	        then
	                GIT_AUTHOR_NAME="Scott Chacon";
	                GIT_AUTHOR_EMAIL="schacon@example.com";
	                git commit-tree "$@";
	        else
	                git commit-tree "$@";
	        fi' HEAD</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222936Z" creationid="Prikryl" creationdate="20151023T222936Z">
        <seg>$ git filter-branch --commit-filter '
	        if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];
	        then
	                GIT_AUTHOR_NAME="Scott Chacon";
	                GIT_AUTHOR_EMAIL="schacon@example.com";
	                git commit-tree "$@";
	        else
	                git commit-tree "$@";
	        fi' HEAD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git filter-branch --index-filter \
	   'git rm --cached --ignore-unmatch git.tbz2' -- 6df7640^..</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091828Z" creationid="Prikryl" creationdate="20151024T091828Z">
        <seg>$ git filter-branch --index-filter \
	   'git rm --cached --ignore-unmatch git.tbz2' -- 6df7640^..</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git filter-branch --msg-filter '
	        sed -e "/^\[git-p4:/d"
	'
	Rewrite 1fd4ec126171790efd2db83548b85b1bbbc07dc2 (123/123)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091441Z" creationid="Prikryl" creationdate="20151024T091441Z">
        <seg>$ git filter-branch --msg-filter '
	        sed -e "/^\[git-p4:/d"
	'
	Rewrite 1fd4ec126171790efd2db83548b85b1bbbc07dc2 (123/123)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git filter-branch --subdirectory-filter trunk HEAD
	Rewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222935Z" creationid="Prikryl" creationdate="20151023T222935Z">
        <seg>$ git filter-branch --subdirectory-filter trunk HEAD
	Rewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
	Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222934Z" creationid="Prikryl" creationdate="20151023T222934Z">
        <seg>$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD
	Rewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname; do git branch "$branchname" "refs/remotes/$branchname"; git branch -r -d "$branchname"; done</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091422Z" creationid="Prikryl" creationdate="20151024T091422Z">
        <seg>$ git for-each-ref refs/remotes | cut -d / -f 3- | grep -v @ | while read branchname; do git branch "$branchname" "refs/remotes/$branchname"; git branch -r -d "$branchname"; done</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git for-each-ref refs/remotes/tags | cut -d / -f 4- | grep -v @ | while read tagname; do git tag "$tagname" "tags/$tagname"; git branch -r -d "tags/$tagname"; done</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091421Z" creationid="Prikryl" creationdate="20151024T091421Z">
        <seg>$ git for-each-ref refs/remotes/tags | cut -d / -f 4- | grep -v @ | while read tagname; do git tag "$tagname" "tags/$tagname"; git branch -r -d "tags/$tagname"; done</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git format-patch -M origin/master
	0001-add-limit-to-log-function.patch
	0002-changed-log-output-to-30-from-25.patch</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221006Z" creationid="Prikryl" creationdate="20151023T221006Z">
        <seg>$ git format-patch -M origin/master
	0001-add-limit-to-log-function.patch
	0002-changed-log-output-to-30-from-25.patch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git fsck --full
	dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
	dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
	dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
	dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091819Z" creationid="Prikryl" creationdate="20151024T091819Z">
        <seg>$ git fsck --full
	dangling blob d670460b4b4aece5915caf5c68d12f560a9fe3e4
	dangling commit ab1afef80fac8e34258ff41fc1b867c702daa24b
	dangling tree aea790b9a58f6cf6f2804eeac9f0abbe9631e4c9
	dangling blob 7108f7ecb345ee9d0084193f147cdad4d2998293</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git gc
	Counting objects: 17, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091724Z" creationid="Prikryl" creationdate="20151024T091724Z">
        <seg>$ git gc
	Counting objects: 17, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git gc
	Counting objects: 21, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091821Z" creationid="Prikryl" creationdate="20151024T091821Z">
        <seg>$ git gc
	Counting objects: 21, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git gc --auto</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091809Z" creationid="Prikryl" creationdate="20151024T091809Z">
        <seg>$ git gc --auto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git help &lt;verb&gt;
	$ git &lt;verb&gt; --help
	$ man git-&lt;verb&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T092442Z" creationid="Prikryl" creationdate="20151022T204925Z">
        <seg>$ git help &lt;příkaz&gt;
	$ git &lt;příkaz&gt; --help
	$ man git-&lt;příkaz&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git help config</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204929Z" creationid="Prikryl" creationdate="20151022T204929Z">
        <seg>$ git help config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git init</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204948Z" creationid="Prikryl" creationdate="20151022T204948Z">
        <seg>$ git init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git init
	$ git add .</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105608Z" creationid="Prikryl" creationdate="20151023T105608Z">
        <seg>$ git init
	$ git add .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git init
	Initialized empty Git repository in /opt/import_to/.git/
	$ ruby import.rb /opt/import_from | git fast-import
	git-fast-import statistics:
	---------------------------------------------------------------------
	Alloc'd objects:       5000
	Total objects:           18 (         1 duplicates                  )
	      blobs  :            7 (         1 duplicates          0 deltas)
	      trees  :            6 (         0 duplicates          1 deltas)
	      commits:            5 (         0 duplicates          0 deltas)
	      tags   :            0 (         0 duplicates          0 deltas)
	Total branches:           1 (         1 loads     )
	      marks:           1024 (         5 unique    )
	      atoms:              3
	Memory total:          2255 KiB
	       pools:          2098 KiB
	     objects:           156 KiB
	---------------------------------------------------------------------
	pack_report: getpagesize()            =       4096
	pack_report: core.packedGitWindowSize =   33554432
	pack_report: core.packedGitLimit      =  268435456
	pack_report: pack_used_ctr            =          9
	pack_report: pack_mmap_calls          =          5
	pack_report: pack_open_windows        =          1 /          1
	pack_report: pack_mapped              =       1356 /       1356
	---------------------------------------------------------------------</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091513Z" creationid="Prikryl" creationdate="20151024T091513Z">
        <seg>$ git init
	Initialized empty Git repository in /opt/import_to/.git/
	$ ruby import.rb /opt/import_from | git fast-import
	git-fast-import statistics:
	---------------------------------------------------------------------
	Alloc'd objects:       5000
	Total objects:           18 (         1 duplicates                  )
	      blobs  :            7 (         1 duplicates          0 deltas)
	      trees  :            6 (         0 duplicates          1 deltas)
	      commits:            5 (         0 duplicates          0 deltas)
	      tags   :            0 (         0 duplicates          0 deltas)
	Total branches:           1 (         1 loads     )
	      marks:           1024 (         5 unique    )
	      atoms:              3
	Memory total:          2255 KiB
	       pools:          2098 KiB
	     objects:           156 KiB
	---------------------------------------------------------------------
	pack_report: getpagesize()            =       4096
	pack_report: core.packedGitWindowSize =   33554432
	pack_report: core.packedGitLimit      =  268435456
	pack_report: pack_used_ctr            =          9
	pack_report: pack_mmap_calls          =          5
	pack_report: pack_open_windows        =          1 /          1
	pack_report: pack_mapped              =       1356 /       1356
	---------------------------------------------------------------------</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git instaweb --httpd=webrick
	[2009-02-21 10:02:21] INFO  WEBrick 1.3.1
	[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105221Z" creationid="Prikryl" creationdate="20151023T105221Z">
        <seg>$ git instaweb --httpd=webrick
	[2009-02-21 10:02:21] INFO  WEBrick 1.3.1
	[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git instaweb --httpd=webrick --stop</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105226Z" creationid="Prikryl" creationdate="20151023T105226Z">
        <seg>$ git instaweb --httpd=webrick --stop</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git last
	commit 66938dae3329c7aebe598c2246a8e6af90d04646
	Author: Josh Goebel &lt;dreamer3@example.com&gt;
	Date:   Tue Aug 26 19:48:51 2008 +0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102336Z" creationid="Prikryl" creationdate="20151023T102336Z">
        <seg>$ git last
	commit 66938dae3329c7aebe598c2246a8e6af90d04646
	Author: Josh Goebel &lt;dreamer3@example.com&gt;
	Date:   Tue Aug 26 19:48:51 2008 +0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log
	commit 734713bc047d87bf7eac9674765ae793478c50d3
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri Jan 2 18:32:33 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221521Z" creationid="Prikryl" creationdate="20151023T221521Z">
        <seg>$ git log
	commit 734713bc047d87bf7eac9674765ae793478c50d3
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri Jan 2 18:32:33 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205758Z" creationid="Prikryl" creationdate="20151022T205758Z">
        <seg>$ git log
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log  --after="2013-04-29T17:07:22+0200"      \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T111954Z" creationid="Prikryl" creationdate="20151023T111954Z">
        <seg>$ git log  --after="2013-04-29T17:07:22+0200"      \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --abbrev-commit --pretty=oneline
	ca82a6d changed the version number
	085bb3b removed unnecessary test code
	a11bef0 first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221531Z" creationid="Prikryl" creationdate="20151023T221531Z">
        <seg>$ git log --abbrev-commit --pretty=oneline
	ca82a6d changed the version number
	085bb3b removed unnecessary test code
	a11bef0 first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --after="2008-06-01T09:00:00+0300" \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112134Z" creationid="Prikryl" creationdate="20151023T112134Z">
        <seg>$ git log --after="2008-06-01T09:00:00+0300" \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --after="2014-04-29 00:00:00" --before="2014-04-29 23:59:59" \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101619Z" creationid="Prikryl" creationdate="20151023T101619Z">
        <seg>$ git log --after="2014-04-29 00:00:00" --before="2014-04-29 23:59:59" \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --after=2008-06-01 --before=2008-07-01</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112132Z" creationid="Prikryl" creationdate="20151023T112132Z">
        <seg>$ git log --after=2008-06-01 --before=2008-07-01</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --left-right master...experiment
	&lt; F
	&lt; E
	&gt; D
	&gt; C</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221618Z" creationid="Prikryl" creationdate="20151023T221618Z">
        <seg>$ git log --left-right master...experiment
	&lt; F
	&lt; E
	&gt; D
	&gt; C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --no-merges origin/master ^issue54
	commit 738ee872852dfaa9d6634e0dea7a324040193016
	Author: John Smith &lt;jsmith@example.com&gt;
	Date:   Fri May 29 16:01:27 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220559Z" creationid="Prikryl" creationdate="20151023T220559Z">
        <seg>$ git log --no-merges origin/master ^issue54
	commit 738ee872852dfaa9d6634e0dea7a324040193016
	Author: John Smith &lt;jsmith@example.com&gt;
	Date:   Fri May 29 16:01:27 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty="%h - %s" --author=gitster \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101731Z" creationid="Prikryl" creationdate="20151023T101731Z">
        <seg>$ git log --pretty="%h - %s" --author=gitster \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=format:"%h %s" --graph
	* 2d3acf9 ignore errors from SIGCHLD on trap
	*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
	|\
	| * 420eac9 Added a method for getting the current branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210155Z" creationid="Prikryl" creationdate="20151022T210155Z">
        <seg>$ git log --pretty=format:"%h %s" --graph
	* 2d3acf9 ignore errors from SIGCHLD on trap
	*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
	|\
	| * 420eac9 Added a method for getting the current branch.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=format:"%h %s" HEAD~3..HEAD
	a5f4a0d added cat-file
	310154e updated README formatting and added blame
	f7f3f6d changed my name a bit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222647Z" creationid="Prikryl" creationdate="20151023T222647Z">
        <seg>$ git log --pretty=format:"%h %s" HEAD~3..HEAD
	a5f4a0d added cat-file
	310154e updated README formatting and added blame
	f7f3f6d changed my name a bit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=format:"%h - %an, %ar : %s"
	ca82a6d - Scott Chacon, 11 months ago : changed the version number
	085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
	a11bef0 - Scott Chacon, 11 months ago : first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205843Z" creationid="Prikryl" creationdate="20151022T205843Z">
        <seg>$ git log --pretty=format:"%h - %an, %ar : %s"
	ca82a6d - Scott Chacon, 11 months ago : changed the version number
	085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code
	a11bef0 - Scott Chacon, 11 months ago : first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=format:'%h %s' --graph
	* 734713b fixed refs handling, added gc auto, updated tests
	*   d921970 Merge commit 'phedders/rdocs'
	|\
	| * 35cfb2b Some rdoc changes
	* | 1c002dd added some blame and merge stuff
	|/
	* 1c36188 ignore *.gem
	* 9b29157 add open3_detach to gemspec file list</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221549Z" creationid="Prikryl" creationdate="20151023T221549Z">
        <seg>$ git log --pretty=format:'%h %s' --graph
	* 734713b fixed refs handling, added gc auto, updated tests
	*   d921970 Merge commit 'phedders/rdocs'
	|\
	| * 35cfb2b Some rdoc changes
	* | 1c002dd added some blame and merge stuff
	|/
	* 1c36188 ignore *.gem
	* 9b29157 add open3_detach to gemspec file list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=fuller -1
	commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
	Author:     Jessica Smith &lt;jessica@example.com&gt;
	AuthorDate: Sun Apr 6 10:17:23 2008 -0700
	Commit:     Scott Chacon &lt;schacon@gmail.com&gt;
	CommitDate: Thu Apr 9 09:19:06 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221113Z" creationid="Prikryl" creationdate="20151023T221113Z">
        <seg>$ git log --pretty=fuller -1
	commit 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
	Author:     Jessica Smith &lt;jessica@example.com&gt;
	AuthorDate: Sun Apr 6 10:17:23 2008 -0700
	Commit:     Scott Chacon &lt;schacon@gmail.com&gt;
	CommitDate: Thu Apr 9 09:19:06 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=oneline
	15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
	a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
	0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
	6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
	0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
	4682c3261057305bdd616e23b64b0857d832627b added a todo file
	166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
	9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
	964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
	8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102231Z" creationid="Prikryl" creationdate="20151023T102231Z">
        <seg>$ git log --pretty=oneline
	15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
	a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
	0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
	6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
	0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
	4682c3261057305bdd616e23b64b0857d832627b added a todo file
	166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
	9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
	964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
	8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=oneline
	ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
	484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091812Z" creationid="Prikryl" creationdate="20151024T091812Z">
        <seg>$ git log --pretty=oneline
	ab1afef80fac8e34258ff41fc1b867c702daa24b modified repo a bit
	484a59275031909e19aadb7c92262719cfcdf19a added repo.rb
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=oneline
	ca82a6dff817ec66f44342007202690a93763949 changed the version number
	085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code
	a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205841Z" creationid="Prikryl" creationdate="20151022T205841Z">
        <seg>$ git log --pretty=oneline
	ca82a6dff817ec66f44342007202690a93763949 changed the version number
	085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code
	a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=oneline  master
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091635Z" creationid="Prikryl" creationdate="20151024T091635Z">
        <seg>$ git log --pretty=oneline  master
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=oneline --branches -- git.tbz2
	da3f30d019005479c99eb4c3406225613985a1db oops - removed large tarball
	6df764092f3e7c8f5f94cbe08ee5cf42e92a0289 added git tarball</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091827Z" creationid="Prikryl" creationdate="20151024T091827Z">
        <seg>$ git log --pretty=oneline --branches -- git.tbz2
	da3f30d019005479c99eb4c3406225613985a1db oops - removed large tarball
	6df764092f3e7c8f5f94cbe08ee5cf42e92a0289 added git tarball</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --pretty=oneline test
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091638Z" creationid="Prikryl" creationdate="20151024T091638Z">
        <seg>$ git log --pretty=oneline test
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --s&lt;tab&gt;&lt;tab&gt;
	--shortstat               --sparse
	--simplify-by-decoration  --src-prefix=
	--simplify-merges         --stat
	--since=                  --summary</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102326Z" creationid="Prikryl" creationdate="20151023T102326Z">
        <seg>$ git log --s&lt;tab&gt;&lt;tab&gt;
	--shortstat               --sparse
	--simplify-by-decoration  --src-prefix=
	--simplify-merges         --stat
	--since=                  --summary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --since=2.weeks</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210818Z" creationid="Prikryl" creationdate="20151022T210818Z">
        <seg>$ git log --since=2.weeks</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --stat
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205836Z" creationid="Prikryl" creationdate="20151022T205836Z">
        <seg>$ git log --stat
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log --stat 1a410e
	commit 1a410efbd13591db07496601ebc7a059dd55cfe9
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:15:24 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091609Z" creationid="Prikryl" creationdate="20151024T091609Z">
        <seg>$ git log --stat 1a410e
	commit 1a410efbd13591db07496601ebc7a059dd55cfe9
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:15:24 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -1
	commit 0550271328a0038865aad6331e620cd7238601bb
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Apr 9 09:03:56 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223027Z" creationid="Prikryl" creationdate="20151023T223027Z">
        <seg>$ git log -1
	commit 0550271328a0038865aad6331e620cd7238601bb
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Apr 9 09:03:56 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -1
	commit 938b1a547c2cc92033b74d32030e86468294a5c8
	Author: schacon &lt;schacon@4c93b258-373f-11de-be05-5f7a86268029&gt;
	Date:   Sat May 2 22:06:44 2009 +0000</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091120Z" creationid="Prikryl" creationdate="20151024T091120Z">
        <seg>$ git log -1
	commit 938b1a547c2cc92033b74d32030e86468294a5c8
	Author: schacon &lt;schacon@4c93b258-373f-11de-be05-5f7a86268029&gt;
	Date:   Sat May 2 22:06:44 2009 +0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -1 --name-only --pretty=format:'' 9f585d</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090842Z" creationid="Prikryl" creationdate="20151024T090842Z">
        <seg>$ git log -1 --name-only --pretty=format:'' 9f585d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -1 rack
	commit 85a3eee996800fcfa91e2119372dd4172bf76678
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Apr 9 09:19:14 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223101Z" creationid="Prikryl" creationdate="20151023T223101Z">
        <seg>$ git log -1 rack
	commit 85a3eee996800fcfa91e2119372dd4172bf76678
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Apr 9 09:19:14 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -2
	commit 10a16d60cffca14d454a15c6164378f4082bc5b0
	Author: Perforce staff &lt;support@perforce.com&gt;
	Date:   Thu Aug 19 10:18:45 2004 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091442Z" creationid="Prikryl" creationdate="20151024T091442Z">
        <seg>$ git log -2
	commit 10a16d60cffca14d454a15c6164378f4082bc5b0
	Author: Perforce staff &lt;support@perforce.com&gt;
	Date:   Thu Aug 19 10:18:45 2004 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -2
	commit 10bfe7d22ce15ee25b60a824c8982157ca593d41
	Author: Scott Chacon &lt;schacon@example.com&gt;
	Date:   Sun May 3 12:57:39 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091517Z" creationid="Prikryl" creationdate="20151024T091517Z">
        <seg>$ git log -2
	commit 10bfe7d22ce15ee25b60a824c8982157ca593d41
	Author: Scott Chacon &lt;schacon@example.com&gt;
	Date:   Sun May 3 12:57:39 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -2
	commit 1fd4ec126171790efd2db83548b85b1bbbc07dc2
	Author: Perforce staff &lt;support@perforce.com&gt;
	Date:   Thu Aug 19 10:18:45 2004 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091431Z" creationid="Prikryl" creationdate="20151024T091431Z">
        <seg>$ git log -2
	commit 1fd4ec126171790efd2db83548b85b1bbbc07dc2
	Author: Perforce staff &lt;support@perforce.com&gt;
	Date:   Thu Aug 19 10:18:45 2004 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -4 --pretty=format:"%h %s"
	1c002dd added cat-file
	9b29157 added blame
	35cfb2b updated README formatting
	f3cc40e changed my name a bit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222933Z" creationid="Prikryl" creationdate="20151023T222933Z">
        <seg>$ git log -4 --pretty=format:"%h %s"
	1c002dd added cat-file
	9b29157 added blame
	35cfb2b updated README formatting
	f3cc40e changed my name a bit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -U1 --word-diff
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205833Z" creationid="Prikryl" creationdate="20151022T205833Z">
        <seg>$ git log -U1 --word-diff
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -g
	commit 1a410efbd13591db07496601ebc7a059dd55cfe9
	Reflog: HEAD@{0} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: updating HEAD
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:22:37 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091814Z" creationid="Prikryl" creationdate="20151024T091814Z">
        <seg>$ git log -g
	commit 1a410efbd13591db07496601ebc7a059dd55cfe9
	Reflog: HEAD@{0} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: updating HEAD
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:22:37 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -g master
	commit 734713bc047d87bf7eac9674765ae793478c50d3
	Reflog: master@{0} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: commit: fixed refs handling, added gc auto, updated
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri Jan 2 18:32:33 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221544Z" creationid="Prikryl" creationdate="20151023T221544Z">
        <seg>$ git log -g master
	commit 734713bc047d87bf7eac9674765ae793478c50d3
	Reflog: master@{0} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: commit: fixed refs handling, added gc auto, updated
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri Jan 2 18:32:33 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log -p -2
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205811Z" creationid="Prikryl" creationdate="20151022T205811Z">
        <seg>$ git log -p -2
	commit ca82a6dff817ec66f44342007202690a93763949
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Mar 17 21:52:11 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log contrib --not master
	commit 5b6235bd297351589efc4d73316f0a68d484f118
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri Oct 24 09:53:59 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221340Z" creationid="Prikryl" creationdate="20151023T221340Z">
        <seg>$ git log contrib --not master
	commit 5b6235bd297351589efc4d73316f0a68d484f118
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri Oct 24 09:53:59 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log experiment..master
	F
	E</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221612Z" creationid="Prikryl" creationdate="20151023T221612Z">
        <seg>$ git log experiment..master
	F
	E</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log master...experiment
	F
	E
	D
	C</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221617Z" creationid="Prikryl" creationdate="20151023T221617Z">
        <seg>$ git log master...experiment
	F
	E
	D
	C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log master..experiment
	D
	C</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221610Z" creationid="Prikryl" creationdate="20151023T221610Z">
        <seg>$ git log master..experiment
	D
	C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log origin/featureA ^featureA
	commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
	Author: John Smith &lt;jsmith@example.com&gt;
	Date:   Fri May 29 19:57:33 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220730Z" creationid="Prikryl" creationdate="20151023T220730Z">
        <seg>$ git log origin/featureA ^featureA
	commit aad881d154acdaeb2b6b18ea0e827ed8a6d671e6
	Author: John Smith &lt;jsmith@example.com&gt;
	Date:   Fri May 29 19:57:33 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log origin/master
	$ git log remotes/origin/master
	$ git log refs/remotes/origin/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091736Z" creationid="Prikryl" creationdate="20151024T091736Z">
        <seg>$ git log origin/master
	$ git log remotes/origin/master
	$ git log refs/remotes/origin/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log origin/master..HEAD</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221613Z" creationid="Prikryl" creationdate="20151023T221613Z">
        <seg>$ git log origin/master..HEAD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log refA refB ^refC
	$ git log refA refB --not refC</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221615Z" creationid="Prikryl" creationdate="20151023T221615Z">
        <seg>$ git log refA refB ^refC
	$ git log refA refB --not refC</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git log refA..refB
	$ git log ^refA refB
	$ git log refB --not refA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221614Z" creationid="Prikryl" creationdate="20151023T221614Z">
        <seg>$ git log refA..refB
	$ git log ^refA refB
	$ git log refB --not refA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge iss53
	Auto-merging index.html
	CONFLICT (content): Merge conflict in index.html
	Automatic merge failed; fix conflicts and then commit the result.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102722Z" creationid="Prikryl" creationdate="20151023T102722Z">
        <seg>$ git merge iss53
	Auto-merging index.html
	CONFLICT (content): Merge conflict in index.html
	Automatic merge failed; fix conflicts and then commit the result.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge issue54
	Updating fbff5bc..4af4298
	Fast forward
	 README           |    1 +
	 lib/simplegit.rb |    6 +++++-
	 2 files changed, 6 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220609Z" creationid="Prikryl" creationdate="20151023T220609Z">
        <seg>$ git merge issue54
	Updating fbff5bc..4af4298
	Fast forward
	 README           |    1 +
	 lib/simplegit.rb |    6 +++++-
	 2 files changed, 6 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge origin/featureBee
	Auto-merging lib/simplegit.rb
	Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220709Z" creationid="Prikryl" creationdate="20151023T220709Z">
        <seg>$ git merge origin/featureBee
	Auto-merging lib/simplegit.rb
	Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge origin/master
	Auto-merging lib/simplegit.rb
	Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220611Z" creationid="Prikryl" creationdate="20151023T220611Z">
        <seg>$ git merge origin/master
	Auto-merging lib/simplegit.rb
	Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge origin/master
	Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220449Z" creationid="Prikryl" creationdate="20151023T220449Z">
        <seg>$ git merge origin/master
	Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge origin/master
	Updating 0550271..85a3eee
	Fast forward
	 rack |    2 +-
	 1 files changed, 1 insertions(+), 1 deletions(-)
	[master*]$ git status
	# On branch master
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	#
	#      modified:   rack
	#</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223052Z" creationid="Prikryl" creationdate="20151023T223052Z">
        <seg>$ git merge origin/master
	Updating 0550271..85a3eee
	Fast forward
	 rack |    2 +-
	 1 files changed, 1 insertions(+), 1 deletions(-)
	[master*]$ git status
	# On branch master
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	#
	#      modified:   rack
	#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge topic
	Auto-merging database.xml
	Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090819Z" creationid="Prikryl" creationdate="20151024T090819Z">
        <seg>$ git merge topic
	Auto-merging database.xml
	Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git merge-base contrib master
	36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
	$ git diff 36c7db</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221405Z" creationid="Prikryl" creationdate="20151023T221405Z">
        <seg>$ git merge-base contrib master
	36c7dba2c95e6bbb78dfa822519ecfec6e1ca649
	$ git diff 36c7db</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git mergetool</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102735Z" creationid="Prikryl" creationdate="20151023T102735Z">
        <seg>$ git mergetool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git mv README README.txt
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        renamed:    README -&gt; README.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205752Z" creationid="Prikryl" creationdate="20151022T205752Z">
        <seg>$ git mv README README.txt
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        renamed:    README -&gt; README.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git mv file_from file_to</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205748Z" creationid="Prikryl" creationdate="20151022T205748Z">
        <seg>$ git mv file_from file_to</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git pull git://github.com/onetimeguy/project.git
	From git://github.com/onetimeguy/project
	 * branch            HEAD       -&gt; FETCH_HEAD
	Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221338Z" creationid="Prikryl" creationdate="20151023T221338Z">
        <seg>$ git pull git://github.com/onetimeguy/project.git
	From git://github.com/onetimeguy/project
	 * branch            HEAD       -&gt; FETCH_HEAD
	Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push -f origin master
	Counting objects: 5, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090854Z" creationid="Prikryl" creationdate="20151024T090854Z">
        <seg>$ git push -f origin master
	Counting objects: 5, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push myfork featureA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220801Z" creationid="Prikryl" creationdate="20151023T220801Z">
        <seg>$ git push myfork featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin --all
	$ git push origin --tags</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091425Z" creationid="Prikryl" creationdate="20151024T091425Z">
        <seg>$ git push origin --all
	$ git push origin --tags</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin --tags
	Counting objects: 50, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102248Z" creationid="Prikryl" creationdate="20151023T102248Z">
        <seg>$ git push origin --tags
	Counting objects: 50, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin :serverfix
	To git@github.com:schacon/simplegit.git
	 - [deleted]         serverfix</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104705Z" creationid="Prikryl" creationdate="20151023T104705Z">
        <seg>$ git push origin :serverfix
	To git@github.com:schacon/simplegit.git
	 - [deleted]         serverfix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin :topic</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091747Z" creationid="Prikryl" creationdate="20151024T091747Z">
        <seg>$ git push origin :topic</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin featureA
	...
	To jessica@githost:simplegit.git
	 * [new branch]      featureA -&gt; featureA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220647Z" creationid="Prikryl" creationdate="20151023T220647Z">
        <seg>$ git push origin featureA
	...
	To jessica@githost:simplegit.git
	 * [new branch]      featureA -&gt; featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin featureB:featureBee
	...
	To jessica@githost:simplegit.git
	   fba9af8..cd685d1  featureB -&gt; featureBee</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220727Z" creationid="Prikryl" creationdate="20151023T220727Z">
        <seg>$ git push origin featureB:featureBee
	...
	To jessica@githost:simplegit.git
	   fba9af8..cd685d1  featureB -&gt; featureBee</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101829Z" creationid="Prikryl" creationdate="20151023T101829Z">
        <seg>$ git push origin master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin master
	...
	To jessica@githost:simplegit.git
	   72bbc59..8059c15  master -&gt; master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220623Z" creationid="Prikryl" creationdate="20151023T220623Z">
        <seg>$ git push origin master
	...
	To jessica@githost:simplegit.git
	   72bbc59..8059c15  master -&gt; master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin master
	...
	To john@githost:simplegit.git
	   fbff5bc..72bbc59  master -&gt; master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220521Z" creationid="Prikryl" creationdate="20151023T220521Z">
        <seg>$ git push origin master
	...
	To john@githost:simplegit.git
	   fbff5bc..72bbc59  master -&gt; master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin master:refs/heads/qa/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091745Z" creationid="Prikryl" creationdate="20151024T091745Z">
        <seg>$ git push origin master:refs/heads/qa/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin serverfix
	Counting objects: 20, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104613Z" creationid="Prikryl" creationdate="20151023T104613Z">
        <seg>$ git push origin serverfix
	Counting objects: 20, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git push origin v1.5
	Counting objects: 50, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102241Z" creationid="Prikryl" creationdate="20151023T102241Z">
        <seg>$ git push origin v1.5
	Counting objects: 50, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	$ git write-tree
	3c4e9cd789d88d8d89c1073707c3585e41b0e614
	$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614
	040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091541Z" creationid="Prikryl" creationdate="20151024T091541Z">
        <seg>$ git read-tree --prefix=bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	$ git write-tree
	3c4e9cd789d88d8d89c1073707c3585e41b0e614
	$ git cat-file -p 3c4e9cd789d88d8d89c1073707c3585e41b0e614
	040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579      bak
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git read-tree --prefix=rack/ -u rack_branch</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223135Z" creationid="Prikryl" creationdate="20151023T223135Z">
        <seg>$ git read-tree --prefix=rack/ -u rack_branch</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rebase --continue</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222757Z" creationid="Prikryl" creationdate="20151023T222757Z">
        <seg>$ git rebase --continue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rebase --onto master server client</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104749Z" creationid="Prikryl" creationdate="20151023T104749Z">
        <seg>$ git rebase --onto master server client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rebase -i HEAD~3</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222634Z" creationid="Prikryl" creationdate="20151023T222634Z">
        <seg>$ git rebase -i HEAD~3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rebase -i HEAD~3
	Stopped at 7482e0d... updated the gemspec to hopefully work better
	You can amend the commit now, with</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222705Z" creationid="Prikryl" creationdate="20151023T222705Z">
        <seg>$ git rebase -i HEAD~3
	Stopped at 7482e0d... updated the gemspec to hopefully work better
	You can amend the commit now, with</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rebase master server</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104809Z" creationid="Prikryl" creationdate="20151023T104809Z">
        <seg>$ git rebase master server</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git reflog
	1a410ef HEAD@{0}: 1a410efbd13591db07496601ebc7a059dd55cfe9: updating HEAD
	ab1afef HEAD@{1}: ab1afef80fac8e34258ff41fc1b867c702daa24b: updating HEAD</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091813Z" creationid="Prikryl" creationdate="20151024T091813Z">
        <seg>$ git reflog
	1a410ef HEAD@{0}: 1a410efbd13591db07496601ebc7a059dd55cfe9: updating HEAD
	ab1afef HEAD@{1}: ab1afef80fac8e34258ff41fc1b867c702daa24b: updating HEAD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git reflog
	734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated
	d921970 HEAD@{1}: merge phedders/rdocs: Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221538Z" creationid="Prikryl" creationdate="20151023T221538Z">
        <seg>$ git reflog
	734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated
	d921970 HEAD@{1}: merge phedders/rdocs: Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote
	origin
	$ git remote add pb git://github.com/paulboone/ticgit.git
	$ git remote -v
	origin	git://github.com/schacon/ticgit.git
	pb	git://github.com/paulboone/ticgit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101818Z" creationid="Prikryl" creationdate="20151023T101818Z">
        <seg>$ git remote
	origin
	$ git remote add pb git://github.com/paulboone/ticgit.git
	$ git remote -v
	origin	git://github.com/schacon/ticgit.git
	pb	git://github.com/paulboone/ticgit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote -v
	origin  git://github.com/schacon/ticgit.git (fetch)
	origin  git://github.com/schacon/ticgit.git (push)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101815Z" creationid="Prikryl" creationdate="20151023T101815Z">
        <seg>$ git remote -v
	origin  git://github.com/schacon/ticgit.git (fetch)
	origin  git://github.com/schacon/ticgit.git (push)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add jessica git://github.com/jessica/myproject.git
	$ git fetch jessica
	$ git checkout -b rubyclient jessica/ruby-client</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221326Z" creationid="Prikryl" creationdate="20151023T221326Z">
        <seg>$ git remote add jessica git://github.com/jessica/myproject.git
	$ git fetch jessica
	$ git checkout -b rubyclient jessica/ruby-client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add local_proj /opt/git/project.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104918Z" creationid="Prikryl" creationdate="20151023T104918Z">
        <seg>$ git remote add local_proj /opt/git/project.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add myfork (url)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220759Z" creationid="Prikryl" creationdate="20151023T220759Z">
        <seg>$ git remote add myfork (url)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add origin git@github.com:schacon/simplegit-progit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091734Z" creationid="Prikryl" creationdate="20151024T091734Z">
        <seg>$ git remote add origin git@github.com:schacon/simplegit-progit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add origin git@github.com:schacon/simplegit-progit.git
	$ git push origin master
	Counting objects: 11, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091709Z" creationid="Prikryl" creationdate="20151024T091709Z">
        <seg>$ git remote add origin git@github.com:schacon/simplegit-progit.git
	$ git push origin master
	Counting objects: 11, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add origin git@github.com:testinguser/iphone_project.git
	$ git push origin master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105611Z" creationid="Prikryl" creationdate="20151023T105611Z">
        <seg>$ git remote add origin git@github.com:testinguser/iphone_project.git
	$ git push origin master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add origin git@gitserver:iphone_project.git
	$ git push origin master
	Initialized empty Git repository in /opt/git/iphone_project.git/
	Counting objects: 3, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105413Z" creationid="Prikryl" creationdate="20151023T105413Z">
        <seg>$ git remote add origin git@gitserver:iphone_project.git
	$ git push origin master
	Initialized empty Git repository in /opt/git/iphone_project.git/
	Counting objects: 3, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add origin git@my-git-server:myrepository.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091423Z" creationid="Prikryl" creationdate="20151024T091423Z">
        <seg>$ git remote add origin git@my-git-server:myrepository.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote add rack_remote git@github.com:schacon/rack.git
	$ git fetch rack_remote
	warning: no common commits
	remote: Counting objects: 3184, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223123Z" creationid="Prikryl" creationdate="20151023T223123Z">
        <seg>$ git remote add rack_remote git@github.com:schacon/rack.git
	$ git fetch rack_remote
	warning: no common commits
	remote: Counting objects: 3184, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote rename pb paul
	$ git remote
	origin
	paul</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101838Z" creationid="Prikryl" creationdate="20151023T101838Z">
        <seg>$ git remote rename pb paul
	$ git remote
	origin
	paul</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote rm paul
	$ git remote
	origin</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101839Z" creationid="Prikryl" creationdate="20151023T101839Z">
        <seg>$ git remote rm paul
	$ git remote
	origin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote show origin
	* remote origin
	  URL: git://github.com/schacon/ticgit.git
	  Remote branch merged with 'git pull' while on branch master
	    master
	  Tracked remote branches
	    master
	    ticgit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101831Z" creationid="Prikryl" creationdate="20151023T101831Z">
        <seg>$ git remote show origin
	* remote origin
	  URL: git://github.com/schacon/ticgit.git
	  Remote branch merged with 'git pull' while on branch master
	    master
	  Tracked remote branches
	    master
	    ticgit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git remote show origin
	* remote origin
	  URL: git@github.com:defunkt/github.git
	  Remote branch merged with 'git pull' while on branch issues
	    issues
	  Remote branch merged with 'git pull' while on branch master
	    master
	  New remote branches (next fetch will store in remotes/origin)
	    caching
	  Stale tracking branches (use 'git remote prune')
	    libwalker
	    walker2
	  Tracked remote branches
	    acl
	    apiv2
	    dashboard2
	    issues
	    master
	    postgres
	  Local branch pushed with 'git push'
	    master:master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101833Z" creationid="Prikryl" creationdate="20151023T101833Z">
        <seg>$ git remote show origin
	* remote origin
	  URL: git@github.com:defunkt/github.git
	  Remote branch merged with 'git pull' while on branch issues
	    issues
	  Remote branch merged with 'git pull' while on branch master
	    master
	  New remote branches (next fetch will store in remotes/origin)
	    caching
	  Stale tracking branches (use 'git remote prune')
	    libwalker
	    walker2
	  Tracked remote branches
	    acl
	    apiv2
	    dashboard2
	    issues
	    master
	    postgres
	  Local branch pushed with 'git push'
	    master:master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git request-pull origin/master myfork
	The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:
	  John Smith (1):
	        added a new function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220802Z" creationid="Prikryl" creationdate="20151023T220802Z">
        <seg>$ git request-pull origin/master myfork
	The following changes since commit 1edee6b1d61823a2de3b09c160d7080b8d1b3a40:
	  John Smith (1):
	        added a new function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9
	HEAD is now at 1a410ef third commit
	$ git log --pretty=oneline
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091813Z" creationid="Prikryl" creationdate="20151024T091813Z">
        <seg>$ git reset --hard 1a410efbd13591db07496601ebc7a059dd55cfe9
	HEAD is now at 1a410ef third commit
	$ git log --pretty=oneline
	1a410efbd13591db07496601ebc7a059dd55cfe9 third commit
	cac0cab538b970a37ea1e769cbbde608743bc96d second commit
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git reset HEAD benchmarks.rb
	Unstaged changes after reset:
	M       benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   README.txt
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101757Z" creationid="Prikryl" creationdate="20151023T101757Z">
        <seg>$ git reset HEAD benchmarks.rb
	Unstaged changes after reset:
	M       benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   README.txt
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git reset HEAD^
	$ git add README
	$ git commit -m 'updated README formatting'
	$ git add lib/simplegit.rb
	$ git commit -m 'added blame'
	$ git rebase --continue</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222932Z" creationid="Prikryl" creationdate="20151023T222932Z">
        <seg>$ git reset HEAD^
	$ git add README
	$ git commit -m 'updated README formatting'
	$ git add lib/simplegit.rb
	$ git commit -m 'added blame'
	$ git rebase --continue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rev-list --objects --all | grep 7a9eb2fb
	7a9eb2fba2b1811321254ac360970fc169ba2330 git.tbz2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091826Z" creationid="Prikryl" creationdate="20151024T091826Z">
        <seg>$ git rev-list --objects --all | grep 7a9eb2fb
	7a9eb2fba2b1811321254ac360970fc169ba2330 git.tbz2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rev-list 538c33..d14fc7
	d14fc7c847ab946ec39590d87783c69b031bdfb7
	9f585da4401b0a3999e84113824d15245c13f0be
	234071a1be950e2a8d078e6141f5cd20c1e61ad3
	dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a
	17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090826Z" creationid="Prikryl" creationdate="20151024T090826Z">
        <seg>$ git rev-list 538c33..d14fc7
	d14fc7c847ab946ec39590d87783c69b031bdfb7
	9f585da4401b0a3999e84113824d15245c13f0be
	234071a1be950e2a8d078e6141f5cd20c1e61ad3
	dfa04c9ef3d5197182f13fb5b9b1fb7717d2222a
	17716ec0f1ff5c77eff40b7fe912f9f6cfd0e475</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rev-parse topic1
	ca82a6dff817ec66f44342007202690a93763949</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221533Z" creationid="Prikryl" creationdate="20151023T221533Z">
        <seg>$ git rev-parse topic1
	ca82a6dff817ec66f44342007202690a93763949</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rm --cached readme.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205740Z" creationid="Prikryl" creationdate="20151022T205740Z">
        <seg>$ git rm --cached readme.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rm -r rack
	$ git submodule add git@github.com:schacon/rack.git rack
	Initialized empty Git repository in /opt/testsub/rack/.git/
	remote: Counting objects: 3184, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223116Z" creationid="Prikryl" creationdate="20151023T223116Z">
        <seg>$ git rm -r rack
	$ git submodule add git@github.com:schacon/rack.git rack
	Initialized empty Git repository in /opt/testsub/rack/.git/
	remote: Counting objects: 3184, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rm \*~</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205746Z" creationid="Prikryl" creationdate="20151022T205746Z">
        <seg>$ git rm \*~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rm git.tbz2
	rm 'git.tbz2'
	$ git commit -m 'oops - removed large tarball'
	[master da3f30d] oops - removed large tarball
	 1 files changed, 0 insertions(+), 0 deletions(-)
	 delete mode 100644 git.tbz2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091820Z" creationid="Prikryl" creationdate="20151024T091820Z">
        <seg>$ git rm git.tbz2
	rm 'git.tbz2'
	$ git commit -m 'oops - removed large tarball'
	[master da3f30d] oops - removed large tarball
	 1 files changed, 0 insertions(+), 0 deletions(-)
	 delete mode 100644 git.tbz2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rm grit.gemspec
	rm 'grit.gemspec'
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        deleted:    grit.gemspec</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205735Z" creationid="Prikryl" creationdate="20151022T205735Z">
        <seg>$ git rm grit.gemspec
	rm 'grit.gemspec'
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        deleted:    grit.gemspec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git rm log/\*.log</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205744Z" creationid="Prikryl" creationdate="20151022T205744Z">
        <seg>$ git rm log/\*.log</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git send-email *.patch
	0001-added-limit-to-log-function.patch
	0002-changed-log-output-to-30-from-25.patch
	Who should the emails appear to be from?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221026Z" creationid="Prikryl" creationdate="20151023T221026Z">
        <seg>$ git send-email *.patch
	0001-added-limit-to-log-function.patch
	0002-changed-log-output-to-30-from-25.patch
	Who should the emails appear to be from?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git shortlog --no-merges master --not v1.0.1
	Chris Wanstrath (8):
	      Add support for annotated tags to Grit::Tag
	      Add packed-refs annotated tag support.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221516Z" creationid="Prikryl" creationdate="20151023T221516Z">
        <seg>$ git shortlog --no-merges master --not v1.0.1
	Chris Wanstrath (8):
	      Add support for annotated tags to Grit::Tag
	      Add packed-refs annotated tag support.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
	$ git show 1c002dd4b536e7479f
	$ git show 1c002d</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221529Z" creationid="Prikryl" creationdate="20151023T221529Z">
        <seg>$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
	$ git show 1c002dd4b536e7479f
	$ git show 1c002d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show HEAD@{5}</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221541Z" creationid="Prikryl" creationdate="20151023T221541Z">
        <seg>$ git show HEAD@{5}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show HEAD^
	commit d921970aadf03b3cf0e71becdaab3147ba71cdef
	Merge: 1c002dd... 35cfb2b...
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 15:08:43 2008 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221550Z" creationid="Prikryl" creationdate="20151023T221550Z">
        <seg>$ git show HEAD^
	commit d921970aadf03b3cf0e71becdaab3147ba71cdef
	Merge: 1c002dd... 35cfb2b...
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 15:08:43 2008 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show HEAD^^^
	commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
	Author: Tom Preston-Werner &lt;tom@mojombo.com&gt;
	Date:   Fri Nov 7 13:47:59 2008 -0500</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221603Z" creationid="Prikryl" creationdate="20151023T221603Z">
        <seg>$ git show HEAD^^^
	commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
	Author: Tom Preston-Werner &lt;tom@mojombo.com&gt;
	Date:   Fri Nov 7 13:47:59 2008 -0500</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show HEAD~3
	commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
	Author: Tom Preston-Werner &lt;tom@mojombo.com&gt;
	Date:   Fri Nov 7 13:47:59 2008 -0500</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221600Z" creationid="Prikryl" creationdate="20151023T221600Z">
        <seg>$ git show HEAD~3
	commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
	Author: Tom Preston-Werner &lt;tom@mojombo.com&gt;
	Date:   Fri Nov 7 13:47:59 2008 -0500</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show ca82a6dff817ec66f44342007202690a93763949
	$ git show topic1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221532Z" creationid="Prikryl" creationdate="20151023T221532Z">
        <seg>$ git show ca82a6dff817ec66f44342007202690a93763949
	$ git show topic1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show d921970^
	commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 14:58:32 2008 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221551Z" creationid="Prikryl" creationdate="20151023T221551Z">
        <seg>$ git show d921970^
	commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 14:58:32 2008 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show d921970^2
	commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548
	Author: Paul Hedderly &lt;paul+git@mjr.org&gt;
	Date:   Wed Dec 10 22:22:03 2008 +0000</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221552Z" creationid="Prikryl" creationdate="20151023T221552Z">
        <seg>$ git show d921970^2
	commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548
	Author: Paul Hedderly &lt;paul+git@mjr.org&gt;
	Date:   Wed Dec 10 22:22:03 2008 +0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show maintainer-pgp-pub | gpg --import</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221508Z" creationid="Prikryl" creationdate="20151023T221508Z">
        <seg>$ git show maintainer-pgp-pub | gpg --import</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show master@{yesterday}</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221542Z" creationid="Prikryl" creationdate="20151023T221542Z">
        <seg>$ git show master@{yesterday}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show v1.2
	tag v1.2
	Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Feb 9 15:32:16 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102236Z" creationid="Prikryl" creationdate="20151023T102236Z">
        <seg>$ git show v1.2
	tag v1.2
	Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Feb 9 15:32:16 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show v1.4
	tag v1.4
	Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Feb 9 14:45:11 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101844Z" creationid="Prikryl" creationdate="20151023T101844Z">
        <seg>$ git show v1.4
	tag v1.4
	Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Feb 9 14:45:11 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show v1.4-lw
	commit 15027957951b64cf874c3557a0f3547bd83b3ff6
	Merge: 4a447f7... a6b4c97...
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sun Feb 8 19:02:46 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101909Z" creationid="Prikryl" creationdate="20151023T101909Z">
        <seg>$ git show v1.4-lw
	commit 15027957951b64cf874c3557a0f3547bd83b3ff6
	Merge: 4a447f7... a6b4c97...
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sun Feb 8 19:02:46 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show v1.5
	tag v1.5
	Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Feb 9 15:22:20 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101901Z" creationid="Prikryl" creationdate="20151023T101901Z">
        <seg>$ git show v1.5
	tag v1.5
	Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Mon Feb 9 15:22:20 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show-ref
	1cbd4904d9982f386d87f88fce1c24ad7c0f0471 refs/heads/master
	aee1ecc26318164f355a883f5d99cff0c852d3c4 refs/remotes/my-calc-branch
	03d09b0e2aad427e34a6d50ff147128e76c0e0f5 refs/remotes/tags/2.0.2
	50d02cc0adc9da4319eeba0900430ba219b9c376 refs/remotes/tags/release-2.0.1
	4caaa711a50c77879a91b8b90380060f672745cb refs/remotes/tags/release-2.0.2
	1c4cb508144c513ff1214c3488abe66dcb92916f refs/remotes/tags/release-2.0.2rc1
	1cbd4904d9982f386d87f88fce1c24ad7c0f0471 refs/remotes/trunk</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091116Z" creationid="Prikryl" creationdate="20151024T091116Z">
        <seg>$ git show-ref
	1cbd4904d9982f386d87f88fce1c24ad7c0f0471 refs/heads/master
	aee1ecc26318164f355a883f5d99cff0c852d3c4 refs/remotes/my-calc-branch
	03d09b0e2aad427e34a6d50ff147128e76c0e0f5 refs/remotes/tags/2.0.2
	50d02cc0adc9da4319eeba0900430ba219b9c376 refs/remotes/tags/release-2.0.1
	4caaa711a50c77879a91b8b90380060f672745cb refs/remotes/tags/release-2.0.2
	1c4cb508144c513ff1214c3488abe66dcb92916f refs/remotes/tags/release-2.0.2rc1
	1cbd4904d9982f386d87f88fce1c24ad7c0f0471 refs/remotes/trunk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git show-ref
	83e38c7a0af325a9722f2fdc56b10188806d83a1 refs/heads/master
	3e15e38c198baac84223acfc6224bb8b99ff2281 refs/remotes/gitserver/master
	0a30dd3b0c795b80212ae723640d4e5d48cabdff refs/remotes/origin/master
	25812380387fdd55f916652be4881c6f11600d6f refs/remotes/origin/testing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091117Z" creationid="Prikryl" creationdate="20151024T091117Z">
        <seg>$ git show-ref
	83e38c7a0af325a9722f2fdc56b10188806d83a1 refs/heads/master
	3e15e38c198baac84223acfc6224bb8b99ff2281 refs/remotes/gitserver/master
	0a30dd3b0c795b80212ae723640d4e5d48cabdff refs/remotes/origin/master
	25812380387fdd55f916652be4881c6f11600d6f refs/remotes/origin/testing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash
	Saved working directory and index state \
	  "WIP on master: 049d078 added the index file"
	HEAD is now at 049d078 added the index file
	(To restore them type "git stash apply")</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222617Z" creationid="Prikryl" creationdate="20151023T222617Z">
        <seg>$ git stash
	Saved working directory and index state \
	  "WIP on master: 049d078 added the index file"
	HEAD is now at 049d078 added the index file
	(To restore them type "git stash apply")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash apply</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222628Z" creationid="Prikryl" creationdate="20151023T222628Z">
        <seg>$ git stash apply</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash apply
	# On branch master
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   index.html
	#      modified:   lib/simplegit.rb
	#</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222620Z" creationid="Prikryl" creationdate="20151023T222620Z">
        <seg>$ git stash apply
	# On branch master
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   index.html
	#      modified:   lib/simplegit.rb
	#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash apply --index
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      modified:   index.html
	#
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   lib/simplegit.rb
	#</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222622Z" creationid="Prikryl" creationdate="20151023T222622Z">
        <seg>$ git stash apply --index
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      modified:   index.html
	#
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   lib/simplegit.rb
	#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash branch testchanges
	Switched to a new branch "testchanges"
	# On branch testchanges
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      modified:   index.html
	#
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   lib/simplegit.rb
	#
	Dropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222632Z" creationid="Prikryl" creationdate="20151023T222632Z">
        <seg>$ git stash branch testchanges
	Switched to a new branch "testchanges"
	# On branch testchanges
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      modified:   index.html
	#
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   lib/simplegit.rb
	#
	Dropped refs/stash@{0} (f0dfc4d5dc332d1cee34a634182e168c4efc3359)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash list
	stash@{0}: WIP on master: 049d078 added the index file
	stash@{1}: WIP on master: c264051 Revert "added file_size"
	stash@{2}: WIP on master: 21d80a5 added number to log</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222619Z" creationid="Prikryl" creationdate="20151023T222619Z">
        <seg>$ git stash list
	stash@{0}: WIP on master: 049d078 added the index file
	stash@{1}: WIP on master: c264051 Revert "added file_size"
	stash@{2}: WIP on master: 21d80a5 added number to log</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash list
	stash@{0}: WIP on master: 049d078 added the index file
	stash@{1}: WIP on master: c264051 Revert "added file_size"
	stash@{2}: WIP on master: 21d80a5 added number to log
	$ git stash drop stash@{0}
	Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222623Z" creationid="Prikryl" creationdate="20151023T222623Z">
        <seg>$ git stash list
	stash@{0}: WIP on master: 049d078 added the index file
	stash@{1}: WIP on master: c264051 Revert "added file_size"
	stash@{2}: WIP on master: 21d80a5 added number to log
	$ git stash drop stash@{0}
	Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash show -p stash@{0} | git apply -R</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222624Z" creationid="Prikryl" creationdate="20151023T222624Z">
        <seg>$ git stash show -p stash@{0} | git apply -R</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash show -p | git apply -R</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222626Z" creationid="Prikryl" creationdate="20151023T222626Z">
        <seg>$ git stash show -p | git apply -R</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git stash-unapply</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222631Z" creationid="Prikryl" creationdate="20151023T222631Z">
        <seg>$ git stash-unapply</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      modified:   index.html
	#
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   lib/simplegit.rb
	#</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222616Z" creationid="Prikryl" creationdate="20151023T222616Z">
        <seg>$ git status
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      modified:   index.html
	#
	# Changes not staged for commit:
	#   (use "git add &lt;file&gt;..." to update what will be committed)
	#
	#      modified:   lib/simplegit.rb
	#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      new file:   .gitmodules
	#      new file:   rack
	#</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223020Z" creationid="Prikryl" creationdate="20151023T223020Z">
        <seg>$ git status
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD &lt;file&gt;..." to unstage)
	#
	#      new file:   .gitmodules
	#      new file:   rack
	#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	# On branch master
	nothing to commit, working directory clean</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222618Z" creationid="Prikryl" creationdate="20151023T222618Z">
        <seg>$ git status
	# On branch master
	nothing to commit, working directory clean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	On branch master
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb
	
	no changes added to commit (use "git add" and/or "git commit -a")
	$ git commit -a -m 'added new benchmarks'
	[master 83e38c7] added new benchmarks
	 1 files changed, 5 insertions(+)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205726Z" creationid="Prikryl" creationdate="20151022T205726Z">
        <seg>$ git status
	On branch master
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb
	
	no changes added to commit (use "git add" and/or "git commit -a")
	$ git commit -a -m 'added new benchmarks'
	[master 83e38c7] added new benchmarks
	 1 files changed, 5 insertions(+)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   README.txt
	        modified:   benchmarks.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101754Z" creationid="Prikryl" creationdate="20151023T101754Z">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   README.txt
	        modified:   benchmarks.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   index.html</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103022Z" creationid="Prikryl" creationdate="20151023T103022Z">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        modified:   index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205054Z" creationid="Prikryl" creationdate="20151022T205054Z">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205558Z" creationid="Prikryl" creationdate="20151022T205558Z">
        <seg>$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	On branch master
	You have unmerged paths.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102725Z" creationid="Prikryl" creationdate="20151023T102725Z">
        <seg>$ git status
	On branch master
	You have unmerged paths.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git status
	On branch master
	nothing to commit, working directory clean</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205024Z" creationid="Prikryl" creationdate="20151022T205024Z">
        <seg>$ git status
	On branch master
	nothing to commit, working directory clean</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git submodule add git://github.com/chneukirchen/rack.git rack
	Initialized empty Git repository in /opt/subtest/rack/.git/
	remote: Counting objects: 3181, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223013Z" creationid="Prikryl" creationdate="20151023T223013Z">
        <seg>$ git submodule add git://github.com/chneukirchen/rack.git rack
	Initialized empty Git repository in /opt/subtest/rack/.git/
	remote: Counting objects: 3181, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git submodule init
	Submodule 'rack' (git://github.com/chneukirchen/rack.git) registered for path 'rack'
	$ git submodule update
	Initialized empty Git repository in /opt/myproject/rack/.git/
	remote: Counting objects: 3181, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223044Z" creationid="Prikryl" creationdate="20151023T223044Z">
        <seg>$ git submodule init
	Submodule 'rack' (git://github.com/chneukirchen/rack.git) registered for path 'rack'
	$ git submodule update
	Initialized empty Git repository in /opt/myproject/rack/.git/
	remote: Counting objects: 3181, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git submodule update
	fatal: reference isn’t a tree: 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
	Unable to checkout '6c5e70b984a60b3cecd395edd5ba7575bf58e0' in submodule path 'rack'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223100Z" creationid="Prikryl" creationdate="20151023T223100Z">
        <seg>$ git submodule update
	fatal: reference isn’t a tree: 6c5e70b984a60b3cecd395edd5b48a7575bf58e0
	Unable to checkout '6c5e70b984a60b3cecd395edd5ba7575bf58e0' in submodule path 'rack'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git submodule update
	remote: Counting objects: 5, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223055Z" creationid="Prikryl" creationdate="20151023T223055Z">
        <seg>$ git submodule update
	remote: Counting objects: 5, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn blame README.txt
	 2   temporal Protocol Buffers - Google's data interchange format
	 2   temporal Copyright 2008 Google Inc.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091359Z" creationid="Prikryl" creationdate="20151024T091359Z">
        <seg>$ git svn blame README.txt
	 2   temporal Protocol Buffers - Google's data interchange format
	 2   temporal Copyright 2008 Google Inc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn branch opera
	Copying file:///tmp/test-svn/trunk at r87 to file:///tmp/test-svn/branches/opera...
	Found possible branch point: file:///tmp/test-svn/trunk =&gt; \
	  file:///tmp/test-svn/branches/opera, 87
	Found branch parent: (opera) 1f6bfe471083cbca06ac8d4176f7ad4de0d62e5f
	Following parent with do_switch
	Successfully followed parent
	r89 = 9b6fe0b90c5c9adf9165f700897518dbc54a7cbf (opera)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091344Z" creationid="Prikryl" creationdate="20151024T091344Z">
        <seg>$ git svn branch opera
	Copying file:///tmp/test-svn/trunk at r87 to file:///tmp/test-svn/branches/opera...
	Found possible branch point: file:///tmp/test-svn/trunk =&gt; \
	  file:///tmp/test-svn/branches/opera, 87
	Found branch parent: (opera) 1f6bfe471083cbca06ac8d4176f7ad4de0d62e5f
	Following parent with do_switch
	Successfully followed parent
	r89 = 9b6fe0b90c5c9adf9165f700897518dbc54a7cbf (opera)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
	Initialized empty Git repository in /Users/schacon/projects/testsvnsync/svn/.git/
	r1 = b4e387bc68740b5af56c2a5faf4003ae42bd135c (trunk)
	      A    m4/acx_pthread.m4
	      A    m4/stl_hash.m4
	...
	r75 = d1957f3b307922124eec6314e15bcda59e3d9610 (trunk)
	Found possible branch point: file:///tmp/test-svn/trunk =&gt; \
	    file:///tmp/test-svn /branches/my-calc-branch, 75
	Found branch parent: (my-calc-branch) d1957f3b307922124eec6314e15bcda59e3d9610
	Following parent with do_switch
	Successfully followed parent
	r76 = 8624824ecc0badd73f40ea2f01fce51894189b01 (my-calc-branch)
	Checked out HEAD:
	 file:///tmp/test-svn/branches/my-calc-branch r76</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090941Z" creationid="Prikryl" creationdate="20151024T090941Z">
        <seg>$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
	Initialized empty Git repository in /Users/schacon/projects/testsvnsync/svn/.git/
	r1 = b4e387bc68740b5af56c2a5faf4003ae42bd135c (trunk)
	      A    m4/acx_pthread.m4
	      A    m4/stl_hash.m4
	...
	r75 = d1957f3b307922124eec6314e15bcda59e3d9610 (trunk)
	Found possible branch point: file:///tmp/test-svn/trunk =&gt; \
	    file:///tmp/test-svn /branches/my-calc-branch, 75
	Found branch parent: (my-calc-branch) d1957f3b307922124eec6314e15bcda59e3d9610
	Following parent with do_switch
	Successfully followed parent
	r76 = 8624824ecc0badd73f40ea2f01fce51894189b01 (my-calc-branch)
	Checked out HEAD:
	 file:///tmp/test-svn/branches/my-calc-branch r76</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn clone file:///tmp/test-svn -s</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090943Z" creationid="Prikryl" creationdate="20151024T090943Z">
        <seg>$ git svn clone file:///tmp/test-svn -s</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn clone http://my-project.googlecode.com/svn/ \
	      --authors-file=users.txt --no-metadata -s my_project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091416Z" creationid="Prikryl" creationdate="20151024T091416Z">
        <seg>$ git svn clone http://my-project.googlecode.com/svn/ \
	      --authors-file=users.txt --no-metadata -s my_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      CHANGES.txt
	Committed r85
	       M      CHANGES.txt
	r85 = 4bfebeec434d156c36f2bcd18f4e3d97dc3269a2 (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk
	COPYING.txt: locally modified
	INSTALL.txt: locally modified
	       M      COPYING.txt
	       M      INSTALL.txt
	Committed r86
	       M      INSTALL.txt
	       M      COPYING.txt
	r86 = 2647f6b86ccfcaad4ec58c520e369ec81f7c283c (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091343Z" creationid="Prikryl" creationdate="20151024T091343Z">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      CHANGES.txt
	Committed r85
	       M      CHANGES.txt
	r85 = 4bfebeec434d156c36f2bcd18f4e3d97dc3269a2 (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk
	COPYING.txt: locally modified
	INSTALL.txt: locally modified
	       M      COPYING.txt
	       M      INSTALL.txt
	Committed r86
	       M      INSTALL.txt
	       M      COPYING.txt
	r86 = 2647f6b86ccfcaad4ec58c520e369ec81f7c283c (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      README.txt
	Committed r79
	       M      README.txt
	r79 = 938b1a547c2cc92033b74d32030e86468294a5c8 (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091119Z" creationid="Prikryl" creationdate="20151024T091119Z">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      README.txt
	Committed r79
	       M      README.txt
	r79 = 938b1a547c2cc92033b74d32030e86468294a5c8 (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      README.txt
	Committed r81
	       M      README.txt
	r81 = 456cbe6337abe49154db70106d1836bc1332deed (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091339Z" creationid="Prikryl" creationdate="20151024T091339Z">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      README.txt
	Committed r81
	       M      README.txt
	r81 = 456cbe6337abe49154db70106d1836bc1332deed (trunk)
	No changes between current HEAD and refs/remotes/trunk
	Resetting to the latest refs/remotes/trunk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      configure.ac
	Committed r84
	       M      autogen.sh
	r83 = 8aa54a74d452f82eee10076ab2584c1fc424853b (trunk)
	       M      configure.ac
	r84 = cdbac939211ccb18aa744e581e46563af5d962d0 (trunk)
	W: d2f23b80f67aaaa1f6f5aaef48fce3263ac71a92 and refs/remotes/trunk differ, \
	  using rebase:
	:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 \
	  015e4c98c482f0fa71e4d5434338014530b37fa6 M   autogen.sh
	First, rewinding head to replay your work on top of it...
	Nothing to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091341Z" creationid="Prikryl" creationdate="20151024T091341Z">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	       M      configure.ac
	Committed r84
	       M      autogen.sh
	r83 = 8aa54a74d452f82eee10076ab2584c1fc424853b (trunk)
	       M      configure.ac
	r84 = cdbac939211ccb18aa744e581e46563af5d962d0 (trunk)
	W: d2f23b80f67aaaa1f6f5aaef48fce3263ac71a92 and refs/remotes/trunk differ, \
	  using rebase:
	:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 \
	  015e4c98c482f0fa71e4d5434338014530b37fa6 M   autogen.sh
	First, rewinding head to replay your work on top of it...
	Nothing to do.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	Merge conflict during commit: Your file or directory 'README.txt' is probably \
	out-of-date: resource out of date; try updating at /Users/schacon/libexec/git-\
	core/git-svn line 482</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091336Z" creationid="Prikryl" creationdate="20151024T091336Z">
        <seg>$ git svn dcommit
	Committing to file:///tmp/test-svn/trunk ...
	Merge conflict during commit: Your file or directory 'README.txt' is probably \
	out-of-date: resource out of date; try updating at /Users/schacon/libexec/git-\
	core/git-svn line 482</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn info
	Path: .</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091402Z" creationid="Prikryl" creationdate="20151024T091402Z">
        <seg>$ git svn info
	Path: .</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn log
	------------------------------------------------------------------------
	r87 | schacon | 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009) | 2 lines</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091347Z" creationid="Prikryl" creationdate="20151024T091347Z">
        <seg>$ git svn log
	------------------------------------------------------------------------
	r87 | schacon | 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009) | 2 lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn rebase
	       M      README.txt
	r80 = ff829ab914e8775c7c025d741beb3d523ee30bc4 (trunk)
	First, rewinding head to replay your work on top of it...
	Applying: first user change</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091337Z" creationid="Prikryl" creationdate="20151024T091337Z">
        <seg>$ git svn rebase
	       M      README.txt
	r80 = ff829ab914e8775c7c025d741beb3d523ee30bc4 (trunk)
	First, rewinding head to replay your work on top of it...
	Applying: first user change</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn rebase
	       M      generate_descriptor_proto.sh
	r82 = bd16df9173e424c6f52c337ab6efa7f7643282f1 (trunk)
	First, rewinding head to replay your work on top of it...
	Fast-forwarded master to refs/remotes/trunk.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091342Z" creationid="Prikryl" creationdate="20151024T091342Z">
        <seg>$ git svn rebase
	       M      generate_descriptor_proto.sh
	r82 = bd16df9173e424c6f52c337ab6efa7f7643282f1 (trunk)
	First, rewinding head to replay your work on top of it...
	Fast-forwarded master to refs/remotes/trunk.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git svn show-ignore &gt; .git/info/exclude</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091412Z" creationid="Prikryl" creationdate="20151024T091412Z">
        <seg>$ git svn show-ignore &gt; .git/info/exclude</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git symbolic-ref HEAD
	refs/heads/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091658Z" creationid="Prikryl" creationdate="20151024T091658Z">
        <seg>$ git symbolic-ref HEAD
	refs/heads/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git symbolic-ref HEAD refs/heads/test
	$ cat .git/HEAD
	ref: refs/heads/test</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091659Z" creationid="Prikryl" creationdate="20151024T091659Z">
        <seg>$ git symbolic-ref HEAD refs/heads/test
	$ cat .git/HEAD
	ref: refs/heads/test</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git symbolic-ref HEAD test
	fatal: Refusing to point HEAD outside of refs/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091700Z" creationid="Prikryl" creationdate="20151024T091700Z">
        <seg>$ git symbolic-ref HEAD test
	fatal: Refusing to point HEAD outside of refs/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag
	v0.1
	v1.2
	v1.3
	v1.4
	v1.4-lw
	v1.5</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102235Z" creationid="Prikryl" creationdate="20151023T102235Z">
        <seg>$ git tag
	v0.1
	v1.2
	v1.3
	v1.4
	v1.4-lw
	v1.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag
	v0.1
	v1.3</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101840Z" creationid="Prikryl" creationdate="20151023T101840Z">
        <seg>$ git tag
	v0.1
	v1.3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221506Z" creationid="Prikryl" creationdate="20151023T221506Z">
        <seg>$ git tag -a maintainer-pgp-pub 659ef797d181633c87ec71ac3f9ba29fe5775b92</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m 'test tag'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091702Z" creationid="Prikryl" creationdate="20151024T091702Z">
        <seg>$ git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m 'test tag'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -a v1.2 -m 'version 1.2' 9fceb02</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102234Z" creationid="Prikryl" creationdate="20151023T102234Z">
        <seg>$ git tag -a v1.2 -m 'version 1.2' 9fceb02</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -a v1.4 -m 'my version 1.4'
	$ git tag
	v0.1
	v1.3
	v1.4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101843Z" creationid="Prikryl" creationdate="20151023T101843Z">
        <seg>$ git tag -a v1.4 -m 'my version 1.4'
	$ git tag
	v0.1
	v1.3
	v1.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -l 'v1.4.2.*'
	v1.4.2.1
	v1.4.2.2
	v1.4.2.3
	v1.4.2.4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101841Z" creationid="Prikryl" creationdate="20151023T101841Z">
        <seg>$ git tag -l 'v1.4.2.*'
	v1.4.2.1
	v1.4.2.2
	v1.4.2.3
	v1.4.2.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -s &lt;tag-name&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223201Z" creationid="Prikryl" creationdate="20151023T223201Z">
        <seg>$ git tag -s &lt;tag-name&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -s v1.5 -m 'my signed 1.5 tag'
	You need a passphrase to unlock the secret key for
	user: "Scott Chacon &lt;schacon@gee-mail.com&gt;"
	1024-bit DSA key, ID F721C45A, created 2009-02-09</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101858Z" creationid="Prikryl" creationdate="20151023T101858Z">
        <seg>$ git tag -s v1.5 -m 'my signed 1.5 tag'
	You need a passphrase to unlock the secret key for
	user: "Scott Chacon &lt;schacon@gee-mail.com&gt;"
	1024-bit DSA key, ID F721C45A, created 2009-02-09</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -s v1.5 -m 'my signed 1.5 tag'
	You need a passphrase to unlock the secret key for
	user: "Scott Chacon &lt;schacon@gmail.com&gt;"
	1024-bit DSA key, ID F721C45A, created 2009-02-09</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221458Z" creationid="Prikryl" creationdate="20151023T221458Z">
        <seg>$ git tag -s v1.5 -m 'my signed 1.5 tag'
	You need a passphrase to unlock the secret key for
	user: "Scott Chacon &lt;schacon@gmail.com&gt;"
	1024-bit DSA key, ID F721C45A, created 2009-02-09</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag -v v1.4.2.1
	object 883653babd8ee7ea23e6a5c392bb739348b1eb61
	type commit
	tag v1.4.2.1
	tagger Junio C Hamano &lt;junkio@cox.net&gt; 1158138501 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101910Z" creationid="Prikryl" creationdate="20151023T101910Z">
        <seg>$ git tag -v v1.4.2.1
	object 883653babd8ee7ea23e6a5c392bb739348b1eb61
	type commit
	tag v1.4.2.1
	tagger Junio C Hamano &lt;junkio@cox.net&gt; 1158138501 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git tag v1.4-lw
	$ git tag
	v0.1
	v1.3
	v1.4
	v1.4-lw
	v1.5</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101907Z" creationid="Prikryl" creationdate="20151023T101907Z">
        <seg>$ git tag v1.4-lw
	$ git tag
	v0.1
	v1.3
	v1.4
	v1.4-lw
	v1.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git unstage fileA
	$ git reset HEAD fileA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102333Z" creationid="Prikryl" creationdate="20151023T102333Z">
        <seg>$ git unstage fileA
	$ git reset HEAD fileA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git update-index --add --cacheinfo 100644 \
	  83baae61804e65cc73a7201a7252750c76066a30 test.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091537Z" creationid="Prikryl" creationdate="20151024T091537Z">
        <seg>$ git update-index --add --cacheinfo 100644 \
	  83baae61804e65cc73a7201a7252750c76066a30 test.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091636Z" creationid="Prikryl" creationdate="20151024T091636Z">
        <seg>$ git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git update-ref refs/heads/test cac0ca</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091637Z" creationid="Prikryl" creationdate="20151024T091637Z">
        <seg>$ git update-ref refs/heads/test cac0ca</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091701Z" creationid="Prikryl" creationdate="20151024T091701Z">
        <seg>$ git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git verify-pack -v .git/objects/pack/pack-3f8c0...bb.idx | sort -k 3 -n | tail -3
	e3f094f522629ae358806b17daf78246c27c007b blob   1486 734 4667
	05408d195263d853f09dca71d55116663690c27c blob   12908 3478 1189
	7a9eb2fba2b1811321254ac360970fc169ba2330 blob   2056716 2056872 5401</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091825Z" creationid="Prikryl" creationdate="20151024T091825Z">
        <seg>$ git verify-pack -v .git/objects/pack/pack-3f8c0...bb.idx | sort -k 3 -n | tail -3
	e3f094f522629ae358806b17daf78246c27c007b blob   1486 734 4667
	05408d195263d853f09dca71d55116663690c27c blob   12908 3478 1189
	7a9eb2fba2b1811321254ac360970fc169ba2330 blob   2056716 2056872 5401</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git verify-pack -v \
	  .git/objects/pack/pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.idx
	0155eb4229851634a0f03eb265b69f5a2d56f341 tree   71 76 5400
	05408d195263d853f09dca71d55116663690c27c blob   12908 3478 874
	09f01cea547666f58d6a8d809583841a7c6f0130 tree   106 107 5086
	1a410efbd13591db07496601ebc7a059dd55cfe9 commit 225 151 322
	1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob   10 19 5381
	3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree   101 105 5211
	484a59275031909e19aadb7c92262719cfcdf19a commit 226 153 169
	83baae61804e65cc73a7201a7252750c76066a30 blob   10 19 5362
	9585191f37f7b0fb9444f35a9bf50de191beadc2 tag    136 127 5476
	9bc1dc421dcd51b4ac296e3e5b6e2a99cf44391e blob   7 18 5193 1 \
	  05408d195263d853f09dca71d55116663690c27c
	ab1afef80fac8e34258ff41fc1b867c702daa24b commit 232 157 12
	cac0cab538b970a37ea1e769cbbde608743bc96d commit 226 154 473
	d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree   36 46 5316
	e3f094f522629ae358806b17daf78246c27c007b blob   1486 734 4352
	f8f51d7d8a1760462eca26eebafde32087499533 tree   106 107 749
	fa49b077972391ad58037050f2a75f74e3671e92 blob   9 18 856
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d commit 177 122 627
	chain length = 1: 1 object
	pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.pack: ok</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091732Z" creationid="Prikryl" creationdate="20151024T091732Z">
        <seg>$ git verify-pack -v \
	  .git/objects/pack/pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.idx
	0155eb4229851634a0f03eb265b69f5a2d56f341 tree   71 76 5400
	05408d195263d853f09dca71d55116663690c27c blob   12908 3478 874
	09f01cea547666f58d6a8d809583841a7c6f0130 tree   106 107 5086
	1a410efbd13591db07496601ebc7a059dd55cfe9 commit 225 151 322
	1f7a7a472abf3dd9643fd615f6da379c4acb3e3a blob   10 19 5381
	3c4e9cd789d88d8d89c1073707c3585e41b0e614 tree   101 105 5211
	484a59275031909e19aadb7c92262719cfcdf19a commit 226 153 169
	83baae61804e65cc73a7201a7252750c76066a30 blob   10 19 5362
	9585191f37f7b0fb9444f35a9bf50de191beadc2 tag    136 127 5476
	9bc1dc421dcd51b4ac296e3e5b6e2a99cf44391e blob   7 18 5193 1 \
	  05408d195263d853f09dca71d55116663690c27c
	ab1afef80fac8e34258ff41fc1b867c702daa24b commit 232 157 12
	cac0cab538b970a37ea1e769cbbde608743bc96d commit 226 154 473
	d8329fc1cc938780ffdd9f94e0d364e0ea74f579 tree   36 46 5316
	e3f094f522629ae358806b17daf78246c27c007b blob   1486 734 4352
	f8f51d7d8a1760462eca26eebafde32087499533 tree   106 107 749
	fa49b077972391ad58037050f2a75f74e3671e92 blob   9 18 856
	fdf4fc3344e67ab068f836878b6c4951e3b15f3d commit 177 122 627
	chain length = 1: 1 object
	pack-7a16e4488ae40c7d2bc56ea2bd43e25212a66c45.pack: ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git write-tree
	0155eb4229851634a0f03eb265b69f5a2d56f341
	$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091540Z" creationid="Prikryl" creationdate="20151024T091540Z">
        <seg>$ git write-tree
	0155eb4229851634a0f03eb265b69f5a2d56f341
	$ git cat-file -p 0155eb4229851634a0f03eb265b69f5a2d56f341
	100644 blob fa49b077972391ad58037050f2a75f74e3671e92      new.txt
	100644 blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a      test.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git write-tree
	d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091538Z" creationid="Prikryl" creationdate="20151024T091538Z">
        <seg>$ git write-tree
	d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	$ git cat-file -p d8329fc1cc938780ffdd9f94e0d364e0ea74f579
	100644 blob 83baae61804e65cc73a7201a7252750c76066a30      test.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ git-p4 clone //public/jam/src@all /opt/p4import
	Importing from //public/jam/src@all into /opt/p4import
	Reinitialized existing Git repository in /opt/p4import/.git/
	Import destination: refs/remotes/p4/master
	Importing revision 4409 (100%)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091429Z" creationid="Prikryl" creationdate="20151024T091429Z">
        <seg>$ git-p4 clone //public/jam/src@all /opt/p4import
	Importing from //public/jam/src@all into /opt/p4import
	Reinitialized existing Git repository in /opt/p4import/.git/
	Import destination: refs/remotes/p4/master
	Importing revision 4409 (100%)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ gpg --list-keys
	/Users/schacon/.gnupg/pubring.gpg
	---------------------------------
	pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
	uid                  Scott Chacon &lt;schacon@gmail.com&gt;
	sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221503Z" creationid="Prikryl" creationdate="20151023T221503Z">
        <seg>$ gpg --list-keys
	/Users/schacon/.gnupg/pubring.gpg
	---------------------------------
	pub   1024D/F721C45A 2009-02-09 [expires: 2010-02-09]
	uid                  Scott Chacon &lt;schacon@gmail.com&gt;
	sub   2048g/45D02282 2009-02-09 [expires: 2010-02-09]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ gpg -a --export F721C45A | git hash-object -w --stdin
	659ef797d181633c87ec71ac3f9ba29fe5775b92</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221504Z" creationid="Prikryl" creationdate="20151023T221504Z">
        <seg>$ gpg -a --export F721C45A | git hash-object -w --stdin
	659ef797d181633c87ec71ac3f9ba29fe5775b92</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ irb
	&gt;&gt; content = "what is up, doc?"
	=&gt; "what is up, doc?"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091628Z" creationid="Prikryl" creationdate="20151024T091628Z">
        <seg>$ irb
	&gt;&gt; content = "what is up, doc?"
	=&gt; "what is up, doc?"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ln -s /opt/git /home/git/repositories</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105234Z" creationid="Prikryl" creationdate="20151023T105234Z">
        <seg>$ ln -s /opt/git /home/git/repositories</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ls
	$ git reset --hard master
	HEAD is now at 10bfe7d imported from current
	$ ls
	file.rb  lib</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091523Z" creationid="Prikryl" creationdate="20151024T091523Z">
        <seg>$ ls
	$ git reset --hard master
	HEAD is now at 10bfe7d imported from current
	$ ls
	file.rb  lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ls
	AUTHORS	       KNOWN-ISSUES   Rakefile      contrib	       lib
	COPYING	       README         bin           example	       test
	$ git checkout master
	Switched to branch "master"
	$ ls
	README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223133Z" creationid="Prikryl" creationdate="20151023T223133Z">
        <seg>$ ls
	AUTHORS	       KNOWN-ISSUES   Rakefile      contrib	       lib
	COPYING	       README         bin           example	       test
	$ git checkout master
	Switched to branch "master"
	$ ls
	README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ls
	HEAD
	branches/
	config
	description
	hooks/
	index
	info/
	objects/
	refs/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091524Z" creationid="Prikryl" creationdate="20151024T091524Z">
        <seg>$ ls
	HEAD
	branches/
	config
	description
	hooks/
	index
	info/
	objects/
	refs/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ls /opt/import_from
	back_2009_01_02
	back_2009_01_04
	back_2009_01_14
	back_2009_02_03
	current</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091444Z" creationid="Prikryl" creationdate="20151024T091444Z">
        <seg>$ ls /opt/import_from
	back_2009_01_02
	back_2009_01_04
	back_2009_01_14
	back_2009_02_03
	current</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ mkdir /tmp/test-svn
	$ svnadmin create /tmp/test-svn</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090928Z" creationid="Prikryl" creationdate="20151024T090928Z">
        <seg>$ mkdir /tmp/test-svn
	$ svnadmin create /tmp/test-svn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ mkdir test
	$ cd test
	$ git init
	Initialized empty Git repository in /tmp/test/.git/
	$ find .git/objects
	.git/objects
	.git/objects/info
	.git/objects/pack
	$ find .git/objects -type f
	$</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091525Z" creationid="Prikryl" creationdate="20151024T091525Z">
        <seg>$ mkdir test
	$ cd test
	$ git init
	Initialized empty Git repository in /tmp/test/.git/
	$ find .git/objects
	.git/objects
	.git/objects/info
	.git/objects/pack
	$ find .git/objects -type f
	$</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ mv /home/git/.ssh/authorized_keys /home/git/.ssh/ak.bak</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105236Z" creationid="Prikryl" creationdate="20151023T105236Z">
        <seg>$ mv /home/git/.ssh/authorized_keys /home/git/.ssh/ak.bak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ mv README README.txt
	$ git rm README
	$ git add README.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205754Z" creationid="Prikryl" creationdate="20151022T205754Z">
        <seg>$ mv README README.txt
	$ git rm README
	$ git add README.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ mv rack /tmp/
	$ git checkout master
	Switched to branch "master"
	$ ls
	README	rack</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223121Z" creationid="Prikryl" creationdate="20151023T223121Z">
        <seg>$ mv rack /tmp/
	$ git checkout master
	Switched to branch "master"
	$ ls
	README	rack</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ rm -Rf .git/refs/original
	$ rm -Rf .git/logs/
	$ git gc
	Counting objects: 19, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091830Z" creationid="Prikryl" creationdate="20151024T091830Z">
        <seg>$ rm -Rf .git/refs/original
	$ rm -Rf .git/logs/
	$ git gc
	Counting objects: 19, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ rm -Rf rack/
	$ git submodule add git@github.com:schacon/rack.git rack
	'rack' already exists in the index</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223115Z" creationid="Prikryl" creationdate="20151023T223115Z">
        <seg>$ rm -Rf rack/
	$ git submodule add git@github.com:schacon/rack.git rack
	'rack' already exists in the index</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ rm grit.gemspec
	$ git status
	On branch master
	Changes not staged for commit:
	  (use "git add/rm &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        deleted:    grit.gemspec
	
	no changes added to commit (use "git add" and/or "git commit -a")</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205730Z" creationid="Prikryl" creationdate="20151022T205730Z">
        <seg>$ rm grit.gemspec
	$ git status
	On branch master
	Changes not staged for commit:
	  (use "git add/rm &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        deleted:    grit.gemspec
	
	no changes added to commit (use "git add" and/or "git commit -a")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ rm test.txt
	$ git checkout -- test.txt
	$ cat test.txt
	$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090738Z" creationid="Prikryl" creationdate="20151024T090738Z">
        <seg>$ rm test.txt
	$ git checkout -- test.txt
	$ cat test.txt
	$Id: 42812b7653c7b88933f8a9d6cad0ca16714b9bb3 $</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ruby import.rb /opt/import_from
	commit refs/heads/master
	mark :1
	committer Scott Chacon &lt;schacon@geemail.com&gt; 1230883200 -0700
	data 29
	imported from back_2009_01_02deleteall
	M 644 inline file.rb
	data 12
	version two
	commit refs/heads/master
	mark :2
	committer Scott Chacon &lt;schacon@geemail.com&gt; 1231056000 -0700
	data 29
	imported from back_2009_01_04from :1
	deleteall
	M 644 inline file.rb
	data 14
	version three
	M 644 inline new.rb
	data 16
	new version one
	(...)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091503Z" creationid="Prikryl" creationdate="20151024T091503Z">
        <seg>$ ruby import.rb /opt/import_from
	commit refs/heads/master
	mark :1
	committer Scott Chacon &lt;schacon@geemail.com&gt; 1230883200 -0700
	data 29
	imported from back_2009_01_02deleteall
	M 644 inline file.rb
	data 12
	version two
	commit refs/heads/master
	mark :2
	committer Scott Chacon &lt;schacon@geemail.com&gt; 1231056000 -0700
	data 29
	imported from back_2009_01_04from :1
	deleteall
	M 644 inline file.rb
	data 14
	version three
	M 644 inline new.rb
	data 16
	new version one
	(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ scp -r my_project.git user@git.example.com:/opt/git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104929Z" creationid="Prikryl" creationdate="20151023T104929Z">
        <seg>$ scp -r my_project.git user@git.example.com:/opt/git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ssh -x git@github.com "git-receive-pack 'schacon/simplegit-progit.git'"
	005bca82a6dff817ec66f4437202690a93763949 refs/heads/master report-status delete-refs
	003e085bb3bcb608e1e84b2432f8ecbe6306e7e7 refs/heads/topic
	0000</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091801Z" creationid="Prikryl" creationdate="20151024T091801Z">
        <seg>$ ssh -x git@github.com "git-receive-pack 'schacon/simplegit-progit.git'"
	005bca82a6dff817ec66f4437202690a93763949 refs/heads/master report-status delete-refs
	003e085bb3bcb608e1e84b2432f8ecbe6306e7e7 refs/heads/topic
	0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ssh -x git@github.com "git-upload-pack 'schacon/simplegit-progit.git'"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091806Z" creationid="Prikryl" creationdate="20151024T091806Z">
        <seg>$ ssh -x git@github.com "git-upload-pack 'schacon/simplegit-progit.git'"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ssh git@gitserver
	PTY allocation request failed on channel 0
	ERROR:gitosis.serve.main:Need SSH_ORIGINAL_COMMAND in environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105240Z" creationid="Prikryl" creationdate="20151023T105240Z">
        <seg>$ ssh git@gitserver
	PTY allocation request failed on channel 0
	ERROR:gitosis.serve.main:Need SSH_ORIGINAL_COMMAND in environment.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ssh git@gitserver
	fatal: What do you think I am?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105008Z" creationid="Prikryl" creationdate="20151023T105008Z">
        <seg>$ ssh git@gitserver
	fatal: What do you think I am?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ssh user@git.example.com
	$ cd /opt/git/my_project.git
	$ git init --bare --shared</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104931Z" creationid="Prikryl" creationdate="20151023T104931Z">
        <seg>$ ssh user@git.example.com
	$ cd /opt/git/my_project.git
	$ git init --bare --shared</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ ssh-keygen
	Generating public/private rsa key pair.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104934Z" creationid="Prikryl" creationdate="20151023T104934Z">
        <seg>$ ssh-keygen
	Generating public/private rsa key pair.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ sudo -H -u git gitosis-init &lt; /tmp/id_dsa.pub
	Initialized empty Git repository in /opt/git/gitosis-admin.git/
	Reinitialized existing Git repository in /opt/git/gitosis-admin.git/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105237Z" creationid="Prikryl" creationdate="20151023T105237Z">
        <seg>$ sudo -H -u git gitosis-init &lt; /tmp/id_dsa.pub
	Initialized empty Git repository in /opt/git/gitosis-admin.git/
	Reinitialized existing Git repository in /opt/git/gitosis-admin.git/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ sudo adduser git
	$ su git
	$ cd
	$ mkdir .ssh</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104943Z" creationid="Prikryl" creationdate="20151023T104943Z">
        <seg>$ sudo adduser git
	$ su git
	$ cd
	$ mkdir .ssh</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ sudo chmod +x /usr/local/bin/extMerge
	$ sudo chmod +x /usr/local/bin/extDiff</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090305Z" creationid="Prikryl" creationdate="20151024T090305Z">
        <seg>$ sudo chmod +x /usr/local/bin/extMerge
	$ sudo chmod +x /usr/local/bin/extDiff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ sudo chmod 755 /opt/git/gitosis-admin.git/hooks/post-update</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105239Z" creationid="Prikryl" creationdate="20151023T105239Z">
        <seg>$ sudo chmod 755 /opt/git/gitosis-admin.git/hooks/post-update</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ sudo port install git +svn +doc +bash_completion +gitweb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204838Z" creationid="Prikryl" creationdate="20151022T204838Z">
        <seg>$ sudo port install git +svn +doc +bash_completion +gitweb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ sudo vim /etc/passwd</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105003Z" creationid="Prikryl" creationdate="20151023T105003Z">
        <seg>$ sudo vim /etc/passwd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ svn log ^/ --xml | grep -P "^&lt;author" | sort -u | \
	      perl -pe 's/&lt;author&gt;(.*?)&lt;\/author&gt;/$1 = /' &gt; users.txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091415Z" creationid="Prikryl" creationdate="20151024T091415Z">
        <seg>$ svn log ^/ --xml | grep -P "^&lt;author" | sort -u | \
	      perl -pe 's/&lt;author&gt;(.*?)&lt;\/author&gt;/$1 = /' &gt; users.txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ svnsync init file:///tmp/test-svn http://progit-example.googlecode.com/svn/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090930Z" creationid="Prikryl" creationdate="20151024T090930Z">
        <seg>$ svnsync init file:///tmp/test-svn http://progit-example.googlecode.com/svn/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ svnsync sync file:///tmp/test-svn
	Committed revision 1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090931Z" creationid="Prikryl" creationdate="20151024T090931Z">
        <seg>$ svnsync sync file:///tmp/test-svn
	Committed revision 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ tar -zxf git-1.7.2.2.tar.gz
	$ cd git-1.7.2.2
	$ make prefix=/usr/local all
	$ sudo make prefix=/usr/local install</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204758Z" creationid="Prikryl" creationdate="20151022T204758Z">
        <seg>$ tar -zxf git-1.7.2.2.tar.gz
	$ cd git-1.7.2.2
	$ make prefix=/usr/local all
	$ sudo make prefix=/usr/local install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ vim README
	$ git status
	On branch master
	Untracked files:
	  (use "git add &lt;file&gt;..." to include in what will be committed)
	
	        README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205029Z" creationid="Prikryl" creationdate="20151022T205029Z">
        <seg>$ vim README
	$ git status
	On branch master
	Untracked files:
	  (use "git add &lt;file&gt;..." to include in what will be committed)
	
	        README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ vim benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README
	        modified:   benchmarks.rb
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205114Z" creationid="Prikryl" creationdate="20151022T205114Z">
        <seg>$ vim benchmarks.rb
	$ git status
	On branch master
	Changes to be committed:
	  (use "git reset HEAD &lt;file&gt;..." to unstage)
	
	        new file:   README
	        modified:   benchmarks.rb
	
	Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ vim index.html
	$ git commit -a -m 'add a new footer [issue 53]'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102502Z" creationid="Prikryl" creationdate="20151023T102502Z">
        <seg>$ vim index.html
	$ git commit -a -m 'add a new footer [issue 53]'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ vim lib/simplegit.rb
	$ git commit -am 'made the ls-tree function recursive'
	[featureB e5b0fdc] made the ls-tree function recursive
	 1 files changed, 1 insertions(+), 1 deletions(-)
	$ vim lib/simplegit.rb
	$ git commit -am 'add ls-files'
	[featureB 8512791] add ls-files
	 1 files changed, 5 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220658Z" creationid="Prikryl" creationdate="20151023T220658Z">
        <seg>$ vim lib/simplegit.rb
	$ git commit -am 'made the ls-tree function recursive'
	[featureB e5b0fdc] made the ls-tree function recursive
	 1 files changed, 1 insertions(+), 1 deletions(-)
	$ vim lib/simplegit.rb
	$ git commit -am 'add ls-files'
	[featureB 8512791] add ls-files
	 1 files changed, 5 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ vim test.rb
	$ git commit -a -m 'made a change'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102457Z" creationid="Prikryl" creationdate="20151023T102457Z">
        <seg>$ vim test.rb
	$ git commit -a -m 'made a change'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ vim test.rb
	$ git commit -a -m 'made other changes'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102459Z" creationid="Prikryl" creationdate="20151023T102459Z">
        <seg>$ vim test.rb
	$ git commit -a -m 'made other changes'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ yum install curl-devel expat-devel gettext-devel \
	  openssl-devel zlib-devel perl-devel asciidoc xmlto</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204651Z" creationid="Prikryl" creationdate="20151022T204651Z">
        <seg>$ yum install curl-devel expat-devel gettext-devel \
	  openssl-devel zlib-devel perl-devel asciidoc xmlto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$ yum install git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204814Z" creationid="Prikryl" creationdate="20151022T204814Z">
        <seg>$ yum install git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$author = 'Scott Chacon &lt;schacon@example.com&gt;'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091452Z" creationid="Prikryl" creationdate="20151024T091452Z">
        <seg>$author = 'Scott Chacon &lt;schacon@example.com&gt;'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$marks = []
	def convert_dir_to_mark(dir)
	  if !$marks.include?(dir)
	    $marks &lt;&lt; dir
	  end
	  ($marks.index(dir) + 1).to_s
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091449Z" creationid="Prikryl" creationdate="20151024T091449Z">
        <seg>$marks = []
	def convert_dir_to_mark(dir)
	  if !$marks.include?(dir)
	    $marks &lt;&lt; dir
	  end
	  ($marks.index(dir) + 1).to_s
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$projects_list = "/home/git/gitosis/projects.list";
	$projectroot = "/home/git/repositories";
	$export_ok = "git-daemon-export-ok";
	@git_base_url_list = ('git://gitserver');</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105522Z" creationid="Prikryl" creationdate="20151023T105522Z">
        <seg>$projects_list = "/home/git/gitosis/projects.list";
	$projectroot = "/home/git/repositories";
	$export_ok = "git-daemon-export-ok";
	@git_base_url_list = ('git://gitserver');</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$regex = /\[ref: (\d+)\]/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090836Z" creationid="Prikryl" creationdate="20151024T090836Z">
        <seg>$regex = /\[ref: (\d+)\]/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$stdout.binmode</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091502Z" creationid="Prikryl" creationdate="20151024T091502Z">
        <seg>$stdout.binmode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>$user    = ENV['USER']</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090914Z" creationid="Prikryl" creationdate="20151024T090914Z">
        <seg>$user    = ENV['USER']</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>'git mergetool' will now attempt to use one of the following tools:
	opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
	Merging:
	index.html</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103004Z" creationid="Prikryl" creationdate="20151023T103004Z">
        <seg>'git mergetool' will now attempt to use one of the following tools:
	opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
	Merging:
	index.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(For an even more explicit reminder of what you’ve modified, you can pass the `-v` option to `git commit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Chcete-li zařadit ještě podrobnější informace o tom, co jste měnili, můžete k příkazu `git commit` přidat parametr `-v`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(In Git versions 1.6.1 and later, you can also use `git diff --staged`, which may be easier to remember.) This command compares your staged changes to your last commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Ve verzích Git 1.6.1 a novějších můžete použít také příkaz `git diff --staged`, který se možná snáze pamatuje.) Tento příkaz srovná připravené změny (staged changes) s poslední revizí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(I’m replacing the protocol messages with `...` in these examples to shorten them somewhat.)</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(V následujících příkladech nahrazuji zprávy protokolů třemi tečkami, abych je trochu zkrátil.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(Note that if you specify both author and grep options, the command will match commits with both.)</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Všimněte si, že pokud použijete současně parametry author a grep, bude příkaz vyhledávat záznamy splňující obojí.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(Obviously this only works on a machine with `grep`, `sort`, and `perl` installed.) Then, redirect that output into your users.txt file so you can add the equivalent Git user data next to each entry.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Tento příkaz pochopitelně funguje pouze na počítačích, v nichž je nainstalován `grep`, `sort` a `perl`.) Poté tento výstup přesměrujte do souboru users.txt, abyste mohli vedle každého záznamu přidat stejná data o uživatelích Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(Recap: authentication is identifying who the user is, authorization is deciding if he is allowed to do what he is attempting to).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Připomeňme si: autentizace spočívá v rozpoznání uživatele, autorizací rozumíme rozhodování, zda má povolení k provádění toho, co se provést pokouší.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(See _Chapter 9_ for more information about exactly what files are contained in the `.git` directory you just created.)</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Více informací o tom, jaké soubory obsahuje právě vytvořený adresář `.git`, naleznete v _kapitole 9_.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(This is set by your shell’s `$EDITOR` environment variable — usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in _Chapter 1_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Ten je nastaven proměnnou prostředí `$EDITOR` vašeho shellu. Většinou se bude jednat o editor vim nebo emacs, ale pomocí příkazu `git config --global core.editor` můžete nastavit i jakýkoli jiný – viz _kapitola 1_.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(We’ll go over what branches are and how to use them in much more detail in _Chapter 3_.)</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Podrobněji se budeme větvím a jejich použití věnovat v _kapitole 3_.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(fix conflicts and run "git commit")
	
	Unmerged paths:
	  (use "git add &lt;file&gt;..." to mark resolution)
	
	        both modified:      index.html
	
	no changes added to commit (use "git add" and/or "git commit -a")</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102726Z" creationid="Prikryl" creationdate="20151023T102726Z">
        <seg>(fix conflicts and run "git commit")
	
	Unmerged paths:
	  (use "git add &lt;file&gt;..." to mark resolution)
	
	        both modified:      index.html
	
	no changes added to commit (use "git add" and/or "git commit -a")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>(mbox) Adding cc: Jessica Smith &lt;jessica@example.com&gt; from
	  \line 'From: Jessica Smith &lt;jessica@example.com&gt;'
	OK.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221039Z" creationid="Prikryl" creationdate="20151023T221039Z">
        <seg>(mbox) Adding cc: Jessica Smith &lt;jessica@example.com&gt; from
	  \line 'From: Jessica Smith &lt;jessica@example.com&gt;'
	OK.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	Blank lines or lines starting with `#` are ignored.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	Prázdné řádky nebo řádky začínající znakem `#` budou ignorovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	Speed
*	Simple design
*	Strong support for non-linear development (thousands of parallel branches)
*	Fully distributed
*	Able to handle large projects like the Linux kernel efficiently (speed and data size)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T111628Z" creationid="Prikryl" creationdate="20151023T111628Z">
        <seg>*	Rychlost,
*	jednoduchý návrh,
*	silná podpora nelineárního vývoje (tisíce paralelních větví),
*	plně distribuovaný,
*	schopnost efektivně spravovat velké projekty, jako je linuxové jádro (rychlost a objem dat).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	Standard glob patterns work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	Standardní masky souborů (glob patterns).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	You can end patterns with a forward slash (`/`) to specify a directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	Chcete-li označit adresář, můžete masku zakončit lomítkem (`/`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	You can negate a pattern by starting it with an exclamation point (`!`).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	Pokud řádek začíná vykřičníkem (`!`), maska na něm je negována.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	`/etc/gitconfig` file: Contains values for every user on the system and all their repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	Soubor `/etc/gitconfig` obsahuje údaje pro všechny uživatele systému a pro všechny jejich repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	`~/.gitconfig` file: Specific to your user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	Soubor `~/.gitconfig` je vázán na uživatelský účet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*	config file in the Git directory (that is, `.git/config`) of whatever repository you’re currently using: Specific to that single repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	Konfigurační soubor v adresáři Git (tedy `.git/config`) jakéhokoliv užívaného repozitáře přísluší tomuto konkrétnímu repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* Don’t set up and collaborate on a separate Git server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	 Nevytvářejte oddělený server Git ani na žádný takový nepřispívejte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* Keep a linear Git history that doesn’t contain merge commits made by `git merge`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*	 Udržujte lineární historii Git, která neobsahuje revize sloučením, vytvořené příkazem `git merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>* | 30e367c timeout code and tests
	* | 5a09431 add timeout protection to grit
	* | e1193f8 support for heads with slashes in them
	|/
	* d6016bc require time for xmlschema
	*  11d191e Merge branch 'defunkt' into local</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210157Z" creationid="Prikryl" creationdate="20151022T210157Z">
        <seg>* | 30e367c timeout code and tests
	* | 5a09431 add timeout protection to grit
	* | e1193f8 support for heads with slashes in them
	|/
	* d6016bc require time for xmlschema
	*  11d191e Merge branch 'defunkt' into local</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221621Z" creationid="Prikryl" creationdate="20151023T221621Z">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 1
	           staged     unstaged path
	  1:        +0/-1      nothing TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221628Z" creationid="Prikryl" creationdate="20151023T221628Z">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 1
	           staged     unstaged path
	  1:        +0/-1      nothing TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 1
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221630Z" creationid="Prikryl" creationdate="20151023T221630Z">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 1
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 3
	           staged     unstaged path
	  1:        +0/-1      nothing TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Revert&gt;&gt; 1
	           staged     unstaged path
	* 1:        +0/-1      nothing TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Revert&gt;&gt; [enter]
	reverted one path</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221629Z" creationid="Prikryl" creationdate="20151023T221629Z">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 3
	           staged     unstaged path
	  1:        +0/-1      nothing TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Revert&gt;&gt; 1
	           staged     unstaged path
	* 1:        +0/-1      nothing TODO
	  2:        +1/-1      nothing index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Revert&gt;&gt; [enter]
	reverted one path</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 6
	           staged     unstaged path
	  1:        +1/-1      nothing index.html
	Review diff&gt;&gt; 1
	diff --git a/index.html b/index.html
	index 4d07108..4335f49 100644
	--- a/index.html
	+++ b/index.html
	@@ -16,7 +16,7 @@ Date Finder</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221632Z" creationid="Prikryl" creationdate="20151023T221632Z">
        <seg>*** Commands ***
	  1: status     2: update      3: revert     4: add untracked
	  5: patch      6: diff        7: quit       8: help
	What now&gt; 6
	           staged     unstaged path
	  1:        +1/-1      nothing index.html
	Review diff&gt;&gt; 1
	diff --git a/index.html b/index.html
	index 4d07108..4335f49 100644
	--- a/index.html
	+++ b/index.html
	@@ -16,7 +16,7 @@ Date Finder</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Access rights reporting*: Another convenient feature is what happens when you try and just ssh to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*Přehledy uživatelských oprávnění:* Další příjemnou vlastností je to, co se stane, pokud se pouze pokusíte připojit pomocí SSH na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Delegation*: For really large installations, you can delegate responsibility for groups of repositories to various people and have them manage those pieces independently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*Delegace:* Pro opravdu velké instalace můžete delegovat zodpovědnost za skupiny a repozitáře dalším lidem a nechat je spravovat jednotlivé části nezávisle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Do not rebase commits that you have pushed to a public repository.*</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*Neprovádějte přeskládání u revizí, které jste odeslali do veřejného repozitáře.*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Logging*: Gitolite logs all successful accesses.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*Logování:* Gitolite loguje všechny úspěšné přístupy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Mirroring*: Gitolite can help you maintain multiple mirrors, and switch between them easily if the primary server goes down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*Zrcadlení:* Gitolite vám pomůže se správou více zrcadel a při výpadku hlavního serveru můžete snadno přepnout na jiný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*.c     filter=indent</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090753Z" creationid="Prikryl" creationdate="20151024T090753Z">
        <seg>*.c     filter=indent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*.doc diff=word</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090354Z" creationid="Prikryl" creationdate="20151024T090354Z">
        <seg>*.doc diff=word</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*.odt diff=odt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090713Z" creationid="Prikryl" creationdate="20151024T090713Z">
        <seg>*.odt diff=odt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*.pbxproj -crlf -diff</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090349Z" creationid="Prikryl" creationdate="20151024T090349Z">
        <seg>*.pbxproj -crlf -diff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*.pbxproj binary</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090350Z" creationid="Prikryl" creationdate="20151024T090350Z">
        <seg>*.pbxproj binary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Chapter 4* will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V _kapitole 4_ budou představeny všechny dostupné možnosti, které mohou být pro přístup do repozitáře Git na serveru nastaveny, včetně jejich předností a nevýhod.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Tracked* files are files that were in the last snapshot; they can be _unmodified_, _modified_, or _staged_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za _sledované_ jsou označovány soubory, které byly součástí posledního snímku. Mohou být ve stavu _změněn_ (modified), _nezměněn_ (unmodified) nebo _připraven k zapsání_ (staged).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>*Untracked* files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>*Nesledované* soubory jsou všechny ostatní, tedy veškeré soubory ve vašem pracovním adresáři, které nebyly obsaženy ve vašem posledním snímku a nejsou v oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+        run_code(x, 'commits 1') do
	+          git.commits.size
	+        end
	+
	         run_code(x, 'commits 2') do
	           log = git.commits('master', 15)
	           log.size</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205609Z" creationid="Prikryl" creationdate="20151022T205609Z">
        <seg>+        run_code(x, 'commits 1') do
	+          git.commits.size
	+        end
	+
	         run_code(x, 'commits 2') do
	           log = git.commits('master', 15)
	           log.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+        run_code(x, 'commits 1') do
	+          git.commits.size
	+        end
	+
	        run_code(x, 'commits 2') do
	          log = git.commits('master', 15)
	          log.size</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205641Z" creationid="Prikryl" creationdate="20151022T205641Z">
        <seg>+        run_code(x, 'commits 1') do
	+          git.commits.size
	+        end
	+
	        run_code(x, 'commits 2') do
	          log = git.commits('master', 15)
	          log.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+    @git_dir = File.expand_path(git_dir)XX
	lib/simplegit.rb:7: trailing whitespace.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110953Z" creationid="Prikryl" creationdate="20151023T110953Z">
        <seg>+    @git_dir = File.expand_path(git_dir)XX
	lib/simplegit.rb:7: trailing whitespace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+    def command(git_cmd)XXXX</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110955Z" creationid="Prikryl" creationdate="20151023T110955Z">
        <seg>+    def command(git_cmd)XXXX</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+ XXXXXXXXXXX
	lib/simplegit.rb:26: trailing whitespace.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110954Z" creationid="Prikryl" creationdate="20151023T110954Z">
        <seg>+ XXXXXXXXXXX
	lib/simplegit.rb:26: trailing whitespace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>+system for non-linear development (See Chapter 3).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090412Z" creationid="Prikryl" creationdate="20151024T090412Z">
        <seg>+system for non-linear development (See Chapter 3).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>-   VREF/NAME/Makefile  =   @junior_devs</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105454Z" creationid="Prikryl" creationdate="20151023T105454Z">
        <seg>-   VREF/NAME/Makefile  =   @junior_devs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>- Bullet points are okay, too</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215942Z" creationid="Prikryl" creationdate="20151023T215942Z">
        <seg>- Můžete používat i odrážky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>- Typically a hyphen or asterisk is used for the bullet, preceded by a
	   single space, with blank lines in between, but conventions vary here</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220116Z" creationid="Prikryl" creationdate="20151023T220055Z">
        <seg>- Jako odrážka se nejčastěji používá pomlčka nebo hvězdička, před ně se vkládá
	   jedna mezera, mezi body výčtu prázdný řádek, avšak úzus tu není jednotný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>- print help</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222605Z" creationid="Prikryl" creationdate="20151023T222605Z">
        <seg>- zobrazit nápovědu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>---
	 lib/simplegit.rb |    2 +-
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221012Z" creationid="Prikryl" creationdate="20151023T221012Z">
        <seg>---
	 lib/simplegit.rb |    2 +-
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>------------------------------------------------------------------------
	r85 | schacon | 2009-05-02 16:00:09 -0700 (Sat, 02 May 2009) | 2 lines</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091351Z" creationid="Prikryl" creationdate="20151024T091351Z">
        <seg>------------------------------------------------------------------------
	r85 | schacon | 2009-05-02 16:00:09 -0700 (Sat, 02 May 2009) | 2 lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>------------------------------------------------------------------------
	r86 | schacon | 2009-05-02 16:00:21 -0700 (Sat, 02 May 2009) | 2 lines</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091350Z" creationid="Prikryl" creationdate="20151024T091350Z">
        <seg>------------------------------------------------------------------------
	r86 | schacon | 2009-05-02 16:00:21 -0700 (Sat, 02 May 2009) | 2 lines</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--abbrev-commit	Show only the first few characters of the SHA-1 checksum instead of all 40.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210559Z" creationid="Prikryl" creationdate="20151022T210559Z">
        <seg>--abbrev-commit	Zobrazí pouze prvních několik znaků kontrolního součtu SHA-1 místo všech 40.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--after="2008-10-01T00:00:00-0400"         \</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101734Z" creationid="Prikryl" creationdate="20151023T101734Z">
        <seg>--after="2008-10-01T00:00:00-0400"         \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--author	Only show commits in which the author entry matches the specified string.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T211110Z" creationid="Prikryl" creationdate="20151022T211110Z">
        <seg>--author	Zobrazí pouze revize, v nichž autor odpovídá zadanému řetězci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--before="2008-07-01T09:00:00+0300"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112135Z" creationid="Prikryl" creationdate="20151023T112135Z">
        <seg>--before="2008-07-01T09:00:00+0300"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--before="2008-10-31T23:59:59-0400" --no-merges -- t/
	5610e3b - Fix testcase failure when extended attribute
	acd3b9e - Enhance hold_lock_file_for_{update,append}()
	f563754 - demonstrate breakage of detached checkout wi
	d1a43f2 - reset --hard/read-tree --reset -u: remove un
	51a94af - Fix "checkout --track -b newbranch" on detac
	b0ad11e - pull: allow "git pull origin $something:$cur</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101738Z" creationid="Prikryl" creationdate="20151023T101738Z">
        <seg>--before="2008-10-31T23:59:59-0400" --no-merges -- t/
	5610e3b - Fix testcase failure when extended attribute
	acd3b9e - Enhance hold_lock_file_for_{update,append}()
	f563754 - demonstrate breakage of detached checkout wi
	d1a43f2 - reset --hard/read-tree --reset -u: remove un
	51a94af - Fix "checkout --track -b newbranch" on detac
	b0ad11e - pull: allow "git pull origin $something:$cur</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--before="2013-04-29T17:07:22+0200" --pretty=fuller</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T111958Z" creationid="Prikryl" creationdate="20151023T111958Z">
        <seg>--before="2013-04-29T17:07:22+0200" --pretty=fuller</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--committer	Only show commits in which the committer entry matches the specified string.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T211127Z" creationid="Prikryl" creationdate="20151022T211127Z">
        <seg>--committer	Zobrazí pouze revize, v nichž autor revize odpovídá zadanému řetězci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--graph	Display an ASCII graph of the branch and merge history beside the log output.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210650Z" creationid="Prikryl" creationdate="20151022T210650Z">
        <seg>--graph	Zobrazí vedle výstupu logu ASCII graf k historii větve a slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--name-only	Show the list of files modified after the commit information.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210515Z" creationid="Prikryl" creationdate="20151022T210515Z">
        <seg>--name-only	Za informacemi o revizi zobrazí seznam změněných souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--name-status	Show the list of files affected with added/modified/deleted information as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210536Z" creationid="Prikryl" creationdate="20151022T210536Z">
        <seg>--name-status	Zobrazí seznam dotčených souborů spolu s informací přidáno/změněno/smazáno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--oneline	A convenience option short for `--pretty=oneline --abbrev-commit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210814Z" creationid="Prikryl" creationdate="20151022T210814Z">
        <seg>--oneline	Užitečná zkratka pro `--pretty=oneline --abbrev-commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--pretty	Show commits in an alternate format.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210736Z" creationid="Prikryl" creationdate="20151022T210736Z">
        <seg>--pretty	Zobrazí revize v alternativním formátu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--pretty=fuller</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101624Z" creationid="Prikryl" creationdate="20151023T101624Z">
        <seg>--pretty=fuller</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--relative-date	Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210616Z" creationid="Prikryl" creationdate="20151022T210616Z">
        <seg>--relative-date	Zobrazí datum v relativním formátu (např. "2 weeks ago", tj. před 2 týdny) místo formátu s úplným datem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--shortstat	Display only the changed/insertions/deletions line from the --stat command.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210440Z" creationid="Prikryl" creationdate="20151022T210440Z">
        <seg>--shortstat	Zobrazí pouze řádek změněno/vloženo/smazáno z příkazu --stat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--stat	Show statistics for files modified in each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210418Z" creationid="Prikryl" creationdate="20151022T210418Z">
        <seg>--stat	Zobrazí statistiku pro změněné soubory v každé revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--until, --before	Limit the commits to those whose CommitDate was made on-or-before the specified date/time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T170627Z" creationid="Prikryl" creationdate="20151022T211049Z">
        <seg>--until, --before	Omezí výpis na revize provedené před zadaným datem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>--word-diff	Show the patch in a word diff format.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210344Z" creationid="Prikryl" creationdate="20151022T210333Z">
        <seg>--word-diff	Zobrazí záplatu ve tvaru rozdílu po slovech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>-&lt;div id="footer"&gt;contact : support@github.com&lt;/div&gt;
	+&lt;div id="footer"&gt;contact : email.support@github.com&lt;/div&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221812Z" creationid="Prikryl" creationdate="20151023T221812Z">
        <seg>-&lt;div id="footer"&gt;contact : support@github.com&lt;/div&gt;
	+&lt;div id="footer"&gt;contact : email.support@github.com&lt;/div&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090939Z" creationid="Prikryl" creationdate="20151024T090939Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>./gitosis.conf
	./keydir
	./keydir/scott.pub</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105402Z" creationid="Prikryl" creationdate="20151023T105402Z">
        <seg>./gitosis.conf
	./keydir
	./keydir/scott.pub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>/etc/event.d/local-git-daemon</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105515Z" creationid="Prikryl" creationdate="20151023T105515Z">
        <seg>/etc/event.d/local-git-daemon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>/usr/bin/env perl
	# Simplistic OpenDocument Text (.odt) to plain text converter.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090719Z" creationid="Prikryl" creationdate="20151024T090719Z">
        <seg>/usr/bin/env perl
	# Simplistic OpenDocument Text (.odt) to plain text converter.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>/usr/bin/env ruby
	data = STDIN.read
	last_date = `git log --pretty=format:"%ad" -1`
	puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090801Z" creationid="Prikryl" creationdate="20151024T090801Z">
        <seg>/usr/bin/env ruby
	data = STDIN.read
	last_date = `git log --pretty=format:"%ad" -1`
	puts data.gsub('$Date$', '$Date: ' + last_date.to_s + '$')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>/usr/local/bin/svn "$@"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091410Z" creationid="Prikryl" creationdate="20151024T091410Z">
        <seg>/usr/local/bin/svn "$@"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>000Aunpack ok</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091804Z" creationid="Prikryl" creationdate="20151024T091804Z">
        <seg>000Aunpack ok</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>003fgit-upload-pack schacon/simplegit-progit.git\0host=myserver.com\0</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091805Z" creationid="Prikryl" creationdate="20151024T091805Z">
        <seg>003fgit-upload-pack schacon/simplegit-progit.git\0host=myserver.com\0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>0054want ca82a6dff817ec66f44342007202690a93763949 ofs-delta
	0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	0000
	0009done</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091808Z" creationid="Prikryl" creationdate="20151024T091808Z">
        <seg>0054want ca82a6dff817ec66f44342007202690a93763949 ofs-delta
	0032have 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	0000
	0009done</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>0085ca82a6dff817ec66f44342007202690a93763949  15027957951b64cf874c3557a0f3547bd83b3ff6 refs/heads/master report-status
	00670000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d refs/heads/experiment
	0000</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091802Z" creationid="Prikryl" creationdate="20151024T091802Z">
        <seg>0085ca82a6dff817ec66f44342007202690a93763949  15027957951b64cf874c3557a0f3547bd83b3ff6 refs/heads/master report-status
	00670000000000000000000000000000000000000000 cdfdb42577e2506715f8cfeacdbabc092bf63e8d refs/heads/experiment
	0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>0088ca82a6dff817ec66f44342007202690a93763949 HEAD\0multi_ack thin-pack \
	  side-band side-band-64k ofs-delta shallow no-progress include-tag
	003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master
	003e085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 refs/heads/topic
	0000</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091807Z" creationid="Prikryl" creationdate="20151024T091807Z">
        <seg>0088ca82a6dff817ec66f44342007202690a93763949 HEAD\0multi_ack thin-pack \
	  side-band side-band-64k ofs-delta shallow no-progress include-tag
	003fca82a6dff817ec66f44342007202690a93763949 refs/heads/master
	003e085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 refs/heads/topic
	0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1c002dd HEAD@{2}: commit: added some blame and merge stuff
	1c36188 HEAD@{3}: rebase -i (squash): updating HEAD
	95df984 HEAD@{4}: commit: # This is a combination of two commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221539Z" creationid="Prikryl" creationdate="20151023T221539Z">
        <seg>1c002dd HEAD@{2}: commit: added some blame and merge stuff
	1c36188 HEAD@{3}: rebase -i (squash): updating HEAD
	95df984 HEAD@{4}: commit: # This is a combination of two commits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>1c36188 HEAD@{5}: rebase -i (squash): updating HEAD
	7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221540Z" creationid="Prikryl" creationdate="20151023T221540Z">
        <seg>1c36188 HEAD@{5}: rebase -i (squash): updating HEAD
	7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>2   temporal http://code.google.com/apis/protocolbuffers/
	 2   temporal
	22   temporal C++ Installation - Unix
	22   temporal =======================
	 2   temporal
	79    schacon Committing in git-svn.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091400Z" creationid="Prikryl" creationdate="20151024T091400Z">
        <seg>2   temporal http://code.google.com/apis/protocolbuffers/
	 2   temporal
	22   temporal C++ Installation - Unix
	22   temporal =======================
	 2   temporal
	79    schacon Committing in git-svn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>2012-03-01) added the option diff.startGraphWidth to the list of</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112012Z" creationid="Prikryl" creationdate="20151023T112012Z">
        <seg>2012-03-01) added the option diff.startGraphWidth to the list of</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>24b9da6552252987aa493b52f8696cd6d3b00373</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204635Z" creationid="Prikryl" creationdate="20151022T204635Z">
        <seg>24b9da6552252987aa493b52f8696cd6d3b00373</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>2^80 is 1.2 x 10^24 or 1 million billion billion.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>2^80 je 1,2 * 10^24, neboli 1 milion miliard miliard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>3.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>5.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>52d771167707552d8e2a50f602c669e2ad135722 refs/tags/v1.0.1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091652Z" creationid="Prikryl" creationdate="20151024T091652Z">
        <seg>52d771167707552d8e2a50f602c669e2ad135722 refs/tags/v1.0.1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>6.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>78    schacon
	 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
	 2   temporal Buffer compiler (protoc) execute the following:
	 2   temporal</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091401Z" creationid="Prikryl" creationdate="20151024T091401Z">
        <seg>78    schacon
	 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
	 2   temporal Buffer compiler (protoc) execute the following:
	 2   temporal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730
	f24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  config</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223009Z" creationid="Prikryl" creationdate="20151023T223009Z">
        <seg>:040000 040000 40ee3e7821b895e52c1695092db9bdc4c61d1730
	f24d3c6ebcfc639b1a3814550e62d60b8e68a8e4 M  config</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;!-- Attention to translators: this is a table declaration.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>&lt;!-- Poznámka pro překladatele: toto je zápis tabulky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;!-- This is actually weird, as the SHA-1 of 7482e0d is not present in the list, 
nor is the commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222701Z" creationid="Prikryl" creationdate="20151023T222701Z">
        <seg>&lt;!-- This is actually weird, as the SHA-1 of 7482e0d is not present in the list, 
nor is the commit message.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
	&lt;div id="footer"&gt;contact : email.support@github.com&lt;/div&gt;
	=======
	&lt;div id="footer"&gt;
	  please contact us at support@github.com
	&lt;/div&gt;
	&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102729Z" creationid="Prikryl" creationdate="20151023T102729Z">
        <seg>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
	&lt;div id="footer"&gt;contact : email.support@github.com&lt;/div&gt;
	=======
	&lt;div id="footer"&gt;
	  please contact us at support@github.com
	&lt;/div&gt;
	&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;VirtualHost *:80&gt;
	    ServerName git.gitserver
	    DocumentRoot /opt/git
	    &lt;Directory /opt/git/&gt;
	        Order allow, deny
	        allow from all
	    &lt;/Directory&gt;
	&lt;/VirtualHost&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105153Z" creationid="Prikryl" creationdate="20151023T105153Z">
        <seg>&lt;VirtualHost *:80&gt;
	    ServerName git.gitserver
	    DocumentRoot /opt/git
	    &lt;Directory /opt/git/&gt;
	        Order allow, deny
	        allow from all
	    &lt;/Directory&gt;
	&lt;/VirtualHost&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;VirtualHost *:80&gt;
	    ServerName gitserver
	    DocumentRoot /var/www/gitweb
	    &lt;Directory /var/www/gitweb&gt;
	        Options ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch
	        AllowOverride All
	        order allow,deny
	        Allow from all
	        AddHandler cgi-script cgi
	        DirectoryIndex gitweb.cgi
	    &lt;/Directory&gt;
	&lt;/VirtualHost&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105230Z" creationid="Prikryl" creationdate="20151023T105230Z">
        <seg>&lt;VirtualHost *:80&gt;
	    ServerName gitserver
	    DocumentRoot /var/www/gitweb
	    &lt;Directory /var/www/gitweb&gt;
	        Options ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch
	        AllowOverride All
	        order allow,deny
	        Allow from all
	        AddHandler cgi-script cgi
	        DirectoryIndex gitweb.cgi
	    &lt;/Directory&gt;
	&lt;/VirtualHost&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;div id="footer"&gt;
	please contact us at email.support@github.com
	&lt;/div&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102730Z" creationid="Prikryl" creationdate="20151023T102730Z">
        <seg>&lt;div id="footer"&gt;
	please contact us at email.support@github.com
	&lt;/div&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;p id="out"&gt;...&lt;/p&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221634Z" creationid="Prikryl" creationdate="20151023T221634Z">
        <seg>&lt;p id="out"&gt;...&lt;/p&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&lt;script type="text/javascript"&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221828Z" creationid="Prikryl" creationdate="20151023T221828Z">
        <seg>&lt;script type="text/javascript"&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET HEAD
	ref: refs/heads/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091750Z" creationid="Prikryl" creationdate="20151024T091750Z">
        <seg>=&gt; GET HEAD
	ref: refs/heads/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET info/refs
	ca82a6dff817ec66f44342007202690a93763949     refs/heads/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091749Z" creationid="Prikryl" creationdate="20151024T091749Z">
        <seg>=&gt; GET info/refs
	ca82a6dff817ec66f44342007202690a93763949     refs/heads/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	(179 bytes of data)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091754Z" creationid="Prikryl" creationdate="20151024T091754Z">
        <seg>=&gt; GET objects/08/5bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	(179 bytes of data)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET objects/ca/82a6dff817ec66f44342007202690a93763949
	(179 bytes of binary data)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091752Z" creationid="Prikryl" creationdate="20151024T091752Z">
        <seg>=&gt; GET objects/ca/82a6dff817ec66f44342007202690a93763949
	(179 bytes of binary data)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf
	(404 - Not Found)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091755Z" creationid="Prikryl" creationdate="20151024T091755Z">
        <seg>=&gt; GET objects/cf/da3bf379e4f8dba8717dee55aab78aef7f4daf
	(404 - Not Found)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET objects/info/http-alternates
	(empty file)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091756Z" creationid="Prikryl" creationdate="20151024T091756Z">
        <seg>=&gt; GET objects/info/http-alternates
	(empty file)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET objects/info/packs
	P pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091757Z" creationid="Prikryl" creationdate="20151024T091757Z">
        <seg>=&gt; GET objects/info/packs
	P pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx
	(4k of binary data)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091758Z" creationid="Prikryl" creationdate="20151024T091758Z">
        <seg>=&gt; GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.idx
	(4k of binary data)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>=&gt; GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack
	(13k of binary data)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091759Z" creationid="Prikryl" creationdate="20151024T091759Z">
        <seg>=&gt; GET objects/pack/pack-816a9b2334da9953e530f27bcac22082a9f5b835.pack
	(13k of binary data)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&gt;&gt; header = "blob #{content.length}\0"
	=&gt; "blob 16\000"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091630Z" creationid="Prikryl" creationdate="20151024T091630Z">
        <seg>&gt;&gt; header = "blob #{content.length}\0"
	=&gt; "blob 16\000"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&gt;&gt; path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38]
	=&gt; ".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37"
	&gt;&gt; require 'fileutils'
	=&gt; true
	&gt;&gt; FileUtils.mkdir_p(File.dirname(path))
	=&gt; ".git/objects/bd"
	&gt;&gt; File.open(path, 'w') { |f| f.write zlib_content }
	=&gt; 32</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091632Z" creationid="Prikryl" creationdate="20151024T091632Z">
        <seg>&gt;&gt; path = '.git/objects/' + sha1[0,2] + '/' + sha1[2,38]
	=&gt; ".git/objects/bd/9dbf5aae1a3862dd1526723246b20206e5fc37"
	&gt;&gt; require 'fileutils'
	=&gt; true
	&gt;&gt; FileUtils.mkdir_p(File.dirname(path))
	=&gt; ".git/objects/bd"
	&gt;&gt; File.open(path, 'w') { |f| f.write zlib_content }
	=&gt; 32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&gt;&gt; require 'zlib'
	=&gt; true
	&gt;&gt; zlib_content = Zlib::Deflate.deflate(store)
	=&gt; "x\234K\312\311OR04c(\317H,Q\310,V(-\320QH\311O\266\a\000_\034\a\235"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091632Z" creationid="Prikryl" creationdate="20151024T091632Z">
        <seg>&gt;&gt; require 'zlib'
	=&gt; true
	&gt;&gt; zlib_content = Zlib::Deflate.deflate(store)
	=&gt; "x\234K\312\311OR04c(\317H,Q\310,V(-\320QH\311O\266\a\000_\034\a\235"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>&gt;&gt; store = header + content
	=&gt; "blob 16\000what is up, doc?"
	&gt;&gt; require 'digest/sha1'
	=&gt; true
	&gt;&gt; sha1 = Digest::SHA1.hexdigest(store)
	=&gt; "bd9dbf5aae1a3862dd1526723246b20206e5fc37"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091631Z" creationid="Prikryl" creationdate="20151024T091631Z">
        <seg>&gt;&gt; store = header + content
	=&gt; "blob 16\000what is up, doc?"
	&gt;&gt; require 'digest/sha1'
	=&gt; true
	&gt;&gt; sha1 = Digest::SHA1.hexdigest(store)
	=&gt; "bd9dbf5aae1a3862dd1526723246b20206e5fc37"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221836Z" creationid="Prikryl" creationdate="20151023T221836Z">
        <seg>?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@admins         = scott
	@interns        = ashok
	@engineers      = sitaram dilbert wally alice
	@staff          = @admins @engineers @interns</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105443Z" creationid="Prikryl" creationdate="20151023T105443Z">
        <seg>@admins         = scott
	@interns        = ashok
	@engineers      = sitaram dilbert wally alice
	@staff          = @admins @engineers @interns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>@oss_repos      = linux perl rakudo git gitolite
	@secret_repos   = fenestra pear</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105440Z" creationid="Prikryl" creationdate="20151023T105440Z">
        <seg>@oss_repos      = linux perl rakudo git gitolite
	@secret_repos   = fenestra pear</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A Git clone gives you your own master branch and origin/master pointing to origin’s master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz git clone vám vytvoří vlastní hlavní větev a větev origin/master, ukazující na hlavní větev serveru origin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A GitHub main project page.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavní stránka projektu na serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A Perforce importer is also distributed with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také importér Perforce je distribuován se systémem Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A SHA-1 hash looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Otisk SHA-1 může vypadat například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A VCS allows you to: revert files back to a previous state, revert the entire project back to a previous state, review changes made over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>VCS umožňuje vrátit jednotlivé soubory nebo celý projekt do předchozího stavu, porovnávat změny provedené v průběhu času, zjistit, kdo naposledy upravil něco, co nyní možná způsobuje problémy, kdo vložil jakou verzi a kdy a mnoho dalšího.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A `**/` pattern is available in Git since version 1.8.2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Část masky `**/` je v Gitu dostupná od verze 1.8.2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A benefit of this approach is that you can more specifically define the relationships between the projects with tags and branches in the superprojects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výhodou tohoto postupu je, že můžete podrobněji definovat vztah mezi projekty se značkami a větvemi v superprojektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A bit later, you’ll learn how to verify signed tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalších částech se naučíte, jak podepsané značky ověřovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A branch in Git is simply a lightweight movable pointer to one of these commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev je v systému Git jen snadno přemístitelným ukazatelem na jednu z těchto revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A cherry-pick in Git is like a rebase for a single commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Částečné převzetí lze v systému Git přirovnat k přeskládání jedné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A common issue arises in these scenarios: you want to be able to treat the two projects as separate yet still be able to use one from within the other.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V obou případech se budete potýkat se stejným problémem: oba projekty chcete zachovat samostatné, a přesto potřebujete používat jeden v rámci druhého.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A common switch to use with the `log` command in this case is `--left-right`, which shows you which side of the range each commit is in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepínačem, který se v tomto případě běžně používá v kombinaci s příkazem `log`, je parametr `--left-right`. Příkaz pak zobrazí, na jaké straně intervalu se ta která revize nachází.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A contributor clones that repository and makes changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přispěvatel naklonuje tento repozitář a provede změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A fallthrough results in access being denied.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud není nalezeno nic, je přístup zamítnut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A few prebuilt options are available for you to use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K dispozici máte několik přednastavených možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A good way to do this in Git is to make each of the subdirectories a separate Git repository and then create superproject Git repositories that contain multiple submodules.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dobrým způsobem, jak to v systému Git provést, je učinit ze všech podsložek oddělené repozitáře Git a vytvořit repozitáře superprojektu Git, které budou obsahovat několik submodulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A higher probability exists that every member of your programming team will be attacked and killed by wolves in unrelated incidents on the same night.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To už je pravděpodobnější, že všichni členové vašeho programovacího týmu budou během jedné noci v navzájem nesouvisejících incidentech napadeni a zabiti smečkou vlků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A history with a topic branch off another topic branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie s tematickou větví obsahující další tematickou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A huge number and variety of options to the `git log` command are available to show you exactly what you’re looking for.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K příkazu `git log` je k dispozici velké množství nejrůznějších parametrů, díky nimž můžete zobrazit přesně to, co potřebujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A lightweight tag is very much like a branch that doesn’t change — it’s just a pointer to a specific commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prostá značka se velmi podobá větvi, která se nemění – je to pouze ukazatel na konkrétní revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A list of collaborators on your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Seznam spolupracovníků na projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A local repository is fast only if you have fast access to the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Lokální repozitář je rychlý pouze v případě, že máte rychlý přístup k datům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A lot of code exchange in the Git world happens by "please pull" requests.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodně výměny kódu probíhá v otevřeném gitovém světě metodou „prosím stáhněte si“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A lot of people become concerned at some point that they will, by random happenstance, have two objects in their repository that hash to the same SHA-1 value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někteří uživatelé bývají zmateni, že mohou mít v repozitáři – shodou okolností – dva objekty, které mají stejnou hodnotu SHA-1 otisku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A new text box appears, into which you can type a username.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zobrazí se nové textové pole, do nějž můžete zadat jméno uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A nice way of quickly getting a sort of changelog of what has been added to your project since your last release or e-mail is to use the `git shortlog` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Elegantním způsobem, jak rychle získat určitý druh záznamu o změnách (changelog), které byly do projektu přidány od posledního vydání nebo e-mailu, je použít příkaz `git shortlog`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A normal Git repository looks more like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Běžný repozitář Git vypadá naproti tomu spíš takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A number of developers are nodes — consumers of that hub — and synchronize to that one place (see Figure 5-1).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Několik vývojářů představuje jednotlivé uzly (nodes) – uživatele centrálního místa – které se podle tohoto místa synchronizují (viz obrázek 5-1).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A number of examples of more complex scenarios are available in the `contrib/fast-import` directory of the Git source code; one of the better ones is the `git-p4` script I just covered.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Několik příkladů složitějších scénářů si můžete prohlédnout v adresáři `contrib/fast-import` ve zdrojovém kódu Git. Jedním z těch nejlepších je už zmíněný skript`git-p4`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A number of options can help you set the coloring to your preference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S individuálním nastavením barev vám pomůže celá řada možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A push to the project takes the `gitosis.conf` file you just pushed up and sticks it there.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po odeslání dat do projektu bude soubor `gitosis.conf`, který jste právě odeslali, umístěn do tohoto adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A remote repository is generally a _bare repository_ — a Git repository that has no working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálený repozitář je obvykle _holý repozitář_ (bare repository), tj. gitový repozitář bez pracovního adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A repository on NFS is often slower than the repository over SSH on the same server, allowing Git to run off local disks on each system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Repozitář na NFS je často pomalejší než stejný repozitář nad SSH na tomtéž serveru, který ve všech systémech umožňuje spustit Git z lokálních disků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A rewind push to those refs does not match the first rule, drops down to the second, and is therefore denied.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odeslání, která vracejí změny (rewind push) do těchto větví, neodpovídají prvnímu pravidlu. Porovnají se tedy s druhým pravidlem a na jeho základě budou zamítnuty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A second method is to create a single 'git' user on the machine, ask every user who is to have write access to send you an SSH public key, and add that key to the `~/.ssh/authorized_keys` file of your new 'git' user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhým způsobem je vytvořit na počítači jediného uživatele 'git', požádat všechny uživatele, kteří mají mít oprávnění k zápisu, aby vám poslali veřejný SSH klíč, a přidat tento klíč do souboru `~/.ssh/authorized_keys` vašeho nového uživatele 'git'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A shell?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105141Z" creationid="Prikryl" creationdate="20151023T105141Z">
        <seg>A shell?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A short and simple commit history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Krátká a jednoduchá historie revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A simple way to get the commit message from a commit when you have the SHA-1 value is to go to the first blank line and take everything after that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduchým způsobem, jak z revize, k níž máte hodnotu SHA-1, extrahovat její zprávu, je přejít k prvnímu prázdnému řádku a vzít vše, co následuje za ním.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A single tree object contains one or more tree entries, each of which contains a SHA-1 pointer to a blob or subtree with its associated mode, type, and filename.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jeden objekt stromu obsahuje jednu nebo více položek stromu, z nichž každá obsahuje ukazatel SHA-1 na blob nebo podstrom s asociovaným režimem, typem a názvem souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A topic branch is a short-lived branch that you create and use for a single particular feature or related work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tematická větev (topic branch) je krátkodobá větev, kterou vytvoříte a používáte pro jediný konkrétní účel nebo práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>A way to remember this command is by recalling the `git push [remotename] [localbranch]:[remotebranch]` syntax that we went over a bit earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zapamatovat si jej ale můžete tak, že si vybavíte příkaz `git push [vzdálený server] [lokální větev]:[vzdálená větev]`, o kterém jsme se zmínili před chvílí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Add Grit::Commit#to_patch
	      Update version and History.txt
	      Remove stray `puts`
	      Make ls_tree ignore nils</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221518Z" creationid="Prikryl" creationdate="20151023T221518Z">
        <seg>Add Grit::Commit#to_patch
	      Update version and History.txt
	      Remove stray `puts`
	      Make ls_tree ignore nils</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Add the following line to your `.gitattributes` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru `.gitattributes` přidejte následující řádek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Add the repo.rb file from the Grit library you worked with earlier — this is about a 12K source code file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z knihovny Grit, s níž jsme pracovali před časem, přidejte soubor „repo.rb“. Je to soubor se zdrojovým kódem o velikosti asi 12 kB:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Add, commit, and push the change, and the user has been added.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáme, potvrdíme a odešleme změny (add, commit, push). Tím jsme dosáhli přidání uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Adding a collaborator to your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidání spolupracovníka do projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Adding another server as a remote.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidání dalšího vzdáleného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Adding git-svn instructions to the README</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091331Z" creationid="Prikryl" creationdate="20151024T091331Z">
        <seg>Adding git-svn instructions to the README</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Adding users is easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidávání dalších uživatelů je snadné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Administrators have fine-grained control over who can do what; and it’s far easier to administer a CVCS than it is to deal with local databases on every client.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Kromě toho je podstatně jednodušší spravovat CVCS, než pracovat s lokálními databázemi na jednotlivých klientech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After a few seconds, you’re taken to your new project page, which indicates that this project is a fork of another one (see Figure 4-15).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po několika sekundách přejdete na novou stránku svého projektu, která oznamuje, že je tento projekt odštěpen (fork) z jiného projektu (viz obrázek 4-15).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After a topic branch merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po začlenění tematické větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After a topic branch release.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po vydání tematické větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After all this is set, if you run diff commands such as this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až dokončíte celé nastavení, můžete spustit příkaz diff, např.:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After it’s installed, you have both a command-line version (including an SSH client that will come in handy later) and the standard GUI.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po dokončení instalace budete mít k dispozici jak verzi pro příkazový řádek (včetně SSH klienta, který se vám bude hodit později), tak standardní grafické uživatelské rozhraní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After it’s tested, merge the hotfix branch, and push to production.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po úspěšném otestování začleníte větev s hotfixem a odešlete ji do produkce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After that come the line number and the content of the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za tímto údajem následuje číslo řádku a obsah souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After the entire commit process is completed, the `post-commit` hook runs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po dokončení celého procesu zapisování revize se spustí zásuvný modul `post-commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After these three commands, you end up with a single commit — the second commit replaces the results of the first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedení uvedených tří příkazů zůstane jediná revize – druhý příkaz `commit` nahradí výsledky prvního.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After they integrate these branches into the mainline, a fetch will bring down the new merge commits, making the commit history look like Figure 5-14.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté, co budou tyto větve do hlavní linie integrovány, vyzvednutím dat bude možné stáhnout nové revize vzniklé začleněním změn a historie revizí bude vypadat jako na obrázku 5-14.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After this comes a Commands section.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za seznamem změn následuje část Commands (Příkazy).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After this is done, you can also get Git via Git itself for updates:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po dokončení instalace můžete rovněž vyhledat aktualizace systému Git prostřednictvím systému samotného:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After this is done, you can use `git send-email` to send your patches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakmile je to hotové, můžete záplaty odeslat příkazem `git send-email`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After two more commits, your history might look something like Figure 3-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po dalších dvou revizích bude vaše historie vypadat jako na obrázku 3-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you commit and push that change, all four users will be able to read from and write to that project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až tuto změnu zapíšete a odešlete, všichni čtyři uživatelé budou moci z tohoto projektu číst a zapisovat do něj.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you do that, your commit history will contain both the C4 and C4' commits, which have different SHA-1 hashes but introduce the same work and have the same commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše historie pak bude obsahovat revize C4 i C4’, které mají obě jiný otisk SHA-1, ale představují stejnou práci a nesou i stejnou zprávu k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté byste měli mít k dispozici odkazy na všechny větve tohoto vzdáleného projektu. Od toho okamžiku je můžete kdykoli slučovat nebo prohlížet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you exit the merge tool, Git asks you if the merge was successful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až nástroj pro slučování zavřete, Git se vás zeptá, zda sloučení proběhlo úspěšně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you have created several commits, or if you have cloned a repository with an existing commit history, you’ll probably want to look back to see what has happened.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až vytvoříte několik revizí nebo pokud naklonujete repozitář s existující historií revizí, možná budete chtít nahlédnout do historie projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you merge one branch into another, you can’t easily go back and continue working on that branch, as you normally can in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté, co začleníte jednu větev do druhé, můžete se beze všeho vrátit zpět a pokračovat v práci na této větvi, stejně jako byste mohli v systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you push your project up or have it imported from Subversion, you have a main project page that looks something like Figure 4-13.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po odeslání projektu nebo jeho naimportování ze systému Subversion budete mít hlavní stránku projektu, která bude vypadat přibližně jako na obrázku 4-13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you run a successful `git checkout`, the `post-checkout` hook runs; you can use it to set up your working directory properly for your project environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po úspěšném spuštění příkazu `git checkout` se spustí zásuvný modul `post-checkout`. Ten slouží k nastavení pracovního adresáře podle potřeb prostředí vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After your super-important fix is deployed, you’re ready to switch back to the work you were doing before you were interrupted.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté, co jste dokončili práci na bezodkladné opravě, můžete přepnout zpět na práci, jíž jste se věnovali před telefonátem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>After you’ve resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté, co vyřešíte všechny tyto části ve všech kolidujících souborech, spusťte pro každý soubor příkaz `git add`, jímž ho označíte jako vyřešený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, GitWeb can be served with any CGI capable web server; if you prefer to use something else, it shouldn’t be difficult to set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znovu připomeňme, že GitWeb může být obsluhován jakýmkoli webovým serverem podporujícím CGI. Chcete-li používat jakýkoli jiný server, nemělo by být nastavení obtížné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, having multiple long-running branches isn’t necessary, but it’s often helpful, especially when you’re dealing with very large or complex projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není nutné používat při práci několik dlouhých větví, ale často to může být užitečné, zejména pokud pracujete ve velmi velkých nebo komplexních projektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, if you don’t specify a stash, Git assumes the most recent stash:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže nespecifikujete konkrétní odklad, Git předpokládá odklad poslední:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, it doesn’t show commits that you did locally in Git or that have been pushed to Subversion in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ani tento příkaz nezobrazuje revize zapsané lokálně v systému Git a revize odeslané na server Subversion od posledního připojení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, the public keys look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veřejné klíče vypadají opět nějak takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, this generally does nothing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>I tentokrát platí, že příkaz většinou neprovede nic.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, this gives you normal `log` output but shows you only the commit information for those four commits, appearing in the traditional commit date ordering.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstupem příkazu bude běžný výpis příkazu `log`, ale zobrazí se pouze informace o těchto čtyřech revizích, uspořádané v tradičním pořadí podle data zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, this is for unauthenticated read-only access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>I v tomto případě se jedná o přístup pouze pro čtení bez ověřování totožnosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, this will cause a `git push origin` to push the local `master` branch to the remote `qa/master` branch by default.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Touto hodnotou zajistíte, že bude příkaz `git push origin` odesílat lokální větev `master` do vzdálené větve `qa/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, you can use any web server for this; but as an example, we’ll demonstrate some basic Apache configurations that should give you an idea of what you might need.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Opět, můžete použít jakýkoli webový server. Pro názornost ale ukážeme některá základní nastavení serveru Apache, abyste získali představu, co vás může čekat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Použijete-li parametr `--global`, pak také toto nastavení stačí provést pouze jednou. Git bude používat tyto údaje pro všechny operace, které v systému uděláte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Again, you simply follow the rules top down until you hit a match for your access mode, or a deny.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravidla se  budou opět procházet shora dolů až do momentu, kdy narazíte na shodu s vaším režimem přístupu nebo na pravidlo typu odmítnutí (deny).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Ahh, but the bliss of rebasing isn’t without its drawbacks, which can be summed up in a single line:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládání sice nabízí určité výhody, má však také svá úskalí. Ta se dají shrnout do jedné věty:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All Git objects are stored the same way, just with different types — instead of the string blob, the header will begin with commit or tree.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny objekty Git se ukládají stejným způsobem, jen s odlišným typem. Místo řetězce blob bude záhlaví začínat řetězcem „commit“ (u revize) nebo „tree“ (u stromu).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All of these fields are delimited by a pipe (`|`) character.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechna tato pole jsou oddělena svislicí (`|`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All that’s left is to specify the file contents for each snapshot.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď už zbývá jen určit obsah souborů všech snímků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the Git commands work independently in the two directories:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny příkazy Git pracují v obou adresářích nezávisle:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the changes from your Rack project are merged in and ready to be committed locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny změny z projektu Rack budou začleněny a budete je moci lokálně zapsat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the content is stored as tree and blob objects, with trees corresponding to UNIX directory entries and blobs corresponding more or less to inodes or file contents.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veškerý obsah se ukládá v podobě objektů typu strom a blob. Stromy odpovídají položkám v adresáři UNIX a bloby víceméně odpovídají i-uzlům nebo obsahům souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the examples are written as shell scripts, with some Perl thrown in, but any properly named executable scripts will work fine — you can write them in Ruby or Python or what have you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny zdejší příklady jsou napsány jako shellové skripty, tu a tam obsahující Perl, avšak všechny řádně pojmenované spustitelné skripty budou fungovat správně – můžete je napsat v Ruby, Pythonu nebo jiném jazyce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the lieutenants have one integration manager known as the benevolent dictator.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všichni poručíci mají jednoho integračního manažera, kterému se říká „benevolentní diktátor“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the objects in your Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny objekty v adresáři Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the sample hook scripts distributed with Git are in either Perl or Bash scripting, so you can also see plenty of examples of hooks in those languages by looking at the samples.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny vzorové skripty zásuvných modulů distribuované se systémem Git jsou buď ve skriptování Perl, nebo Bash. Podíváte-li se tyto vzorové skripty, budete mít i spoustu příkladů zásuvných modulů v těchto jazycích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the script does is get the latest commit date from the `git log` command, stick that into any `$Date$` strings it sees in stdin, and print the results — it should be simple to do in whatever language you’re most comfortable in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript pouze získá datum nejnovější revize z příkazu `git log` a rozšíří jím řetezce `$Date$`, které nalezne v standardním vstupu (stdin), a vrátí výsledek – snadno by to mělo jít provést v jakémkoli jazyce, který používáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All the server-side work will go into the update file in your hooks directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veškerá práce na straně serveru bude uložena do souboru update v adresáři hooks.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All these questions can affect how you contribute effectively to a project and what workflows are preferred or available to you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny tyto otázky mohou mít vliv na efektivní přispívání do projektu a určují, jaký pracovní postup je vůbec možný a který bude upřednostněn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All they have to do is copy the contents of the `.pub` file and e-mail it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stačí přitom zkopírovat obsah souboru `.pub` a odeslat ho e-mailem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is check out the branch you wish to merge into and then run the `git merge` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co pro to musíte udělat, je přepnout na větev, do níž chcete tuto větev začlenit, a spustit příkaz `git merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is switch back to your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co teď musíte udělat, je přepnout zpět na hlavní větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is tell `fast-import` what the content snapshots are, what commit data points to them, and the order they go in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co tedy musíte udělat, je sdělit příkazu `fast-import`, co je obsahem snímků, jaká data revizí na ně ukazují a pořadí, v němž budou převzaty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you have to do is use `-s` instead of `-a`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co pro to musíte udělat, je zadat místo parametru `-a` parametr `-s`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All you really have to do is provide a project name, but you can also add a description.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vše, co tu opravdu musíte udělat, je zadat název projektu. Kromě toho můžete přidat i jeho popis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>All your branches and tags should be on your new Git server in a nice, clean import.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na novém serveru Git tak nyní máte v úhledném, čistém importu uloženy všechny větve a značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also note the `^4832fe2` commit lines, which designate that those lines were in this file’s original commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si také řádků revize `^4832fe2`, které oznamují, že tyto řádky byly obsaženy v originální revizi tohoto souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also notice that it doesn’t need to point to a commit; you can tag any Git object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli byste také vědět, že nemusí ukazovat na revizi. Značkou můžete označit jakýkoli objekt Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, although the blob content can be nearly anything, the commit and tree content are very specifically formatted.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A navíc, zatímco obsahem blobu může být téměř cokoliv, obsah revize nebo stromu má velmi specifický formát.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, as long as you stay out of contact with your origin server, your `origin/master` pointer doesn’t move (see Figure 3-23).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A dokud zůstanete od serveru origin odpojeni, váš ukazatel `origin/master` se nemůže přemístit (viz obrázek 3-23).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, as you probably guessed, Gitolite prefixes `refs/heads/` as a syntactic convenience if the refex does not begin with `refs/`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitolite přidává prefix `refs/heads/` jako usnadnění syntaxe, pokud refex nezačíná na `refs/`, jak jste mohli odhadnout z příkladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, because we’re recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A protože při zapisování revize zaznamenáváme její rodiče, probíhá vyhledávání příslušné základny pro sloučení automaticky a je většinou velmi snadné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, if you include instructions in the tag message, running `git show &lt;tag&gt;` will let you give the end user more specific instructions about tag verification.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud navíc zadáte do zprávy značky další instrukce k jejímu ověření, může si je koncový uživatel zobrazit příkazem `git show &lt;tag&gt;`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Also, running `git pull` while on one of these branches fetches all the remote references and then automatically merges in the corresponding remote branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také příkazem `git pull` zadaným na sledovací větvi vyzvednete všechny vzdálené reference a Git poté odpovídající vzdálenou větev automaticky začlení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zprávu k revizi můžete rovněž napsat do řádku k příkazu `commit`. Jako zprávu ji označíte tak, že před ni vložíte příznak `-m`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although Git can check to make sure each object still matches its SHA-1 checksum and points to valid objects, it doesn’t do that by default on every push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ačkoli může při každém odesílání ověřit, že všechny objekty stále souhlasí se svým kontrolním součtem SHA-1 a ukazují k platným objektům, standardně to nedělá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although Git has an internal implementation of diff, which is what you’ve been using, you can set up an external tool instead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ačkoli Git disponuje vlastním nástrojem diff, který jste dosud používali, můžete místo něj nastavit i libovolný externí nástroj.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although Subversion automatically does such a merge on the server if different files are edited, in Git you must merge the commits locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přestože Subversion provádí takové sloučení na serveru automaticky, pokud byly upraveny různé soubory, v systému Git musíte provést sloučení lokálně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although `git status` answers those questions very generally, `git diff` shows you the exact lines added and removed — the patch, as it were.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zatímco příkaz `git status` vám tyto otázky zodpoví velmi obecně, příkaz `git diff` přesně zobrazí přidané a odstraněné řádky – tedy samotnou záplatu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although `rack` is a subdirectory in your working directory, Git sees it as a submodule and doesn’t track its contents when you’re not in that directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ačkoli je `rack` podadresářem ve vašem pracovním adresáři, Git ví, že se jedná o submodul, a dokud se v tomto adresáři nenacházíte, nesleduje jeho obsah.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přestože může být oblast připravených změn opravdu užitečným nástrojem pro přesné vytváření revizí, je někdy při daném pracovním postupu zbytečným mezikrokem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although it’s technically a text file, because it’s all ASCII, you don’t want to treat it as such because it’s really a lightweight database — you can’t merge the contents if two people changed it, and diffs generally aren’t helpful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ačkoli se technicky jedná o textový soubor, který je celý tvořen znaky ASCII, nechcete s ním nakládat jako s textovým souborem, protože se ve skutečnosti jedná o neohrabanou databázi. Pokud ji dva lidé změní, její obsah nemůžete sloučit a většinou nepochodíte ani s nástroji diff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although this operation may take only a few minutes, if you try to copy the original repository to another remote repository instead of a local one, the process will take nearly an hour, even though there are fewer than 100 commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato operace bude trvat jen několik minut. Pokud byste se však pokoušeli zkopírovat originální repozitář ne do lokálního, nýbrž do jiného vzdáleného repozitáře, protáhne se proces téměř na hodinu, přestože repozitář obsahuje necelých 100 revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although tons of options are available, I’ll only cover the few that either are commonly used or can significantly affect your workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přestože parametrů je velmi mnoho, já se zaměřím jen na ty, které se využívají často nebo které mouhou výrazně ovlivnit váš pracovní postup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although you can easily do local branching and merging, it’s generally best to keep your history as linear as possible by rebasing your work and avoiding doing things like simultaneously interacting with a Git remote repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přestože není problém lokálně pracovat s větvemi a slučovat je, obecně doporučujeme, abyste se snažili udržet historii co nejlineárnější (pomůže vám v tom přeskládání) a vyhýbali se úkonům, jako je současná interakce se vzdáleným repozitářem Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although you can technically push changes to and pull changes from individuals’ repositories, doing so is discouraged because you can fairly easily confuse what they’re working on if you’re not careful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Technicky vzato sice můžete odesílat a stahovat změny z repozitářů jednotlivých spolupracovníků, tento postup ale nedoporučujeme, protože se může při troše neopatrnosti velmi snadno stát, že zapomenete, kdo na čem pracuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Although you may have legitimate merge issues, you know where in your history their work is based; a proper three-way merge is the default rather than having to supply a `-3` and hope the patch was generated off a public commit to which you have access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přestože můžete mít oprávněné problémy se slučováním, víte, kde ve své historii můžete hledat příčiny. Řádné třícestné sloučení je vždy lepším řešením, než zadat parametr `-3` a doufat, že byl patch vygenerován z veřejné revize, k níž máte přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Amazing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Úžasné!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An alternative would be to push this new work to a different branch on the server (perhaps called `featureAv2`).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhou možností je odeslat tuto novou práci do jiné větve na serveru (nazvané např. `featureAv2`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An annotated tag is more complex, however.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Anotovaná značka je už složitější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An asterisk (`*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case `a`, `b`, or `c`); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen(`[0-9]`) matches any character in the range (in this case 0 through 9) .</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hvězdička (`*`) označuje žádný nebo více znaků; `[abc]` označuje jakýkoli znak uvedený v závorkách (v tomto případě `a`, `b` nebo `c`); otazník (`?`) označuje jeden znak; znaky v závorkách oddělené pomlčkou (`[0-9]`) označují jakýkoli znak v daném rozmezí (v našem případě 0 až 9).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>An important feature of the config file’s syntax is that all the rules for a repository need not be in one place.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Důležitou vlastností syntaxe konfiguračního souboru je to, že všechna pravidla pro repozitáře nemusí být na jednom místě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And if it was changed since it was checked out but has not been staged, it is modified.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A pokud byla od poslední operace checkout změněna, ale nebyla připravena k zapsání, je považována za změněnou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And make it executable</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Učiňte jej spustitelným:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And the admins can do anything (including rewind) to any ref.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A skupina admins může dělat cokoliv (včetně vracení změn) v kterékoliv referenci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And then define a dummy `ours` merge strategy with:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A potom nadefinujete prázdnou slučovací strategii `ours` příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And what have you staged that you are about to commit?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A co jste připravili a nyní může být zapsáno?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And you can specify older commits with this data, as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí těchto dat lze rovněž specifikovat starší revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And you did all that with simple `branch` and `checkout` commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To vše jste provedli pomocí jednoduchých příkazů `branch` a `checkout`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And you’re done!</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je všechno!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>And, if you are running on Windows, this means you’ll need to take special care to not introduce carriage returns at the end your lines — `git fast-import` is very particular about just wanting line feeds (LF) not the carriage return line feeds (CRLF) that Windows uses.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A to v případě používání Windows znamená, že budete muset věnovat zvláštní pozornost tomu, abyste na koncích řádků nevkládali znaky CR (carriage return). Příkaz `git fast-import` je v tomto směru velmi vybíravý a chce jen znaky LF (line feed) a nikoliv kombinaci CRLF, kterou používají Windows.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Annotated tags, however, are stored as full objects in the Git database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naproti tomu anotované značky jsou ukládány jako plné objekty v databázi Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Annotating a file helps if you know where the issue is to begin with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Anotace souboru má smysl, pokud víte, kde problém hledat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another common case is that you forgot to run `git config` to set your name and e-mail address before you started working, or perhaps you want to open-source a project at work and change all your work e-mail addresses to your personal address.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším častým případem bývá, že uživatel zapomene spustit příkaz `git config` a nastavit své jméno a e-mailovou adresu, než začne se systémem Git pracovat. Stejně tak se může stát, že budete chtít převést pracovní projekt na otevřený zdrojový kód a změnit všechny své pracovní e-mailové adresy na soukromé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another cool thing about Git is that it doesn’t track file renames explicitly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další skvělou věcí na systému Git je, že explicitně nesleduje přejmenování souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another interesting example gets `$Date$` keyword expansion, RCS style.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další zajímavý příklad se týká rozšíření klíčového slova `$Date$` ve stylu RCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another interesting problem you can solve this way involves diffing image files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším zajímavým problémem, který lze tímto způsobem řešit, je výpočet rozdílů u obrázkových souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another nice thing is that HTTP is such a commonly used protocol that corporate firewalls are often set up to allow traffic through this port.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z dalších výhod protokolu HTTP bychom mohli jmenovat i jeho značné rozšíření, díky čemuž jsou firemní firewally často nastaveny tak, že umožňují provoz přes standardní port protokolu HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another really useful option is `--pretty`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další opravdu užitečnou možností je parametr `--pretty`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another simple option for public unauthenticated access is to start a Git daemon, although that requires you to daemonize the process - we’ll cover this option in the next section, if you prefer that route.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další jednoduchou možností nastavení veřejného neověřovaného přístupu je spustit démona Git. Pokud je pro vás tato cesta schůdnější, budeme se jí věnovat v následující části.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another thing you can do for your archives is some simple keyword substitution.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další možností pro archivy je jednoduchá substituce klíčového slova.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another useful option to figure out what state your branches are in is to filter this list to branches that you have or have not yet merged into the branch you’re currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další užitečnou funkcí ke zjištění stavu vašich větví je filtrování tohoto seznamu podle větví, které byly/nebyly začleněny do větve, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another useful option you may want to configure is the default diff tool to use to resolve merge conflicts.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další užitečnou volbou, jejíž nastavení můžete chtít upravit, je výchozí nástroj pro zjišťování rozdílů (diff), který Git používá k řešení konfliktů při slučování (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další užitečnou možností, která se vám může hodit, je zachování souboru v pracovním stromě a odstranění z oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another very frequent use of this syntax is to see what you’re about to push to a remote:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato syntaxe se velmi často používá také ke zjištění, co hodláte odeslat do vzdálené větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another way to do it is to have your SSH server authenticate from an LDAP server or some other centralized authentication source that you may already have set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším možným způsobem je nechat ověřovat SSH přístupy LDAP serveru nebo jinému centralizovanému zdroji ověření, který už možná máte nastavený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Another way to tag commits is with a lightweight tag.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další možností, jak označit revizi, je prostá značka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Any push (rewind or non-rewind) to refs other than master or integ won’t match the first two rules anyway, and the third rule allows it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakékoliv odeslání (bez ohledu na to zda se jedná o vracení změn nebo ne) do jiných referencí než `master` nebo `integ` nebudou odpovídat ani prvnímu ani druhému pravidlu, a proto bude díky třetímu pravidlu povoleno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Anything that has merge conflicts and hasn’t been resolved is listed as unmerged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vše, co při sloučení kolidovalo a nebylo vyřešeno, je označeno jako „unmerged“ (nesloučeno).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Anything you didn’t stage is still sitting there modified; you can do another commit to add it to your history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vše, co jste nepřipravili k zapsání, zůstane ve stavu změněno na vašem disku. Chcete-li i tyto soubory přidat do své historie, zapište další revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Are all the patches peer-reviewed and approved?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsou všechny záplaty odborně posuzovány a schvalovány?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Are you involved in that process?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jste součástí tohoto procesu?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As a final example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano with CommitDate being in the month of October 2008 (relative to the timezone of New York) and were not merges, you can run something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A poslední příklad. Pokud chcete zjistit, které revize upravující testovací soubory ve zdrojovém kódu Git zapsal Junio Hamano v říjnu 2008 (relativě k časové zóně New Yorku) a které přitom nebyly sloučením (merge), můžete zadat následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As a general rule, your messages should start with a single line that’s no more than about 50 characters and that describes the changeset concisely, followed by a blank line, followed by a more detailed explanation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zpráva by měla obvykle začínat samostatným řádkem o maximálně 50 znacích, v níž stručně popíšete soubor provedených změn. Za ním by měl následovat prázdný řádek a za ním podrobnější popis revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například zapíšete revizi a potom si uvědomíte, že jste zapomněli připravit k zapsání změny v souboru, který jste chtěli do této revize přidat, můžete provést následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As an extra precaution, you can easily restrict the 'git' user to only doing Git activities with a limited shell tool called `git-shell` that comes with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro větší bezpečnost máte možnost využít nástroj `git-shell`, který je distribuován se systémem Git. Pomocí něj lze uživatele 'git' snadno omezit tak, aby mohl prováděl pouze operace systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As before, you can set each value separately with a series of `git config` commands, or you can add them manually in the sendemail section in your `~/.gitconfig` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně jako v předchozím případu můžete nastavit sérií příkazů `git config` každou hodnotu zvlášť, nebo je můžete vložit ručně do sekce sendemail souboru `~/.gitconfig`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As discussed in Chapter 2, there are two types of tags: annotated and lightweight.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak jsme zmínili už v kapitole 2, existují dva typy značek: anotované a prosté.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As in any VCS, you can lose or mess up changes you haven’t committed yet; but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Stejně jako ve všech systémech VCS můžete ztratit nebo nevratně zničit změny, které ještě nebyly zapsány. Jakmile však jednou zapíšete snímek do systému Git, je téměř nemožné ho ztratit, zvlášť pokud pravidelně zálohujete databázi do jiného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As long as each user can get shell access on the machine, any SSH authentication mechanism you can think of should work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dokud má každý uživatel shellový přístup k počítači, měly by fungovat všechny mechanismy ověřování SSH, které vás jen napadnou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As mentioned before, Windows uses CRLF for new line characters while `git fast-import` expects only LF.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak už jsem se zmínil, Windows nahrazují znak konce řádku posloupností CRLF, zatímco `git fast-import` očekává pouze LF.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As the output will be different according to the timezone where it will be run, it's recommended to always use an absolute time such as ISO 8601 format (which includes timezone information) as argument to `--after` and `--before`, so that everone running the command will get the same repeatable results.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se výstup bude lišit podle časového pásma v místě spuštění, doporučuje se v argumentech `--after` a `--before` vždy používat absolutní čas (například ve formátu ISO 8601, který obsahuje i informaci o časovém pásmu). Činíme tak proto, aby každý, kdo stejný příkaz spustí, obdržel stejné, opakovatelné výsledky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As with many great things in life, Git began with a bit of creative destruction and fiery controversy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tak jako mnoho velkých věcí v lidské historii se i systém Git zrodil z kreativní destrukce a vášnivého sporu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you briefly saw in Chapter 1, you can specify Git configuration settings with the `git config` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak jsme v krátkosti ukázali v kapitole 1, příkazem `git config` lze specifikovat konfigurační nastavení systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can see, the `--stat` option prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, parametr `--stat` vypíše pod každým záznamem revize seznam změněných souborů, kolik souborů bylo změněno (changed) a kolik řádků bylo v těchto souborech vloženo (insertions) a smazáno (deletions).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can see, there is no added and removed lines in this output as in a normal diff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, výstup neobsahuje žádné přidané a odstraněné řádky, jak tomu bývá u běžného zobrazení rozdílů (diff).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can see, this command lists each commit with its SHA-1 checksum, the author’s name and e-mail, the date written, and the commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, tento příkaz vypíše všechny revize s jejich kontrolním součtem SHA-1, jménem a e-mailem autora, datem zápisu a zprávou o revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can see, when it completes successfully, it gives you a bunch of statistics about what it accomplished.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proběhne-li proces úspěšně, podá vám obsáhlou statistiku o tom, co bylo provedeno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you can tell, Git simply replaces the new command with whatever you alias it to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chtělo by se tedy říci, že Git jednoduše nahradí nový příkaz jakýmkoli aliasem, který vytvoříte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you did in the "An Example Git Enforced Policy" section of Chapter 7, we’ll write this in Ruby, because it’s what I generally work with and it tends to be easy to read.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně jako v podkapitole „Příklad vynucení chování systémem Git“ v kapitole 7 použijeme i tentokrát Ruby, s nímž většinou pracuji a který je srozumitelný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you edit files, Git sees them as modified, because you’ve changed them since your last commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakmile začnete soubory upravovat, Git je bude považovat za změněné, protože jste v nich od poslední revize provedli změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you go on using Git, you’ll probably use other commands frequently as well; in this case, don’t hesitate to create new aliases.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li pracovat v systému Git častěji, pravděpodobně budete hojně využívat i jiné příkazy. V takovém případě neváhejte a vytvořte si nové aliasy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you initially make commits, you’re given a `master` branch that points to the last commit you made.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při prvním zapisování revizí dostanete hlavní větev, jež bude ukazovat na poslední revizi, kterou jste zapsali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you just saw, to get data from your remote projects, you can run:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak jste právě viděli, data ze vzdálených projektů můžete získat pomocí příkazu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you learn Git, try to clear your mind of the things you may know about other VCSs, such as Subversion and Perforce; doing so will help you avoid subtle confusion when using the tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Při seznámení se systémem Git se pokuste zapomenout na vše, co už možná víte o jiných systémech VCS, např. Subversion nebo Perforce. Vyhnete se tak nežádoucím vlivům, které by vás mohly při používání systému Git mást.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you may remember from Chapter 1, Git doesn’t store data as a series of changesets or deltas, but instead as a series of snapshots.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak si možná vzpomínáte z kapitoly 1, Git neukládá data jako sérii změn nebo rozdílů, ale jako sérii snímků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you may remember, Git is fundamentally a linked list of commit objects that point to a snapshot of content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak si možná vzpomínáte, říkali jsme, že Git je v podstatě seznam odkazů na objekty revizí, které ukazují na určitý snímek obsahu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you type, a helper pops up, showing you possible username matches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Během psaní se zobrazuje pomocník, který vám navrhuje možná dokončení uživatelského jména.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you’ll remember, you can create the branch based off your master branch like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak si vzpomínáte, můžete vytvořit větev založenou na své hlavní větvi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>As you’re working, Git silently records what your HEAD is every time you change it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git během vaší práce v tichosti zaznamenává, kde se nachází ukazatel HEAD (pokaždé, když se změní jeho pozice).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Assume that you have the rack files in a subdirectory of your project, and you want to switch it to a submodule.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že máte soubory rack v podadresáři svého projektu a chcete ho přepnout do submodulu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Assuming she already has her repository cloned, she decides to work on `featureA` first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože už má naklonovaný repozitář, rozhodne se pracovat nejprve na úkolu A – `featureA`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Assuming this happens, how can you get your commits back?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se už něco takového stane, jak dostanete své revize zpět?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Assuming you saved the patch at `/tmp/patch-ruby-client.patch`, you can apply the patch like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že jste záplatu uložili jako `/tmp/patch-ruby-client.patch`. Aplikaci pak provedete takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At any stage, you may want to undo something.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kdykoli se může stát, že byste nějakou úpravu chtěli vrátit do původního stavu..</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At some point in your Git journey, you may accidentally lose a commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdy se může stát, že nedopatřením přijdete o revizi Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At some point, you may want to convert your existing project to Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V určitém okamžiku možná budete chtít přepnout svůj existující projekt do systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At that point, anyone who can access the web server under which you put the repository can also clone your repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím je nastavení hotové. V tuto chvíli může každý, kdo má přístup na webový server, kam jste repozitář uložili, tento repozitář naklonovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At that point, everyone will be able to access that machine via the 'git' user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní budou mít všichni přístup k tomuto počítači prostřednictvím uživatele 'git'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At the bottom of the instructions page is a link to a Subversion import.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dole na stránce s instrukcemi najdete odkaz na import ze systému Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At the bottom, you should find a line that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dole byste měli najít řádek, který vypadá asi takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At the end of this chapter you should understand why Git is around, why you should use it and you should be all set up to do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Na konci kapitoly byste měli rozumět tomu, proč tady Git je, proč byste jej měli používat a měli byste si jej umět nastavit podle svých potřeb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At the end of this list, it writes "done" to initiate the `upload-pack` process to begin sending the packfile of the data it needs:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výpis je ukončen výrazem „done“, který iniciuje odeslání požadovaného balíčkového souboru nebo dat procesem `upload-pack`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At the very least, this may be a way to get up and running with Git and try it out quickly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V neposlední řadě může být toto způsob, jak rychle zprovoznit a vyzkoušet systém Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point you might be wondering how the access control rules are actually applied, so let’s go over that briefly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď by vás mohlo zajímat, jak jsou vlastně pravidla pro přístup aplikována, pojďme se na to tedy krátce podívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, John’s local repository looks something like Figure 5-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku vypadá Johnův lokální repozitář jako na obrázku 5-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, nothing in your project is tracked yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku se z vašeho projektu ještě nic nesleduje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, other users who have SSH access to the same server which has read-access to the `/opt/git` directory can clone your repository by running</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku mohou všichni ostatní, kdo mají SSH přístup k tomuto serveru s oprávněním pro čtení k adresáři `/opt/git`, naklonovat váš repozitář příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, she needs to share her work with John, so she pushes her `featureA` branch commits up to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku potřebuje sdílet svou práci s Johnem, a tak odešle revize své větve `featureA` na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, suppose you remember one little change that you want to make in `benchmarks.rb` before you commit it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní předpokládejme, že jste si vzpomněli na jednu malou změnu, kterou chcete ještě před zapsáním revize provést v souboru `benchmarks.rb`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, the `fetch-pack` process looks at what objects it has and responds with the objects that it needs by sending "want" and then the SHA it wants.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku proces `fetch-pack` zjistí, jaké objekty má, a vytvoří odpověď s objekty, které potřebuje. Odpověď má tvar „want“ (chci) a SHA požadovaných objektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, the others can clone it down and push changes back up just as easily:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ostatní nyní mohou velmi snadno repozitář naklonovat i do něj odesílat změny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, the topics are evaluated to determine whether they’re safe and ready for consumption or whether they need more work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní budou tematické větve vyhodnoceny, zda jsou bezpečné a mohou být aplikovány, nebo zda potřebují další úpravy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can determine what you’d like to do with it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku můžete určit, jak s ní chcete naložit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can do all the basic local Git operations — creating or cloning a repository, making changes, staging and committing those changes, and viewing the history of all the changes the repository has been through.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku už tedy umíte v systému Git provádět všechny základní lokální operace: vytvářet a klonovat repozitáře, provádět změny, připravit je k zapsání i zapisovat nebo třeba zobrazit historii všech změn, které prošly repozitářem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can easily switch branches and do work elsewhere; your changes are stored on your stack.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete bez obav přepnout větve a pracovat na jiném úkolu, vaše změny byly uloženy do zásobníku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can exit the interactive adding script and run `git commit` to commit the partially staged files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku můžete ukončit skript interaktivního přidávání a spustit příkaz `git commit`, jímž zapíšete částečně připravené soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can go back to the master branch and do a fast-forward merge (see Figure 3-30).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete přejít zpět na hlavní větev a provést sloučení „rychle vpřed“ (viz obrázek 3-30).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you can run your test to see if the issue exists as of this commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete provést testování a vyzkoušet, zda problém existuje i v této revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you have 11 objects — 4 blobs, 3 trees, 3 commits, and 1 tag:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V současné chvíli máte 11 objektů: 4 bloby, 3 stromy, 3 revize a 1 značku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you have a Git repository with tracked files and an initial commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této chvíli máte vytvořen repozitář Git se sledovanými soubory a úvodní revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you have to merge this work in again, even though you’ve already done so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tuto chvíli vám nezbývá, než změny znovu začlenit do své práce, ačkoli už jste je jednou začlenili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you may want to turn to a widely used software project called Gitosis.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto možná rádi přejdete na rozšířený softwarový projekt „Gitosis“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you should be able to do most of the day-to-day tasks for which you’ll be using Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této chvíli byste už měli zvládat většinu každodenních úkonů, pro něž se vyplatí Git používat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you should be able to do most of the things in Git that you’ll need on the command line day to day and feel comfortable doing so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této chvíli byste měli v systému Git zvládat většinu úkonů, které se běžně používají na příkazovém řádku, a neměly by vám činit větší potíže.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you should be able to go to your Drafts folder, change the To field to the mailing list you’re sending the patch to, possibly CC the maintainer or person responsible for that section, and send it off.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku byste měli být schopni přejít do složky Drafts, změnit pole To na mailing list, do kterého záplatu posíláte, případně pole CC na správce nebo na osobu zodpovědnou za tuto část, a odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you should be able to visit `http://gitserver/` to view your repositories online, and you can use `http://git.gitserver` to clone and fetch your repositories over HTTP.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku byste měli být schopni prohlížet své repozitáře online na adrese `http://gitserver/` a používat `http://git.gitserver` ke klonování a vyzvedávání repozitářů prostřednictvím protokolu HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you should have a valid Git repository that has imported your branches and tags:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku byste tedy měli mít platný repozitář Git s importovanými větvemi a značkami:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, your project working directory is exactly the way it was before you started working on issue #53, and you can concentrate on your hotfix.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku vypadá váš pracovní adresář přesně tak, jak vypadal, než jste začali pracovat na chybě č. 53, a vy se nyní můžete soustředit na rychlou opravu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this point, you’re ready to start the walking process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku je vše připraveno a můžete zahájit proces procházení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>At this stage, you’ll receive a call that another issue is critical and you need a hotfix.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku vám zavolají, že se vyskytla jiná kritická chyba, která vyžaduje rychlou opravu (hotfix).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Author:     Ramkumar Ramachandra &lt;artagnon@gmail.com&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112000Z" creationid="Prikryl" creationdate="20151023T112000Z">
        <seg>Author:     Ramkumar Ramachandra &lt;artagnon@gmail.com&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 15:08:43 2008 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221547Z" creationid="Prikryl" creationdate="20151023T221547Z">
        <seg>Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 15:08:43 2008 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>AuthorDate: Mon Apr 29 18:19:37 2013 +0530</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112001Z" creationid="Prikryl" creationdate="20151023T112001Z">
        <seg>AuthorDate: Mon Apr 29 18:19:37 2013 +0530</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>BFG cannot do as much as `filter-branch`, but it is _very_ fast and on a large repository this can make a big difference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>BFG neumí tolik věcí jako `filter-branch`, ale je _velmi_ rychlý. Pro velké repozitáře to může být zásadní rozdíl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Basic sequence of this managed-team workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Základní posloupnost kroků u pracovního postupu v řízeném týmu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Basically, all you have to do is put the bare Git repository under your HTTP document root and set up a specific `post-update` hook, and you’re done (See Chapter 7 for details on Git hooks).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediné, co většinou stačí udělat, je umístit holý repozitář Git do kořenového adresáře HTTP a nastavit příslušný zásuvný modul `post-update` (zásuvné moduly Git viz kapitola 7).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Basically, you need to run this command in a daemonized manner:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V podstatě je třeba spustit tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Be careful, because you can’t always revert some of these undos.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ale buďte opatrní! Ne všechny zrušené změny se dají vrátit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Be warned: this technique is destructive to your commit history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ale upozorňuji, že tento postup porušuje historii vašich revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because 'scott' is the only user in the system right now, you’ll add him as the only member, and you’ll create a new project called `iphone_project` to start on:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože je v tuto chvíli jediným uživatelem v systému 'scott', přidáte ho jako jediného člena a vytvoříte pro něj nový projekt s názvem `iphone_project`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because Git allows you to have multiple remote repositories, it’s possible to have a workflow where each developer has write access to their own public repository and read access to everyone else’s.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože Git umožňuje, abyste měli několik vzdálených repozitářů, lze použít pracovní postup, kdy má každý vývojář oprávnění k zápisu do vlastního veřejného repozitáře a oprávnění pro čtení k repozitářům všech ostatních.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because Git doesn’t have monotonically increasing numbers like 'v123' or the equivalent to go with each commit, if you want to have a human-readable name to go with a commit, you can run `git describe` on that commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nepoužívá pro jednotlivé revize monotónně rostoucí čísla („v123“ apod.), a proto možná rádi využijete příkaz `git describe`, jímž lze každé revizi přiřadit běžně zpracovatelný název.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because Git is designed to work with nearly any type of project, these tools are pretty generic, but they can often help you hunt for a bug or culprit when things go wrong.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože je Git navržen tak, aby pracoval téměř s jakýmkoli typem projektu, jsou tyto nástroje velmi univerzální. Často vám mohou pomoci odhalit vzniklou chybu nebo problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because Git is very flexible, people can and do work together many ways, and it’s problematic to describe how you should contribute to a project — every project is a bit different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzhledem k velké flexibilitě systému Git mohou uživatelé spolupracovat mnoha různými způsoby, a není proto snadné popsat, jak byste měli do projektu přispívat. Každý projekt je trochu jiný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because Git uses a simple three-way merge, merging from one branch into another multiple times over a long period is generally easy to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzhledem k tomu, že Git používá jednoduché třícestné slučování, je velmi snadné začleňovat jednu větev do druhé i několikrát v rámci dlouhého časového intervalu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzhledem k tomu, že větev v systému Git tvoří jeden jednoduchý soubor, obsahující 40 znaků kontrolního součtu SHA-1 revize, na niž ukazuje, je snadné větve vytvářet i odstraňovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because commits contain the SHA-1 values of their parents, this command changes every commit SHA in your history, not just those that have the matching e-mail address.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože revize obsahují hodnoty SHA-1 svých rodičů, změní tento příkaz SHA všech revizí ve vaší historii, ne pouze těch, které mají odpovídající e-mailovou adresu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because hooks aren’t transferred with a clone of a project, you must distribute these scripts some other way and then have your users copy them to their `.git/hooks` directory and make them executable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jelikož se zásuvné moduly při naklonování projektu nekopírují, musíte tyto skripty distribuovat jinak a uživatelům zadat instrukce, aby je zkopírovali do svého adresáře `.git/hooks` a zajistili, že budou spustitelné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because it contains work that isn’t merged in yet, trying to delete it with `git branch -d` will fail:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jelikož obsahuje práci, která ještě nebyla začleněna, bude pokus o její smazání příkazem `git branch -d` neúspěšný:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because it generally uses a static HTTP server to serve all the data, a normal Apache server can serve thousands of files per second on average — it’s difficult to overload even a small server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzhledem k tomu, že k obsluze všech dat používá většinou statický HTTP server, obslouží běžný server Apache průměrně několik tisíc souborů za sekundu. Ani malý server proto není snadné přetížit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because it’s not as intelligent about transferring only the data you need — there is no dynamic work on the part of the server in these transactions — the HTTP protocol is often referred to as a _dumb_ protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože protokol není natolik inteligentní, aby přenášel pouze data, která potřebujete – v těchto transakcích se na straně serveru nesetkáte s dynamickou činností – je protokol HTTP často nazýván _dumb protocol_ (hloupý protokol).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because it’s rarely used, we won’t cover it in this book.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se tato možnost využívá zřídka, nebudeme se jí v této knize věnovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because it’s reachable from the history, it will always be there.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because that server has a subset of the data your `origin` server has right now, Git fetches no data but sets a remote branch called `teamone/master` to point to the commit that `teamone` has as its `master` branch (see Figure 3-26).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože je tento server podmnožinou dat, která jsou právě na serveru `origin`, Git nevyzvedne žádná data, ale nastaví vzdálenou větev nazvanou `teamone/master` tak, aby ukazovala na revizi, kterou má server `teamone` nastavenou jako větev `master` (viz obrázek 3-26).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the commit on the branch you’re on isn’t a direct ancestor of the branch you’re merging in, Git has to do some work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzhledem k tomu, že revize na větvi, na níž se nacházíte, není přímým předkem větve, kterou chcete začlenit, Git bude muset podniknout určité kroky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the commit pointed to by the branch you merged in was directly upstream of the commit you’re on, Git moves the pointer forward.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jelikož revize, na niž ukazovala větev, do níž jste začleňovali, byla v přímým předchůdcem revize, na níž jste se nacházeli, Git přesunul ukazatel vpřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the date is expressed in the name of the directory, you’ll parse it out.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože je datum obsaženo v názvu adresáře, lze ho vyčíst odtud.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the reflog data is kept in the `.git/logs/` directory, you effectively have no reflog.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se data pro reflog uchovávají v adresáři `.git/logs/`, nemáte evidentně žádný reflog.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the refspec is `&lt;src&gt;:&lt;dst&gt;`, by leaving off the `&lt;src&gt;` part, this basically says to make the topic branch on the remote nothing, which deletes it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vynecháte-li z původního vzorce refspec ve tvaru `&lt;src&gt;:&lt;dst&gt;` část `&lt;src&gt;`, říkáte v podstatě, aby byla větev „topic“ na vzdáleném serveru nahrazena ničím, čímž ji smažete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it’s just the Git data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se repozitář používá pouze jako místo pro spolupráci, není žádný důvod, aby byl na disku načten konkrétní snímek. Jsou tu pouze uložena data systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the server will tell you that you can’t push a non-fast-forward anyway, and the hook prevents forced pushes, the only accidental thing you can try to catch is rebasing commits that have already been pushed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzhledem k tomu, že vám server sdělí, že nelze odesílat revize nesměřující rychle vpřed, a zásuvný modul neumožní odeslat revize nesplňující dané požadavky, je vaší poslední možností přeskládat revize, které jste již odeslali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because the server-side method looks at the log of commits, and, at this point, the commit hasn’t been recorded yet, you must get your file listing from the staging area instead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože serverová metoda využívá záznam revizí, ale ve vašem případě ještě nebyla revize zaznamenána, musí být seznam souborů pořízen na základě oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because this is so common, you can replace this entire part with `-s`, which means standard layout and implies all those options.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se jedná o častou situaci, můžete celou tuto část nahradit parametrem `-s`, který označuje standardní layout a implikuje všechny uvedené parametry.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because we can’t cover all of them, and because I happen to work at one of them, we’ll use this section to walk through setting up an account and creating a new project at GitHub.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože se tu nemůžeme věnovat všem možnostem a protože shodou okolností na jednom hostingovém místě pracuji, využijeme tuto část k tomu, abychom ukázali nastavení účtu a vytvoření nového projektu na serveru GitHub.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you already merged in `iss53` earlier, you see it in your list.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jelikož už jste větev `iss53` začlenili, nyní se zobrazí ve výpisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you don’t download the whole history in those systems, this type of addition carries few consequences.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože v těchto systémech nestahujete celou historii, nebývá s vkládáním velkých souborů problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you don’t have the permissions to directly update branches on the project, you have to get the work to the maintainers some other way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože nemáte oprávnění aktualizovat větve projektu přímo, musíte svou práci doručit správcům jinak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Protože máte celou historii projektu uloženou přímo na svém lokálním disku, probíhá většina operací takřka okamžitě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you need to use the same format to specify the file contents later, you create a helper method, `export_data`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože budete stejný formát potřebovat i později, k určení obsahu souboru vytvoříte pomocnou metodu – `export_data`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you never added them to any commits, they’re considered dangling and aren’t packed up in your new packfile.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jelikož jste je nikdy nevložili do žádné z revizí, Git je považuje za volné a nezabalil je do nového balíčkového souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you only want the `old-file` and `new-file` arguments, you use the wrapper script to pass the ones you need.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože chcete pouze parametry `old-file` a `new-file`, použijete wrapperový skript k zadání těch, které potřebujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you rebased the branch, you have to specify the `-f` to your push command in order to be able to replace the `featureA` branch on the server with a commit that isn’t a descendant of it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože jste větev přeskládali, musíte k příkazu git push přidat parametr `-f`, abyste mohli větev `featureA` na serveru nahradit revizí, která není jejím potomkem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because you want all your branches and tags to go up, you can now run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože do něj chcete odeslat všechny své větve a značky, můžete použít příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Because your starting point is the `ca82a6` commit object you saw in the `info/refs` file, you start by fetching that:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože je vaším výchozím bodem objekt revize `ca82a6`, jak jste zjistili v souboru `info/refs`, začnete vyzvednutím tohoto objektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Before a topic branch merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Před začleněním tematické větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Before the last commit, you were using closer to 2K — clearly, removing the file from the previous commit didn’t remove it from your history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Před zapsáním poslední revize jste využívali přibližně 2 kB. Je tedy jasné, že odstranění souboru z předchozí revize ho neodstranilo z historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Before we finish this chapter on basic Git, a few little tips and tricks may make your Git experience a bit simpler, easier, or more familiar.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Než ukončíme tuto kapitolu věnovanou základům práce se systémem Git, přidáme ještě pár tipů a triků, které vám mohou usnadnit či zpříjemnit práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Before you start looking at the specific use cases, here’s a quick note about commit messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Než se podíváme na konkrétní praktické příklady, přidávám malou poznámku o zprávách k revizím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Behind big corporate firewalls, this obscure port is commonly blocked.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Velkými podnikovými firewally je tento málo rozšířený port většinou blokován.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Benevolent dictator workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracovní postup s benevolentním diktátorem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Better get rid of it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Raději se ho zbavme:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Boom.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Šup!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Both files are staged and will go into your next commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oba soubory jsou nyní připraveny k zapsání a budou zahrnuty do příští revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you’re ready.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oboje tyto změny jsou oddělené na samostatných větvích. Můžete mezi nimi přepínat tam a zpět, a až uznáte za vhodné, můžete je sloučit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Branch pointing into the commit data’s history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev ukazující do historie dat revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Branches on this list without the `*` in front of them are generally fine to delete with `git branch -d`; you’ve already incorporated their work into another branch, so you’re not going to lose anything.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větve v tomto seznamu, které nejsou označeny `*`, lze většinou snadno smazat příkazem `git branch -d`. Jejich obsah už jste převzali do jiné větve, a tak jejich odstraněním nepřijdete o žádnou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Branching in Subversion isn’t the same as branching in Git; if you can avoid using it much, that’s probably best.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Princip větvení v systému Subversion se odlišuje od větvení v systému Git. Pravděpodobně nejlepší bude, když se mu pokusíte co nejvíc vyhýbat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Branching means you diverge from the main line of development and continue to do work without messing with that main line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větvení znamená, že se můžete odloučit od hlavní linie vývoje a pokračovat v práci, aniž byste hlavní linii zanášeli smetím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Built new tar/zip balls.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091434Z" creationid="Prikryl" creationdate="20151024T091434Z">
        <seg>Built new tar/zip balls.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But because Git was initially a toolkit for a VCS rather than a full user-friendly VCS, it has a bunch of verbs that do low-level work and were designed to be chained together UNIX style or called from scripts.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože však byl Git původně spíš soupravou nástrojů k verzování než plným, uživatelsky přívětivým systémem VCS, zná celou řadu příkazů pracujících na nižších úrovních, které byly původně spojovány ve stylu UNIXu nebo volány ze skriptů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But enforcing this with a hook will also work, and you can modify it to do so only for certain users or whatever else you come up with later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však totéž nastavíte pomocí zásuvného modulu, pochodíte i ve starších verzích systému Git a navíc ho můžete nastavit pouze pro konkrétní uživatele nebo na cokoli jiného, s čím se kdy setkáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But in Git it’s common to create, work on, merge, and delete branches several times a day.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git naopak není výjimkou vytvářet, používat, slučovat a mazat větve i několikrát denně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But in this chapter, you’ll be dealing mostly with the lower-level plumbing commands, because they give you access to the inner workings of Git and help demonstrate how and why Git does what it does.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této kapitole se však budeme věnovat převážně nízkoúrovňovým příkazům, protože ty vám umožní nahlédnout do vnitřního fungování systému Git a pochopit, jak a proč Git dělá to, co dělá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But instead of appending them manually to the `~/.ssh/authorized_keys` file on your server, you’ll add them, one key per file, into the `keydir` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ale místo toho, abyste je vkládali ručně do souboru `~/.ssh/authorized_keys` na serveru, přidáte je do adresáře `keydir`, jeden soubor pro každý klíč.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But it’s possible that the patch won’t apply cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se ale stát, že záplata nebude aplikována čistě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But notice that only the origin remote is an SSH URL, so it’s the only one I can push to (we’ll cover why this is in _Chapter 4_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ale všimněte si, že pouze vzdálený server origin je SSH URL, a je tedy jediným repozitářem, kam lze soubory odesílat (push; důvod objasníme v _kapitole 4_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But remembering the SHA-1 key for each version of your file isn’t practical; plus, you aren’t storing the filename in your system — just the content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pamatovat si klíč SHA-1 každé verze souboru ale není praktické, navíc v systému neukládáte název souboru, pouze jeho obsah.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But suppose you didn’t; how would you identify what file or files were taking up so much space?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžeme ale předpokládat, že to nevíte. Jak se dá zjistit, který soubor nebo soubory zabírají tolik místa?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But the question is how do you convert _binary_ data to a text?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ale otázkou je, jak byste měli konverzi _binárních_ dat na text provést?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But those are the only two differences — otherwise, the script works the same way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou však jediné dvě změny, v ostatních ohledech pracuje skript stejně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But you have already set up your repositories in `/opt/git`, so instead of reconfiguring everything, you create a symlink:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy už však máte repozitáře vytvořeny ve složce `/opt/git`, a tak místo toho, abyste museli vše překonfigurovat, vytvoříte symbolický odkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>But you need to provide a descriptive commit message (via `-m`), or the merge will say "Merge branch opera" instead of something useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli byste však uvést výstižnou zprávu revize (pomocí parametru `-m`). V opačném případě bude sloučení místo užitečných informací oznamovat jen „Merge branch opera“ („začleněna větev opera“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By blaming `GITPackUpload.m` with the `-C` option, I could see where sections of the code originally came from:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když jsem zadal příkaz `GITPackUpload.m` s parametrem `-C`, dostal jsem informace, odkud původně pocházejí jednotlivé kousky kódu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By convention, bare repository directories end in `.git`, like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je zvykem, že adresáře s holým repozitářem končí na `.git`, například:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, Git doesn’t check for consistency all the objects it receives during a push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git ve výchozím nastavení nekontroluje konzistenci všech objektů, které přijímá při odesílání dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, Git passes the following arguments to the diff program:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Standardně Git předává do nástoje diff tyto parametry:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, Git populates this directory with a bunch of example scripts, many of which are useful by themselves; but they also document the input values of each script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git do tohoto adresáře standardně ukládá několik ukázkových skriptů, které jsou často užitečné nejen samy o sobě, ale navíc dokumentují vstupní hodnoty všech skriptů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, Git uses whatever you’ve set as your default text editor or else falls back to the Vi editor to create and edit your commit and tag messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git používá k vytváření a editaci zpráv k revizím a značkám standardně textový editor, který nastavíte jako výchozí, nebo použije editor Vi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, Git uses your system’s default editor, which is generally Vi or Vim.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud toto nastavení nezměníte, bude Git používat výchozí editor vašeho systému, jímž je většinou Vi nebo Vim.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, a user’s SSH keys are stored in that user’s `~/.ssh` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatelské SSH klíče jsou standardně uloženy v adresáři `~/.ssh` daného uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, the `git push` command doesn’t transfer tags to remote servers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git push` nepřenáší značky na vzdálené servery automaticky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By default, with no arguments, `git log` lists the commits made in that repository in reverse chronological order.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve výchozím nastavení a bez dalších parametrů vypíše příkaz `git log` revize provedené v daném repozitáři v obráceném chronologickém pořadí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By now, you’ve learned most of the day-to-day commands and workflows that you need to manage or maintain a Git repository for your source code control.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do této chvíle jste stačili poznat většinu každodenních příkazů a pracovních postupů, které budete při práci se zdrojovým kódem potřebovat k ovládání a správě repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By private, I mean closed source — not read-accessible to the outside world.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soukromým projektem myslím uzavřený zdrojový kód – okolní svět k němu nemá oprávnění pro čtení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By symbolic reference, I mean that unlike a normal reference, it doesn’t generally contain a SHA-1 value but rather a pointer to another reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Symbolickou referencí myslím to, že na rozdíl od normálních referencí většinou neobsahuje hodnotu SHA-1, ale spíš ukazatel na jinou referenci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>By the end of the chapter, you should be able to configure and initialize a repository, begin and stop tracking files, and stage and commit changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po přečtení kapitoly byste měli být schopni nakonfigurovat a inicializovat repozitář, spustit a ukončit sledování souborů, připravovat soubory a zapisovat revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Centralized version control diagram.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Diagram centralizované správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Centralized workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Centralizovaný pracovní postup</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Change `/bin/sh` to `/usr/bin/git-shell` (or run `which git-shell` to see where it’s installed).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změňte `/bin/sh` na `/usr/bin/git-shell` (nebo spusťte příkaz `which git-shell`, abyste viděli, kde je nainstalován).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Change the commit message, and exit the editor.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změňte zprávu k revizi a zavřete textový editor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changes are shown inline instead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo toho se změny zobrazují uvnitř textu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205059Z" creationid="Prikryl" creationdate="20151022T205059Z">
        <seg>Changes not staged for commit:
	  (use "git add &lt;file&gt;..." to update what will be committed)
	  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
	
	        modified:   benchmarks.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changes you submit may be rendered obsolete or severely broken by work that is merged in while you were working or while your changes were waiting to be approved or applied.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U změn, které postoupíte vyšší instanci, může docházet k zastarávání nebo vážnému narušení jinými daty, která byla začleněna během vaší práce nebo ve chvíli, kdy vaše změny čekaly na schválení či aplikaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Changing your last commit is probably the most common rewriting of history that you’ll do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změna poslední revize je pravděpodobně nejobvyklejším způsobem přepsání historie, který budete provádět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Chapter 6 describes a number of useful Git tricks for rewriting history and interactively staging files — use these tools to help craft a clean and understandable history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kapitola 6 popisuje několik užitečných triků, jak v systému Git přepsat historii a jak interaktivně připravovat soubory k zapsání. Používejte tyto nástroje k udržení čisté a srozumitelné historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Check the tree created by that commit, and you see something interesting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prohlédněte si strom vytvořený touto revizí a uvidíte jednu zajímavou věc:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Checking connectivity... done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101812Z" creationid="Prikryl" creationdate="20151023T101812Z">
        <seg>Checking connectivity... done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Checking out a local branch from a remote branch automatically creates what is called a _tracking branch_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Checkoutem lokální větve ze vzdálené větve automaticky vytvoříte takzvanou _sledující větev_ (angl. tracking branch).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Click the "edit" button in the project header or the Admin tab at the top of the project to reach the Admin page of your GitHub project (see Figure 4-10).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kliknutím na tlačítko „edit“ v záhlaví projektu nebo na záložce „Admin“ v horní části projektu se dostanete na stránku správy vašeho projektu na serveru GitHub (viz obrázek 4-10).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Clicking the "I agree, sign me up" button takes you to your new user dashboard (see Figure 4-4).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kliknutím na tlačítko „I agree, sign me up“ přejdete na svůj nový uživatelský ovládací panel (viz obrázek 4-4).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Clicking the "explain ssh keys" link takes you to detailed instructions on how to do so on all major operating systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kliknutím na odkaz „explain ssh keys“ přejdete na stránku s podrobnými instrukcemi, jak klíč vložit ve všech hlavních operačních systémech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Clone a repository, and base some work on it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naklonovali jste repozitář a provedli v něm změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Collaborating with others involves managing these remote repositories and pushing and pulling data to and from them when you need to share work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spolupráce s ostatními uživateli zahrnuje také správu těchto vzdálených repozitářů. Při sdílení práce musíte do těchto repozitářů data odesílat (push) a zase je z nich stahovat (pull).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Commit history after featureA work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie revizí s větví featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Commit history after featureBv2 work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie revizí s větví featureBv2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Commit:     Junio C Hamano &lt;gitster@pobox.com&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112002Z" creationid="Prikryl" creationdate="20151023T112002Z">
        <seg>Commit:     Junio C Hamano &lt;gitster@pobox.com&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>CommitDate: Mon Apr 29 08:07:22 2013 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112003Z" creationid="Prikryl" creationdate="20151023T112003Z">
        <seg>CommitDate: Mon Apr 29 08:07:22 2013 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Committed means that the data is safely stored in your local database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Zapsáno znamená, že jsou data bezpečně uložena ve vaší lokální databázi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Committed revision 2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090935Z" creationid="Prikryl" creationdate="20151024T090935Z">
        <seg>Committed revision 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Committed revision 3.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090938Z" creationid="Prikryl" creationdate="20151024T090938Z">
        <seg>Committed revision 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (13/13), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091727Z" creationid="Prikryl" creationdate="20151024T091727Z">
        <seg>Compressing objects: 100% (13/13), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (14/14), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104620Z" creationid="Prikryl" creationdate="20151023T104620Z">
        <seg>Compressing objects: 100% (14/14), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (16/16), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091822Z" creationid="Prikryl" creationdate="20151024T091822Z">
        <seg>Compressing objects: 100% (16/16), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (3/3), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105409Z" creationid="Prikryl" creationdate="20151023T105409Z">
        <seg>Compressing objects: 100% (3/3), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (38/38), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102242Z" creationid="Prikryl" creationdate="20151023T102242Z">
        <seg>Compressing objects: 100% (38/38), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Compressing objects: 100% (5/5), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091711Z" creationid="Prikryl" creationdate="20151024T091711Z">
        <seg>Compressing objects: 100% (5/5), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conceptually, most other systems store information as a list of file-based changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Většina ostatních systémů ukládá informace jako seznamy změn jednotlivých souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conceptually, the data in your Git repository looks something like Figure 3-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Data ve vašem repozitáři Git se dají schematicky znázornit jako na obrázku 3-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conceptually, the data that Git is storing is something like Figure 9-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Data, která Git ukládá, vypadají v principu jako na obrázku 9-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Conflicts:
	  index.html
	#
	# It looks like you may be committing a merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103033Z" creationid="Prikryl" creationdate="20151023T103033Z">
        <seg>Conflicts:
	  index.html
	#
	# It looks like you may be committing a merge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Congratulations on being an effective Git developer!</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gratulujeme, nyní je z vás efektivní vývojář v systému Git!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Connection to gitserver closed.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105143Z" creationid="Prikryl" creationdate="20151023T105143Z">
        <seg>Connection to gitserver closed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Consider an example of doing some work (on `master`), branching off for an issue (`iss91`), working on it for a bit, branching off the second branch to try another way of handling the same thing (`iss91v2`), going back to your master branch and working there for a while, and then branching off there to do some work that you’re not sure is a good idea (`dumbidea` branch).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvažujme nyní následující situaci: pracujete na projektu v hlavní větvi (`master`), odvětvíme se z ní k vyřešení jednoho problému (`iss91`), chvíli na něm pracujete, ale vytvoříte ještě další větev, abyste zkusili jiné řešení stejné chyby (`iss91v2`). Pak se vrátíte zpět do hlavní větve, kde pokračujete v práci, a pak dostanete nápad, který by se možná mohl osvědčit, a tak pro něj vytvoříte další větev (`dumbidea`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Contributing to public projects is a bit different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přispívání do veřejných projektů se poněkud liší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Contributors don’t have to wait for the project to incorporate their changes — each party can work at their own pace.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přispěvatelé nemusí čekat, až budou jejich změny začleněny do projektu – každá strana může pracovat svým tempem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Cool — now you have a branch named `recover-branch` that is where your `master` branch used to be, making the first two commits reachable again.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výborně, nyní máte větev s názvem `recover-branch`, která se nachází na bývalé pozici větve `master`. První dvě revize jsou opět dostupné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Copied properties for revision 1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090932Z" creationid="Prikryl" creationdate="20151024T090932Z">
        <seg>Copied properties for revision 1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Copied properties for revision 2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090937Z" creationid="Prikryl" creationdate="20151024T090937Z">
        <seg>Copied properties for revision 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Copy this file to your home directory, and add this to your `.bashrc` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor nakopírujte tento do vašeho domovského adresáře a do souboru `.bashrc` přidejte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Copy your SSH public key (a file called `~/.ssh/id_rsa.pub` if you did a plain `ssh-keygen` with all the defaults) from your workstation, renaming it to `&lt;yourname&gt;.pub` (we'll use `scott.pub` in our examples).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z vaší pracovní stanice nakopírujte svůj veřejný SSH klíč (pokud jste spustili `ssh-keygen` s implicitními hodnotami, jde o soubor `~/.ssh/id_rsa.pub`) a přejmenujte jej na `&lt;vasejmeno&gt;.pub` (v příkladech budeme používat `scott.pub`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a branch for a new story you’re working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte větev pro novou část stránek, v níž budete pracovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a branch to add the hotfix.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte větev pro přidání hotfixu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a file `/usr/local/bin/odt-to-txt` (you are free to put it into a different directory) with the following content:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořte soubor `/usr/local/bin/odt-to-txt` (můžete jej umístit i do jiného adresáře) s následujícím obsahem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Create a file called `users.txt` that has this mapping in a format like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořte soubor `users.txt`, který bude toto mapování obsahovat v následující podobě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořit novou větev je právě tak snadné a rychlé jako zapsat 41 bytů do souboru (40 znaků a jeden znak pro nový řádek).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Creating a new branch pointer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoření nového ukazatele na větev</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Creating a new repository on GitHub.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoření nového repozitáře na serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Creating an annotated tag in Git is simple.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoření anotované značky v systému Git je jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Currently, the majority of open source development projects and a large number of corporate projects use Subversion to manage their source code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V současné době používá většina projektů vývoje open source softwaru a velká část korporátních projektů ke správě zdrojového kódu systém Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Delta compression using 2 threads.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091726Z" creationid="Prikryl" creationdate="20151024T091726Z">
        <seg>Delta compression using 2 threads.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Did you mean this?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090233Z" creationid="Prikryl" creationdate="20151024T090233Z">
        <seg>Did you mean this?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Distributed version control diagram.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Diagram distribuované správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Do as I say, not as I do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řiďte se, prosím, podle toho, co říkám, ne podle toho, co dělám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Do some work in that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte práci v této větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Do work on a web site.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracujete na webových stránkách.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Document version change</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223036Z" creationid="Prikryl" creationdate="20151023T223036Z">
        <seg>Document version change</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Does it even have a policy?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Má k tomu vůbec vyvinutou metodiku?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Does the project have a maintainer or integration manager who checks all the patches?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Má projekt svého správce nebo integračního manažera, který kontroluje všechny záplaty?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so also puts the diff of your change in the editor so you can see exactly what you did.) When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V editoru se pak zobrazí také výstup rozdílů (diff) ke konkrétním změnám a vy přesně uvidíte, co bylo změněno.) Jakmile editor zavřete, Git vytvoří revizi se zprávou, kterou jste napsali (s odstraněnými komentáři a rozdíly).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so automatically runs `test-error.sh` on each checked-out commit until Git finds the first broken commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Automaticky se spustí `test-error.sh` na všech načtených revizích, dokud Git nenajde první revizi s chybou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so launches your editor of choice.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zadání příkazu se otevře vámi zvolený editor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so moves the `iss53` branch forward, because you have it checked out (that is, your HEAD is pointing to it; see Figure 3-12):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S každou novou revizí se větev `iss53` posune vpřed, protože jste provedli její checkout (to znamená, že na ni přepnuli ukazuje HEAD – viz obrázek 3-12):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so offers a number of advantages: a hosting site is generally quick to set up and easy to start projects on, and no server maintenance or monitoring is involved.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto řešení vám nabízí celou řadu výhod. Hostingové místo má většinou velmi rychlé nastavení, snadno se na něm zakládají projekty a nevyžaduje od vás správu ani monitoring serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Doing so will allow pushes from their public keys to work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spolupracovníci mohou odesílat data i na základě svých veřejných klíčů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Don’t ever use this command unless you absolutely know that you don’t want the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nikdy tento příkaz nepoužívejte, pokud si nejste zcela jisti, že už daný soubor nebudete potřebovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Don’t include any commit you’ve already pushed to a central server — doing so will confuse other developers by providing an alternate version of the same change.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Neměňte tímto způsobem žádné revize, které už jste odeslali na centrální server, způsobili byste tím problémy ostatním vývojářům, kteří by se museli potýkat s jinou verzí téže změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Don’t rewrite your history and try to push again, and don’t push to a parallel Git repository to collaborate with fellow Git developers at the same time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nepřepisujte svou historii a nepokoušejte se ji znovu odeslat a neodesílejte revize do paralelního repozitáře Git, přes nějž chcete současně spolupracovat s kolegy používajícími Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Download it directly from the Git source code at https://github.com/git/git/blob/master/contrib/completion/git-completion.bash .</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stáhněte si jej ze zdrojových textů systému Git z https://github.com/git/git/blob/master/contrib/completion/git-completion.bash.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Drop 'rc3' moniker of jam-2.5.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091432Z" creationid="Prikryl" creationdate="20151024T091432Z">
        <seg>Drop 'rc3' moniker of jam-2.5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each developer has committed a few times and merged each other’s work successfully; see Figure 5-10.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všichni vývojáři zapsali několik revizí a úspěšně začlenili práci ostatních do své – viz obrázek 5-10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každá úroveň je nadřazená hodnotám úrovně předchozí, takže hodnoty v `.git/config` převládnou nad hodnotami v `/etc/gitconfig`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each level overwrites values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`, for instance.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každá další úroveň přepisuje hodnoty z předchozí úrovně, a tak např. hodnoty v souboru `.git/config` mají přednost před hodnotami v souboru `/etc/gitconfig`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each line starts with a 4-byte hex value specifying how long the rest of the line is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každý řádek začíná 4bytovou hexadecimální hodnotou, která udává, jak dlouhý je zbytek řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each of the three commit objects points to one of the three snapshot trees you created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny tři tyto objekty revizí ukazují na jeden ze tří stromů snímku, který jste vytvořili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each of these can be set to `true`, `false`, or `always`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každý z příslušných parametrů může nabývat hodnoty na `true` (pravda), `false` (nepravda) nebo `always` (vždy):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each time you commit or change branches, the reflog is updated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vždy když zapíšete revizi nebo změníte větve, je reflog aktualizován.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each time you have a new topic branch to merge in (Figure 5-21), you merge it into `develop` (Figure 5-22); then, when you tag a release, you fast-forward `master` to wherever the now-stable `develop` branch is (Figure 5-23).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když máte novou tematickou větev k začlenění (obrázek 5-21), začleníte ji do větve `develop` (obrázek 5-22). Když poté označujete vydání, posunete větev `master` rychle vpřed do místa, kde je nyní větev `develop` stabilní (obrázek 5-23).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each time, Git will stop, let you amend the commit, and continue when you’re finished.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git pokaždé zastaví, nechá vás revizi upravit, a až budete hotovi, bude pokračovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Each version of Git tends to include useful UI enhancements, so getting the latest version is often the best route if you feel comfortable compiling software from source.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každá další verze systému Git se snaží přidat nová vylepšení uživatelského rozhraní. Použití poslední verze je tedy zpravidla tou nejlepší cestou, samozřejmě pokud vám nedělá problémy kompilace softwaru ze zdrojových souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Either the Git repository is available for everyone to clone or it isn’t.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Repozitář Git je buď dostupný pro všechny a všichni z něj mohou klonovat, nebo dostupný není.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Enforcing Policies...
	(refs/heads/master) (8338c5) (c5b616)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090900Z" creationid="Prikryl" creationdate="20151024T090900Z">
        <seg>Enforcing Policies...
	(refs/heads/master) (8338c5) (c5b616)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Enforcing Policies...
	(refs/heads/master) (8338c5) (c5b616)
	[POLICY] Cannot push a non fast-forward reference
	error: hooks/update exited with error code 1
	error: hook declined to update refs/heads/master
	To git@gitserver:project.git
	 !</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090858Z" creationid="Prikryl" creationdate="20151024T090858Z">
        <seg>Enforcing Policies...
	(refs/heads/master) (8338c5) (c5b616)
	[POLICY] Cannot push a non fast-forward reference
	error: hooks/update exited with error code 1
	error: hook declined to update refs/heads/master
	To git@gitserver:project.git
	 !</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Engineers can push any branch whose name starts with "eng-", and tags that start with "rc" followed by a digit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skupina engineers mohou odesílat větve, jejichž názvy začínají na „eng-“ a značky, které začínají na „rc“ a pak následuje číslo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
	Enter passphrase (empty for no passphrase):
	Enter same passphrase again:
	Your identification has been saved in /Users/schacon/.ssh/id_rsa.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104935Z" creationid="Prikryl" creationdate="20151023T104935Z">
        <seg>Enter file in which to save the key (/Users/schacon/.ssh/id_rsa):
	Enter passphrase (empty for no passphrase):
	Enter same passphrase again:
	Your identification has been saved in /Users/schacon/.ssh/id_rsa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see _Chapter 9_ for data recovery).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obnovit lze dokonce i revize na odstraněných větvích nebo revize, které byly přepsány revizí `--amend` (o obnovování dat viz _kapitola 9_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even if you don’t commit during the weekend, use the staging area on Monday to split your work into at least one commit per issue, with a useful message per commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>I pokud nebudete během víkendu zapisovat revize, využijte v pondělí oblasti připravených změn a rozdělte svou práci alespoň do stejného počtu revizí, kolik je řešených problémů, a přidejte k nim vysvětlující zprávy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even if you set up and run your own server internally, you may still want to use a public hosting site for your open source code — it’s generally easier for the open source community to find and help you with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dokonce i když budete nastavovat a spouštět interně svůj vlastní server, budete možná přesto chtít použít veřejné hostingové místo pro otevřený zdrojový kód – komunita open source vývojářů si vás tak snáze najde a pomůže vám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even the popular Mac OS X operating system includes the rcs command when you install the Developer Tools.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Dokonce i populární operační systém Mac OS X obsahuje po nainstalování vývojářských nástrojů (Developer Tools) příkaz rcs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Even though the examples in this book show software source code as the files under version control, in reality any type of file on a computer can be placed under version control.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Příklady verzovaných souborů jsou v této knize ilustrovány na zdrojových textech programů, avšak ve skutečnosti lze správu verzí použít pro libovolný typ souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every checkout is really a full backup of all the data (see Figure 1-3).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Každá lokální kopie (checkout) představuje úplnou zálohu všech dat (viz obrázek 1-3).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time anyone clones this repository, they will have to clone all 2MB just to get this tiny project, because you accidentally added a big file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když bude někdo tento repozitář klonovat, bude muset pro získání malinkého projektu naklonovat celé 2 MB jen proto, že jste jednou omylem přidali velký soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time you commit, it moves forward automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když zapíšete novou revizi, větev se automaticky posune vpřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokaždé, když v systému zapíšete (uložíte) stav projektu, Git v podstatě „vyfotí“, jak vypadají všechny vaše soubory v daném okamžiku, a uloží reference na tento snímek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time you perform a commit, you’re recording a snapshot of your project that you can revert to or compare to later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když zapíšete revizi, nahrajete snímek svého projektu, k němuž se můžete později vrátit nebo ho můžete použít k srovnání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every time your branch tip is updated for any reason, Git stores that information for you in this temporary history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když je z nějakého důvodu aktualizován vrchol větve, Git tuto informaci uloží v dočasné historii reflog.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Every version of every file for the history of the project is pulled down when you run `git clone`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po spuštění příkazu `git clone` budou k historii projektu staženy všechny verze všech souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Everyone knows that Word is the most horrific editor around; but, oddly, everyone uses it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je všeobecně známo, že Word je nejpříšernější editor na světě, přesto ho však – bůhví proč – všichni používají.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Everything in Git is check-summed before it is stored and is then referred to by that checksum.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Než je v systému Git cokoli uloženo, je nejprve proveden kontrolní součet, který je potom používán k identifikaci uloženého souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Everything is set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní je vše nastaveno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Everything merges cleanly, and Jessica’s history looks like Figure 5-9.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začlenění proběhne čistě a historie Jessicy bude vypadat jako na obrázku 5-9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Example history before a cherry pick.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvažovaná historie před částečným převzetím</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Example history for range selection.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příklad historie revizí pro výběr intervalu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Examples include e-mailing a list, notifying a continuous integration server, or updating a ticket-tracking system — you can even parse the commit messages to see if any tickets need to be opened, modified, or closed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukázkové skripty obsahují odeslání seznamu e-mailem, oznámení serveru průběžné integrace nebo aktualizaci systému sledování tiketů. Možné je dokonce i analyzovat zprávy k revizím a zjistit, zda je některé tikety třeba otevřít, upravit nebo zavřít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Exiting non-zero from this hook aborts the commit, although you can bypass it with `git commit --no-verify`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li výstup tohoto zásuvného modulu nenulový, zapisování bude přerušeno. Ale můžete to obejít zadáním příkazu `git commit --no-verify`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Fast-forwarding the master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>„Rychle vpřed“ po hlavní větvi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Fast-forwarding your master branch to include the client branch changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posun hlavní větve rychle vpřed na konec změn přeskládaných z větve client</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Feel free to give out that URL and post it on your web site or what have you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nemusíte se bát poskytnout tuto adresu ostatním nebo ji třeba zveřejnit na svých webových stránkách.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Fetch more commits, and merge them into your work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyzvedli jste další revize a začlenili je do své práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Figure 3-11 illustrates the result.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obrázek 3-11 ukazuje výsledek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Figure 3-16 highlights the three snapshots that Git uses to do its merge in this case.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obrázek 3-16 označuje ony tři snímky, které Git v tomto případě použije ke sloučení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Figure 3-29 illustrates this process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento proces je naznačen na obrázku 3-29.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Figure 3-7 illustrates the result.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obrázek 3-7 ukazuje výsledek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Figure 3-8 shows the result.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výsledek ukazuje obrázek 3-8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Final commit history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Konečná historie revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, Git looks for configuration values in the config file in the Git directory (`.git/config`) of whatever repository you’re currently using.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nakonec vyhledává Git konfigurační hodnoty v konfiguračním souboru v adresáři Git (`.git/config`) v právě používaném repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, John’s commit history looks like Figure 5-6.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Johnova historie revizí bude nakonec vypadat jako na obrázku 5-6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, `git apply` is an "apply all or abort all" model where either everything is applied or nothing is, whereas `patch` can partially apply patchfiles, leaving your working directory in a weird state.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A konečně příkaz `git apply` pracuje na principu „aplikuj vše, nebo zruš vše“. Buď jsou tedy aplikovány všechny soubory, nebo žádný. Naproti tomu příkaz `patch` může aplikovat soubory záplaty jen částečně a zanechat váš pracovní adresář v neurčitém stavu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, back on your workstation, run `git clone git@gitserver:gitolite-admin`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nakonec přejděte zpět na pracovní stanici a spusťte `git clone git@gitserver:gitolite-admin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, she merges John’s work into her own `featureA` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nakonec začlení Johnovu práci do své vlastní větve `featureA`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, the `post-merge` hook runs after a successful `merge` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A konečně můžeme zmínit zásuvný modul `post-merge`, který se spouští po úspěšném provedení příkazu `merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, the command tells you which branch you’re on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz vám dále sděluje, na jaké větvi (branch) se nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, the server responds with a success (or failure) indication:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na závěr procesu server oznámí, zda se akce zdařila, nebo nezdařila:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, you ask `filter-branch` to rewrite your history only from the `6df7640` commit up, because you know that is where this problem started.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A konečně požádáte příkaz `filter-branch`, aby přepsal historii až od revize `6df7640` dále, neboť víte, že tady problém začíná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, you don’t need to be in interactive add mode to do the partial-file staging — you can start the same script by using `git add -p` or `git add --patch` on the command line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K částečné přípravě souboru ostatně nemusíte být nutně v režimu interaktivního přidávání. Stejný skript spustíte také příkazem `git add -p` nebo `git add --patch` z příkazového řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, you went back to your server branch and did a few more commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nakonec jste se vrátili na větev `server` a zapsali tu další revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Finally, you’ll write your zlib-deflated content to an object on disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na závěr zapíšete obsah zkomprimovaný metodou zlib do objektu na disku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First it confirms where you want to save the key (`.ssh/id_rsa`), and then it asks twice for a passphrase, which you can leave empty if you don’t want to type a password when you use the key.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Program nejprve potvrdí, kam chcete klíč uložit (`.ssh/id_rsa`), a poté se dvakrát zeptá na přístupové heslo. Pokud nechcete při používání klíče zadávat heslo, můžete ho nyní nechat prázdné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First things first—you have to install it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Instalaci můžete provést celou řadou způsobů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First you have to find it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve ho budete muset najít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First you need to enable the hook:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve ze všeho budete muset zapnout zásuvný modul:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First you notice the `.gitmodules` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé si všimnete souboru `.gitmodules`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First you run `git bisect start` to get things going, and then you use `git bisect bad` to tell the system that the current commit you’re on is broken.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve spustíte příkaz `git bisect start`, jímž celý proces zahájíte, a poté použijete příkaz `git bisect bad`, jímž systému oznámíte, že aktuální revize, na níž se právě nacházíte, obsahuje chybu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First you’ll move the tags so they’re actual tags rather than strange remote branches, and then you’ll move the rest of the branches so they’re local.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve přesuňte značky tak, aby se z nich staly skutečné značky, a ne podivné vzdálené větve. V dalším kroku přesunete zbytek větví a uděláte z nich větve lokální.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, add a large object to your history:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve do historie přidejte velký objekt:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, create a new file and save its contents in your database:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořte nový soubor a uložte jeho obsah do své databáze:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, if it isn’t yet clear, Git is fundamentally a content-addressable filesystem with a VCS user interface written on top of it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tato informace ještě nezazněla dostatečně jasně, můžeme začít konstatováním, že Git je ve své podstatě obsahově adresovatelný systém souborů s uživatelským rozhraním VCS na svém vrcholu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, it works offline, unlike the real `svn log` command, which asks the Subversion server for the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé to, že pracuje i off-line, na rozdíl od skutečného příkazu `svn log`, který si data vyžádá ze serveru Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, let’s review where your repository is at this point:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve se podíváme, kde se váš repozitář v současnosti nachází:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, let’s say you’re working on your project and have a couple of commits already (see Figure 3-10).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že pracujete na projektu a už jste vytvořili několik revizí (viz obrázek 3-10).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, she switches back to her `master` branch to integrate all this work:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve se přepne zpět na svou větev `master`, aby do ní mohla vše integrovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, the ACL file is in a different place, because this script runs from your working directory, not from your Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé je soubor ACL na jiném místě, protože se tento skript spouští z vašeho pracovního adresáře, a ne z adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you again tell it the scope of the bisect by providing the known bad and good commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve opět zadáte poslední známé revize s chybou a bez ní, jimiž vymezíte pracovní rozsah pro příkaz bisect.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you basically have to use it if you want authenticated write access to your repository over a network.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Především byste ho měli používat vždy, když chcete v síti používat autentizovaný zápis do repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you can inject the SHA-1 checksum of a blob into an `$Id$` field in the file automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První možností je automaticky vložit kontrolní součet SHA-1 blobu do pole `$Id$` v souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you choose which protocols you want your server to communicate with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve určíte, jakými protokoly má váš server komunikovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you create a 'git' user and a `.ssh` directory for that user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve vytvoříte uživatele 'git' a adresář `.ssh` pro tohoto uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you don’t want to submit any whitespace errors.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Především nechcete, aby revize obsahovaly chyby způsobené prázdnými znaky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you initialize a new Git repository and verify that there is nothing in the `objects` directory:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořme nejprve nový repozitář Git. Můžeme se přesvědčit, že je adresář `objects` prázdný:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you must be relatively careful when working in the submodule directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé je třeba, abyste si v adresáři submodulu počínali opatrně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you need to add something like the following to the `/etc/gitweb.conf` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve budete muset do souboru `/etc/gitweb.conf` vložit následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you need to get the Git source code, which GitWeb comes with, and generate the custom CGI script:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve je třeba získat zdrojový kód systému Git, s nímž je GitWeb distribuován, a vygenerovat uživatelský CGI skript:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you need to require the library and then run `Zlib::Deflate.deflate()` on the content:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve je třeba vyžádat si knihovnu a poté na obsah spustit příkaz `Zlib::Deflate.deflate()`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you need to set up the imap section in your `~/.gitconfig` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve je třeba nastavit sekci „imap“ v souboru `~/.gitconfig`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you see this where the hook starts running.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé si všimněte místa, kde byl spuštěn zásuvný modul.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you should check to make sure you don’t already have a key.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve byste se měli ujistit, že ještě žádný klíč nemáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you’ll probably want to clone the main repository, create a topic branch for the patch or patch series you’re planning to contribute, and do your work there.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve patrně bude nutné, abyste naklonovali hlavní repozitář, vytvořili tematickou větev pro záplatu nebo sérii záplat, které hodláte vytvořit, a udělali v nich zamýšlenou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>First, you’ll use the described technique to solve one of the most annoying problems known to humanity: version-controlling Word documents.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto metodu budete využívat především k řešení jednoho z nejpalčivějších problémů, s nímž se lidstvo potýká: verzování dokumentů Word.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Folded rc2 and rc3 RELNOTES into
	    the main part of the document.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091434Z" creationid="Prikryl" creationdate="20151024T091434Z">
        <seg>Folded rc2 and rc3 RELNOTES into
	    the main part of the document.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see Chapter 9.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Podrobnější informace o tom, jak Git ukládá data a jak lze obnovit zdánlivě ztracenou práci, najdete v kapitole 9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a more in-depth tutorial on creating an SSH key on multiple operating systems, see the GitHub guide on SSH keys at `http://github.com/guides/providing-your-ssh-key`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li potřebovat podrobnější návod k vytvoření SSH klíče v různých operačních systémech, můžete se na vytváření SSH klíčů podívat do příručky GitHub: `http://github.com/guides/providing-your-ssh-key` (anglicky).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For a project with hundreds or thousands of commits, this can literally take hours or even days to finish.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U projektů se stovkami nebo tisíci revizí si můžete bez nadsázky počkat i celé hodiny nebo dny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For another example, if you stage the `benchmarks.rb` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalším příkladu ukážeme situaci, kdy jste připravili soubor `benchmarks.rb` a poté ho znovu upravili. Příkaz `git diff` můžete nyní použít k zobrazení změn v souboru, které byly připraveny, a změn, které nejsou připraveny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For each reference that this push will update, the `send-pack` process tells the `receive-pack` process that information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro každou referenci, která bude tímto odesláním aktualizována, sdělí proces `send-pack` tuto informaci procesu `receive-pack`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, everyone knows to a certain degree what everyone else on the project is doing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Každý například — do určité míry — ví, co dělají ostatní účastníci projektu a administrátoři mají přesnou kontrolu nad jednotlivými právy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if this patch was applied from the mbox example I just showed, the commit generated would look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byl patch aplikován například ze souboru mbox v předchozím příkladu, vygenerovaná revize bude vypadat zhruba takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you make two changes to your simplegit.rb file and want to stage one of them and not the other, doing so is very easy in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například provedete dvě změny v souboru simplegit.rb a chcete k zapsání připravit pouze jednu z nich, není to v systému Git žádný problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want all but `cr-at-eol` to be set, you can do this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například zapnout všechny funkce kromě `cr-at-eol`, zadejte příkaz v tomto tvaru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to change the last three commit messages, or any of the commit messages in that group, you supply as an argument to `git rebase -i` the parent of the last commit you want to edit, which is `HEAD~2^` or `HEAD~3`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete například změnit zprávy u posledních tří revizí nebo jakoukoli zprávu k revizi z této skupiny, přidejte jako parametr k příkazu `git rebase -i` rodiče poslední revize, kterou chcete upravovat, v tomto případě tedy `HEAD~2^` nebo `HEAD~3`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to clone the Ruby Git library called Grit, you can do so like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete naklonovat knihovnu Ruby Git nazvanou Grit, můžete to provést následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to fetch all the information that Paul has but that you don’t yet have in your repository, you can run `git fetch pb`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete vyzvednout (fetch) všechny informace, které má Paul, ale vy je ještě nemáte ve svém repozitáři, můžete spustit příkaz `git fetch pb`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to see some abbreviated stats for each commit, you can use the `--stat` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete zobrazit některé stručné statistiky pro každou revizi, použijte parametr `--stat`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you want to submit a second topic of work to the project, don’t continue working on the topic branch you just pushed up — start over from the main repository’s `master` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete do projektu přispět druhým tématem, nerozvíjejte svou práci v tematické větvi, kterou jste právě odeslali. Začněte znovu od začátku z větve `master` hlavního repozitáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if your contributor sends you two patches and you create a branch called `contrib` and applied those patches there, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vám například přispěvatel pošle dvě záplaty a vy vytvoříte větev s názvem `contrib`, do níž tyto záplaty aplikujete, můžete použít tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you’re on a system that has yum (such as Fedora) or apt-get (such as a Debian based system), you can use one of these commands to install all of the dependencies:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud používáte systém s nástrojem yum (například u distribuce Fedora) nebo apt-get (například distribuce odvozené od Debianu), můžete k instalaci použít jeden z následujících příkazů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, if you’ve added a line in a file on the `master` branch, a direct comparison of the snapshots will look like the topic branch is going to remove that line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste například do souboru ve větvi `master` přidali jeden řádek, přímé srovnání snímků bude vypadat, jako by měla tematická větev tento řádek odstranit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, in the history listed earlier, `HEAD~3` would be</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například v historii naznačené výše by `HEAD~3` znamenalo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, let’s say you’ve changed two files and want to commit them as two separate changes, but you accidentally type `git add *` and stage them both.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme například, že jste změnili dva soubory a chcete je zapsat jako dvě oddělené změny. Jenže omylem jste zadali příkaz `git add *` a oba soubory jste tím připravili k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, my Grit repository looks something like this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například můj repozitář Grit vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, perhaps the Makefile (or some other program) is really not supposed to be changed by just anyone, because a lot of things depend on it or would break if the changes are not done _just right_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například  soubor Makefile (a možná některé programy) by asi neměl kdokoliv měnit, protože je na něm závislá řada dalších věcí. Pokud se neupraví _správným způsobem_, něco by se pokazilo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, running a `git log` at 09:00 on your computer with your timezone currently 3 hours ahead of UTC, makes the following two commands equivalent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například na vašem počítači spustíte `git log` v 09:00 a vaše časové pásmo je vůči greenwichskému času posunuto o tři hodiny vpřed, pak se výsledek následujících dvou příkazů shoduje:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, say you have a commit history that looks like Figure 6-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme tedy, že máte historii revizí jako na obrázku 6-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, say you have some test files in a `test/` subdirectory, and it doesn’t make sense to include them in the tarball export of your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme například, že máte v podadresáři `test/` několik testovacích souborů, které by nemělo smysl zahrnovat do exportu tarballu vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, say you run `git push origin master` in your project, and `origin` is defined as a URL that uses the SSH protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme například, že ve svém projektu spustíte příkaz `git push origin master` a `origin` je definován jako URL používající protokol SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, suppose you have a project that looks like Figure 5-26.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dejme tomu, že máme projekt, který vypadá jako na obrázku 5-26.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, suppose you want to split the middle commit of your three commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že chcete rozdělit třeba prostřední ze svých tří revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, the most recent tree in the simplegit project may look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejnovější strom v projektu „simplegit“ může vypadat například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, this command gets the list of commits made in the last two weeks:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například tento příkaz zobrazí seznam všech revizí pořízených za poslední dva týdny (2 weeks):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to browse the history of the project, Git doesn’t need to go out to the server to get the history and display it for you—it simply reads it directly from your local database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud chcete například procházet historii projektu, Git kvůli tomu nemusí vyhledávat informace na serveru — načte je jednoduše přímo z vaší lokální databáze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to change your `extDiff` and `extMerge` tools to run the KDiff3 tool instead, all you have to do is edit your `extMerge` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například změnit nástroje `extDiff` a `extMerge`, aby se místo nich spouštěl nástroj KDiff3, jediné, co musíte udělat, je upravit soubor `extMerge`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to clone a local repository, you can run something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K naklonování lokálního repozitáře můžete použít příkaz například v tomto tvaru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to correct the usability problem you encountered with unstaging a file, you can add your own unstage alias to Git:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste například narazili na problém s používáním příkazu pro vrácení souboru z oblasti připravených změn, můžete ho vyřešit přidáním vlastního aliasu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to modify only the third commit message, you change the file to look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například změnit pouze zprávu ke třetí revizi, změňte soubor následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to see a specific commit, suppose you run a `git log` command and identify the commit where you added certain functionality:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si chcete například prohlédnout konkrétní revizi, řekněme, že spustíte příkaz `git log` a určíte revizi, do níž jste vložili určitou funkci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, to set the meta information in your diff output to blue foreground, black background, and bold text, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li chtít nastavit například meta informace ve výpisu příkazu diff tak, aby měly modré popředí, černé pozadí a tučné písmo, můžete použít příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you can do some simple version control on a file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na souboru můžete například provádět jednoduché verzování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you can get the manpage help for the config command by running</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například manpage nápovědu pro příkaz `config` vyvoláte zadáním:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you can get the same results as in the previous example by typing `git log origin/master..` — Git substitutes HEAD if one side is missing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejné výsledky jako v předchozím příkladu dostanete zadáním příkazu `git log origin/master..` – Git dosadí na prázdnou stranu výraz HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you can start a branch named `recover-branch` at that commit (ab1afef):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na revizi můžete vytvořit například větev `recover-branch` (ab1afef):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example, you’ll import the Jam project from the Perforce Public Depot.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete chtít například importovat projekt Jam z veřejného úložiště Perforce Public Depot.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For future projects, you can also copy collaborator groups by copying the permissions of an existing project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U budoucích projektů budete také moci zkopírovat skupinu spolupracovníků zkopírováním oprávnění z existujícího projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, Xcode projects on the Mac contain a file that ends in `.pbxproj`, which is basically a JSON (plain text javascript data format) dataset written out to disk by the IDE that records your build settings and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například projekty Xcode v systémech Mac obsahují soubory končící na `.pbxproj`, což je v podstatě sada dat JSON (datový formát prostého textu javascript) zapsaná na disk nástrojem IDE, který zaznamenává vaše nastavení atd.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if Jessica sends you an e-mail saying that she has a great new feature in the `ruby-client` branch of her repository, you can test it by adding the remote and checking out that branch locally:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vám tedy například Jessica pošle e-mail, že vytvořila skvělou novou funkci ve větvi `ruby-client` ve svém repozitáři, můžete funkci otestovat tak, že přidáte větev jako vzdálenou a provedete její lokální checkout:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if Jessica wants to send John a pull request, and she’s done two commits on the topic branch she just pushed up, she can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chce například Jessica poslat Johnovi žádost o natažení a vytvořila předtím dvě revize v tematické větvi, kterou právě odeslala, může zadat tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if a documentation author tries to push a commit modifying something in the `lib` directory, they see</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se například autor dokumentace pokusí odeslat revizi, která mění obsah adresáře `lib`, zobrazí se mu upozornění:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you want the `iphone_project` to show up on GitWeb, you make the `repo` setting look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete, aby GitWeb zobrazoval `iphone_project`, upravíte nastavení `repo` do této podoby:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you want to include a file named `LAST_COMMIT` in your project, and the last commit date was automatically injected into it when `git archive` ran, you can set up the file like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li do projektu zahrnout například soubor s názvem `LAST_COMMIT` a při spuštění příkazu `git archive` do něj bylo automaticky vloženo datum poslední revize, můžete nastavit tento soubor takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete přejmenovat repozitář z `pb` na `paul`, můžete tak učinit příkazem `git remote rename`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you want to see all commits that are reachable from `refA` or `refB` but not from `refC`, you can type one of these:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete zobrazit například všechny revize, které jsou dostupné ve větvi `refA` nebo `refB`, ale nikoli ve větvi `refC`, zadejte jeden z následujících příkazů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you want to show the last commit object on a branch, the following commands are equivalent, assuming that the `topic1` branch points to `ca82a6d`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete například zobrazit objekt poslední revize větve, můžete využít některý z následujících příkazů (za předpokladu, že větev `topic1` ukazuje na `ca82a6d`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you wanted to see what the `master` branch on your `origin` remote looked like as of the last time you communicated with it, you would check the `origin/master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například chcete zjistit, jak vypadala větev `master` na vašem vzdáleném serveru `origin`, když jste s ní naposledy komunikovali, budete hledat větev `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you’re running a `git log` command and can’t remember one of the options, you can start typing it and press Tab to see what matches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například zadáváte příkaz `git log` a nemůžete si vzpomenout na některý z parametrů, můžete zadat jeho začátek, stisknout klávesu Tab a podívat se, co by to mohlo přesně být:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, if you’re updating the `master` branch and adding an `experiment` branch, the `send-pack` response may look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud například aktualizujete větev `master` a přidáváte větev `experiment`, odpověď procesu `send-pack` může mít následující podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, some text files may be machine generated and not diffable, whereas some binary files can be diffed — you’ll see how to tell Git which is which.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé textové soubory mohou být například vygenerovány strojově a nelze na ně aplikovat nástroj diff, zatímco na jiné binární soubory lze. Ukážeme si, jak systému Git sdělit, které jsou které.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, suppose you create a template file at `$HOME/.gitmessage.txt` that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, například, že vytvoříte soubor šablony `$HOME/.gitmessage.txt`, který bude vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, the Linux kernel recently jumped from 8 to 10 characters to ensure SHA-1 object uniqueness, so older `git describe` output names were invalidated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například jádro Linuxu nyní přešlo z 8 na 10 znaků, aby byla zajištěna jedinečnost objektů SHA-1. Starší výstupy příkazu `git describe` proto už nebudou platné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, to see where your `master` branch was yesterday, you can type</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li například zjistit, kde byla vaše větev `master` včera (yesterday), můžete zadat příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, you can add a remote called `origin` and push your `master` branch to it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete například přidat vzdálený repozitář `origin` a odeslat do něj větev `master`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For instance, you might resolve this conflict by replacing the entire block with this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento konflikt můžete vyřešit například nahrazením celého bloku tímto textem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For many years, this has been the standard for version control (see Figure 1-2).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tento koncept byl dlouhá léta standardem pro správu verzí (viz obrázek 1-2).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For more information about the differences in efficiency between the HTTP protocol and the other protocols, see Chapter 9.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Více informací o rozdílech ve výkonnosti mezi protokolem HTTP a ostatními protokoly najdete v kapitole 9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For most of the lifetime of the Linux kernel maintenance (1991–2002), changes to the software were passed around as patches and archived files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>V letech 1991 — 2002 bylo jádro Linuxu spravováno formou záplat a archivních souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For now, move the `authorized_keys` file out of the way:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro tuto chvíli tedy odstraňte soubor `authorized_keys`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For now, that is always `master`, which is the default; you won’t worry about it here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro tuto chvíli nebudeme situaci komplikovat a výchozí bude vždy hlavní větev (`master` branch).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For now, you’ve committed all your changes, so you can switch back to your master branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro tuto chvíli jste zapsali všechny provedené změny a můžete přepnout zpět na hlavní větev:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For one thing, you should clean up the weird references that `git svn` set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaprvé je nutné vyčistit podivné reference, které vytvořil příkaz `git svn`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For public, unauthenticated read access to your projects, you’ll want to move past the HTTP protocol and start using the Git protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže potřebujete ke svým projektům přístup pro čtení bez ověřování totožnosti, budete muset obejít protokol HTTP a začít používat protokol Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For really large companies or projects, the number of developers could be in the thousands, with dozens or even hundreds of patches coming in each day.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V opravdu velkých společnostech a u velkých projektů se může počet vývojářů vyšplhat do tisíců a počet revizí se může pohybovat v desítkách i stovkách záplat denně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For security reasons, it is strongly encouraged to have this daemon run as a user with read-only permissions to the repositories — you can easily do this by creating a new user 'git-ro' and running the daemon as them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z bezpečnostních důvodů důrazně doporučujeme, aby byl tento démon spuštěn jako uživatel, který má k repozitářům oprávnění pouze pro čtení. To lze snadno zajistit vytvořením nového uživatele 'git-ro' a spuštěním démona v jeho roli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For the sake of simplicity we’ll simply run it as the same 'git' user that Gitosis is running as.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>My ho pro zjednodušení spustíme jako uživatele 'git', kterého už využívá nástroj Gitosis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>For these tests, I created a new Subversion repository on Google code that was a partial copy of the `protobuf` project, which is a tool that encodes structured data for network transmission.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro potřeby našich pokusů jsem na stránkách Google code vytvořil nový repozitář Subversion, který byl původně součástí kopie projektu `protobuf`, nástroje, který kóduje strukturovaná data pro síťový přenos.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Formatting and whitespace issues are some of the more frustrating and subtle problems that many developers encounter when collaborating, especially cross-platform.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chyby způsobené formátováním a prázdnými znaky jsou jedny z nejtitěrnějších a nejotravnějších problémů, s nimiž se vývojáři potýkají při vzájemné spolupráci, zvláště mezi různými platformami.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
	From: Jessica Smith &lt;jessica@example.com&gt;
	Date: Sun, 6 Apr 2008 10:17:23 -0700
	Subject: [PATCH 1/2] add limit to log function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221109Z" creationid="Prikryl" creationdate="20151023T221109Z">
        <seg>From 330090432754092d704da8e76ca5c05c198e71a8 Mon Sep 17 00:00:00 2001
	From: Jessica Smith &lt;jessica@example.com&gt;
	Date: Sun, 6 Apr 2008 10:17:23 -0700
	Subject: [PATCH 1/2] add limit to log function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From git://github.com/paulboone/ticgit
	 * [new branch]      master     -&gt; pb/master
	 * [new branch]      ticgit     -&gt; pb/ticgit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101824Z" creationid="Prikryl" creationdate="20151023T101824Z">
        <seg>From git://github.com/paulboone/ticgit
	 * [new branch]      master     -&gt; pb/master
	 * [new branch]      ticgit     -&gt; pb/ticgit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From git@github.com:schacon/rack
	   08d709f..6c5e70b  master     -&gt; origin/master
	Submodule path 'rack': checked out '6c5e70b984a60b3cecd395edd5b48a7575bf58e0'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223059Z" creationid="Prikryl" creationdate="20151023T223059Z">
        <seg>From git@github.com:schacon/rack
	   08d709f..6c5e70b  master     -&gt; origin/master
	Submodule path 'rack': checked out '6c5e70b984a60b3cecd395edd5b48a7575bf58e0'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From git@github.com:schacon/rack
	 * [new branch]      build      -&gt; rack_remote/build
	 * [new branch]      master     -&gt; rack_remote/master
	 * [new branch]      rack-0.4   -&gt; rack_remote/rack-0.4
	 * [new branch]      rack-0.9   -&gt; rack_remote/rack-0.9
	$ git checkout -b rack_branch rack_remote/master
	Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223126Z" creationid="Prikryl" creationdate="20151023T223126Z">
        <seg>From git@github.com:schacon/rack
	 * [new branch]      build      -&gt; rack_remote/build
	 * [new branch]      master     -&gt; rack_remote/master
	 * [new branch]      rack-0.4   -&gt; rack_remote/rack-0.4
	 * [new branch]      rack-0.9   -&gt; rack_remote/rack-0.9
	$ git checkout -b rack_branch rack_remote/master
	Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From git@github.com:schacon/simplegit
	 * [new branch]      serverfix    -&gt; origin/serverfix</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104635Z" creationid="Prikryl" creationdate="20151023T104635Z">
        <seg>From git@github.com:schacon/simplegit
	 * [new branch]      serverfix    -&gt; origin/serverfix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From now on, as long as that `update` script is there and executable, your repository will never be rewound and will never have a commit message without your pattern in it, and your users will be sandboxed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Od této chvíle budete mít k dispozici skript `update` ve spustitelné podobě, váš repozitář nikdy nebude převinut zpět a nikdy nepřijme zprávu k revizi, která by neodpovídala předepsanému vzoru. Uživatelé se navíc budou moci pohybovat jen ve vymezeném prostoru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From that point forward, it should be called.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Od tohoto okamžiku by měl být skript volán.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>From the interactive prompt, type `5` or `p` (for patch).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na interaktivní výzvu zadejte příkaz `5` nebo `p` (jako „patch“ – tedy záplata).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Further paragraphs come after blank lines.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215924Z" creationid="Prikryl" creationdate="20151023T215924Z">
        <seg>Další odstavce se oddělují prázdným řádkem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, if the ref marker isn’t there in any of your commits, you’ll see the error message you’re printing out for that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud navíc není ukazatel reference v některé z vašich revizí, zobrazí se chybové hlášení, které jste pro tento účel určili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, if you push this history back up to the server, you’ll reintroduce all those rebased commits to the central server, which can further confuse people.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pak tuto historii odešlete zpět na server, znovu provedete všechny tyto přeskládané revize na centrálním serveru, což bude zmatečné i pro vaše spolupracovníky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Mnoho z těchto systémů navíc bez větších obtíží pracuje i s několika vzdálenými repozitáři, takže můžete v rámci jednoho projektu různým způsobem spolupracovat s různými skupinami lidí najednou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, what overall workflow do you want to use to maintain your project?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A vůbec, jaký celkový pracovní postup zvolíte ke správě projektu?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Furthermore, you want your collaborators to be able to access the repository even if your computer is offline — having a more reliable common repository is often useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Navíc chcete, aby měli vaši spolupracovníci do repozitáře přístup, i když je váš počítač vypnutý nebo odpojený – na společný repozitář bývá často lepší spolehnutí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>GIT 1.4.2.1</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101912Z" creationid="Prikryl" creationdate="20151023T101912Z">
        <seg>GIT 1.4.2.1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>General sequence of events for a simple multiple-developer Git workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obecná posloupnost kroků u jednoduchého pracovního postupu s více vývojáři v systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, eight to ten characters are more than enough to be unique within a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Osm až deset znaků většinou bohatě stačí, aby byla hodnota v rámci projektu jednoznačná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, if you’re going to these lengths, it’s easier to use SSH public keys; but it may be a better solution in your specific case to use signed SSL certificates or other HTTP-based authentication methods for read-only access over HTTPS.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je pravda, že v takovém případě by už bylo jednodušší použít veřejné SSH klíče, ale ve vašem konkrétním případě může být použití podepsaných SSL certifikátů nebo jiné ověření identity na základě protokolu HTTP lepší metodou, jak zajistit přístup přes HTTPS pouze ke čtení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, people use this functionality to mark release points (`v1.0`, and so on).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato funkce se nejčastěji používá k označení jednotlivých vydání (například `v1.0`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, this happens because you force-delete a branch that had work on it, and it turns out you wanted the branch after all; or you hard-reset a branch, thus abandoning commits that you wanted something from.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou k tomu dochází tak, že násilím smažete větev, která uchovávala část vaší práce, a vy po čase zjistíte, že byste tuto větev přece jen potřebovali. Stejně tak jste mohli provést tvrdý reset větve a tím zavrhnout revize, z nichž nyní něco potřebujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, this script is used for notification or something similar.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento skript se tak většinou používá pro účely oznámení a podobně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, you’ll pair it with SSH access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protokol Git většinou využijete v kombinaci s přístupem přes SSH. Protokol SSH bude nastaven pro několik málo vývojářů s oprávněním k zápisu (odesílání dat) a všichni ostatní budou používat `git://` pro přístup pouze ke čtení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Generally, you’ll type `y` or `n` if you want to stage each hunk, but staging all of them in certain files or skipping a hunk decision until later can be helpful too.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li připravit k zapsání jednotlivé komplexy, většinou zadáte `y` nebo `n`. Přesto se vám může někdy hodit i možnost připravit všechny komplexy v určitých souborech nebo přeskočení komplexu, k němuž se vrátíte později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Get a writable copy of any repository by clicking the "fork" button.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zapisovatelnou kopii jakéhokoli repozitáře získáte kliknutím na tlačítko „fork“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Getting in the habit of creating quality commit messages makes using and collaborating with Git a lot easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si zvyknete vytvářet k revizím kvalitní zprávy, bude pro vás práce a kooperace v systému Git mnohem jednodušší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git OS X installer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Instalátor Git pro OS X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git aborts the patch if this script exits non-zero.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li výstup tohoto skriptu nenulový, Git přeruší záplatu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git accepts kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge, and opendiff as valid merge tools.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako platné nástroje slučování Git akceptuje: kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge a opendiff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git addresses this issue using submodules.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí jako řešení tohoto problému nástroj submodulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git přidává ke kolidujícím souborům standardní značky pro označení konfliktů (conflict-resolution markers), takže soubor můžete ručně otevřít a konflikty vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git allows you to do this by using either the `^` character or `--not` before any reference from which you don’t want to see reachable commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git to můžete provést buď zadáním znaku `^` nebo parametru `--not` před referencí, jejíž dostupné revize si nepřejete zobrazit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git allows you to specify specific commits or a range of commits in several ways.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systém Git umožňuje určit jednotlivé revize nebo interval revizí několika způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git also doesn’t see any untracked files, or they would be listed here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git také neví o žádných nesledovaných souborech, jinak by byly ve výčtu uvedeny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git also gives you your own `master` branch starting at the same place as origin’s `master` branch, so you have something to work from (see Figure 3-22).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vám rovněž vytvoří vaši vlastní větev `master`, která bude začínat ve stejném místě jako větev `master` serveru `origin`. Máte tak definován výchozí bod pro svoji práci (viz obrázek 3-22).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git also provides a couple of tools to help you debug issues in your projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git také nabízí několik nástrojů, které vám pomohou ladit problémy v projektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git applies the last commit (`a5f4a0d`) in the script, and your history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git aplikuje poslední revizi (`a5f4a0d`) ve skriptu. Vaše historie bude vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git as a content-addressable filesystem is a very powerful tool that you can easily use as more than just a VCS.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git jakožto obsahově adresovatelný systém souborů je velmi výkonným nástrojem, který snadno využijete i k jiným účelům než jako pouhý systém VCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git attribute data also allows you to do some interesting things when exporting an archive of your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Data atributů Git umožňují rovněž některé zajímavé úkony při exportu archivů z vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git attributes offers you two ways to do this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Atributy Git nabízejí dvě možnosti, jak to provést.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git automatically colors most of its output if you ask it to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git na přání automaticky barevně zvýrazňuje většinu svých výstupů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git automatically creates a new commit object that contains the merged work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git automaticky vytvoří nový objekt revize, který obsahuje sloučenou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git automatically expands the `serverfix` branchname out to `refs/heads/serverfix:refs/heads/serverfix`, which means, “Take my serverfix local branch and push it to update the remote’s serverfix branch.” We’ll go over the `refs/heads/` part in detail in Chapter 9, but you can generally leave it off.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git automaticky rozšíří název větve `serverfix` na `refs/heads/serverfix:refs/heads/serverfix`, což znamená: „Vezmi mou lokální větev `serverfix` a odešli ji na vzdálený server, kde aktualizuje tamní větev `serverfix`.“ Části `refs/heads/` se budeme podrobněji věnovat v kapitole 9, pro většinu uživatelů však nebude zajímavá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git automatically identifies the best common-ancestor merge base for branch merging.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git automaticky identifikuje nejvhodnějšího společného předka jako základnu pro sloučení větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git can color its output to your terminal, which can help you visually parse the output quickly and easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git může výstup na vašem terminálu barevně zvýraznit a pomoci vám tak snadno a rychle se ve výpisu zorientovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git can figure out a short, unique abbreviation for your SHA-1 values.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git dokáže identifikovat krátkou, jednoznačnou zkratku hodnoty SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git can handle this by auto-converting CRLF line endings into LF when you commit, and vice versa when it checks out code onto your filesystem.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git může tento problém vyřešit automatickou konverzí konců řádků CRLF na konce LF, jestliže zapisujete revizi, nebo obráceně, jestliže provádíte checkout zdrojového kódu do svého systému souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git can transfer data between two repositories in two major ways: over HTTP and via the so-called smart protocols used in the `file://`, `ssh://`, and `git://` transports.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git přenáší data mezi dvěma repozitáři dvěma základními způsoby: prostřednictvím protokolu HTTP a prostřednictvím takzvaných chytrých protokolů používaných při přenosu `file://`,`ssh://` a `git://`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git can use four major network protocols to transfer data: Local, Secure Shell (SSH), Git, and HTTP.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git může k přenosu dat používat jeden ze čtyř hlavních síťových protokolů: Local, Secure Shell (SSH), Git nebo HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git checks for any listed alternates first:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nejprve zjistí, zda jsou k dispozici alternativní repozitáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git checks out a working copy of the `master` branch that was pointed to by the HEAD reference you downloaded at the beginning.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git provede checkout pracovní kopie větve `master`, na niž ukazovala reference HEAD, kterou jste stáhli na začátku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes preset to detect and fix some whitespace issues.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je standardně nastaven na vyhledávání a opravu chyb způsobených prázdnými znaky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes preset to use a number of other merge-resolution tools without your having to set up the cmd configuration.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je standardně přednastaven tak, aby dokázal používat celou řadu různých nástrojů k řešení konfliktů při slučování, aniž byste museli nastavovat konfiguraci příkazu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes with a CGI script called GitWeb that is commonly used for this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vám nabízí CGI skript s názvem GitWeb, který se k tomuto účelu běžně používá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes with a couple of scripts that make some command-line tasks easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí také celou řadu skriptů, které vám mohou usnadnit provádění příkazů zadávaných v příkazovém řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git comes with a tool called `git config` that lets you get and set configuration variables that control all aspects of how Git looks and operates.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavení konfiguračních proměnných systému, které ovlivňují jak vzhled systému Git, tak ostatní aspekty jeho práce, umožňuje příkaz `git config`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git compresses the contents of these files with zlib, and you’re not storing much, so all these files collectively take up only 925 bytes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git komprimuje obsah těchto souborů metodou zlib a uložená data tak nejsou příliš velká. Všechny tyto soubory zabírají dohromady pouhých 925 bytů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git compresses the new content with zlib, which you can do in Ruby with the zlib library.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git zkomprimuje nový obsah metodou zlib, která je obsažena v knihovně zlib.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git concatenates the header and the original content and then calculates the SHA-1 checksum of that new content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vytvoří řetězec ze záhlaví a původního obsahu a vypočítá kontrolní součet SHA-1 tohoto nového obsahu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git constructs a header that starts with the type of the object, in this case a blob.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vytvoří záhlaví, které bude začínat typem objektu, jímž je v našem případě blob.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git directory objects with branch head references included.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Objekty v adresáři Git s referencemi větve „head“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git does not provide such a `stash unapply` command, but it is possible to achieve the effect by simply retrieving the patch associated with a stash and applying it in reverse:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nenabízí žádný příkaz ve smyslu `stash unapply`, ovšem je možné použít reverzní aplikaci patche reprezentujícího odklad:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git does this if you have too many loose objects around, if you run the `git gc` command manually, or if you push to a remote server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git k tomuto kroku přistoupí, pokud máte příliš mnoho volných objektů, pokud ručně spustíte příkaz `git gc` nebo jestliže odesíláte revize na vzdálený server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git doesn’t have a modify-history tool, but you can use the rebase tool to rebase a series of commits onto the HEAD they were originally based on instead of moving them to another one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nemá zvláštní nástroj k úpravě historie, ale můžete využít nástroje přeskládání, jímž přeskládáte sérii revizí na revizi HEAD, na níž se původně zakládaly. Revize není třeba přesouvat jinam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git doesn’t infer your command if you type it in partially.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže zadáte systému Git neúplný příkaz, systém si ho nedoplní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git doesn’t think of or store its data this way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git zpracovává data jinak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git figured out that about 12 commits came between the commit you marked as the last good commit (v1.0) and the current bad version, and it checked out the middle one for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git zjistil, že mezi revizí, kterou jste označili jako poslední dobrou (v1.0), a aktuální problémovou verzí je asi 12 revizí, a provedl checkout prostřední revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git figures out that it’s a rename implicitly, so it doesn’t matter if you rename a file that way or with the `mv` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git implicitně zjistí, že se jedná o přejmenování, a proto nehraje roli, zda přejmenujete soubor tímto způsobem, nebo pomocí příkazu `mv`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git figures out what branch your dcommits go to by looking for the tip of any of your Subversion branches in your history — you should have only one, and it should be the last one with a `git-svn-id` in your current branch history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git zjistí, do jaké větve se vaše revize zapsané příkazem dcommit dostanou – podívá se na konec všech větví Subversion ve vaší historii. Měli byste mít pouze jednu a měla by to být poslední větev s `git-svn-id` ve vaší aktuální historii větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git fires up the `send-pack` process, which initiates a connection over SSH to your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git spustí proces `send-pack`, který iniciuje spojení se serverem přes SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git gives you the name of the nearest tag with the number of commits on top of that tag and a partial SHA-1 value of the commit you’re describing:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vám poskytne název nejbližší značky s počtem revizí na vrcholu této značky a část hodnoty SHA-1 revize, k níž se popis vztahuje:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has a few configuration options to help with these issues.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git disponuje několika konfiguračními parametry, které vám pomohou tyto problémy vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has a number of different transfer protocols you can use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí celou řadu různých přenosových protokolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has initialized the `objects` directory and created `pack` and `info` subdirectories in it, but there are no regular files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git inicializoval adresář `objects` a vytvořil v něm podadresáře `pack` a `info`, nenajdeme tu však žádné skutečné soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git has three main states that your files can reside in: committed, modified, and staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git používá pro spravované soubory tři základní stavy: zapsáno (committed), změněno (modified) a připraveno k zapsání (staged).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git hasn’t automatically created a new merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nepřistoupil k automatickému vytvoření nové revize sloučením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git is a content-addressable filesystem.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je obsahově adresovatelný systém souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git is smart enough to figure out what commit you meant to type if you provide the first few characters, as long as your partial SHA-1 is at least four characters long and unambiguous — that is, only one object in the current repository begins with that partial SHA-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je dostatečně chytrý na to, aby pochopil, jakou revizi jste měli na mysli, zadáte-li pouze prvních několik znaků. Tento neúplný otisk SHA-1 musí mít alespoň čtyři znaky a musí být jednoznačný, tj. žádný další objekt v aktuálním repozitáři nesmí začínat stejnou zkrácenou hodnotou SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git lets you put the string `$Format:$` in any file with any of the `--pretty=format` formatting shortcodes, many of which you saw in Chapter 2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git umožňuje vložit řetězec `$Format:$` do libovolného souboru s kterýmkoli ze zkrácených kódů formátování `--pretty=format`, z nichž jsme několik poznali v kapitole 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git moves them around as bookmarks to the last known state of where those branches were on those servers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je přemisťuje jako záložky poslední známé pozice těchto větví na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git normally creates a tree by taking the state of your staging area or index and writing a tree object from it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git běžně vytváří strom tak, že vezme stav oblasti připravených změn nebo-li indexu a zapíše z nich objekt stromu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git object data for multiple commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Data objektů Git pro několik revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git operates slightly differently if you explicitly specify `file://` at the beginning of the URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud na začátek URL explicitně zadáte výraz `file://`, pracuje Git trochu jinak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git provides a safer command to do this if you want to update a reference called `update-ref`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git zná bezpečnější metodu, jak referenci aktualizovat: příkaz `update-ref`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git provides an easy way to check for this — before you commit, run `git diff --check`, which identifies possible whitespace errors and lists them for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí snadný způsob, jak tyto chyby zkontrolovat. Před zapsáním revize zadejte příkaz `git diff --check`, který zkontroluje prázdné znaky a vypíše vám jejich seznam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git sends a line for each reference you’re updating with the old SHA, the new SHA, and the reference that is being updated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git odešle jeden řádek pro každou referenci, kterou aktualizujete. Řádek obsahuje starou hodnotu SHA, novou hodnotu SHA a referenci, která je aktualizována.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git stores and thinks about information much differently than these other systems, even though the user interface is fairly similar; understanding those differences will help prevent you from becoming confused while using it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Ačkoli je uživatelské rozhraní velmi podobné, Git ukládá a zpracovává informace poněkud odlišně od ostatních systémů. Pochopení těchto rozdílů vám pomůže předejít nejasnostem, které mohou při používání systému Git vzniknout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git stores content in a manner similar to a UNIX filesystem, but a bit simplified.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git ukládá obsah podobným způsobem jako systém souborů UNIX, jen trochu jednodušeji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git stores data as snapshots of the project over time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git ukládá data jako snímky projektu proměnlivé v čase.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git successfully and succinctly tells me that I added the string "(See Chapter 3)", which is correct.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git mi stroze, ale pravdivě sděluje, že jsem přidal řetězec „(See Chapter 3)“, což je správné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git tells you the original commit where you wrote those lines, even if it was in another file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vám vyhledá původní revizi, kde jste tyto řádky napsali, dokonce i když jsou v jiném souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git then creates a `commit` object that has the metadata and a pointer to the root project `tree` object so it can re-create that snapshot when needed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté vytvoří objekt revize s metadaty a ukazatelem na kořenový strom projektu, aby mohl v případě potřeby tento snímek obnovit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git thinks about its data more like Figure 1-5.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Zpracování dat v systému Git ilustruje obrázek 1-5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git transport over HTTP is often referred to as the dumb protocol because it requires no Git-specific code on the server side during the transport process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V souvislosti s přenosem dat systému Git prostřednictvím HTTP se často mluví o hloupém protokolu (dumb protocol), protože během přenosu nevyžaduje na straně serveru žádný specifický kód Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git uses a series of configuration files to determine non-default behavior that you may want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git používá sérii konfiguračních souborů, v nichž lze nastavit odlišnosti od výchozí konfigurace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git uses two main types of tags: lightweight and annotated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git používá dva hlavní druhy značek: prosté (lightweight) a anotované (annotated).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will also automatically remove commits that did not affect the subdirectory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git také automaticky odstraní revize, které nemají na podadresář žádný vliv.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will ask you which files you would like to partially stage; then, for each section of the selected files, it will display hunks of the file diff and ask if you would like to stage them, one by one:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git se vás zeptá, které soubory chcete částečně připravit. Pro každou část vybraných souborů pak zobrazí komplexy (hunks) rozdílů diff daného souboru a u každého z nich se vás zeptá, jestli si ho přejete připravit k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will automatically add group write permissions to a repository properly if you run the `git init` command with the `--shared` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li příkaz `git init` s parametrem `--shared`, Git automaticky nastaví příslušná oprávnění skupiny k zápisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will detect these issues when you run a `git diff` command and try to color them so you can possibly fix them before you commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až spustíte příkaz `git diff`, Git se pokusí tyto problémy vyhledat a barevně označit, abyste je mohli případně ještě před zapsáním revize opravit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will move them for the sake of efficiency into a file named `.git/packed-refs` that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git je pro zvýšení účinnosti přesune do souboru `.git/packed-refs`, jenž má následující podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will occasionally repack your database automatically, always trying to save more space.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git čas od času „přebalí“ celou vaši databázi automaticky a pokusí se tím ušetřit další místo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Git will then record each snapshot appropriately:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git pak odpovídajícím způsobem nahraje všechny snímky:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>GitHub administration page.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stránka správy na serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>GitHub is also a commercial company that charges for accounts that maintain private repositories, but anyone can quickly get a free account to host as many open source projects as they want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>GitHub je zároveň komerční společnost, jejíž finanční příjmy plynou z účtů spravujících soukromé repozitáře. Kdokoli si však může rychle založit bezplatný účet k hostování libovolného počtu projektů s otevřeným kódem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>GitHub is by far the largest open source Git hosting site and it’s also one of the very few that offers both public and private hosting options so you can keep your open source and private commercial code in the same place.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>GitHub je zdaleka největším hostingovým místem pro projekty Git s otevřeným zdrojovým kódem a je zároveň jedním z velmi mála těch, která nabízejí možnosti jak veřejného, tak soukromého hostingu. Na jednom místě tak můžete mít uložen jak otevřený zdrojový kód, tak soukromý komerční kód.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>GitHub is slightly different than most code-hosting sites in the way that it namespaces projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>GitHub se nepatrně liší od většiny míst hostujících zdrojový kód ve způsobu, jak zachází se jmenným prostorem projektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>GitHub project header information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záhlaví s informacemi o projektu na serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitk is basically a visual `git log` tool, and it accepts nearly all the filtering options that `git log` does.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitk je v zásadě grafická verze příkazu `git log` a umožňuje téměř všechny možnosti filtrování jako `git log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite allows you to specify permissions not just by repository, but also by branch or tag names within each repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitolite umožňuje nastavit přístupová práva nejen na repozitáře (podobně jako Gitosis), ale také na větve a značky v každém repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite allows you to specify repositories with wildcards (actually Perl regexes), like, for example `assignments/s[0-9][0-9]/a[0-9][0-9]`, to pick a random example.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitolite vám umožní určit repozitáře zástupnými znaky (wildcards; ve skutečnosti jde o perlovské regulární výrazy) -- jako například u náhodně vybraného příkladu `assignments/s[0-9][0-9]/a[0-9][0-9]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite also has a feature called "personal branches" (or rather, "personal branch namespace") that can be very useful in a corporate environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Konečně Gitolite má také funkci, která se nazývá „osobní větve“ (nebo raději „jmenný prostor osobních větví“) a může být velmi užitečná v korporátním prostředí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite has now been installed on the server, and you now have a brand new repository called `gitolite-admin` in your workstation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte Gitolite nainstalovaný na serveru a v domácím adresáři vaší pracovní stanice máte také úplně nový repozitář `gitolite-admin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite is an authorization layer on top of Git, relying on `sshd` or `httpd` for authentication.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitolite je autorizační vrstva nad gitem, která při autentizaci spoléhá na `sshd` nebo `httpd`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite is somewhat unusual as far as "server" software goes — access is via SSH, and so every userid on the server is a potential "gitolite host".</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroj Gitolite je ve smyslu „serverového“ softwaru poněkud neobvyklý. Přístup se realizuje přes SSH, takže každá serverová userid je potenciálně „hostitelem gitolite“ (gitolite host).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite lets you define a "personal" or "scratch" namespace prefix for each developer (for example, `refs/personal/&lt;devname&gt;/*`); please see the documentation for details.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitolite vám umožní nadefinovat pro každého vývojáře jmenné prostory s prefixy „personal“ nebo „scratch“ (např. `refs/personal/&lt;devname&gt;/*`). Podrobnosti hledejte v dokumentaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitolite shows you what repos you have access to, and what that access may be.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitolite vám ukáže, ke kterým repozitářům máte přístup a s jakými oprávněními.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitosis can also control which projects GitWeb shows.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitosis může také určovat, jaké projekty bude zobrazovat GitWeb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitosis has simple access controls as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitosis nabízí také jednoduchou správu přístupu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitosis is basically a set of scripts that help you manage the `authorized_keys` file as well as implement some simple access controls.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitosis je v podstatě sada skriptů usnadňující správu souboru `authorized_keys` a implementaci jednoduché správy přístupu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitosis is going to manage your keys for you, so you need to remove the current file, re-add the keys later, and let Gitosis control the `authorized_keys` file automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitosis teď bude spravovat klíče za vás. Proto je třeba, abyste odstranili aktuální soubor, klíče znovu přidali později a nechali Gitosis automaticky spravovat soubor `authorized_keys`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Gitosis requires some Python tools, so first you have to install the Python setuptools package, which Ubuntu provides as python-setuptools:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitosis vyžaduje některé nástroje v jazyce Python, a proto první, co musíte udělat, je nainstalovat pythonovský balíček setuptools, který je v Ubuntu dostupný jako python-setuptools:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Glob patterns are like simplified regular expressions that shells use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Masky souborů jsou jako zjednodušené regulární výrazy, které používá shell.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Grab the tree object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Načtěte objekt stromu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Great.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výborně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HEAD file pointing to the branch you’re on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor HEAD ukazující na větev, na níž se nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HEAD moves to another branch on a checkout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukazatel HEAD se po příkazu git checkout přesune na jinou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>HEAD points to another branch when you switch branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor HEAD ukazuje po přepnutí na jinou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není od věci stanovit si a dodržovat kvalitní pravidla pro vytváření revizí. Výrazně vám mohou usnadnit práci v systému Git a spolupráci s kolegy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Having their carefully crafted work rejected at the last minute can be extremely frustrating and confusing; and furthermore, they will have to edit their history to correct it, which isn’t always for the faint of heart.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odmítnete-li na poslední chvíli práci, na níž si dávali záležet, budou vaši uživatelé zmatení a otrávení, nemluvě o tom, že budou muset kvůli opravě měnit svou historii, což může bázlivější povahy odradit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Having work themes isolated into topic branches also makes it easier for you to rebase your work if the tip of the main repository has moved in the meantime and your commits no longer apply cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednotlivé úkoly izolované v tematických větvích mají také tu výhodu, že snáze přeskládáte svou práci, jestliže se průběžně posouvá konec hlavního repozitáře a vaše revize už nelze aplikovat čistě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here I assume the connecting user is in the `$USER` environment variable, so your update script begins by gathering all the information you need:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku předpokládám, že je připojující se uživatel v proměnné prostředí `$USER`, a skript update tak začne shromažďovat všechny potřebné informace:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here are a couple of examples you may want to set up:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uveďme několik příkladů možného nastavení:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here are a few commands that give you what Subversion used to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na tomto místě proto uvedu pár příkazů, které jsou podobné jako v systému Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here are all the objects in the example directory now, commented with what they store:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou všechny objekty v ukázkovém adresáři spolu s komentářem k tomu co obsahují:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is a method that gives you an associative array where the key is the user name and the value is an array of paths to which the user has write access:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá se tu metoda asociativních polí, kdy klíč představuje jméno uživatele a hodnotu tvoří sada umístění, k nimž má uživatel oprávnění pro zápis:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is a small Ruby script that does that:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady je malý Ruby skript, který to umí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is an example `.gitignore` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady je malý příklad souboru `.gitignore`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is an example of adding your server as a remote:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady je příklad, jak můžete váš server přidat jako vzdálený:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is an example pre-rebase script that checks for that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako příklad uvedeme skript pre-rebase, který bude toto pravidlo kontrolovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is an example, where I’ve replaced a red terminal color with `X`s:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zde uvádím jeden příklad, v němž jsem červenou barvu terminálu nahradil znaky `X`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is an example:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady máme příklad:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is another example `.gitignore` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady je další příklad souboru `.gitignore`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here is example to experiment with</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete vyzkoušet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here we can see the two commits that we have had checked out, however there is not much information here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíme tu obě revize, jichž jsme se zbavili, ale není tu k nim mnoho informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here we’ll discuss what they are and in what basic circumstances you would want (or not want) to use them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se podíváme na to, co jsou jednotlivé protokoly zač a za jakých okolností je (ne)vhodné je použít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you can do a number of things, including staging files, unstaging files, staging parts of files, adding untracked files, and seeing diffs of what has been staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady můžete provádět celou řadu věcí, včetně přípravy souborů k zapsání, vracení připravených souborů, přípravy částí souborů, přidávání nesledovaných souborů a prohlížení změn v připravených souborech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you can run `rev-parse` on your branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tehdy můžete na svou větev spustit příkaz `rev-parse`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you must choose a username that isn’t yet taken in the system and enter an e-mail address that will be associated with the account and a password (see Figure 4-3).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady si budete muset zvolit uživatelské jméno, které zatím není v systému obsazeno, a zadat e-mailovou adresu, která bude přiřazena k účtu a heslu (viz obrázek 4-3).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you’ll clone a project with a submodule in it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní naklonujeme projekt, jehož součástí je submodul.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you’ll configure Git to use the `catdoc` program, which was written specifically for extracting text from a binary MS Word documents (you can get it from `http://www.wagner.pp.ru/~vitus/software/catdoc/`), to convert Word documents into readable text files, which it will then diff properly:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V našem případě nastavíme Git tak, aby ke konverzi dokumentů Word do čitelných textových souborů, způsobilých ke zpracování nástrojem diff, používal program `catdoc`, který byl napsán přímo pro extrakci textu z binární podoby dokumentů MS Word (můžete jej získat z `http://www.wagner.pp.ru/~vitus/software/catdoc/`). Tím wordovské dokumenty převedeme na čitelné textové soubory, na které lze úspěšně aplikovat algoritmus pro zjišťování rozdílů (diff):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you’ll see how to do the same rack embedding as in the last section, but using subtree merges instead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukažme si, jak se dá začlenit stejný adresář rack jako v předchozí části, tentokrát však s využitím strategie začlenění podstromu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here you’ll use a format very much like the CVS ACL mechanism: it uses a series of lines, where the first field is `avail` or `unavail`, the next field is a comma-delimited list of the users to which the rule applies, and the last field is the path to which the rule applies (blank meaning open access).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady budete používat formát velmi podobný mechanismu CVS ACL. Využívá posloupnosti řádků, kdy v prvním poli stojí `avail` nebo `unavail`, v dalším poli je čárkami oddělený seznam uživatelů, jichž se pravidlo týká, a v posledním poli je uvedeno umístění, na něž se pravidlo vztahuje (prázdné pole označuje otevřený přístup).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, 644 is the mode (if you have executable files, you need to detect and specify 755 instead), and inline says you’ll list the contents immediately after this line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>644 je v tomto případě režim (jde-li o spustitelné soubory, budete je muset vyhledat a zadat režim 755) a výraz inline říká, že obsah uvedete bezprostředně po tomto řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, the `9bc1d` blob, which if you remember was the first version of your repo.rb file, is referencing the `05408` blob, which was the second version of the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Blob `9bc1d`, který, jak si možná vzpomínáte, byl první verzí souboru repo.rb, odkazuje na blob `05408`, který byl druhou verzí tohoto souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, we’ll review a few basic tools for undoing changes that you’ve made.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se proto, jaké základní nástroje se nám tu nabízejí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, we’ll show you some of the most-used options.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukážeme si některé z nejpoužívanějších možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, we’re assuming that you have wildcard DNS set up to send `*.gitserver` to whatever box you’re using to run all this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady předpokládáme, že máte nastaveny zástupné znaky DNS (wildcard DNS) a můžete odeslat `*.gitserver` do kteréhokoli boxu, který používáte, a spustit následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here, you’ll look at a few interactive commands that can help you easily craft your commits to include only certain combinations and parts of files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se podíváme na několik interaktivních příkazů, které vám mohou pomoci snadno určit, na jaké kombinace a části souborů má být omezena konkrétní revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s an example that hard-resets the master branch in your test repository to an older commit and then recovers the lost commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvedeme příklad, při němž resetujeme hlavní větev v testovacím repozitáři na jednu ze starších revizí a poté ztracené revize obnovíme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s an example to give you an idea of what it would take to get a SHA-1 collision.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste si udělali představu, jak je nepravděpodobné, že dojde ke kolizi hodnot SHA-1, připojujeme jeden malý příklad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s an example.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uveďme malý příklad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s an example:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příklad:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s how to do that:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Udělá se to následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s the object SHA-1 value it created:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro objekt byla vytvořena tato hodnota SHA-1:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Here’s what it looks like:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ten má následující podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>History after cherry-picking a commit on a topic branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie po částečném převzetí revize z tematické větve</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>History with several topic branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie s několika tematickými větvemi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Homebrew (`http://brew.sh/`) is another alternative to install Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším možným nástrojem pro instalaci Git je Homebrew (`http://brew.sh/`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you easily unmodify it — revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak je můžete snadno zrušit a vrátit soubor zpět do podoby při poslední revizi (nebo při prvním klonování nebo v jakémkoli okamžiku, kdy jste ho zaznamenali v pracovním adresáři)?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you keep your code consistently up to date and your patches valid?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak lze důsledně udržovat kód aktuální a záplaty vždy platné?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you recover that commit at this point?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak lze tedy v tuto chvíli ztracenou revizi obnovit?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How can you unstage one of the two?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak lze tyto dva soubory vrátit z oblasti připravených změn?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How does Git do this?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak to Git dělá?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How does Git know what branch you’re currently on?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak Git pozná, na jaké větvi se právě nacházíte?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How is that possible?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak je tohle možné?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How many users are actively contributing code to this project, and how often?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kolik uživatelů aktivně přispívá kódem do projektu a jak často?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How much work are you contributing at a time?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kolik práce představuje jeden váš příspěvek?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How often do you contribute?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A jak často přispíváte?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>How you name the keys determines how you refer to the users in the `gitosis.conf` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak tyto klíče pojmenujete, závisí na tom, jak jsou uživatelé označeni v souboru `gitosis.conf`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, Git has to check out each version, one at a time, and commit it individually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git však musí provést checkout každé verze jednotlivě a po jedné je také zapsat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, Git is pretty smart about figuring that out after the fact — we’ll deal with detecting file movement a bit later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git však používá jinou fintu, aby zjistil, že byl soubor přejmenován. Na ni se podíváme později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, Gitolite allows another permission: `-`, standing for "deny".</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ale Gitolite dovoluje nastavení dalšího oprávnění: `-` s významem „odmítnutí“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, `git svn` assumes that you won’t have multiple remotes and saves all its references to points on the remote server with no namespacing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git svn` však předpokládá, že nebudete mít více vzdálených repozitářů a všechny odkazy na místa na vzdáleném serveru uloží bez použití jmenného prostoru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, `strings` is available on most Mac and Linux systems, so it may be a good first try to do this with many binary formats.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nicméně program `strings` je k dispozici na většině operačních systémů Mac a Linux, takže může jít o dobrou první volbu při pokusech s celou řadou binárních souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, any language will work fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně dobře však pochodíte i s jakýmkoli jiným jazykem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, anything you lose that was never committed is likely never to be seen again.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však dojde ke ztrátě dat, která dosud nebyla součástí žádné revize, bude tato ztráta patrně nevratná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, because no alternates are listed in this case, your object must be in a packfile.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože však seznam v tomto případě neobsahuje žádné alternativní repozitáře, váš objekt musí být v balíčkovém souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, before you do that, note that if your working directory or staging area has uncommitted changes that conflict with the branch you’re checking out, Git won’t let you switch branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Než tak učiníte, zkontrolujte, zda nemáte v pracovním adresáři nebo v oblasti připravených změn nezapsané změny, které kolidují s větví, jejíž checkout provádíte. V takovém případě by vám Git přepnutí větví nedovolil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, first you’ll delete the `hotfix` branch, because you no longer need it — the `master` branch points at the same place.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve však smažete větev `hotfix`, kterou teď už nebudete potřebovat – větev `master` ukazuje na totéž místo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if it’s possible to move to a real Git server, doing so can gain your team a lot more.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stále však platí, že pokud máte možnost přejít na skutečný server Git, získáte vy i váš tým daleko více.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if someone at any point in the history of your project added a single huge file, every clone for all time will be forced to download that large file, even if it was removed from the project in the very next commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je jí fakt, že příkaz `git clone` stáhne vždy celou historii projektu, všechny verze všech souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if someone uploaded a patch file generated via `format-patch` to a ticketing system or something similar, you can save the file locally and then pass that file saved on your disk to `git am` to apply it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však někdo nahrál soubor záplaty vygenerovaný příkazem `format-patch` do tiketového nebo podobného systému, můžete soubor uložit lokálně a poté na tento uložený soubor použít příkaz `git am`. Tímto způsobem záplatu aplikujete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if there are too many loose objects (objects not in a packfile) or too many packfiles, Git launches a full-fledged `git gc` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však identifikuje příliš mnoho volných objektů (objektů nezabalených do balíčkového souboru) nebo balíčkových souborů, spustí Git plnou verzi příkazu `git gc`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if you can’t find a reference in the `refs` directory, it’s probably in your `packed-refs` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však nemůžete najít některou z referencí v adresáři `refs`, bude patrně v souboru `packed-refs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if you want another file outside of your project to hold those values or have extra values, you can tell Git where that file is with the `core.excludesfile` setting.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však chcete, aby tyto hodnoty obsahoval jiný soubor mimo projekt, nebo chcete určit dodatečné hodnoty, parametrem `core.excludesfile` můžete systému Git sdělit, kde má tento soubor hledat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if your message contains the proper pattern, Git allows you to commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však zpráva obsahuje správný vzor, Git vám umožní revizi zapsat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, if you’d like to remove the identifier, now is the time to do so — before you start doing work on the new repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ale chcete identifikátor přesto odstranit, teď, dokud jste nezačali pracovat na novém repozitáři, je ta správná chvíle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, in order to do any collaboration in Git, you’ll need to have a remote Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste však mohli v systému Git spolupracovat s ostatními, budete potřebovat vzdálený repozitář Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, it can be helpful sometimes when you need to see what’s really going on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se však hodit, až budete jednou potřebovat zjistit, co se doopravdy odehrává.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, it can be very useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz přesto může být velmi užitečný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, it’s an interesting exercise and can in theory help you avoid a rebase that you might later have to go back and fix.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript je však zajímavým cvičením a teoreticky vám může pomoci předejít nutnosti vracet se v historii a přeskládávat revize kvůli opravě chyby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, keep in mind that to collaborate with a couple of people on a private project, all you _need_ is an SSH server and a bare repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To však nemění nic na tom, že ke spolupráci se skupinou lidí na soukromém projektu _vystačíte_ s jedním SSH serverem a holým repozitářem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, let’s run `git status` one more time:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spusťme však ještě jednou příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, many larger public projects accept patches via a developer mailing list, so I’ll go over an example of that now.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U mnoha větších veřejných projektů se však záplaty doručují na základě poštovní konference vývojářů, a proto se teď zaměřím na tento případ.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, maybe you want to run an external command, rather than a Git subcommand.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se však stát, že budete chtít spustit externí příkaz, a ne dílčí příkaz Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, occasionally Git packs up several of these objects into a single binary file called a packfile in order to save space and be more efficient.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při vhodných příležitostech však Git sbalí několik těchto objektů do jediného binárního souboru, jemuž se říká „balíčkový“ (packfile). Tento soubor šetří místo na disku a zvyšuje výkon.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, scripts and hosted services may make this easier — it depends largely on how you develop and how your contributors develop.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Situaci vám mohou usnadnit skripty a hostované služby. Do velké míry tu záleží na tom, jak vy a vaši vývojáři k vývoji přistupujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, that isn’t convenient, so Git provides another shorthand for doing the same thing: the triple-dot syntax.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To však není příliš pohodlný způsob, a proto Git nabízí jinou možnost, jak lze provést stejnou věc: trojtečkovou syntaxi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, that result is of limited use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento výsledek má však omezené použití.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, the import isn’t perfect; and because it will take so long, you may as well do it right.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takový import však není úplně dokonalý a vzhledem k tomu, jak dlouho může trvat, nabízí se ještě jiná cesta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, the time-limiting options such as `--since` and `--until` are very useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Velmi užitečné jsou naproti tomu časově omezující parametry, jako `--since` a `--until` („od“ a „do“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, there are other strategies you can choose as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existují však ještě další strategie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, there is another way: you can take the patch of the change that was introduced in C3 and reapply it on top of C4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existuje však ještě jiný způsob. Můžete vzít záplatu se změnou, kterou jste provedli revizí C3, a aplikovat ji na vrcholu revize C4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, this is equivalent to running something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výsledek je však stejný, jako byste provedli následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, this setup also has some serious downsides.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Avšak i tato koncepce má závažné nedostatky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, you can create and commit to branches in Subversion using `git svn`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nicméně příkaz `git svn` vytváření větví a zapisování revizí do systému Subversion umožňuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, you can inject text into a file when it’s checked out and remove it again before it’s added to a commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete však vložit text do souboru po jeho checkoutu a opět ho odstranit, než bude přidán do revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, you can set up other tracking branches if you wish — ones that don’t track branches on `origin` and don’t track the `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, můžete nastavit i jiné sledující větve – takové, které nebudou sledovat větve na serveru `origin` a nebudou sledovat hlavní větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, you can use namespacing to accomplish something like that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo nich však můžete využít možností jmenného prostoru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, you should be aware of how ridiculously unlikely this scenario is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli bychom však také říci, jak moc je nepravděpodobné, že taková situace nastane.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>However, your reflog and a new set of refs that Git added when you did the `filter-branch` under `.git/refs/original` still do, so you have to remove them and then repack the database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obsahuje ho však stále ještě reflog a v adresáři `.git/refs/original` také nová sada referencí, které Git přidal při spuštění příkazu `filter-branch`. Budete je proto muset odstranit a databázi znovu zabalit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I found that learning this information was fundamentally important to understanding how useful and powerful Git is, but others have argued to me that it can be confusing and unnecessarily complex for beginners.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Osobně se domnívám, že je tato informace velmi důležitá, aby uživatel pochopil, jak užitečný a výkonný je systém Git. Ostatní mi však oponovali, že pro začátečníky mohou být tyto informace matoucí a zbytečně složité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I hope you can use your newfound knowledge of Git internals to implement your own cool application of this technology and feel more comfortable using Git in more advanced ways.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsem přesvědčen, že vám nově nabyté znalosti interních principů systému Git pomohou implementovat vlastní užitečné aplikace této technologie a že se i v pokročilých funkcích systému Git budete cítit příjemněji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I leave it up to you to decide.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozhodnutí nechávám na vás.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I mentioned earlier that a header is stored with the content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Už jsem zmínil, že se spolu s obsahem ukládá také záhlaví (header).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I put Chapter 1 of this book into Git, added some text to a paragraph, and saved the document.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kapitolu 1 této knihy jsem vložil do systému Git, do jednoho odstavce jsem přidal kousek textu a dokument jsem uložil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I used Ruby to write these, both because it’s my preferred scripting language and because I feel it’s the most pseudocode-looking of the scripting languages; thus you should be able to roughly follow the code even if you don’t use Ruby.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Já jsem k napsání skriptů použil Ruby, zaprvé proto, že je to můj oblíbený skriptovací jazyk, zadruhé proto, že ho považuji za skriptovací jazyk, který nejvíce vypadá jako pseudokód. Díky tomu byste měli kód bez problému rozluštit, i když Ruby nepoužíváte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If John, Josie, and Jessica all sign up for accounts on GitHub, and you want to give them push access to your repository, you can add them to your project as collaborators.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si John, Josie i Jessica zaregistrují účty na serveru GitHub a vy jim chcete udělit oprávnění k odesílání dat do svého repozitáře, můžete je do svého projektu přidat jako spolupracovníky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If `master` is a direct ancestor of your topic branch, this isn’t a problem; but if the two histories have diverged, the diff will look like you’re adding all the new stuff in your topic branch and removing everything unique to the `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je větev `master` přímým předkem vaší tematické větve, nebude s příkazem žádný problém. Pokud se však obě historie v nějakém bodě rozdělily, bude výpis diff vypadat, jako byste chtěli přidat všechna nová data v tematické větvi a odstranit vše, co je pouze ve větvi `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If a match is found, the push succeeds.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže je nalezen odpovídající záznam, odesílání je povoleno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If a particular version of a file is in the Git directory, it’s considered committed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nachází-li se konkrétní verze souboru v adresáři Git, je považována za zapsanou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If a reference is not found under the `refs` directory, Git then searches for it in the `.git/packed-refs` file, which contains space separated SHA-1 path pairs, for example:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se reference nenajde v adresáři `refs`, hledá ji Git v souboru `.git/packed-refs`. Ten obsahuje páry SHA-1 a cesta oddělené mezerou jako například:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If a user SSHs into a server and has write access to the `/opt/git/my_project.git` directory, they will also automatically have push access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se uživatel dostane přes SSH na server a má oprávnění k zápisu do adresáře `/opt/git/my_project.git`, má automaticky také oprávnění k odesílání dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If all 6.5 billion humans on Earth were programming, and every second, each one was producing code that was the equivalent of the entire Linux kernel history (1 million Git objects) and pushing it into one enormous Git repository, it would take 5 years until that repository contained enough objects to have a 50% probability of a single SHA-1 object collision.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kdyby 6,5 miliardy lidí na zemi programovalo a každý by každou sekundu vytvořil kód odpovídající celé historii linuxového jádra (1 milion objektů Git) a odesílal ho do jednoho obřího repozitáře Git, trvalo by 5 let, než by repozitář obsahoval dost objektů na to, aby existovala 50% pravděpodobnost, že dojde ke kolizi jediného objektu SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If all your commit messages look like this, things will be a lot easier for you and the developers you work with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budou-li takto vypadat všechny vaše zprávy k revizím, usnadníte tím práci sobě i svým spolupracovníkům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If another developer makes changes to the rack code and commits, and you pull that reference down and merge it in, you get something a bit odd:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže jiný vývojář provede změny v kódu adresáře rack a zapíše je do revize a vy poté tuto referenci stáhnete a začleníte, dostanete něco, co bude vypadat poněkud zvláštně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If anyone wants to verify a tag, they can directly import your PGP key by pulling the blob directly out of the database and importing it into GPG:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bude-li chtít značku kdokoli ověřit, může přímo importovat váš klíč PGP tak, že stáhne blob z databáze a naimportuje ho do programu GPG:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If everything is cool, it fires up the `upload-pack` process and hands off the request to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li vše v pořádku, spustí démon Git proces `upload-pack` a předá mu svůj požadavek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If it does, then it was introduced sometime before this middle commit; if it doesn’t, then the problem was introduced sometime after the middle commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ano, vznikla chyba někdy před touto prostřední revizí; pokud ne, pak je problém záležitostí revizí zapsaných až po této prostřední revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If it sees one that is reachable from one of your remote references, it aborts the rebase:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud najde revizi, která je dostupná z některé z vašich vzdálených referencí, proces přeskládání přeruší:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If it’s modified but has been added to the staging area, it is staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je modifikovaná verze přidána do oblasti připravených změn, je považována za připravenou k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If none of these tools works for you, you have a rarer tool, or you otherwise need a more custom importing process, you should use `git fast-import`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vám nevyhovuje ani jeden z těchto nástrojů, používáte méně častý nástroj, nebo potřebujete speciální proces importu ještě z jiného důvodu, použijte `git fast-import`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If one developer clones, makes changes, and then tries to push their changes while another developer has pushed in the meantime, the server will reject that developer’s changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud některý z vývojářů naklonuje data, provede změny a poté se je pokusí odeslat, a jiný vývojář mezitím odeslal svoje revize, server tyto změny odmítne.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If she e-mails you again later with another branch containing another great feature, you can fetch and check out because you already have the remote setup.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vám později opět pošle e-mail, že jiná větev obsahuje další skvělou funkci, můžete tuto větev vyzvednout a provést její checkout, protože už máte nastaven tento repozitář jako vzdálený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If some of the changes modify the same file, try to use `git add --patch` to partially stage files (covered in detail in Chapter 6).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud některé změny modifikují tentýž soubor, zkuste použít příkaz `git add --patch` a připravit soubory k zapsání po částech (podrobnosti v kapitole 6).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If someone else pushes a change to one file and then you push a change to another file, your `dcommit` will work fine:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže někdo odešle na server změnu v jednom souboru a vy poté odešlete změnu provedenou v jiném souboru, příkaz `dcommit` bude proveden úspěšně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If someone has e-mailed you the patch properly using `git send-email`, and you download that into an mbox format, then you can point `git am` to that mbox file, and it will start applying all the patches it sees.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže vám přispěvatel řádně poslal záplatu e-mailem pomocí příkazu `git send-email` a vy záplatu stáhnete do formátu mbox, můžete na soubor mbox použít příkaz `git am`, který začne aplikovat všechny záplaty, které najde.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If someone only has a single patch to contribute once in a while, then accepting it over e-mail may be less time consuming than requiring everyone to run their own server and having to continually add and remove remotes to get a few patches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Má-li někdo jen jednu záplatu, jíž chce právě teď přispět, bude rychlejší, pokud vám záplatu doručí e-mailem, než abyste všechny vývojáře nutili provozovat kvůli pár záplatám vlastní servery a pravidelně přidávat a odstraňovat vzdálené repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If someone opens that tarball, they get the latest snapshot of your project under a project directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až někdo tento tarball otevře, získá nejnovější snímek vašeho projektu v projektovém adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If something is missing or the tests don’t pass, exiting non-zero also aborts the `git am` script without committing the patch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže je záplata neúplná nebo neprojde prováděnými testy, bude výstup skriptu nenulový, příkaz `git am` bude přerušen a revize nebude zapsána.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that happens, you see an error like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud dojde k něčemu takovému, zobrazí se následující chyba:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that is different, you must set the `$user` variable manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nejsou uživatelé stejní, budete muset ručně nastavit proměnnou `$user`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that script is in place (in `.git/hooks/commit-msg`) and executable, and you commit with a message that isn’t properly formatted, you see this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li skript na svém místě (`.git/hooks/commit-msg`) a je spustitelný, pak v případě, že zapíšete revizi se zprávou v nedovoleném formátu, zobrazí se následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they’re working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud takový server na hodinu vypadne, pak během této hodiny buď nelze pracovat vůbec, nebo přinejmenším není možné ukládat změny ve verzích souborů, na nichž uživatelé právě pracují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If that works well, you can fast-forward your `master` branch, and you’ll end up with a linear project history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vše funguje, můžete větev `master` posunout rychle vpřed a výsledkem procesu bude lineární historie projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the QA team wants to push their `master` branch to `qa/master` on the remote server, they can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chce-li QA tým odeslat větev `master` do adresáře `qa/master` na vzdáleném serveru, může použít příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the `git status` command is too vague for you — you want to know exactly what you changed, not just which files were changed — you can use the `git diff` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li pro vaše potřeby příkaz `git status` příliš neurčitý – chcete přesně vědět, co jste změnili, nejen které soubory – můžete použít příkaz `git diff`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the apply tries to modify a file that you’ve since modified, you’ll get a merge conflict and will have to try to resolve it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se příkaz apply pokusí změnit soubor, který jste mezitím ručně změnili jinak, dojde ke konfliktu při slučování, který budete muset vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the change you want to make is in the scope of BFG capability, and you have performance issues, then you should consider using it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud lze vámi zamýšlenou změnu pomocí BFG provést a pokud máte problémy s výkonností prostředí, pak byste o použití tohoto nástroje měli uvažovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the changes are incompatible but don’t conflict, you may get issues that are difficult to diagnose.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsou-li změny nekompatibilní, přestože nekolidují, může dojít k těžko diagnostikovatelným problémům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the contributor is a Git user and was good enough to use the `format-patch` command to generate their patch, then your job is easier because the patch contains author information and a commit message for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je přispěvatel uživatelem systému Git a byl natolik dobrý, že k vygenerování záplaty použil příkaz `format-patch`, budete mít usnadněnou práci, protože záplata obsahuje informace o autorovi a zprávu k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the file didn’t exist before, and you run `git status`, you see your untracked file like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud soubor dříve neexistoval a vy spustíte příkaz `git status`, bude nesledovaný soubor uveden takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the hard disk the central database is on becomes corrupted, and proper backups haven’t been kept, you lose absolutely everything—the entire history of the project except whatever single snapshots people happen to have on their local machines.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>A dojde-li k poruše pevného disku, na němž je uložena centrální databáze, a disk nebyl správně zálohován, dojde ke ztrátě všech dat, celé historie projektu, s výjimkou souborů aktuálních verzí, jež mají uživatelé v lokálních počítačích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the maintainers merge, rebase, or cherry-pick your work, you’ll eventually get it back via pulling from their repository anyhow:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud správci začlení či přeskládají vaši práci (nebo její část), získáte ji zpět stažením z repozitáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the manpages and this book aren’t enough and you need in-person help, you can try the `#git` or `#github` channel on the Freenode IRC server (irc.freenode.net).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nestačí ani manuálová stránka ani tato kniha a uvítali byste osobní pomoc, můžete zkusit kanál `#git` nebo `#github` na serveru Freenode IRC (irc.freenode.net).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the pusher is trying to push to multiple branches, `pre-receive` runs only once, whereas update runs once per branch they’re pushing to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se uživatel pokouší odeslat revize do více větví, skript `pre-receive` se spustí pouze jednou, zatímco update se spustí jednou pro každou větev, již se odesílatel pokouší aktualizovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the server you’re running it on is inside your firewall, you might use it for projects that a large number of people or computers (continuous integration or build servers) have read-only access to, when you don’t want to have to add an SSH key for each.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je server, na kterém protokol spouštíte, uvnitř firewallu, můžete ho používat u projektů, k nimž má přístup pro čtení velký počet lidí nebo počítačů (servery průběžné integrace nebo servery sestavení), jimž nechcete jednotlivě přiřazovat SSH klíče.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the topics still need work, they’re merged into `pu` instead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ale tematické větve vyžadují další úpravy, budou začleněny do větve `pu`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If the update script exits non-zero, only that reference is rejected; other references can still be updated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li výstup skriptu update nenulový, je zamítnuta pouze tato reference, ostatní mohou být aktualizovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there are none, then it was a fast-forward push; otherwise, you deny it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud žádná taková revize neexistuje, směřovalo odeslání rychle vpřed. V opačném případě můžete odeslané revize odmítnout:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there is a subdirectory or file that you don’t want to include in your archive file but that you do want checked into your project, you can determine those files via the `export-ignore` attribute.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obsahuje-li projekt podadresář nebo soubor, který nechcete zahrnout do souboru archivu, ale který chcete ponechat jako součást projektu, můžete tyto soubory specifikovat atributem `export-ignore`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If there is no output, then the patch should apply cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se nezobrazí žádný výstup, záplata bude aplikována čistě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If they are not on the same filesystem, it will copy the objects it needs using the system's standard copying functionality.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se nenacházejí ve stejném systému souborů, dojde k okopírování potřebných objektů pomocí standardních prostředků systému pro kopírování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If they want Git to do that automatically each time they run `git push origin`, they can add a `push` value to their config file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, aby toto Git provedl automaticky pokaždé, když spustíte příkaz `git push origin`, můžete do konfiguračního souboru vložit hodnotu `push`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If they’re safe, they’re merged into `next`, and that branch is pushed up so everyone can try the topics integrated together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsou-li vyhodnoceny jako bezpečné, budou začleněny do větve `next` a ta bude následně odeslána do repozitáře, aby mohli všichni vyzkoušet, jak fungují tematické větve po sloučení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If this comes back with a list of alternate URLs, Git checks for loose files and packfiles there — this is a nice mechanism for projects that are forks of one another to share objects on disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li výsledkem hledání seznam alternativních adres URL, Git se v těchto repozitářích pokusí najít volné a balíčkové soubory. Jedná se o užitečný mechanismus pro projekty, které byly odštěpeny od jiného projektu a sdílejí jeho objekty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If this is better suited to your data, check the `fast-import` man page for details about how to provide your data in this manner.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je pro vaše data tato metoda vhodnější, odkážeme vás na manuálovou stránku `fast-import`, kde najdete podrobnosti o tom, jak zadat data tímto způsobem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If this is the case and you failed to get a text presentation of your file's contents, it's often relatively easy to get a human readable description of that content, or metadata.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>(Představte si, jak byste na text převáděli zvuková data.) Pokud takový případ nastal a nejste schopni textovou reprezentaci obsahu souboru získat, lze často poměrně snadno získat lidsky čitelný popis obsahu, metadata.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If this script exits non-zero, Git aborts the commit process, so you can use it to validate your project state or commit message before allowing a commit to go through.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li návratová hodnota skriptu nenulová, Git přeruší proces zapisování. Skript tak můžete používat k validaci stavu projektu nebo zprávy k revizi, než dovolíte, aby byla revize zapsána.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If we have a repository with work in two branches named `ruby_client` and `php_client` that looks like Figure 5-19 and merge `ruby_client` first and then `php_client` next, then your history will end up looking like Figure 5-20.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máme-li repozitář s prací ve dvou větvích pojmenovaných `ruby_client` a `php_client`, který vypadá jako na obrázku 5-19, a začleníme nejprve větev `ruby_client` a poté `php_client`, bude naše historie vypadat jako na obrázku 5-20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you add a remote and push to it, Git stores the value you last pushed to that remote for each branch in the `refs/remotes` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte-li vzdálený repozitář a odešlete do něj revize, Git v adresáři `refs/remotes` uloží pro každou větev hodnotu, kterou jste do tohoto repozitáře naposled odesílali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you add a section for each repository, you can specify the ones from which you want your Git daemon to allow reading.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pro každý repozitář přidáte sekci, můžete určit repozitáře, z nichž si přejete dovolit démonovi Git načítat data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you add text between the `---` line and the beginning of the patch (the `lib/simplegit.rb` line), then developers can read it; but applying the patch excludes it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte-li text mezi řádek `---` a začátek záplaty (řádek `lib/simplegit.rb`), vývojářům se zobrazí, ale aplikace záplaty ho obsahovat nebude.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you already have a server to which all your developers have SSH access, it’s generally easiest to set up your first repository there, because you have to do almost no work (as we covered in the last section).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže už máte server, k němuž mají všichni vaši vývojáři SSH přístup, bude většinou nejjednodušší nastavit první repozitář tam, protože celé nastavení už tím máte v podstatě hotové (jak jsme ukázali v předchozí části).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you already have a shared filesystem to which your whole team has access, setting up a repository is very easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud už máte sdílený systém souborů, k němuž má přístup celý váš tým, je nastavení repozitáře velice jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you and a co-worker are working on the same project and they want you to check something out, running a command like `git pull /home/john/project` is often easier than them pushing to a remote server and you pulling down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vy a váš kolega pracujete na společném projektu a vy potřebujete provést checkout kolegových dat, bývá například příkaz `git pull /home/john/project` jednodušší než odesílat data na vzdálený server a odsud je opět stahovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud spolu s vámi provádí současně klonování ještě někdo další a ten poté svou práci odešle na referenční server (upstream), vaše později odesílaná práce bude oprávněně odmítnuta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are a graphic or web designer and want to keep every version of an image or layout (which you certainly would), it is very wise to use a Version Control System (VCS).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud jste grafik nebo webdesigner a chcete uchovávat všechny verze obrázku nebo všechna rozložení stránky (což jistě není k zahození), je pro vás systém správy verzí (zkráceně VCS z anglického Version Control System) ideálním nástrojem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you are sure you want to delete it, run 'git branch -D testing'.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103357Z" creationid="Prikryl" creationdate="20151023T103357Z">
        <seg>If you are sure you want to delete it, run 'git branch -D testing'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you aren’t working with a person consistently but still want to pull from them in this way, you can provide the URL of the remote repository to the `git pull` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud s někým nespolupracujete dlouhodobě, ale přesto od něj chcete stáhnout data touto cestou, můžete zadat adresu URL vzdáleného repozitáře k příkazu `git pull`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you can read only one chapter to get going with Git, this is it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste ochotni přečíst si o systému Git jen jednu kapitolu, měla by to být právě tahle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you can, encourage your contributors to use `format-patch` instead of `diff` to generate patches for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete-li, doporučte svým přispěvatelům, aby místo příkazu `diff` používali příkaz `format-patch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you can, it’s generally useful to install Git from source, because you’ll get the most recent version.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je to možné, je nejvhodnější instalovat Git ze zdrojových souborů. Tak je zaručeno, že vždy získáte aktuální verzi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you can, try to make your changes digestible — don’t code for a whole weekend on five different issues and then submit them all as one massive commit on Monday.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je to možné, snažte se provádět stravitelné změny. Není právě ideální pracovat celý víkend na pěti různých problémech a v pondělí je všechny najednou odeslat v jedné velké revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you change a previously tracked file called `benchmarks.rb` and then run your `status` command again, you get something that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud změníte už dříve sledovaný soubor s názvem `benchmarks.rb` a poté znovu spustíte příkaz `status`, zobrazí se něco takového:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you change pick to edit on more lines, you can repeat these steps for each commit you change to edit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změníte-li výraz pick na edit na více řádcích, můžete tyto kroky opakovat pro každou revizi, u níž jste změnu provedli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you changed the same part of the same file differently in the two branches you’re merging together, Git won’t be able to merge them cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste tutéž část jednoho souboru změnili odlišně ve dvou větvích, které chcete sloučit, Git je nebude umět sloučit čistě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you check out one and then the other, you can see that they have different project roots:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedete-li checkout jedné a posléze druhé větve, uvidíte, že mají jiné kořenové adresáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you click it, you see a form with information about the import process and a text box where you can paste in the URL of your public Subversion project (see Figure 4-9).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud na něj kliknete, zobrazí se formulář s informacemi o importu a textové pole, kam můžete vložit adresu URL svého veřejného projektu Subversion (viz obrázek 4-9).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you clone a Subversion repository that has `svn:ignore` properties set anywhere, you’ll likely want to set corresponding `.gitignore` files so you don’t accidentally commit files that you shouldn’t.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže naklonujete repozitář Subversion s nastavenými vlastnostmi `svn:ignore`, pravděpodobně budete chtít nastavit také odpovídající soubory `.gitignore`, abyste omylem nezapsali nežádoucí soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you clone a repository, the command automatically adds that remote repository under the name _origin_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste naklonovali repozitář, příkaz automaticky přidá tento vzdálený repozitář pod názvem _origin_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you clone from this, Git automatically names it `origin` for you, pulls down all its data, creates a pointer to where its `master` branch is, and names it `origin/master` locally; and you can’t move it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud provedete klonování z tohoto serveru, Git ho automaticky pojmenuje `origin`, stáhne z něj všechna data, vytvoří ukazatel, který bude označovat jeho větev `master`, a lokálně ji pojmenuje `origin/master`. Tuto větev nemůžete přesouvat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you commit at this point, the version of the file at the time you ran `git add` is what will be in the historical snapshot.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud v tomto okamžiku zapíšete revizi, v historickém snímku bude verze souboru z okamžiku, kdy jste spustili příkaz `git add`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you commit now, the version of `benchmarks.rb` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nyní revizi zapíšete, bude obsahovat soubor `benchmarks.rb` tak, jak vypadal, když jste naposledy spustili příkaz `git add`, nikoli v té podobě, kterou měl v pracovním adresáři v okamžiku, když jste spustili příkaz `git commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you commit those changes and check out the file again, you see the keyword properly substituted:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tyto změny zapíšete a provedete nový checkout souboru, uvidíte, že bylo klíčové slovo správně substituováno:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you create a new branch, add a submodule there, and then switch back to a branch without that submodule, you still have the submodule directory as an untracked directory:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte-li novou větev, přidáte do ní submodul a poté přepnete zpět na větev bez tohoto submodulu, není adresář submodulu stále ještě sledován:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you create a simple branch name based on the theme of the work you’re going to try, such as `ruby_client` or something similarly descriptive, you can easily remember it if you have to abandon it for a while and come back later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pro větev vytvoříte jednoduchý název spojený s tématem testované práce (např. `ruby_client` nebo něco obdobně popisného), snadno se na větev rozpomenete, jestliže se k ní musíte později vrátit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you create an annotated tag, Git creates a tag object and then writes a reference to point to it rather than directly to the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte-li anotovanou značku, Git vytvoří objekt značky a zapíše referenci, která na objekt ukazuje (neukazuje tedy na samotnou revizi).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you created a working directory from the new tree you just wrote, you would get the two files in the top level of the working directory and a subdirectory named `bak` that contained the first version of the test.txt file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste vytvořili pracovní adresář z nového stromu, který jste právě zapsali, dostali byste dva soubory na nejvyšší úrovni pracovního adresáře a podadresář `bak`, obsahující první verzi souboru test.txt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you decide not to use Gitosis, but you want to set up a Git daemon, you’ll have to run this on each project you want the Git daemon to serve:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nechcete používat Gitosis, ale chcete nastavit démona Git, budete muset u každého projektu, který chcete obsluhovat démonem Git, provést následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you decide to sign the tag as the maintainer, the tagging may look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se rozhodnete podepsat značku jako správce, bude označení probíhat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you delete the subdirectory and then run `submodule add`, Git yells at you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže odstraníte podadresář a spustíte příkaz `submodule add`, Git vám vynadá:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you did an import from another system or otherwise find that your repository is much larger than it should be, here is how you can find and remove large objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud provedete import do systému Git z jiného systému, nebo jiným způsobem zjistíte, že je váš repozitář výrazně větší, než by měl být, můžete vyhledat a odstranit velké objekty následovně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you didn’t want it to be called `serverfix` on the remote, you could instead run `git push origin serverfix:awesomebranch` to push your local `serverfix` branch to the `awesomebranch` branch on the remote project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste nechtěli, aby se větev na vzdáleném serveru jmenovala `serverfix`, mohli jste zadat příkaz ve tvaru `git push origin serverfix:awesomebranch`. Vaše lokální větev `serverfix` by byla odeslána do větve `awesomebranch` ve vzdáleném projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do an initial `submodule update`, commit in that submodule directory without creating a branch to work in, and then run `git submodule update` again from the superproject without committing in the meantime, Git will overwrite your changes without telling you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže nejprve spustíte příkaz `submodule update`, zapíšete v adresáři tohoto submodulu revizi, aniž byste na tuto práci vytvořili novou větev, a poté ze superprojektu znovu spustíte příkaz `git submodule update`, aniž byste mezitím zapisovali revize, Git vaše revize bez varování přepíše.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do happen to commit an object that hashes to the same SHA-1 value as a previous object in your repository, Git will see the previous object already in your Git database and assume it was already written.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud náhodou zapíšete objekt, který má stejnou hodnotu SHA-1 otisku jako předchozí objekt ve vašem repozitáři, Git už uvidí předchozí objekt v databázi Git a bude předpokládat, že už byl zapsán.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do have that commit — if the patch was based on a public commit — then the `-3` option is generally much smarter about applying a conflicting patch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tuto revizi vlastníte – byla-li záplata založena na veřejné revizi – počíná si parametr `-3` při aplikaci kolidující záplaty většinou mnohem inteligentněji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do sign your tags, you may have the problem of distributing the public PGP key used to sign your tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud své značky podepisujete, můžete mít problémy s distribucí veřejného klíče PGP použitého k podepsání značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do some work on your local master branch, and, in the meantime, someone else pushes to `git.ourcompany.com` and updates its master branch, then your histories move forward differently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nyní budete pracovat na své lokální hlavní větvi a někdo z kolegů mezitím pošle svou práci na server `git.ourcompany.com` a aktualizuje jeho hlavní větev, budou se vaše historie vyvíjet odlišně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you do this immediately after an import, before anyone has started to base work on the commit, you’re fine — otherwise, you have to notify all contributors that they must rebase their work onto your new commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud po této metodě sáhnete hned po importu, než mohl kdokoli založit na revizi svou práci, nemusíte se ničeho obávat. V opačném případě budete muset upozornit všechny přispěvatele, že musí přeskládat svou práci na vaše nové revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t have the signer’s public key, you get something like this instead:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud veřejný klíč podepisujícího nemáte, výstup bude vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t have these files (or you don’t even have a `.ssh` directory), you can create them by running a program called `ssh-keygen`, which is provided with the SSH package on Linux/Mac systems and comes with the MSysGit package on Windows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tyto soubory nemáte (nebo dokonce vůbec nemáte adresář `.ssh`), můžete si je vytvořit. Spusťte program `ssh-keygen`, který je v systémech Linux/Mac součástí balíčku SSH a v systému Windows součástí balíčku MSysGit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t have write access, how does the project prefer to accept contributed work?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud oprávnění k zápisu nemáte, jakou metodu projekt zvolí pro přijímání příspěvků?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t know what is breaking, and there have been dozens or hundreds of commits since the last state where you know the code worked, you’ll likely turn to `git bisect` for help.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nemáte ponětí, co může chybu způsobovat, a od posledního zaručeně funkčního stavu kódu byly zapsány desítky nebo stovky revizí, možná budete pomoc hledat raději u příkazu `git bisect`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t specify a message for an annotated tag, Git launches your editor so you can type it in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud u anotované značky nezadáte žádnou zprávu, Git spustí textový editor, v němž zprávu zadáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t specify a stash, Git assumes the most recent stash and tries to apply it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud u příkazu neoznačíte konkrétní odklad, Git se automaticky pokusí aplikovat ten nejnovější:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t want to go through all of the work involved in setting up your own Git server, you have several options for hosting your Git projects on an external dedicated hosting site.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nemáte chuť absolvovat celý proces nastavování vlastního serveru Git, existuje několik možností hostování vašich projektů Git na externím specializovaném hostingovém místě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t want to type the entire text of each of the Git commands, you can easily set up an alias for each command using `git config`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nechcete zadávat celý text příkazů Git, můžete pomocí `git config` jednoduše nastavit pro každý příkaz tzv. alias.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you don’t, people will hate you, and you’ll be scorned by friends and family.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V opačném případě vás čeká nenávist ostatních a rodina a přátelé vás zavrhnou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you download and install the `exiftool` program, you can use it to convert your images into text about the metadata, so at least the diff will show you a textual representation of any changes that happened:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud stáhnete a nainstalujete program `exiftool`, můžete ho použít ke konverzi obrázků na text prostřednictvím metadat, a nástroj diff vám tak přinejmenším zobrazí textovou verzi všech provedených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you edit one of the files and commit it, you have a commit that exists in Git locally that doesn’t exist on the Subversion server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Upravíte-li některý ze souborů a provedené změny zapíšete, budete mít revizi, která existuje lokálně v systému Git, ale neexistuje na serveru Subversion:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you edit that file manually, it remains like that until the next successful push to the `gitosis-admin` project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud soubor ručně upravíte, zůstane v této podobě až do dalšího úspěšného odeslání do projektu `gitosis-admin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you ever need help while using Git, there are three ways to get the manual page (manpage) help for any of the Git commands:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li někdy při používání systému Git potřebovat pomoc, existují tři způsoby, jak vyvolat nápovědu z manuálové stránky (manpage) pro jakýkoli z příkazů systému Git:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you examine the log of a rebased branch, it looks like a linear history: it appears that all the work happened in series, even when it originally happened in parallel.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si prohlížíte log přeskládané větve, vypadá jako lineární historie – zdá se, jako by veškerá práce probíhala v jedné linii, ačkoli původně byla paralelní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you follow all the internal pointers, you get an object graph something like Figure 9-3.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste hledali vztahy mezi všemi interními ukazateli, vyšel by vám celý diagram objektů – viz obrázek 9-3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you follow that guideline, you’ll be fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li se touto zásadou řídit, nemusíte se přeskládání obávat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you follow those guidelines, working with a Subversion server can be more bearable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li dodržovat tato pravidla, bude práce se serverem Subversion snesitelnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you get on an airplane or a train and want to do a little work, you can commit happily until you get to a network connection to upload.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jste-li v letadle nebo ve vlaku a chcete pokračovat v práci, můžete beze všeho zapisovat nové revize. Ty odešlete až po opětovném připojení k síti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you go back to an earlier example from the Merge section (see Figure 3-27), you can see that you diverged your work and made commits on two different branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se vrátíme k našemu dřívějšímu příkladu z části o slučování větví (viz obrázek 3-27), vidíme, že jsme svoji práci rozdělili a vytvářeli revize ve dvou různých větvích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you go home and can’t get your VPN client working properly, you can still work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jestliže přijedete domů a zjistíte, že VPN klient nefunguje, stále můžete pracovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you go into the new `grit` directory, you’ll see the project files in there, ready to be worked on or used.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přejdete-li do nového adresáře `grit`, uvidíte v něm soubory projektu připravené ke zpracování nebo jinému použití.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you go to the `/opt/p4import` directory and run `git log`, you can see your imported work:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přejdete-li do adresáře `/opt/p4import` a spustíte příkaz `git log`, uvidíte, co jste importovali:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you had run that instead, you’d have gotten back to your original position:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste spustili příkaz v této podobě, vrátili jste se zpět na svou původní pozici:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have Git version 1.6.2 or later, you can also use the `--track` shorthand:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li Git ve verzi 1.6.2 nebo novější, můžete použít také zkrácenou variantu `--track`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have Homebrew installed, install Git via</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud máte Homebrew nainstalován, pak nainstalujete Git příkazem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have MacPorts installed, install Git via</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li systém MacPorts nainstalován, nainstalujte Git příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a QA team that pushes a series of branches, and you want to get the master branch and any of the QA team’s branches but nothing else, you can use a config section like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže pracujete v QA týmu, který odesílá několik větví, a vy chcete stáhnout hlavní větev a všechny větve QA týmu, avšak žádné jiné, můžete použít například takovouto část konfigurace:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a branch named `serverfix` that you want to work on with others, you can push it up the same way you pushed your first branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li větev s názvem `serverfix`, na níž chcete spolupracovat s ostatními, můžete ji odeslat stejným způsobem, jakým jste odesílali svou první větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a branch set up to track a remote branch (see the next section and _Chapter 3_ for more information), you can use the `git pull` command to automatically fetch and then merge a remote branch into your current branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud máte větev nastavenou ke sledování vzdálené větve (více informací naleznete v následující části a v _kapitole 3_, můžete použít příkaz `git pull`, který automaticky vyzvedne (fetch) a poté začlení (merge) vzdálenou větev do vaší aktuální větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a commit-message policy in place, then putting a template for that policy on your system and configuring Git to use it by default can help increase the chance of that policy being followed regularly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li stanoveny standardy pro vytváření zpráv k revizím, může vám vytvoření šablony podle těchto standardů a nastavení systému Git na její používání pomoci k dodržování těchto standardů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a complex workflow process that has a QA team pushing branches, developers pushing branches, and integration teams pushing and collaborating on remote branches, you can namespace them easily this way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže používáte komplexní pracovní proces, kdy QA tým odesílá větve, vývojáři odesílají větve a integrační týmy odesílají větve a spolupracují na nich, můžete takto jednoduše využít možností, jež vám jmenný prostor nabízí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a lot of tags that you want to push up at once, you can also use the `--tags` option to the `git push` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li značek více a chcete je odeslat všechny najednou, můžete použít také parametr `--tags`, který se přidává k příkazu `git push`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a shared mounted filesystem, then you can clone, push to, and pull from a local file-based repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li připojený sdílený systém souborů, můžete klonovat, odesílat a stahovat z lokálního souborového repozitáře (local file-based repository).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a small team or are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pracujete v malém týmu nebo už jste ve své společnosti nebo ve svém týmu zvyklí na centralizovaný pracovní postup, můžete v něm beze všeho pokračovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have a version of Git earlier than 1.7.11, then the importer is only available in the `contrib` section of the source code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud máte verzi Git starší než 1.7.11, pak importér naleznete jen v sekci `contrib` zdrojového kódu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have an existing codebase in another VCS but you’ve decided to start using Git, you must migrate your project one way or another.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li existující základ kódu v jiném systému VCS, ale rádi byste začali používat Git, můžete do něj svůj projekt převést. Existuje přitom několik způsobů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have an existing public Subversion project that you want to import into Git, GitHub can often do that for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li existující veřejný projekt Subversion, který byste rádi importovali do systému Git, GitHub vám s tím obvykle pomůže.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have any issues, it may be useful to add `loglevel=DEBUG` under the `[gitosis]` section.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li jakékoli problémy, může vám pomoci zadání `loglevel=DEBUG` do části `[gitosis]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have it available, this is a good time to add your public SSH key as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po vyplnění osobních údajů nadešel vhodný čas k vložení vašeho veřejného klíče SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have it read the message from the file passed as the first argument and compare that to the pattern, you can force Git to abort the commit if there is no match:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Necháte-li zásuvný modul přečíst zprávu k revizi ze souboru, který zadáte jako první parametr, a srovnat se vzorem, můžete systému Git uložit, aby odmítl revize, které vzoru neodpovídají:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have local changes, you must either stash your work or temporarily commit it before running `git svn rebase` — otherwise, the command will stop if it sees that the rebase will result in a merge conflict.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li lokální změny, musíte ještě před spuštěním příkazu `git svn rebase` práci buď odložit (stash), nebo ji dočasně zapsat. V opačném případě nebude příkaz proveden, protože systém zjistí, že by přeskládání vedlo ke konfliktu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have more developers or a larger project, you’ll probably want to use at least a two-phase merge cycle.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li více vývojářů nebo větší projekt, pravděpodobně budete chtít použít přinejmenším dvoufázový cyklus začlenění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have more than one remote, the command lists them all.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud používáte více než jeden vzdálený repozitář, příkaz je vypíše všechny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have multiple submodules, you’ll have multiple entries in this file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li submodulů více, bude v tomto souboru několik záznamů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you have no interest in running your own server, you can skip to the last section of the chapter to see some options for setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of working in a distributed source control environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud víte, že nebudete chtít spravovat vlastní server, můžete přeskočit rovnou na poslední část této kapitoly a podívat se na možnosti nastavení hostovaného účtu. Pak přejděte na následující kapitolu, v níž se dočtete o detailech a záludnostech při práci v prostředí s distribuovanou správou zdrojového kódu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you just need to get it out of the way, we’ll go over stashing and branching in the next chapter; these are generally better ways to go.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud potřebujete pouze odstranit soubor z cesty, podívejte se na odkládání (stashing) a větvení v následující kapitole. Tyto postupy většinou bývají vhodnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you just specify the path, and the source and the destination are on the same filesystem, Git tries to hardlink the objects it needs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pouze zadáte cestu a zdroj i cíl se nacházejí ve stejném systému souborů, pokusí se Git použít hardlinky na potřebné objekty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you leave off the `[localbranch]` portion, then you’re basically saying, “Take nothing on my side and make it be `[remotebranch]`.”</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vynecháte složku `[lokální větev]`, pak v podstatě říkáte: „Neber na mé straně nic a toto nic teď bude `[vzdálená větev]`.“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you like to use a more graphical tool to visualize your commit history, you may want to take a look at a Tcl/Tk program called `gitk` that is distributed with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li použít graficky výrazněji zpracovaný nástroj k procházení historie revizí, možná oceníte Tcl/Tk program nazvaný `gitk`, který je distribuován spolu se systémem Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you look at the `gitosis.conf` file, it should only specify information about the `gitosis-admin` project that you just cloned:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se podíváte na soubor `gitosis.conf`, měl by udávat pouze informace o projektu `gitosis-admin`, který jste právě naklonovali:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you look at the file, you’ll normally see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se na soubor podíváte, můžete v něm najít třeba následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you look at the last commit, you can see the new `git-svn-id` that was added:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se podíváte na poslední revizi, uvidíte nově přidané `git-svn-id`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you look at the resulting tree, you can see the SHA-1 value your repo.rb file got for the blob object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se podíváte na výsledný strom, uvidíte hodnotu SHA-1, kterou soubor repo.rb dostal pro objekt blobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you look in your objects directory, you’ll find that most of your objects are gone, and a new pair of files has appeared:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podíváte-li se do adresáře s objekty, zjistíte, že většina objektů zmizela. Zato se objevily dva nové:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže v souborech provedete změny a zapíšete je, další revize uloží ukazatel na revizi, jež jí bezprostředně předcházela.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you merge in the other branch, instead of having merge conflicts with the database.xml file, you see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud začleníte druhou větev, místo řešení konfliktů u souboru database.xml se zobrazí následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you mistype a command in Git, it shows you something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ve verzi 1.6 uděláte překlep v příkazu, zobrazí se asi toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you modified the file and added it to the index already, you must force the removal with the `-f` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud už jste soubor upravili a přidali do indexu, musíte odstranění provést pomocí parametru `-f`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud upravíte soubor po provedení příkazu `git add`, je třeba spustit `git add` ještě jednou, aby byla připravena aktuální verze souboru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you name your trunk, branches, or tags differently, you can change these options.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pojmenujete svůj kmenový adresář (trunk), větve nebo značky jinak, lze tyto parametry změnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you need to pull it in, you can merge your `master` branch into your `iss53` branch by running `git merge master`, or you can wait to integrate those changes until you decide to pull the `iss53` branch back into `master` later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud potřebujete tyto změny do větve vtáhnout, můžete začlenit větev `master` do větve `iss53` provedením příkazu `git merge master`. Druhou možností je s integrací změn vyčkat a provést ji až ve chvíli, kdy budete chtít větev `iss53` vtáhnout zpět do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you need to revoke access to individuals, you can click the "revoke" link, and their push access will be removed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud potřebujete oprávnění pro některého z uživatelů zrušit, klikněte na odkaz „revoke“. Tím odstraníte jeho oprávnění k odesílání dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you need, for some reason, to use the native Windows shell / command line console, you have to use double quotes instead of single quotes (for parameters with spaces in them) and you must quote the parameters ending with the circumflex accent (^) if they are last on the line, as it is a continuation symbol in Windows.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud z nějakého důvodu potřebujete používat původní windowsovský shell / konzoli příkazové řádky, budete muset používat místo apostrofů uvozovky (pro parametry s mezerami uvnitř), a parametry končící stříškou (^) budete muset uzavírat do uvozovek v případě, kdy se stříška nachází na konci řádku. Ve Windows se totiž používá jako pokračovací znak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you only want to modify your last commit message, it’s very simple:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li pouze změnit zprávu k poslední revizi, je to velmi jednoduché:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass `--abbrev-commit` to the `git log` command, the output will use shorter values but keep them unique; it defaults to using seven characters but makes them longer if necessary to keep the SHA-1 unambiguous:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li k příkazu `git log` parametr `--abbrev-commit`, výstup bude používat kratší hodnoty, ale pouze v jednoznačném tvaru. Standardně se používá sedm znaků, avšak je-li to kvůli jednoznačnosti hodnoty SHA-1 nezbytné, bude použito znaků více:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass `--objects` to `rev-list`, it lists all the commit SHAs and also the blob SHAs with the file paths associated with them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li k příkazu `rev-list` parametr `--objects`, výpis bude obsahovat všechny hodnoty SHA revizí a blobů s cestami k souborům, které jsou s nimi asociovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass `-C` to `git blame`, Git analyzes the file you’re annotating and tries to figure out where snippets of code within it originally came from if they were copied from elsewhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li k příkazu `git blame` parametr `-C`, Git zanalyzuje soubor, který anotujete, a pokud jednotlivé kousky kódu v něm obsažené pocházejí původně odjinud, pokusí se Git zjistit odkud.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass the option `--system` to `git config`, it reads and writes from this file specifically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li parametr `--system` do nástroje `git config`, bude Git načítat a zapisovat pouze do tohoto souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you pass the option` --system` to `git config`, it reads and writes from this file specifically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud příkazu `git config` zadáme parametr `--system` bude číst a zapisovat jen do tohoto souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you place a `^` at the end of a reference, Git resolves it to mean the parent of that commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Umístíte-li na konec reference znak `^`, Git bude referenci chápat tak, že označuje rodiče dané revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you place your data on a hosted server, it’s easy to set up and maintain; however, you have to be able to keep your code on someone else’s servers, and some organizations don’t allow that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Umístíte-li data na hostovaný server, je jejich nastavení a správa jednoduchá. Svůj zdrojový kód však v takovém případě ukládáte na cizím serveru, což některé organizace nedovolují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you press Enter after typing nothing at the `Update&gt;&gt;` prompt, Git takes anything selected and stages it for you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže na výzvu `Update&gt;&gt;` nic nezadáte a stisknete klávesu Enter, Git vezme všechny vybrané soubory a připraví je k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud odešlete svou práci, ostatní si ji stáhnou a založí na nich svou práci. A vy potom tyto revize přepíšete příkazem `git rebase` a znovu je odešlete, vaši spolupracovníci do ní budou muset znovu začlenit svou práci a ve všem nastane chaos, až se pokusíte natáhnout jejich práci zpět do své.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you read the previous section about using `git svn`, you can easily use those instructions to `git svn clone` a repository; then, stop using the Subversion server, push to a new Git server, and start using that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste si přečetli předchozí část o používání nástrojů `git svn`, můžete získané informace použít. Příkazem `git svn clone` naklonujte repozitář, odešlete ho na nový server Git a začněte používat ten.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you really do want to delete the branch and lose that work, you can force it with `-D`, as the helpful message points out.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete větev skutečně odstranit a zahodit práci, kterou obsahuje, můžete si to vynutit parametrem `-D` (jak napovídá užitečná zpráva pod řádkem s chybovým hlášením).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you really wanted to, you could remove the object completely by running `git prune --expire`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste chtěli, mohli jste objekt zcela odstranit příkazem `git prune --expire`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže ale přeskládáte revize, které už byly zveřejněny a někdo na nich mohl založit svou práci, můžete si tím nepěkně zavařit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you rebase commits that you’ve already pushed and then try to push again, or otherwise try to push a commit to a remote branch that doesn’t contain the commit that the remote branch currently points to, you’ll be denied.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud přeskládáte revize, které jste již odeslali, a poté se je pokusíte odeslat ještě jednou nebo pokud se pokusíte odeslat revizi do vzdálené větve, která neobsahuje revizi, na niž právě vzdálená větev ukazuje, bude váš požadavek zamítnut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you receive a patch over e-mail that you need to integrate into your project, you need to apply the patch in your topic branch to evaluate it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže obdržíte e-mailem záplatu, kterou potřebujete integrovat do svého projektu, aplikujete ho nejprve do tematické větve, v níž ho vyhodnotíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you received the patch from someone who generated it with the `git diff` or a Unix `diff` command, you can apply it with the `git apply` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud dostanete záplatu od někoho, kdo ji vygeneroval příkazem `git diff` nebo unixovým příkazem `diff`, můžete ho aplikovat příkazem `git apply`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud soubor v systému Git přejmenujete, neuloží se žádná metadata s informací, že jste soubor přejmenovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you replace an image in your project and run `git diff`, you see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nahradíte některý z obrázků ve svém projektu a spustíte příkaz `git diff`, zobrazí se asi toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `chmod u+x .git/hooks/update`, which is the file into which you should have put all this code, and then try to push a non-fast-forward reference, you’ll get something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `chmod u+x .git/hooks/update`, což je soubor, do nějž byste měli celý tento kód vložit a poté zkusit odeslat referenci, která nesměřuje rychle vpřed, dostanete následující výstup:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git add` with the `-i` or `--interactive` option, Git goes into an interactive shell mode, displaying something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git add` s parametrem `-i` nebo `--interactive`, přejde Git do interaktivního režimu shellu a zobrazí zhruba následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git checkout test`, Git updates the file to look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git checkout test`, Git aktualizuje soubor do následující podoby:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git diff` normally, you only see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git diff` normálně, zobrazí se zhruba toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git diff` on that, you see something interesting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud na ni použijete příkaz `git diff`, uvidíte zajímavou věc:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git gc`, all the objects are in a packfile; you can identify the big objects by running another plumbing command called `git verify-pack` and sorting on the third field in the output, which is file size.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git gc`, všechny objekty jsou v balíčkovém souboru. Velké objekty lze identifikovat spuštěním jiného nízkoúrovňového příkazu, `git verify-pack`, a seřazením podle třetího pole ve výpisu, v němž je uvedena velikost souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git gc`, you’ll no longer have these files in the `refs` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git gc`, tyto soubory z adresáře `refs` zmizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git log`, you can see that all the SHA-1 checksums for the commits have changed, but the `git-p4` strings are no longer in the commit messages:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git log`, uvidíte, že se změnily všechny kontrolní součty revizí SHA-1, zato všechny řetězce `git-p4` ze zpráv k revizím zmizely:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git push --tags`, the `maintainer-pgp-pub` tag will be shared with everyone.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li příkaz `git push --tags`, začnete značku `maintainer-pgp-pub` sdílet s ostatními.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git show` on that tag, you can see your GPG signature attached to it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pro tuto značku spustíte příkaz `git show`, uvidíte k ní připojen svůj podpis GPG:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git status` right after you add the submodule, you see two things:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste bezprostředně po přidání submodulu spustili příkaz `git status`, viděli byste dvě věci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run `git status`, you can see your dirty state:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git status`, uvidíte neuspořádaný stav svého projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a `git log` when your history looks like this, you’ll see two commits that have the same author date and message, which will be confusing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud s takovouto historií spustíte příkaz `git log`, nastane zmatečná situace, kdy se zobrazí dvě revize se stejným datem autora i stejnou zprávou k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a `git push` and your current branch is tracking `origin/master`, the commits listed by `git log origin/master..HEAD` are the commits that will be transferred to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git push` a vaše aktuální větev sleduje větev `origin/master`, budou na server přesunuty revize, které lze zobrazit příkazem `git log origin/master..HEAD`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a `log`, you see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po spuštění příkazu `log` by se zobrazilo následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run a mail client that can save several e-mails out in mbox format, you can save entire patch series into a file and then use `git am` to apply them one at a time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže spustíte poštovního klienta, který dokáže uložit několik e-mailů ve formátu mbox, můžete do jednoho souboru uložit celou sérii záplat a příkazem `git am` je pak aplikovat všechny najednou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run it with no arguments, you get a simple listing of your current branches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ho spustíte bez dalších parametrů, získáte prostý výpis všech aktuálních větví:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run it with the `--full` option, it shows you all objects that aren’t pointed to by another object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud příkaz spustíte s parametrem `--full`, zobrazí vám všechny objekty, na něž neukazuje žádný jiný objekt:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run that command before committing, you can tell if you’re about to commit whitespace issues that may annoy other developers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li tento příkaz před zapsáním revize, můžete se rozhodnout, zda chcete zapsat i problematické prázdné znaky, které mohou obtěžovat ostatní vývojáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run that, Git will page the entire output of all commands, no matter how long it is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li tento příkaz, Git nebude stránkovat celý výstup všech příkazů, bez ohledu na to, jak jsou dlouhé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run this command directly after a clone, you should see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li tento příkaz bezprostředně po klonování, objeví se zhruba následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run this command with a particular shortname, such as `origin`, you get something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud použijete tento příkaz v kombinaci s konkrétním zkráceným názvem (např. `origin`), bude výstup vypadat zhruba následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run this instead of setting up the `extMerge` and `extDiff` files, Git will use KDiff3 for merge resolution and the normal Git diff tool for diffs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud spustíte tento příkaz místo nastavení souborů `extMerge` a `extDiff`, Git bude používat KDiff3 k řešení konfliktů při slučování a interní nástroj diff systému Git pro výpisy nástroje diff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run this script, you’ll get content that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li tento skript, získáte obsah v následující podobě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run your `status` command, you once again see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po spuštění příkazu `status` se zobrazí zhruba toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you run your status command again, you can see that your `README` file is now tracked and staged:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když nyní znovu provedete příkaz k výpisu stavů (git status), uvidíte, že je nyní soubor `README` sledován a připraven k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you set `help.autocorrect` to 1, Git will automatically run the command if it has only one match under this scenario.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavíte-li parametr `help.autocorrect` na hodnotu 1, Git automaticky spustí příkaz, který by v tomto dialogu vypsal, najde-li právě jediný takový.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you set this as your 'git' user’s login shell, then the 'git' user can’t have normal shell access to your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ho nastavíte jako přihlašovací shell uživatele 'git', pak nebude mít uživatel 'git' normální shellový přístup k vašemu serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you set this attribute on a file or set of files, then the next time you check out that branch, Git will replace that field with the SHA-1 of the blob.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tento atribut nastavíte pro soubor nebo sadu souborů, při příštím checkoutu této větve Git nahradí toto pole kontrolním součtem SHA-1 blobu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you set this to the path of a file on your system, Git will use that file as the default message when you commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavíte-li tuto hodnotu na konkrétní umístění ve svém systému, Git použije tento soubor jako výchozí zprávu pro revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you simply remove the file from your working directory, it shows up under the “Changes not staged for commit” (that is, _unstaged_) area of your `git status` output:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud soubor jednoduše odstraníte z pracovního adresáře, zobrazí se ve výpisu `git status` v části „Changes not staged for commit“ (tedy _nepřipraveno_:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you specify `file://`, Git fires up the processes that it normally uses to transfer data over a network which is generally a lot less efficient method of transferring the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud zadáte výraz `file://`, Git spustí procesy, jež běžně používá k přenosu dat prostřednictvím sítě. Síť je většinou výrazně méně výkonnou metodou přenosu dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže zadáte název adresáře nebo souboru, výstup logu tím omezíte na revize, které provedly změnu v těchto souborech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you stage one part of the file and leave another part unstaged, your status output will look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Připravíte-li k zapsání jednu část souboru a druhou nikoli, bude výstup příkazu status vypadat asi takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you stash some work, leave it there for a while, and continue on the branch from which you stashed the work, you may have a problem reapplying the work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže odložíte část své práce, necháte ji určitou dobu v zásobníku a budete pokračovat ve větvi, z níž jste práci odložili, můžete mít problémy s opětovnou aplikací odkladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you tell the script that it was, it stages the file to mark it as resolved for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud skriptu oznámíte, že ano, připraví soubor k zapsání a tím ho označí jako vyřešený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you track down a bug in your code and want to know when it was introduced and why, file annotation is often your best tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zjistíte-li ve svém zdrojovém kódu chybu a chcete vědět, kdy a jak vznikla, je často nejlepším nástrojem anotace souboru (file annotation).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you’ll be fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li používat přeskládání jako metodu vyčištění a práce s revizemi předtím, než je odešlete, a budete-li přeskládávat pouze revize, které dosud nikdy nebyly zveřejněny, nemusíte se žádných problémů obávat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you try to check out that object again at some point, you’ll always get the data of the first object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se někdy v budoucnosti pokusíte znovu provést checkout tohoto objektu, vždy dostanete data prvního objektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you try to merge two branches and subsequently have merge conflicts, you can run the command `git mergetool`; it starts P4Merge to let you resolve the conflicts through that GUI tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže se pokusíte sloučit dvě větve a dojde při tom ke konfliktu, můžete spustit příkaz `git mergetool`. Příkaz spustí program P4Merge, v němž budete moci v grafickém uživatelském rozhraní konflikt vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you try to switch back to a branch where those files are still in the actual tree rather than a submodule — you get this error:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se pokusíte přepnout zpět do větve, kde jsou tyto soubory v aktuálním stromu, a ne v submodulu, zobrazí se tato chyba:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you try, you’ll see a login rejection like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud to zkusíte, zobrazí se zamítnutí přihlášení:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you type `2` or `u` at the `What now&gt;` prompt, the script prompts you for which files you want to stage:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li na výzvu `What now&gt;` (Co teď) odpověď `2` nebo `u`, skript se vás zeptá, které soubory chcete připravit k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you type `gitk` on the command line in your project, you should see something like Figure 2-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud do příkazového řádku ve svém projektu zadáte příkaz `gitk`, otevře se okno podobné jako na obrázku 2-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you update a reference, Git doesn’t edit this file but instead writes a new file to `refs/heads`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud některou referenci aktualizujete, Git nebude tento soubor upravovat, ale zapíše nový soubor do adresáře `refs/heads`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you use the ACL structure returned from the `get_acl_access_data` method and check it against the listed files in each of the commits, you can determine whether the user has access to push all of their commits:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže používáte strukturu ACL získanou metodou `get_acl_access_data` a kontrolujete ji proti seznamu souborů v každé revizi, můžete určit, zda bude mít uživatel oprávnění odesílat všechny své revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you use the Bash shell, Git comes with a nice auto-completion script you can enable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže používáte shell Bash, nabízí vám Git možnost zapnout si skript pro automatické dokončování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you visit the "Plans and pricing" page at `https://github.com/pricing` and click the "Sign Up" button on the Free account (see Figure 4-2), you’re taken to the signup page.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže na stránce „Pricing and Signup“ (`https://github.com/pricing`) kliknete u bezplatného účtu (Free) na tlačítko „Sign Up“ (viz obrázek 4-2), přejdete na registrační stránku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want Git instead to pull down only the `master` branch each time, and not every other branch on the remote server, you can change the fetch line to</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ale raději chcete, aby Git pokaždé stáhl pouze větev `master` a nestahoval žádné jiné větve na vzdáleném serveru, změňte řádek příkazu fetch na:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want Git to check object consistency on every push, you can force it to do so by setting `receive.fsckObjects` to true:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, aby Git kontroloval konzistenci objektů při každém odeslání dat, můžete mu to zadat nastavením možnosti `receive.fsckObjects` na hodnotu true:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want Git to try a bit more intelligently to resolve the conflict, you can pass a `-3` option to it, which makes Git attempt a three-way merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, aby se Git pokusil vyřešit konflikt inteligentněji, můžete zadat parametr `-3`. Git se pokusí o třícestné sloučení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want John to have only read access to this project, you can do this instead:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, aby měl John u projektu pouze oprávnění pro čtení, můžete provést následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want an `opera` branch that you can work on separately, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li používat větev `opera`, v níž můžete pracovat odděleně, spusťte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want an attribute like bold in the previous example, you can choose from `bold`, `dim`, `ul`, `blink`, and `reverse`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete použít atribut, jakým bylo v předchozím příkladu například tučné písmo, můžete vybírat mezi `bold` (tučné), `dim` (tlumené), `ul` (podtržené), `blink` (blikající) a `reverse` (obrácené).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want an easier way to test the stashed changes again, you can run `git stash branch`, which creates a new branch for you, checks out the commit you were on when you stashed your work, reapplies your work there, and then drops the stash if it applies successfully:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste uvítali jednodušší způsob, jak znovu otestovat odložené změny, můžete spustit příkaz `git stash branch`, který vytvoří novou větev, stáhne do ní revizi, na níž jste se nacházeli při odložení práce, a aplikuje na ni vaši práci. Proběhne-li aplikace úspěšně, Git odklad odstraní:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want more complex access control type permissions on your repositories, you can handle them with the normal filesystem permissions of the operating system your server runs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete pro své repozitáře nastavit komplexnější správu oprávnění, můžete je opatřit běžnými oprávněními k systému souborů, které vám nabízí operační systém daného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want some repositories to be read-only to certain users and read/write to others, access and permissions can be a bit difficult to arrange.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, aby byly určité repozitáře pro některé uživatele pouze ke čtení a pro jiné i k zápisu, může být nastavení přístupu a oprávnění poměrně náročné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want the history, you can accomplish that as quickly as you can pull the data out of the Subversion server (which may take a while).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Server Subversion můžete úplně přestat používat. Chcete-li získat historii projektu, dostanete ji tak rychle, jak jen dovedete stáhnout data ze serveru Subversion (což ovšem může chvíli trvat).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to allow Git protocol access for the `iphone_project`, you add this to the end of the `gitosis.conf` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li povolit přístup přes protokol Git k projektu `iphone_project`, přidejte ho na konec souboru `gitosis.conf`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to allow anonymous read-only access to your projects, you’ll have to set up SSH for you to push over but something else for others to pull over.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete povolit anonymní přístup pro čtení k vašim projektům, budete muset nastavit protokol SSH k odesílání svých dat, ale musíte přidat i jiný protokol, který budou ostatní používat pro stahování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to always fetch the master and experiment branches, add two lines:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li pokaždé vyzvednout hlavní větev a větev „experiment“, vložte do něj tyto dva řádky:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to apply one of the older stashes, you can specify it by naming it, like this: `git stash apply stash@{2}`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li aplikovat některý ze starších odkladů, můžete ho určit na základě jeho označení, např. `git stash apply stash@{2}`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to back up or clone your repository, copying this single directory elsewhere gives you nearly everything you need.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zazálohovat nebo naklonovat repozitář, zkopírování tohoto jediného adresáře do jiného umístění vám poskytne prakticky vše, co budete potřebovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to be more specific about which commands are colored and how, Git provides verb-specific coloring settings.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste rádi nastavili přesněji jak budou zvýrazněny různé příkazy nebo máte starší verzi, nabízí Git nastavení barev pro jednotlivé příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight server on your system like `lighttpd` or `webrick`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vás zajímá, jak by GitWeb vypadal pro váš projekt, nabízí Git příkaz, jímž lze spustit dočasnou instanci. V systému je třeba mít lehký server typu `lighttpd` nebo `webrick`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to check your settings, you can use the `git config --list` command to list all the settings Git can find at that point:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zkontrolovat vaše nastavení, použijte příkaz `git config --list`. Git vypíše všechna aktuálně dostupná nastavení:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to clone the repository into a directory named something other than grit, you can specify that as the next command-line option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete naklonovat repozitář do adresáře pojmenovaného jinak než grit, můžete název zadat jako další parametr na příkazovém řádku:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to contribute to an existing project to which you don’t have push access, GitHub encourages forking the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li přispět do existujícího projektu, k němuž nemáte oprávnění pro odesílání, umožňuje GitHub rozštěpení projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to copy these examples, you’ll have to make a writeable copy of my test repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li si tyto příklady zkopírovat, budete si muset obstarat zapisovatelnou kopii mého testovacího repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to delete your `serverfix` branch from the server, you run the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ze serveru odstranit větev `serverfix`, můžete to provést takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to do something one time, you can specify the refspec on the command line, too.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li nějakou akci provést pouze jednou, můžete použít refspec také na příkazovém řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to get a copy of an existing Git repository — for example, a project you’d like to contribute to — the command you need is `git clone`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit kopii existujícího repozitáře Git (například u projektu, do nějž chcete začít přispívat), pak příkazem, který hledáte, je `git clone`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to install Git on Linux via a binary installer, you can generally do so through the basic package-management tool that comes with your distribution.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li nainstalovat Git v Linuxu pomocí binárního instalátoru, většinou tak můžete učinit pomocí základního nástroje pro správu balíčků, který je součástí vaší distribuce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to make the `trunk` subdirectory be the new project root for every commit, `filter-branch` can help you do that, too:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li udělat z podadresáře `trunk` nový kořenový adresář projektu pro všechny revize, i s tím vám pomůže příkaz `filter-branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to map this to better Git author data, you need a mapping from the Subversion users to the Git authors.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže vyžadujete podrobnější informace ve stylu systému Git, budete potřebovat mapování z uživatelů Subversion na autory Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to override this with a different name or e-mail address for specific projects, you can run the command without the `--global` option when you’re in that project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete pro konkrétní projekt uživatelské jméno nebo e-mailovou adresu změnit (přebít), můžete příkaz spustit bez parametru `--global`. V takovém případě je nutné, abyste se nacházeli v adresáři daného projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to place your repositories on a server that doesn’t have accounts for everyone on your team whom you want to have write access, then you must set up SSH access for them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete své repozitáře umístit na server, jenž nemá účty pro všechny členy vašeho týmu, kteří by měli mít oprávnění k zápisu, musíte pro ně nastavit SSH přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to pull commit `e43a6` into your master branch, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li do hlavní větve natáhnout revizi `e43a6`, můžete zadat následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to push from your laptop when you’re at home, you have to mount the remote disk, which can be difficult and slow compared to network-based access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li chtít pracovat doma a odeslat data z notebooku, budete muset připojit vzdálený disk, což může být ve srovnání s přístupem prostřednictvím sítě složité a pomalé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to push to both a Git server and a Subversion server, you have to push (`dcommit`) to the Subversion server first, because that action changes your commit data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li revize odeslat jak na server Git, tak na server Subversion, odešlete je nejprve na server Subversion (`dcommit`), protože tím změníte data revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push your work back up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete poslat svou hlavní větev na server `origin` (i tady platí, že proces klonování vám nastaví názvy `master` i `origin` automaticky), můžete k odeslání své práce na server použít tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to remove a reference for some reason — you’ve moved the server or are no longer using a particular mirror, or perhaps a contributor isn’t contributing anymore — you can use `git remote rm`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, ať už z jakéhokoli důvodu, odstranit referenci (přesunuli jste například server nebo už nepoužíváte dané zrcadlo, nebo třeba přispěvatel přestal přispívat), můžete využít příkaz `git remote rm`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to remove all accidentally committed editor backup files, you can run something like `git filter-branch --tree-filter "rm -f *~" HEAD`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li odstranit všechny nedopatřením zapsané záložní soubory editoru, můžete spustit zhruba toto: `git filter-branch --tree-filter "rm -f *~" HEAD`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to remove the "added cat-file" commit and change the order in which the other two commits are introduced, you can change the rebase script from this</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li chtít odstranit revizi „added cat-file“ a současně změnit pořadí, v němž se vyskytují zbývající dvě revize, změňte skript přeskládání z podoby:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to rename a file in Git, you can run something like</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li v systému Git přejmenovat soubor, můžete spustit třeba příkaz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to rename a reference, in newer versions of Git you can run `git remote rename` to change a remote’s shortname.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li změnit zkrácené jméno vzdáleného repozitáře, můžete v novějších verzích systému Git spustit příkaz `git remote rename`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to run the web interface on a server all the time for your team or for an open source project you’re hosting, you’ll need to set up the CGI script to be served by your normal web server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li trvale spustit webové rozhraní na serveru pro svůj tým nebo nebo pro open-source projekt, který hostujete, musíte nastavit CGI skript tak, aby byl obsluhován vaším běžným webovým serverem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see a list of all the options your version of Git recognizes, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vás zajímá seznam parametrů, které vaše verze systému Git rozeznává, můžete si nechat jejich seznam vypsat příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see more information about a particular remote, you can use the `git remote show [remote-name]` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže chcete získat více informací o konkrétním vzdáleném repozitáři, můžete použít příkaz `git remote show [název vzdáleného repozitáře]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud si chcete prohlédnout změny provedené mezi aktuální verzí souboru a týmž souborem před měsícem, Git vyhledá měsíc starý soubor a provede lokální výpočet rozdílů, aniž by o to musel žádat vzdálený server nebo stahovat starší verzi souboru ze vzdáleného serveru a poté provádět lokální výpočet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see the fifth prior value of the HEAD of your repository, you can use the `@{n}` reference that you see in the reflog output:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit pátou poslední hodnotu ukazatele HEAD svého repozitáře, použijte referenci `@{n}` z výstupu reflog:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see what is in `master` or `experiment` but not any common references, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, co je ve větvi `master` nebo `experiment`, ale nechcete vidět jejich společné reference, zadejte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see what you’ve staged that will go into your next commit, you can use `git diff --cached`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vidět, co jste připravili a co bude součástí příští revize, použijte příkaz `git diff --cached`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li kdykoli po konfliktu zjistit, které soubory zůstaly nesloučeny, spusťte příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to see which specific SHA a branch points to, or if you want to see what any of these examples boils down to in terms of SHAs, you can use a Git plumbing tool called `rev-parse`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže vás zajímá, na kterou konkrétní hodnotu SHA větev ukazuje, nebo chcete-li zjistit, jak bude některý z těchto příkladů vypadat v podobě SHA, můžete použít jeden z nízkoúrovňových nástrojů systému Git: `rev-parse`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to set up Git to automatically have Bash shell completion for all users, copy this script to the `/opt/local/etc/bash_completion.d` directory on Mac systems or to the `/etc/bash_completion.d/` directory on Linux systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li nastavit Git tak, aby měl automaticky dokončování pro shell Bash pro všechny uživatele, zkopírujte u systému Mac tento skript do adresáře `/opt/local/etc/bash_completion.d`, nebo u systémů Linux do adresáře `/etc/bash_completion.d/`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to skip the staging area, Git provides a simple shortcut.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li oblast připravených změn úplně přeskočit, nabízí Git jednoduchou zkratku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to specify multiple grep options, you have to add `--all-match` or the command will match commits with either.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete zadat více parametrů grep, musíte přidat výraz `--all-match`, jinak se bude hledat kterýkoli z nich.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to start version-controlling existing files (as opposed to an empty directory), you should probably begin tracking those files and do an initial commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li spustit verzování existujících souborů (a ne jen prázdného adresáře), měli byste pravděpodobně zahájit sledování (tracking) těchto souborů a provést první revizi (commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to try that commit again, you can run commit with the `--amend` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li opravit poslední revizi, můžete spustit příkaz commit s parametrem `--amend`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to try this out, P4Merge works on all major platforms, so you should be able to do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud ho chcete vyzkoušet, nemělo by vám v tom nic bránit, P4Merge funguje na všech hlavních platformách.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to unstage the TODO file at this point, you use the `3` or `r` (for revert) option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li v tuto chvíli vrátit soubor TODO z oblasti připravených změn, použijte parametr `3` nebo `r` (jako „revert“ neboli „vrátit“):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to use a different text editor, such as Emacs, you can do the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li používat jiný textový editor, například Emacs, můžete použít následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li k vyřešení problémů použít grafický nástroj, můžete spustit příkaz `git mergetool`, kterým otevřete příslušný vizuální nástroj pro slučování, a ten vás všemi konflikty provede:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to use a merge tool other than the default (Git chose `opendiff` for me in this case because I ran the command on a Mac), you can see all the supported tools listed at the top after “... one of the following tools:”.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li použít jiný než výchozí nástroj pro slučování (Git mi v tomto případě vybral `opendiff`, protože jsem příkaz zadal v systému Mac), všechny podporované nástroje jsou uvedeny na začátku výstupu v části „merge tool candidates“ (možné nástroje pro slučování).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to use subprojects in your project, you’ve learned a few ways to accommodate those needs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ve svém projektu využívat subprojekty, znáte nyní několik způsobů, jak to provést.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to version-control Word documents, you can stick them in a Git repository and commit every once in a while; but what good does that do?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li verzovat dokumenty Word, můžete je uložit do repozitáře Git a všechny hned zapsat do revize. K čemu to však bude?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want to work on more than one branch simultaneously, you can set up local branches to `dcommit` to specific Subversion branches by starting them at the imported Subversion commit for that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li současně pracovat ve více než jedné větvi, můžete nastavit lokální větve tak, abyste příkazem `dcommit` zapisovali revize do konkrétních větví Subversion. Za tímto účelem umístěte začátek větví na importované revizi Subversion pro tuto větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you want your own `serverfix` branch that you can work on, you can base it off your remote branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li mít vlastní větev `serverfix`, na níž budete pracovat, můžete ji ze vzdálené větve vyvázat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you were deleting a reference, you would see the opposite: all '0's on the right side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byste mazali referenci, viděli byste pravý opak: samé nuly na pravé straně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you were somewhat relaxed about giving people rewind permissions (`RW+`) and some kid blew away `master`, the log file is a life saver, in terms of easily and quickly finding the SHA that got hosed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže máte volná pravidla pro přidělování oprávnění vracet změny (práva `RW+`) a stane se, že někdo takto „zkazí“ větev `master`, je tu ještě log soubor, který vám zachrání život, protože v něm můžete postižené SHA najít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you were working on an issue with a partner and they pushed up an `iss53` branch, you might have your own local `iss53` branch; but the branch on the server would point to the commit at `origin/iss53`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pracujete s kolegou na stejném problému a on odešle na server větev s názvem `iss53`, může se stát, že i vy máte jednu z lokálních větví pojmenovanou jako `iss53`. Větev na serveru však ukazuje na revizi označenou jako `origin/iss53`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you would prefer to skip this patch, instead run "git am --skip".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221309Z" creationid="Prikryl" creationdate="20151023T221309Z">
        <seg>If you would prefer to skip this patch, instead run "git am --skip".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your IMAP server doesn’t use SSL, the last two lines probably aren’t necessary, and the host value will be `imap://` instead of `imaps://`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud váš server IMAP nepoužívá SSL, dva poslední řádky zřejmě nebudou vůbec třeba a hodnota hostitele bude `imap://`, a nikoli `imaps://`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your `master` branch has moved forward since you created the topic branch from it, then you’ll get seemingly strange results.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže se vaše větev `master` posunula vpřed od chvíle, kdy jste z ní vytvořili tematickou větev, budou výstupem příkazu zdánlivě nesmyslné výsledky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your contribution came from a Git user who set up their own repository, pushed a number of changes into it, and then sent you the URL to the repository and the name of the remote branch the changes are in, you can add them as a remote and do merges locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud váš příspěvek pochází od uživatele systému Git, který založil vlastní repozitář, odeslal do něj sérii změn a následně vám poslal adresu URL k repozitáři a název vzdálené větve, v níž změny najdete, můžete je přidat jako vzdálené a lokálně je začlenit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your fix for issue #53 modified the same part of a file as the `hotfix`, you’ll get a merge conflict that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se oprava chyby č. 53 týkala stejné části souboru jako větev `hotfix`, dojde ke konfliktu při slučování (merge conflict). Vypadá zhruba takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your project is open source, you also get a huge community of developers who now have visibility into your project and may well fork it and help contribute to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li váš projekt otevřený zdrojový kód, získáte také obrovskou komunitu vývojářů, kteří nyní váš projekt uvidí, mohou ho rozštěpit a pomoci vám svými příspěvky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your project is very large, nonstandard, or private, this process probably won’t work for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces nejspíš nebude fungovat, pokud je váš projekt příliš velký, nestandardní nebo soukromý.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your project’s `.git` directory contains a copy of the ACL file you used previously, then the following `pre-commit` script will enforce those constraints for you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud adresář `.git` vašeho projektu obsahuje kopii souboru ACL, který jsme používali naposledy, příslušná omezení přístupu pro vás ohlídá tento skript `pre-commit`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your public key isn’t on the server, you’ll have to copy it there:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není-li váš veřejný klíč na serveru, musíte ho tam nakopírovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If your system isn’t Subversion or Perforce, you should look for an importer online — quality importers are available for CVS, Clear Case, Visual Source Safe, even a directory of archives.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není-li vaším současným systémem ani Subversion, ani Perforce, zkuste vyhledat importér online. Kvalitní importéry se dají najít pro CVS, Clear Case, Visual Source Safe, dokonce i pro adresář s archivy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re a Windows programmer doing a Windows-only project, then you can turn off this functionality, recording the carriage returns in the repository by setting the config value to `false`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud programujete ve Windows a vytváříte projekt pouze pro Windows, můžete tuto funkci vypnout. Nastavíte-li hodnotu konfigurace na `false`, v repozitáři se budou zaznamenávat i znaky CR.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re a small outfit or are just trying out Git in your organization and have only a few developers, things can be simple for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud provádíte nastavení jen pro malý okruh lidí nebo jen zkoušíte Git ve své organizaci a nemáte mnoho vývojářů, mnoho věcí pro vás bude jednodušších.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re applying a number of patches from an mbox, you can also run the `am` command in interactive mode, which stops at each patch it finds and asks if you want to apply it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud aplikujete několik záplat z jednoho souboru mbox, můžete příkaz `am` spustit také v interaktivním režimu, který zastaví před každou záplatou, kterou najde, a zeptá se vás, zda ji chcete aplikovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re describing a commit that you have directly tagged, it gives you the tag name.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáváte-li popis revize, kterou jste právě opatřili značkou, dostanete název této značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re doing the fetch over SSH, `fetch-pack` instead runs something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyzvedáváte-li data přes SSH, spustí místo toho proces `fetch-pack` následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re familiar with other VCS systems such as Subversion, you’ll notice that the command is `clone` and not `checkout`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste zvyklí pracovat s jinými systémy pro správu verzí, jako je například Subversion, jistě jste si všimli, že příkaz zní `clone`, a nikoli `checkout`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste s výsledkem spokojeni a ujistili jste se, že všechny kolidující soubory jsou připraveny k zapsání, můžete zadat příkaz `git commit` a dokončit revizi sloučením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re importing from another system, you must specify the time zone as an offset.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud importujete z jiného systému, musíte zadat časové pásmo jako posun.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re interested in using the HTTP-push protocols, you can read about preparing a repository for this purpose at `http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vás zajímá používání protokolů HTTP k odesílání dat, více se o přípravě repozitáře k tomuto účelu dočtete na adrese: `http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-over-http.txt` (anglicky).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re making signed annotated tags (as discussed in Chapter 2), setting your GPG signing key as a configuration setting makes things easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytváříte-li podepsané anotované značky (jak je popsáno v kapitole 2), celou věc vám usnadní nastavení GPG podpisového klíče v konfiguraci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re merging more than two branches, Git picks the _octopus_ strategy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud slučujete více než dvě větve, zvolí Git tzv. strategii _chobotnice_ (octopus strategy).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re merging two branches, Git uses a _recursive_ strategy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud slučujete dvě větve, používá Git _rekurzivní_ strategii.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re not interested in using KDiff3 for diff but rather want to use it just for merge resolution, and the kdiff3 command is in your path, then you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nestojíte o to, aby systém Git používal nástroj KDiff3 pro nástroj diff, ale používal ho jen k řešení konfliktů při slučování, a příkaz kdiff3 je ve vašem umístění, spusťte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re on Fedora, you can use yum:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve Fedoře můžete použít nástroj yum:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re on a Linux or Mac system that uses LF line endings, then you don’t want Git to automatically convert them when you check out files; however, if a file with CRLF endings accidentally gets introduced, then you may want Git to fix it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže pracujete v systému Linux nebo Mac, který používá konce řádků LF, nebudete chtít, aby Git při checkoutu souborů automaticky konvertoval konce řádků. Pokud se však náhodou vyskytne soubor s konci řádků CRLF, budete chtít, aby Git tento problém vyřešil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re on a Windows machine, set it to `true` — this converts LF endings into CRLF when you check out code:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracujete-li v systému Windows, nastavte hodnotu `true` – při checkoutu zdrojového kódu tím konvertujete konce řádků LF na CRLF:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re on a tracking branch and type `git push`, Git automatically knows which server and branch to push to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se nacházíte na sledující větvi a zadáte příkaz `git push`, Git automaticky ví, na který server a do které větve má data odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re only interested in looking at the 1.4.2 series, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud vás však zajímá pouze verze 1.4.2., můžete zadat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re programming on Windows or using another system but working with people who are programming on Windows, you’ll probably run into line-ending issues at some point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud programujete v OS Windows nebo používáte jiný systém, ale spolupracujete s lidmi, kteří ve Windows programují, pravděpodobně se jednou budete potýkat s problémy způsobené konci řádků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re pushing to a Subversion server via `git svn`, you may want to rebase your work onto a single branch each time instead of merging branches together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud odesíláte revizi na server Subversion nástrojem `git svn`, budete možná místo slučování chtít svou práci pokaždé přeskládat (rebase) na jedinou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re running a Mac, Leopard comes preinstalled with Ruby, so `webrick` may be your best bet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud používáte OS Mac, v systému Leopard je předinstalován jazyk Ruby, a proto pro vás bude nejlepší variantou zřejmě server `webrick`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re running a firewall, you’ll also need to punch a hole in it at port 9418 on the box you’re setting this up on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže používáte bránu firewall, budete rovněž muset na ní povolit port 9418.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re running it internally, and you set up DNS for `gitserver` to point to that server, then you can use the commands pretty much as is:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud server provozujete interně a nastavíte DNS pro `gitserver` tak, aby ukazovalo na tento server, můžete používat i takovéto příkazy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re running this on a server outside your firewall, it should only be used for projects that are publicly visible to the world.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud protokol používáte na serveru mimo firewall, mělo by to být pouze u projektů, které jsou veřejně viditelné okolnímu světu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re serving a lot of traffic for a public project or serving a very large project that doesn’t require user authentication for read access, it’s likely that you’ll want to set up a Git daemon to serve your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Potřebujete-li, aby protokol obsluhoval frekventovaný provoz u veřejného projektu nebo velmi velký projekt, u nějž není třeba ověřování identity uživatele ohledně oprávnění pro čtení, bude k obsluze nejvhodnější pravděpodobně právě démon Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re set up correctly, you can try to SSH into your server as the user for which you added the public key to initialize Gitosis.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste nastavení provedli správně, můžete vyzkoušet SSH přístup na server jako uživatel, pro kterého jste přidali veřejný klíč při inicializaci nástroje Gitosis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re starting to track an existing project in Git, you need to go to the project’s directory and type</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zahájit sledování existujícího projektu v systému Git, přejděte do adresáře projektu a zadejte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re taking patches over e-mail prepared by `git format-patch`, then some of these may be helpful to you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud přebíráte e-mailem záplaty vytvořené příkazem `git format-patch`, mohou pro vás být tyto zásuvné moduly užitečné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re used to Subversion and want to see your history in SVN output style, you can run `git svn log` to view your commit history in SVN formatting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže jste zvyklí na systém Subversion a chcete historii procházet ve stylu výstupu SVN, můžete použít příkaz `git svn log`. Historie revizí se zobrazí ve formátování SVN:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud jste zvyklí pracovat se systémy CVCS, kde je většina operací poznamenána latencí sítě, patrně vás při práci v systému Git napadne, že mu bohové rychlosti dali do vínku nadpřirozené schopnosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re using Windows with Git Bash, which is the default when installing Git on Windows with msysGit, auto-completion should be preconfigured.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud používáte Git Bash v systému Windows (Git Bash je pro instalaci msysGit pod Windows výchozím programem), mělo by být automatické dokončování přednastaveno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re using it only within your corporate network, SSH may be the only protocol you need to deal with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud repozitář používáte jen v rámci firemní sítě, bude pro vás protokol SSH zřejmě naprosto ideální.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re working with a team, and some are using SVN and others are using Git, make sure everyone is using the SVN server to collaborate — doing so will make your life easier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pracujete v týmu, v němž část vývojářů používá SVN a část Git, zajistěte, aby všichni spolupracovali na serveru SVN – váš život bude jednodušší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’re working with other developers, then at some point one of you will push, and then the other one will try to push a change that conflicts.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud na projektu spolupracujete s dalšími vývojáři, stane se vám, že někdo z vás odešle své revize, a až se o totéž pokusí ostatní, dojde ke konfliktu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve allowed everyone to connect with a single user (like "git") via public-key authentication, you may have to give that user a shell wrapper that determines which user is connecting based on the public key, and set an environment variable specifying that user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste všem povolili připojení s jedním uživatelem (např. „git“) na základě ověření veřejného klíče, možná budete muset poskytnout těmto uživatelům shellový wrapper, který určuje, který uživatel se připojuje na základě veřejného klíče, a nastavit proměnnou prostředí, jež tyto uživatele stanoví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve been tracking files in your project and you want to move them out into a submodule, you must be careful or Git will get angry at you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste ve svém projektu sledovali soubory a chcete je přesunout do submodulu, musíte být velmi opatrní, abyste si Git proti sobě nepoštvali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve cloned your repository, you should at least see _origin_ — that is the default name Git gives to the server you cloned from:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud byl váš repozitář vytvořen klonováním, měli byste vidět přinejmenším server _origin_. Jde o výchozí název, který Git dává serveru, z nějž jste repozitář klonovali:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve committed and then you want to change the snapshot you committed by adding or changing files, possibly because you forgot to add a newly created file when you originally committed, the process works basically the same way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste zapsali revizi a uvědomíte si, že jste např. zapomněli přidat nově vytvořený soubor, a proto byste chtěli zapsaný snímek změnit (tedy přidat nebo změnit soubory), je postup ke změně v podstatě stejný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve committed whitespace issues but haven’t yet pushed upstream, you can run a `rebase` with the `--whitespace=fix` option to have Git automatically fix whitespace issues as it’s rewriting the patches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste zapsali revize s chybami způsobenými prázdnými znaky, ale zatím jste je neodeslali na server, můžete spustit příkaz `rebase` s parametrem `--whitespace=fix`. Git automaticky opraví tyto chyby přepsáním záplat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve lost push access by pushing a messed-up configuration, you can manually fix the file on the server under `/home/git/.gitosis.conf` — the file from which Gitosis reads its info.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste odesláním nesprávné konfigurace ztratili oprávnění k odesílání dat, můžete ručně opravit soubor na serveru v adresáři `/home/git/.gitosis.conf` – jedná se o soubor, z nějž Gitosis načítá data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same and all you’ll change is your commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste od poslední revize neprovedli žádné změny (například spustíte tento příkaz bezprostředně po předchozí revizi), bude snímek vypadat úplně stejně a jediné, co změníte, je zpráva k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If you’ve used keyword substitution in CVS or Subversion, you can include a datestamp — the SHA isn’t all that helpful, because it’s fairly random and you can’t tell if one SHA is older or newer than another.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nahradíte klíčové slovo v systému CVS nebo Subversion, můžete přidat časový údaj (datestamp) – SHA tu není moc platné, protože je generováno náhodně a nelze podle něj určit, zda je jedna revize starší než jiná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If, instead of "pick" or "edit", you specify "squash", Git applies both that change and the change directly before it and makes you merge the commit messages together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li místo pick nebo edit instrukci pro komprimaci squash, Git aplikuje změnu na tomto řádku a změnu těsně před ní a zároveň sloučí dohromady obě zprávy k revizím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>If, on the other hand, you want to see the opposite — all commits in `master` that aren’t in `experiment` — you can reverse the branch names.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A samozřejmě si můžete nechat zobrazit i pravý opak, všechny revize ve větvi `master`, které nejsou ve větvi `experiment`. K tomu stačí obrátit pořadí názvů větví v příkazu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In 2002, the Linux kernel project began using a proprietary DVCS system called BitKeeper.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>V roce 2002 začal projekt vývoje linuxového jádra využívat komerční systém DVCS s názvem BitKeeper.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool’s free-of-charge status was revoked.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>V roce 2005 se zhoršily vztahy mezi komunitou, která vyvíjela jádro Linuxu, a komerční společností, která vyvinula BitKeeper, a společnost přestala tento systém poskytovat zdarma.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Chapter 2, you’ll learn more about these states and how you can either take advantage of them or skip the staged part entirely.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>O těchto stavech, způsobech jak je co nejlépe využívat nebo i o tom, jak přeskočit proces připravení souborů, se dozvíte v kapitole 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Chapter 7, we’ll discuss how you can change this default value for your environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V kapitole 7 probereme, jak lze tuto výchozí hodnotu pro vaše prostředí změnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Chapter 7, you’ll learn how to do more complicated manual project imports.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V kapitole 7 se dostaneme k tomu, jak lze ručně importovat složitější projekty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, however, every developer is potentially both a node and a hub — that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naproti tomu je v systému Git každý vývojář potenciálním uzlem i úložištěm, každý vývojář může přispívat kódem do jiných repozitářů i spravovat veřejný repozitář, na němž mohou ostatní založit svou práci a do nějž mohou přispívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, there are two main ways to integrate changes from one branch into another: the `merge` and the `rebase`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git existují dvě základní možnosti, jak integrovat změny z jedné větve do druhé: sloučení (neboli začlenění) příkazem `merge` a přeskládání příkazem `rebase`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, these are called "references" or "refs"; you can find the files that contain the SHA-1 values in the `.git/refs` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git se těmto ukazatelům říká reference (angl. „references“ nebo „refs“). Soubory, které obsahují hodnoty SHA-1, najdete v adresáři `.git/refs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, this is a pointer to the local branch you’re currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git se jedná o ukazatel na lokální větev, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, this is called _rebasing_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git se tato metoda nazývá _přeskládání_ (rebasing).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Git, you can use the attributes functionality to effectively diff binary files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git můžete zadáním vhodných parametrů efektivně porovnávat binární soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Perforce, for example, you can’t do much when you aren’t connected to the server; and in Subversion and CVS, you can edit files, but you can’t commit changes to your database (because your database is offline).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Například v systému Perforce toho lze bez připojení k serveru dělat jen velmi málo, v systémech Subversion a CVS můžete sice upravovat soubory, ale nemůžete zapisovat změny do databáze (neboť ta je offline).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Ruby, you can use the `FileUtils.mkdir_p()` function to create the subdirectory if it doesn’t exist.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud podadresář neexistuje, můžete ho v jazyce Ruby vytvořit pomocí funkce `FileUtils.mkdir_p()`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Subversion, each person committing has a user on the system who is recorded in the commit information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V Subversion má každá osoba zapisující revize v systému přiděleného uživatele, který je u zaznamenán informací o revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In Table 2-3 we’ll list these and a few other common options for your reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tabulka 2-3 uvádí pro přehlednost zmíněné parametry a několik málo dalších.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In `git svn`, it looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V nástroji `git svn` to bude vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files: they fully mirror the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>V systémech DVCS (jako jsou například Git, Mercurial, Bazaar nebo Darcs) uživatelé nestahují pouze nejnovější verzi souborů (tzv. snímek, anglicky snapshot), ale uchovávají kompletní kopii repozitáře (repository).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In a corporate environment, however, unauthenticated access is a no-no, and a developer workstation cannot do authentication, so you have to push to the central server and ask someone to pull from there.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V korporátním prostředí ovšem nebývá jakýkoliv přístup bez prokázání totožnosti vítán a pracovní stanice vývojáře nemůže provádět autentizaci, takže můžete na centrální server odesílat, ale musíte požádat někoho jiného, když odtud chcete stahovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to knowing how to effectively contribute to a project, you’ll likely need to know how to maintain one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při práci na projektech Git možná nevystačíte jen s vědomostmi, jak do projektu efektivně přispívat. Pravděpodobně budete jednou potřebovat vědět něco i o správě projektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to output-formatting options, `git log` takes a number of useful limiting options — that is, options that let you show only a subset of commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kromě parametrů k formátování výstupu lze pro `git log` použít také celou řadu omezujících parametrů, tj. takových, které zobrazí jen definovanou podmnožinu revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to restricting what branches a user can push changes to, you can also restrict what files they are allowed to touch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K omezení odesílání do určitých větví a určitými uživateli můžete přidat také omezení určující, které soubory mohou uživatelé měnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition to the client-side hooks, you can use a couple of important server-side hooks as a system administrator to enforce nearly any kind of policy for your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vedle zásuvných modulů na straně klienta můžete jako správce systému využívat také několik důležitých zásuvných modulů na straně serveru, které vám pomohou kontrolovat téměř jakýkoli typ standardů stanovených pro daný projekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition, each of these has subsettings you can use to set specific colors for parts of the output, if you want to override each color.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li sami nastavit jednotlivé barvy, mají všechny tyto parametry navíc dílčí nastavení, které můžete použít k určení konkrétních barev pro jednotlivé části výstupu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition, it sends back the HEAD reference so the client knows what to check out if this is a clone.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kromě toho pošle proces zpět referenci HEAD, aby klient v případě, že se jedná o klonování, věděl, kam přepnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition, the `short`, `full`, and `fuller` options show the output in roughly the same format but with less or more information, respectively:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále se nabízejí parametry `short`, `full` a `fuller` (zkrácený, plný, úplný). Zobrazují výstup přibližně ve stejném formátu, avšak s více či méně podrobnými informacemi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In addition, you get all this for very little overhead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Všechny funkcionality verzovacího systému můžete navíc používat velice jednoduchým způsobem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In any case, the Git protocol is relatively easy to set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ať tak či tak, na protokolu Git jistě oceníte jeho snadné nastavení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In any case, you can change e-mail addresses in multiple commits in a batch with `filter-branch` as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V obou těchto případech můžete změnit e-mailové adresy v několika revizích hromadně příkazem `filter-branch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In centralized systems, every developer is a node working more or less equally on a central hub.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V centralizovaných systémech představuje každý vývojář samostatný uzel, pracující více či méně na stejné úrovni vůči centrálnímu úložišti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In centralized systems, there is generally a single collaboration model—the centralized workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V centralizovaných systémech je většinou možný pouze jediný model spolupráce, tzv. centralizovaný pracovní postup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In either case, after `fetch-pack` connects, `upload-pack` sends back something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V obou případech zašle po připojení procesu `fetch-pack` proces `upload-pack` zpět následující informace:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In essence, you want to treat it like a binary file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z těchto důvodů s ním budete chtít zacházet jako s binárním souborem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, Git stores everything not by file name but in the Git database addressable by the hash value of its contents.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git nic neukládá podle názvu souboru. Místo toho používá databázi adresovatelnou hodnotou otisku, který odpovídá obsahu souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if you build Git from source code cloned from the Git repository, `git --version` gives you something that looks like this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud sestavujete Git ze zdrojového kódu naklonovaného z repozitáře Git, získáte po spuštění příkazu `git --version` něco, co vypadá zhruba podobně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if you have a script that will exit 0 if the project is good or non-0 if the project is bad, you can fully automate `git bisect`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A máte-li skript, který bude pro správně fungující projekt vracet hodnotu 0 (nula), nebo nenulovou hodnotu, pokud je v projektu chyba, můžete příkaz `git bisect` dokonce plně automatizovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if you run something like this and look at the status, you’ll see that Git considers it a renamed file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A skutečně, pokud takový příkaz provedete a podíváte se na stav souboru, uvidíte, že ho Git považuje za přejmenovaný (renamed):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, if your server disk gets corrupted, you can use any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there — see _Chapter 4_ for more details).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud by někdy poté došlo k poruše disku serveru, lze použít libovolný z těchto klonů na kterémkoli klientovi a obnovit pomocí něj server zpět do stavu, v němž byl v okamžiku klonování (může dojít ke ztrátě některých zásuvných modulů na straně serveru a podobných věcí, ale všechna verzovaná data budou obnovena. Další podrobnosti naleznete v _kapitole 4_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, we used GitHub to privately collaborate on this book.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možnost soukromého použití GitHub jsme ostatně používali pro spolupráci při vzniku této knihy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In fact, you can do `-&lt;n&gt;`, where `n` is any integer to show the last `n` commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obecně lze tedy říci, že můžete zadat parametr `-&lt;n&gt;`, kde `n` je libovolné celé číslo pro zobrazení posledních `n` revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V mnoha VCS nástrojích se může jednat o poněkud náročný proces, který často vyžaduje vytvoření nové kopie adresáře se zdrojovým kódem. To může – zvláště u velkých projektů – trvat poměrně dlouho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In many instances, you’ll have two or three developers with a few commits a day, or possibly less for somewhat dormant projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V mnoha případech budete mít dva nebo tři vývojáře přispívající několika málo revizemi denně, u projektů s nízkou prioritou možná i méně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In many other systems, doing so is either impossible or painful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>V mnoha jiných systémech je takový postup nemožný nebo přinejmenším obtížný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In more complex cases, the client supports `multi_ack` or `side-band` capabilities; but this example shows you the basic back and forth used by the smart protocol processes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve složitějších případech podporuje klient schopnosti `multi_ack` nebo `side-band`. Uvedený příklad ale dobře ilustruje základní komunikaci tam a zpět, jak ji používají procesy chytrých protokolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In most projects, that’s `.git/hooks`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U většiny projektů to bude konkrétně `.git/hooks`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In most scenarios, if you want color codes in your redirected output, you can instead pass a `--color` flag to the Git command to force it to use color codes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li použít barevné kódy v přesměrovaném výstupu, můžete většinou místo toho přidat k příkazu Git příznak `--color`. Po jeho zadání příkaz použije barevné kódy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In newer versions of Git (beginning with version 1.6.1), you can set `receive.denyDeletes` to true:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V novějších verzích systému Git (počínaje verzí 1.6.1) lze nastavit možnost `receive.denyDeletes` na hodnotu true:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order for a repository to be served over the Git protocol, you must create the `git-daemon-export-ok` file — the daemon won’t serve a repository without that file in it — but other than that there is no security.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, aby byl repozitář zpřístupněn protokolem Git, musíte vytvořit soubor `git-daemon-export-ok`. Bez tohoto souboru nebude repozitář démonem zpřístupněn. Žádné jiné zabezpečení ale k dispozici není.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to begin tracking a new file, you use the command `git add`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K zahájení sledování nových souborů se používá příkaz `git add`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to clone your repository to create a new bare repository, you run the clone command with the `--bare` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li naklonovat stávající repozitář, a vytvořit tak nový a holý, zadejte příkaz pro klonování s parametrem `--bare`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to do that easily, you can use a tool called `svnsync` that comes with more recent versions of Subversion — it should be distributed with at least 1.4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snadno ho zkopírujete pomocí nástroje `svnsync`, jenž je součástí novějších verzí systému Subversion – měl by být distribuován s verzí 1.4 a vyšší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to do that, you’ll merge in your `iss53` branch, much like you merged in your `hotfix` branch earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Učiníte tak začleněním větve `iss53`, které bude probíhat velmi podobně jako předchozí začlenění větve `hotfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to import a Git directory, you need to review how Git stores its data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li importovat adresář Git, budeme se muset podívat na to, jak Git ukládá svá data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to initially set up any Git server, you have to export an existing repository into a new bare repository — a repository that doesn’t contain a working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro úvodní nastavení serveru Git je třeba exportovat existující repozitář do nového, holého repozitáře (bare repository), tj. do repozitáře, který neobsahuje pracovní adresář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to provide a public key, each user in your system must generate one if they don’t already have one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby vám mohli všichni uživatelé ve vašem systému poskytnout veřejný klíč, musí si ho každý z nich nechat vygenerovat (pokud klíč ještě nemá).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vzniklý konflikt vyřešit, musíte buď vybrat jednu z obou stran, nebo konflikt sloučit sami.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In other words, in this case, you don’t have a new `serverfix` branch — you only have an `origin/serverfix` pointer that you can’t modify.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jinak řečeno: v tomto případě nebudete mít novou větev `serverfix`, budete mít pouze ukazatel `origin/serverfix`, který nemůžete měnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In other words, use commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jinými slovy, formulujte je jako příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In other words, you may want to keep the file on your hard drive but not have Git track it anymore.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor tak ponecháte na svém pevném disku, ale ukončíte jeho sledování systémem Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In reality, we’re talking about pointers moving up the line of commits you’re making.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve skutečnosti hovoříme o ukazatelích pohybujících se vzhůru po linii revizí, které zapisujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In reality, you’re unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je však třeba dodat, že tuto funkci asi nebudete využívat příliš často. Git totiž standardně redukuje všechny výpisy stránkovačem, a proto se vždy najednou zobrazí pouze jedna stránka logu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In some contexts, the first line is treated as the
	subject of an email and the rest of the text as the body.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215632Z" creationid="Prikryl" creationdate="20151023T215632Z">
        <seg>V některých kontextech  je první řádek koncipován
	jako předmět e-mailu a zbytek textu jako jeho tělo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In some use case scenarios you might want to apply stashed changes, do some work, but then un-apply those changes that originally came from the stash.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V některých případech můžete chtít aplikovat odložené změny, udělat nějakou práci, a pak odvolat změny, které byly v odkladu původně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In such a case you could try to extract a text from your file with the `strings` program.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě můžete zkusit získat z vašeho souboru texty programem `strings`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In such cases, you can create a file listing patterns to match them named `.gitignore`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takových případech můžete vytvořit soubor `.gitignore` se seznamem masek pro ignorované soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In that case you must get the Git source code, which you can download from git.kernel.org:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě budete muset získat zdrojový text systému Git, který můžete stáhnout ze serveru git.kernel.org:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In that case, the `git am` process will fail and ask you what you want to do:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě proces `git am` neproběhne a Git se vás zeptá, co chcete udělat dál:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In that case, you start the command with a `!` character.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě zadejte na začátek příkazu znak `!`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the Git source code, for example, the maintainer has added their GPG public key as a blob object and then tagged it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve zdrojovém kódu systému Git správce například vložil svůj veřejný klíč GPG jako objekt blobu a ten označil značkou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the `.gitattributes` file, you can set a filter for particular paths and then set up scripts that will process files just before they’re checked out ("smudge", see Figure 7-2) and just before they’re committed ("clean", see Figure 7-3).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V souboru `.gitattributes` můžete určit filtr pro konkrétní umístění a nastavit skripty, jimiž budou zpracovány soubory těsně před jejich zapsáním („clean“ – viz obrázek 7-2) a těsně před checkoutem („smudge“ – viz obrázek 7-3).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the context of the `diff` command, you can put three periods after another branch to do a `diff` between the last commit of the branch you’re on and its common ancestor with another branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V kontextu příkazu `diff` můžete vložit tři tečky za druhou větev – získáte výpis `diff` mezi poslední revizí větve, na níž se nacházíte, a společným předkem s druhou větví:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the current project, this directory contains no files, but it does contain a simple structure:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V aktuálním projektu nejsou v tomto adresáři žádné soubory, zatím tu najdete jen jednoduchou strukturu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the default case that is automatically written by a `git remote add` command, Git fetches all the references under `refs/heads/` on the server and writes them to `refs/remotes/origin/` locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve výchozím případě, který se automaticky zapisuje příkazem `git remote add`, Git vyzvedne všechny reference z adresáře `refs/heads/` na serveru a zapíše je do lokálního adresáře `refs/remotes/origin/`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the early days of Git (mostly pre 1.5), the user interface was much more complex because it emphasized this filesystem rather than a polished VCS.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dávných dobách (zhruba do verze 1.5) bývalo uživatelské rozhraní systému Git podstatně složitější než dnes. Git tehdy spíš než na uhlazené VCS kladl důraz právě na systém souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the examples below, we will use the `git` account on a host called `gitserver`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V příkladech uvedených níže budeme používat účet `git` na serveru `gitserver`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the following example, interns can only push the "int" branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skupina interns může v následujícím případě odesílat pouze větev „int“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the following examples, and throughout most of this book, for the sake of brevity I don’t format messages nicely like this; instead, I use the `-m` option to `git commit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Já v následujících příkladech stejně jako ve většině případů v této knize v rámci zestručnění neformátuji zprávy podle uvedených zásad, naopak používám parametr `-m` za příkazem `git commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the last example output, the unstaged area looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U posledního příkladu vypadá oblast připravených změn takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the last few years, the UI has been refined until it’s as clean and easy to use as any system out there; but often, the stereotype lingers about the early Git UI that was complex and difficult to learn.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatelské rozhraní však bylo za několik posledních let zkultivováno a dnes je už stejně čisté a uživatelsky příjemné jako u ostatních systémů. Přesto přetrvávají předsudky z raných dob a uživatelské rozhraní systému Git se považuje za složité a náročné na pochopení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the last section of this chapter, I’ll demonstrate using this hook to check that your commit message is conformant to a required pattern.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V poslední části této kapitoly ukážeme, jak lze pomocí tohoto zásuvného modulu zkontrolovat, že zpráva k revizi odpovídá požadovanému vzoru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the meantime, Jessica has been working on a topic branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica mezitím pracovala na tematické větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the next chapter, you’ll learn more powerful tools and tips for dealing with complex situations, which will truly make you a Git master.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V další kapitole poznáte další výkonné nástroje a tipy k řešení složitých situací, které z vás udělají opravdového mistra mezi uživateli systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the next few sections, you’ll see how to expand to more sophisticated setups.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalších částech se podíváme na některé pokročilé možnosti nastavení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In the simplest terms, a bare repository is the contents of your project’s `.git` directory and nothing else.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduše bychom mohli také říct, že holý repozitář je obsah adresáře `.git` vašeho projektu a nic víc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this `fast-import` directory, you should find an executable Python script named `git-p4`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V adresáři `fast-import` byste měli najít spustitelný skript napsaný v jazyce Python pojmenovaný `git-p4`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git v tomto případě provádí jednoduché třícestné sloučení: vychází ze dvou snímků, na které ukazují větve, a jejich společného předka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, Git uses the last value for each unique key it sees.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě použije Git poslední hodnotu pro každý unikátní klíč, který vidí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, I was trying to apply a patch I had already applied.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě jsem se pokoušel aplikovat záplatu, kterou už jsem jednou aplikoval.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, choose `1c002dd....` If you `git show` that commit, the following commands are equivalent (assuming the shorter versions are unambiguous):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě vyberte `1c002dd....`. Pokud chcete na revizi použít příkaz `git show`, budou všechny následující příkazy ekvivalentní (za předpokladu, že jsou zkrácené verze jednoznačné):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, database.xml stays at whatever version you originally had.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě zůstane soubor database.xml ve své původní podobě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, it’s `http://github.com/testinguser/iphone_project`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě je adresa `http://github.com/testinguser/iphone_project`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, the  master branch pull was rejected because it wasn’t a fast-forward reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě bylo odeslání hlavní větve odmítnuto, protože reference nesměřovala „rychle vpřed“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, the company is using a type of integration-manager workflow where the work of the individual groups is integrated only by certain engineers, and the `master` branch of the main repo can be updated only by those engineers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Společnost v tomto případě používá typ pracovního postupu s integračním manažerem, kdy práci jednotlivých skupin integrují pouze někteří technici a větev `master` hlavního repozitáře mohou aktualizovat pouze oni.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, the last time you ran `git status`, you saw that everything was staged, so you’re ready to commit your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když jste v našem případě naposledy spustili příkaz `git status`, viděli jste, že všechny soubory byly připraveny k zapsání. Takže jste připraveni k samotnému zapsání změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, to keep the example simple, you’ll only enforce the `avail` directives.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom příklad nekomplikovali, budete vyžadovat pouze direktivy `avail` (využít).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, two stashes were done previously, so you have access to three different stashed works.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě byly už dříve provedeny dva další odklady, a máte tak k dispozici tři různé odklady.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, typing `git co` and then pressing the Tab key twice suggests commit and config. Adding `m&lt;tab&gt;` completes `git commit` automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112548Z" creationid="Prikryl" creationdate="20151023T112548Z">
        <seg>Pokud napíšete `git co` a dvakrát stisknete klávesu Tab, systém vám navrhne „commit“ a „config“. Pokud přidáte `m&lt;tab&gt;`, příkaz se automaticky dokončí jako `git commit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, when you commit files that match `*.c`, Git will run them through the indent program before it commits them and then run them through the `cat` program before it checks them back out onto disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud v tomto případě zapíšete soubory odpovídající masce `*.c`, Git je ještě před zapsáním prožene programem pro úpravu odsazování a poté, před checkoutem zpět na disk, i programem `cat`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you already know what file it is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě víte, o jaký soubor se jedná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you can read an existing tree into your staging area as a subtree by using the `--prefix` option to `read-tree`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě můžete načíst existující strom jako podstrom do oblasti připravených změn pomocí parametru `--prefix`, který zadáte k příkazu `read-tree`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you can see your missing commit after the dangling commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě je vaše ztracená revize uvedena výrazem „dangling commit“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you can try to rebase that branch on top of `origin/master`, resolve the conflicts for the maintainer, and then resubmit your changes:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě můžete zkusit přeskládat tuto větev na vrcholu větve `origin/master`, vyřešit za správce vzniklé konflikty a poté své změny ještě jednou odeslat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you had a clean working directory when you tried to apply the stash, and you tried to apply it on the same branch you saved it from; but having a clean working directory and applying it on the same branch aren’t necessary to successfully apply a stash.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě jste měli čistý pracovní adresář, když jste se pokusili odklad aplikovat. Pokusili jste se ho aplikovat na stejnou větev, z níž jste ho uložili. K úspěšnému odkladu však není nezbytně nutné, aby byl pracovní adresář čistý ani abyste ho aplikovali na stejnou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you have a couple of administrators, some documentation writers with access to the `doc` directory, and one developer who only has access to the `lib` and `tests` directories, and your ACL file looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V našem příkladu máte několik správců, několik tvůrců dokumentace s přístupem do adresáře `doc` a jednoho vývojáře, který má jako jediný přístup do adresářů `lib` a `tests`. Soubor ACL proto bude vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you imported 18 objects total for 5 commits into 1 branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě jsme importovali celkem 18 objektů 5 revizí do 1 větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you remove a file called passwords.txt from every snapshot, whether it exists or not.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě odstraníte soubor s názvem passwords.txt ze všech snímků, ať v nich existuje, nebo neexistuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, your development history has diverged from some older point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě se historie vývoje od určitého bodu v minulosti rozbíhala.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you’d do your work in a branch and then rebase your work onto `origin/master` when you were ready to submit your patches to the main project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě budete pracovat ve své větvi, a až budete mít připraveny záplaty k odeslání do hlavního projektu, přeskládáte svou práci na větev `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you’re specifying a mode of `100644`, which means it’s a normal file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě jste zadali režim `100644`, který znamená, že se jedná o běžný soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this case, you’re still on master.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V našem případě jste však stále ještě na hlavní větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this chapter, I’ll go through some operations that you can use to make Git operate in a more customized fashion by introducing several important configuration settings and the hooks system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této kapitole nastíním některé operace, jimiž lze Git přizpůsobit individuálním potřebám každého uživatele. Ukážeme si několik důležitých konfiguračních nastavení a systém zásuvných modulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this chapter, you’ll see how to work with Git in a distributed environment as a contributor and an integrator.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této kapitole se dozvíte, jak pracovat se systémem Git v distribuovaném prostředí jako přispěvatel a zprostředkovatel integrace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this environment, you can follow a workflow similar to what you might do when using Subversion or another centralized system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém prostředí můžete uplatnit podobný pracovní postup, na jaký jste možná zvyklí ze systému Subversion nebo jiného centralizovaného systému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this example, you’d run the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V našem případě tedy provedete následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this example, you’ll use the `authorized_keys` method for authenticating your users.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto příkladu použijeme k ověření identity uživatelů metodu `authorized_keys`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this next scenario, you’ll look at contributor roles in a larger private group.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V následujícím scénáři se podíváme na role přispěvatelů ve větší soukromé skupině.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this particular case, we’re using the `/var/www/htdocs` path that is common for Apache setups, but you can use any static web server — just put the bare repository in its path.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto konkrétním případě používáme cestu `/var/www/htdocs`, která je obvyklá u nastavení Apache, ale použít lze v podstatě jakýkoli statický webový server – stačí uložit holý repozitář do dané cesty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this scenario, all work is done in team-based branches and pulled together by the integrators later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto scénáři se veškerá práce provádí ve větvích jednotlivých týmů a později je spojována zprostředkovateli integrace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this scenario, you have a `master` branch that contains basically stable code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto scénáři obsahuje vaše větev `master` převážně jen stabilní kód.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this scenario, you have two long-running branches, `master` and `develop`, in which you determine that `master` is updated only when a very stable release is cut and all new code is integrated into the `develop` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto scénáři máte dvě dlouhodobé větve, hlavní větev `master` a větev `develop`. Určíte, že větev `master` bude aktualizována, pouze když je k dispozici velmi stabilní verze a do větve `develop` je integrován veškerý nový kód.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section you’ll learn what rebasing is, how to do it, why it’s a pretty amazing tool, and in what cases you won’t want to use it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se dozvíte, co to je přeskládání, jak ho provést, v čem spočívají výhody tohoto nástroje a v jakých případech ho rozhodně nepoužívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, we’ll cover some common workflows that this lightweight branching makes possible, so you can decide if you would like to incorporate it into your own development cycle.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto se v této části podíváme na některé běžné pracovní postupy, které vám neobyčejně snadné větvení umožňuje, a můžete se zamyslet nad tím, zda větve při své vývojářské práci využijete, či nikoli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, we’ll cover these remote-management skills.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se zaměříme právě na správu vzdálených repozitářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, you’ll cover how to accomplish these very useful tasks so that you can make your commit history look the way you want before you share it with others.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se dozvíte, jak se tyto velmi užitečné úkony provádějí, abyste mohli svou historii revizí před zveřejněním upravit podle svých představ.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, you’ll learn about a few common patterns for contributing to a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části ukážeme několik běžných schémat, podle nichž může přispívání do projektů probíhat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, you’ll learn about some of the attributes you can set on your paths in your Git project and see a few examples of using this feature in practice.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se podíváme na některé atributy, jež můžete pro různá umístění v projektu Git nastavit, a uvedeme pár příkladů, jak lze tuto funkci využít v praxi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, you’ll learn how to list the available tags, how to create new tags, and what the different types of tags are.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části vysvětlíme, jak pořídíte výpis všech dostupných značek, jak lze vytvářet značky nové a jaké typy značek se vám nabízejí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>In this section, you’ll use what you’ve learned to establish a Git workflow that checks for a custom commit message format, enforces fast-forward-only pushes, and allows only certain users to modify certain subdirectories in a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části použijeme to, co jsme se naučili o vytváření pracovního postupu v systému Git. Systém může kontrolovat formát uživatelovy zprávy k revizi, dovolit pouze aktualizace „rychle vpřed“ a umožňovat změnu obsahu konkrétních podadresářů projektu pouze vybraným uživatelům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Initial commit history with featureB work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výchozí historie revizí s větví featureB</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0101.png
Figure 1-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202340Z" creationid="Prikryl" creationdate="20151011T202340Z">
        <seg>Insert 18333fig0101.png
Obrázek 1-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0102.png
Figure 1-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202348Z" creationid="Prikryl" creationdate="20151011T202348Z">
        <seg>Insert 18333fig0102.png
Obrázek 1-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0103.png
Figure 1-3.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202352Z" creationid="Prikryl" creationdate="20151011T202352Z">
        <seg>Insert 18333fig0103.png
Obrázek 1-3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0104.png
Figure 1-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202419Z" creationid="Prikryl" creationdate="20151011T202419Z">
        <seg>Insert 18333fig0104.png
Obrázek 1-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0105.png
Figure 1-5.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202424Z" creationid="Prikryl" creationdate="20151011T202424Z">
        <seg>Insert 18333fig0105.png
Obrázek 1-5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0106.png
Figure 1-6.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202440Z" creationid="Prikryl" creationdate="20151011T202440Z">
        <seg>Insert 18333fig0106.png
Obrázek 1-6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0107.png
Figure 1-7.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202458Z" creationid="Prikryl" creationdate="20151011T202458Z">
        <seg>Insert 18333fig0107.png
Obrázek 1-7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0201.png
Figure 2-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202503Z" creationid="Prikryl" creationdate="20151011T202503Z">
        <seg>Insert 18333fig0201.png
Obrázek 2-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0202.png
Figure 2-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202509Z" creationid="Prikryl" creationdate="20151011T202509Z">
        <seg>Insert 18333fig0202.png
Obrázek 2-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0301.png
Figure 3-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202517Z" creationid="Prikryl" creationdate="20151011T202517Z">
        <seg>Insert 18333fig0301.png
Obrázek 3-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0302.png
Figure 3-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202526Z" creationid="Prikryl" creationdate="20151011T202526Z">
        <seg>Insert 18333fig0302.png
Obrázek 3-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0303.png
Figure 3-3.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202532Z" creationid="Prikryl" creationdate="20151011T202532Z">
        <seg>Insert 18333fig0303.png
Obrázek 3-3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0304.png
Figure 3-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202536Z" creationid="Prikryl" creationdate="20151011T202536Z">
        <seg>Insert 18333fig0304.png
Obrázek 3-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0305.png
Figure 3-5.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202542Z" creationid="Prikryl" creationdate="20151011T202542Z">
        <seg>Insert 18333fig0305.png
Obrázek 3-5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0306.png
Figure 3-6.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202551Z" creationid="Prikryl" creationdate="20151011T202551Z">
        <seg>Insert 18333fig0306.png
Obrázek 3-6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0307.png
Figure 3-7.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202556Z" creationid="Prikryl" creationdate="20151011T202556Z">
        <seg>Insert 18333fig0307.png
Obrázek 3-7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0308.png
Figure 3-8.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202602Z" creationid="Prikryl" creationdate="20151011T202602Z">
        <seg>Insert 18333fig0308.png
Obrázek 3-8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0309.png
Figure 3-9.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202612Z" creationid="Prikryl" creationdate="20151011T202612Z">
        <seg>Insert 18333fig0309.png
Obrázek 3-9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0310.png
Figure 3-10.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202618Z" creationid="Prikryl" creationdate="20151011T202618Z">
        <seg>Insert 18333fig0310.png
Obrázek 3-10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0311.png
Figure 3-11.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202624Z" creationid="Prikryl" creationdate="20151011T202624Z">
        <seg>Insert 18333fig0311.png
Obrázek 3-11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0312.png
Figure 3-12.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202633Z" creationid="Prikryl" creationdate="20151011T202633Z">
        <seg>Insert 18333fig0312.png
Obrázek 3-12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0313.png
Figure 3-13.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202641Z" creationid="Prikryl" creationdate="20151011T202641Z">
        <seg>Insert 18333fig0313.png
Obrázek 3-13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0314.png
Figure 3-14.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151011T202658Z" creationid="Prikryl" creationdate="20151011T202658Z">
        <seg>Insert 18333fig0314.png
Obrázek 3-14.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0315.png
Figure 3-15.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102538Z" creationid="Prikryl" creationdate="20151023T102538Z">
        <seg>Insert 18333fig0315.png
Obrázek 3-15.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0316.png
Figure 3-16.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102601Z" creationid="Prikryl" creationdate="20151023T102601Z">
        <seg>Insert 18333fig0316.png
Obrázek 3-16.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0317.png
Figure 3-17.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102616Z" creationid="Prikryl" creationdate="20151023T102616Z">
        <seg>Insert 18333fig0317.png
Obrázek 3-17.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0318.png
Figure 3-18.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103411Z" creationid="Prikryl" creationdate="20151023T103411Z">
        <seg>Insert 18333fig0318.png
Obrázek 3-18.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0319.png
Figure 3-19.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104514Z" creationid="Prikryl" creationdate="20151023T104514Z">
        <seg>Insert 18333fig0319.png
Obrázek 3-19.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0320.png
Figure 3-20.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104527Z" creationid="Prikryl" creationdate="20151023T104527Z">
        <seg>Insert 18333fig0320.png
Obrázek 3-20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0321.png
Figure 3-21.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104533Z" creationid="Prikryl" creationdate="20151023T104533Z">
        <seg>Insert 18333fig0321.png
Obrázek 3-21.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0322.png
Figure 3-22.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104540Z" creationid="Prikryl" creationdate="20151023T104540Z">
        <seg>Insert 18333fig0322.png
Obrázek 3-22.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0323.png
Figure 3-23.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104549Z" creationid="Prikryl" creationdate="20151023T104549Z">
        <seg>Insert 18333fig0323.png
Obrázek 3-23.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0324.png
Figure 3-24.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104555Z" creationid="Prikryl" creationdate="20151023T104555Z">
        <seg>Insert 18333fig0324.png
Obrázek 3-24.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0325.png
Figure 3-25.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104600Z" creationid="Prikryl" creationdate="20151023T104600Z">
        <seg>Insert 18333fig0325.png
Obrázek 3-25.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0326.png
Figure 3-26.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104606Z" creationid="Prikryl" creationdate="20151023T104606Z">
        <seg>Insert 18333fig0326.png
Obrázek 3-26.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0327.png
Figure 3-27.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104710Z" creationid="Prikryl" creationdate="20151023T104710Z">
        <seg>Insert 18333fig0327.png
Obrázek 3-27.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0328.png
Figure 3-28.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104720Z" creationid="Prikryl" creationdate="20151023T104720Z">
        <seg>Insert 18333fig0328.png
Obrázek 3-28.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0329.png
Figure 3-29.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104734Z" creationid="Prikryl" creationdate="20151023T104734Z">
        <seg>Insert 18333fig0329.png
Obrázek 3-29.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0330.png
Figure 3-30.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104739Z" creationid="Prikryl" creationdate="20151023T104739Z">
        <seg>Insert 18333fig0330.png
Obrázek 3-30.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0331.png
Figure 3-31.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104742Z" creationid="Prikryl" creationdate="20151023T104742Z">
        <seg>Insert 18333fig0331.png
Obrázek 3-31.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0332.png
Figure 3-32.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104758Z" creationid="Prikryl" creationdate="20151023T104758Z">
        <seg>Insert 18333fig0332.png
Obrázek 3-32.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0333.png
Figure 3-33.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104805Z" creationid="Prikryl" creationdate="20151023T104805Z">
        <seg>Insert 18333fig0333.png
Obrázek 3-33.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0334.png
Figure 3-34.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104815Z" creationid="Prikryl" creationdate="20151023T104815Z">
        <seg>Insert 18333fig0334.png
Obrázek 3-34.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0335.png
Figure 3-35.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104827Z" creationid="Prikryl" creationdate="20151023T104827Z">
        <seg>Insert 18333fig0335.png
Obrázek 3-35.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0336.png
Figure 3-36.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104838Z" creationid="Prikryl" creationdate="20151023T104838Z">
        <seg>Insert 18333fig0336.png
Obrázek 3-36.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0337.png
Figure 3-37.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104854Z" creationid="Prikryl" creationdate="20151023T104854Z">
        <seg>Insert 18333fig0337.png
Obrázek 3-37.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0338.png
Figure 3-38.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104903Z" creationid="Prikryl" creationdate="20151023T104903Z">
        <seg>Insert 18333fig0338.png
Obrázek 3-38.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0339.png
Figure 3-39.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104908Z" creationid="Prikryl" creationdate="20151023T104908Z">
        <seg>Insert 18333fig0339.png
Obrázek 3-39.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0401.png
Figure 4-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105219Z" creationid="Prikryl" creationdate="20151023T105219Z">
        <seg>Insert 18333fig0401.png
Obrázek 4-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0402.png
Figure 4-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105538Z" creationid="Prikryl" creationdate="20151023T105538Z">
        <seg>Insert 18333fig0402.png
Obrázek 4-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0403.png
Figure 4-3.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105546Z" creationid="Prikryl" creationdate="20151023T105546Z">
        <seg>Insert 18333fig0403.png
Obrázek 4-3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0404.png
Figure 4-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105551Z" creationid="Prikryl" creationdate="20151023T105551Z">
        <seg>Insert 18333fig0404.png
Obrázek 4-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0405.png
Figure 4-5.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105555Z" creationid="Prikryl" creationdate="20151023T105555Z">
        <seg>Insert 18333fig0405.png
Obrázek 4-5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0406.png
Figure 4-6.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105559Z" creationid="Prikryl" creationdate="20151023T105559Z">
        <seg>Insert 18333fig0406.png
Obrázek 4-6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0407.png
Figure 4-7.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105606Z" creationid="Prikryl" creationdate="20151023T105606Z">
        <seg>Insert 18333fig0407.png
Obrázek 4-7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0408.png
Figure 4-8.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105619Z" creationid="Prikryl" creationdate="20151023T105619Z">
        <seg>Insert 18333fig0408.png
Obrázek 4-8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0409.png
Figure 4-9.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105626Z" creationid="Prikryl" creationdate="20151023T105626Z">
        <seg>Insert 18333fig0409.png
Obrázek 4-9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0410.png
Figure 4-10.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105634Z" creationid="Prikryl" creationdate="20151023T105634Z">
        <seg>Insert 18333fig0410.png
Obrázek 4-10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0411.png
Figure 4-11.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110909Z" creationid="Prikryl" creationdate="20151023T110909Z">
        <seg>Insert 18333fig0411.png
Obrázek 4-11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0412.png
Figure 4-12.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110914Z" creationid="Prikryl" creationdate="20151023T110914Z">
        <seg>Insert 18333fig0412.png
Obrázek 4-12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0413.png
Figure 4-13.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110918Z" creationid="Prikryl" creationdate="20151023T110918Z">
        <seg>Insert 18333fig0413.png
Obrázek 4-13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0414.png
Figure 4-14.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110922Z" creationid="Prikryl" creationdate="20151023T110922Z">
        <seg>Insert 18333fig0414.png
Obrázek 4-14.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0415.png
Figure 4-15.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110926Z" creationid="Prikryl" creationdate="20151023T110926Z">
        <seg>Insert 18333fig0415.png
Obrázek 4-15.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0501.png
Figure 5-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110932Z" creationid="Prikryl" creationdate="20151023T110932Z">
        <seg>Insert 18333fig0501.png
Obrázek 5-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0502.png
Figure 5-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110942Z" creationid="Prikryl" creationdate="20151023T110942Z">
        <seg>Insert 18333fig0502.png
Obrázek 5-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0503.png
Figure 5-3.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T110946Z" creationid="Prikryl" creationdate="20151023T110946Z">
        <seg>Insert 18333fig0503.png
Obrázek 5-3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0504.png
Figure 5-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220444Z" creationid="Prikryl" creationdate="20151023T220444Z">
        <seg>Insert 18333fig0504.png
Obrázek 5-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0505.png
Figure 5-5.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220519Z" creationid="Prikryl" creationdate="20151023T220519Z">
        <seg>Insert 18333fig0505.png
Obrázek 5-5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0506.png
Figure 5-6.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220529Z" creationid="Prikryl" creationdate="20151023T220529Z">
        <seg>Insert 18333fig0506.png
Obrázek 5-6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0507.png
Figure 5-7.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220543Z" creationid="Prikryl" creationdate="20151023T220543Z">
        <seg>Insert 18333fig0507.png
Obrázek 5-7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0508.png
Figure 5-8.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220554Z" creationid="Prikryl" creationdate="20151023T220554Z">
        <seg>Insert 18333fig0508.png
Obrázek 5-8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0509.png
Figure 5-9.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220621Z" creationid="Prikryl" creationdate="20151023T220621Z">
        <seg>Insert 18333fig0509.png
Obrázek 5-9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0510.png
Figure 5-10.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220638Z" creationid="Prikryl" creationdate="20151023T220638Z">
        <seg>Insert 18333fig0510.png
Obrázek 5-10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0511.png
Figure 5-11.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220642Z" creationid="Prikryl" creationdate="20151023T220642Z">
        <seg>Insert 18333fig0511.png
Obrázek 5-11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0512.png
Figure 5-12.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220704Z" creationid="Prikryl" creationdate="20151023T220704Z">
        <seg>Insert 18333fig0512.png
Obrázek 5-12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0513.png
Figure 5-13.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220746Z" creationid="Prikryl" creationdate="20151023T220746Z">
        <seg>Insert 18333fig0513.png
Obrázek 5-13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0514.png
Figure 5-14.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220750Z" creationid="Prikryl" creationdate="20151023T220750Z">
        <seg>Insert 18333fig0514.png
Obrázek 5-14.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0515.png
Figure 5-15.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220754Z" creationid="Prikryl" creationdate="20151023T220754Z">
        <seg>Insert 18333fig0515.png
Obrázek 5-15.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0516.png
Figure 5-16.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220936Z" creationid="Prikryl" creationdate="20151023T220936Z">
        <seg>Insert 18333fig0516.png
Obrázek 5-16.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0517.png
Figure 5-17.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220946Z" creationid="Prikryl" creationdate="20151023T220946Z">
        <seg>Insert 18333fig0517.png
Obrázek 5-17.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0518.png
Figure 5-18.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220955Z" creationid="Prikryl" creationdate="20151023T220955Z">
        <seg>Insert 18333fig0518.png
Obrázek 5-18.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0519.png
Figure 5-19.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221413Z" creationid="Prikryl" creationdate="20151023T221413Z">
        <seg>Insert 18333fig0519.png
Obrázek 5-19.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0520.png
Figure 5-20.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221417Z" creationid="Prikryl" creationdate="20151023T221417Z">
        <seg>Insert 18333fig0520.png
Obrázek 5-20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0521.png
Figure 5-21.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221420Z" creationid="Prikryl" creationdate="20151023T221420Z">
        <seg>Insert 18333fig0521.png
Obrázek 5-21.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0522.png
Figure 5-22.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221424Z" creationid="Prikryl" creationdate="20151023T221424Z">
        <seg>Insert 18333fig0522.png
Obrázek 5-22.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0523.png
Figure 5-23.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221428Z" creationid="Prikryl" creationdate="20151023T221428Z">
        <seg>Insert 18333fig0523.png
Obrázek 5-23.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0524.png
Figure 5-24.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221431Z" creationid="Prikryl" creationdate="20151023T221431Z">
        <seg>Insert 18333fig0524.png
Obrázek 5-24.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0525.png
Figure 5-25.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221434Z" creationid="Prikryl" creationdate="20151023T221434Z">
        <seg>Insert 18333fig0525.png
Obrázek 5-25.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0526.png
Figure 5-26.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221437Z" creationid="Prikryl" creationdate="20151023T221437Z">
        <seg>Insert 18333fig0526.png
Obrázek 5-26.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0527.png
Figure 5-27.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221456Z" creationid="Prikryl" creationdate="20151023T221449Z">
        <seg>Insert 18333fig0527.png
Obrázek 5-27.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0601.png
Figure 6-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221608Z" creationid="Prikryl" creationdate="20151023T221608Z">
        <seg>Insert 18333fig0601.png
Obrázek 6-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0701.png
Figure 7-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090323Z" creationid="Prikryl" creationdate="20151024T090311Z">
        <seg>Insert 18333fig0701.png
Obrázek 7-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0702.png
Figure 7-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090747Z" creationid="Prikryl" creationdate="20151024T090740Z">
        <seg>Insert 18333fig0702.png
Obrázek 7-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0703.png
Figure 7-3.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090751Z" creationid="Prikryl" creationdate="20151024T090751Z">
        <seg>Insert 18333fig0703.png
Obrázek 7-3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0901.png
Figure 9-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T173100Z" creationid="Prikryl" creationdate="20151024T091536Z">
        <seg>Insert 18333fig0901.png
Obrázek 9-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0902.png
Figure 9-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091602Z" creationid="Prikryl" creationdate="20151024T091542Z">
        <seg>Insert 18333fig0902.png
Obrázek 9-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0903.png
Figure 9-3.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091627Z" creationid="Prikryl" creationdate="20151024T091627Z">
        <seg>Insert 18333fig0903.png
Obrázek 9-3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Insert 18333fig0904.png
Figure 9-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091649Z" creationid="Prikryl" creationdate="20151024T091649Z">
        <seg>Insert 18333fig0904.png
Obrázek 9-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Installing Git on Windows is very easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Instalace systému Git v OS Windows je velice nenáročná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Installing Gitolite is very easy, even if you don’t read the extensive documentation that comes with it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Instalace Gitolite je velmi jednoduchá a to i když si nepřečtete obsáhlou dokumentaci, která je k dispozici.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Installing Gitosis isn’t the simplest task ever, but it’s not too difficult.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Instalace nástroje Gitosis sice nepatří mezi nejsnazší, ale není ani příliš složitá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of "I added tests for" or "Adding tests for," use "Add tests for."
Here is a template originally written by Tim Pope at tpope.net:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T111113Z" creationid="Prikryl" creationdate="20151023T111113Z">
        <seg>Místo „I added tests for“ nebo „Adding tests for“ používejte raději „Add tests for“. Zde uvádíme vzor, jehož autorem je Tim Pope a v originále je k nalezení na stránkách tpope.net:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of "updated README formatting and added blame", you want to split it into two commits: "updated README formatting" for the first, and "added blame" for the second.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revizi „updated README formatting and added blame“ chcete rozdělit do dvou jiných: „updated README formatting“ jako první a „added blame“ jako druhou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of being primarily based on the project, GitHub is user-centric.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ten tu není založen primárně na názvu projektu, ale na uživateli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of commits that look like this</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revize už nebudou mít tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of forking the project and pushing to your own writable version, you generate e-mail versions of each commit series and e-mail them to the developer mailing list:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo toho, abyste rozštěpili projekt a odeslali své změny do vlastní zapisovatelné verze, vygenerujete e-mailovou verzi každé série revizí a pošlete je e-mailem do poštovní konference vývojářů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of getting the diff output on the command line, Git fires up P4Merge, which looks something like Figure 7-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstup příkazu diff se nezobrazí na příkazovém řádku, ale Git spustí program P4Merge v podobě, jak je zachycen na obrázku 7-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it (see Figure 3-17).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git tentokrát neposune ukazatel větve vpřed, ale vytvoří nový snímek jako výsledek tohoto třícestného sloučení a automaticky vytvoří novou revizi, která bude na snímek ukazovat (viz obrázek 3-17).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of reading from stdin, this script takes three arguments: the name of the reference (branch), the SHA-1 that reference pointed to before the push, and the SHA-1 the user is trying to push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento skript nenačítá data ze standardního vstupu, místo nich používá tři jiné parametry: název reference (větve), hodnotu SHA-1, na niž reference ukazovala před odesláním, a hodnotu SHA-1, kterou se uživatel pokouší odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead of writing your own Atom-generating code, you decide to use a library.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo abyste psali vlastní zdrojový kód ke kanálům Atom, rozhodnete se použít knihovnu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead, Git records it as a particular commit from that repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Místo toho si Git zaznamená konkrétní revizi z tohoto repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead, Git thinks of its data more like a set of snapshots of a mini filesystem.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Chápe je spíše jako sadu snímků (snapshots) vlastního malého systému souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instead, you must run `git diff-tree` with the branch you want to compare to:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto případě je třeba zadat příkaz `git diff-tree` a větev, s níž chcete srovnání provést:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Instructions for a new repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Instrukce k novému repozitáři</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Integration-manager workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracovní postup s integračním manažerem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Is a lieutenant system in place, and do you have to submit your work to them first?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsou součástí systému poručíci a musíte všechnu svou práci odesílat nejprve jim?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Is it centralized, with each developer having equal write access to the main codeline?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Probíhá vývoj centralizovaně, má každý vývojář stejné oprávnění pro zápis do hlavní linie kódu?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It adds a section to your `.git/config` file, specifying the name of the remote (`origin`), the URL of the remote repository, and the refspec for fetching:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte tím novou část do souboru `.git/config`, určíte název vzdáleného serveru (`origin`), URL vzdáleného repozitáře a refspec pro vyzvednutí dat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It adds, removes, and modifies files automatically to make sure your working copy is what the branch looked like on your last commit to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Automaticky budou přidány, odstraněny a upraveny soubory tak, aby byla vaše pracovní kopie totožná se stavem větve v okamžiku, kdy jste na ni zapsali poslední revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also allows you to assign a new permission mode (`C`) which enables users to create repositories based on such wild cards, automatically assigns ownership to the specific user who created it, allows him/her to hand out `R` and `RW` permissions to other users to collaborate, etc.  Again, please see the documentation for details.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T171723Z" creationid="Prikryl" creationdate="20151023T203029Z">
        <seg>Umožní nám též přidělit nový režim oprávnění (`C`), který uživatelům povoluje vytvářet repozitáře popsané zástupnými znaky, automaticky přidělí vlastnictví konkrétnímu uživateli, který jej vytvořil, umožní mu přidělit oprávnění `R` a `RW` dalším spolupracovníkům atd. Podrobnosti opět hledejte v dokumentaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also handles file adds, deletes, and renames if they’re described in the `git diff` format, which `patch` won’t do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poradí si také s přidanými, odstraněnými a přejmenovanými soubory, jsou-li popsány ve formátu `git diff`, což příkaz `patch` nedělá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also lists all the remote references it has pulled down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Součástí výpisu jsou také všechny vzdálené reference, které příkaz stáhl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also puts a summary of the information at the end.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zároveň vloží na konec výpisu shrnutí těchto informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also requires firewall access to port 9418, which isn’t a standard port that corporate firewalls always allow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyžaduje rovněž povolení přístupu k portu 9418 skrz firewall. Tento port nepatří mezi standardní porty, které by firemní firewally vždy povolovaly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also shows you which remote branches on the server you don’t yet have, which remote branches you have that have been removed from the server, and multiple branches that are automatically merged when you run `git pull`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz vám také oznámí, které vzdálené větve na serveru ještě nemáte, které vzdálené větve máte, ale ze serveru už byly odstraněny, a několik větví, které budou automaticky sloučeny, jestliže spustíte příkaz `git pull`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It also still looks for /etc/gitconfig, although it’s relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>I ve Windows se hledá soubor `/etc/gitconfig`, který je ale umístěn relativně v kořeni MSys, tedy vůči místu, do kterého jste se po spuštění instalačního programu rozhodli Git nainstalovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It can look for four primary whitespace issues — two are enabled by default and can be turned off, and two aren’t enabled by default but can be activated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může vyhledávat čtyři základní chyby tohoto typu – dvě funkce jsou ve výchozím nastavení zapnuty a lze je vypnout, dvě nejsou zapnuty, avšak lze je aktivovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It cannot, however, replace the enormous amount of [documentation][gltoc] that Gitolite comes with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nemůže ale nahradit ohromný objem [dokumentace][gltoc], která se s Gitolite dodává.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It contains tabs to different aspects of your projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obsahuje několik záložek k různým aspektům vašich projektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It does this so you don’t accidentally begin including generated binary files or other files that you did not mean to include.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu se nemůže stát, že budou do revizí nedopatřením zahrnuty vygenerované binární soubory nebo jiné soubory, které si nepřejete zahrnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It doesn’t take any parameters, but you can easily get the last commit by running `git log -1 HEAD`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nepoužívá žádné parametry, ale spuštěním příkazu `git log -1 HEAD` lze snadno zobrazit poslední revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It essentially rewinds the work you’ve done in your testing branch temporarily so you can go in a different direction.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V podstatě dočasně vrátíte všechny změny, které jste provedli ve větvi testing, a vydáte se jiným směrem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It generally takes a lot longer to clone or fetch from the repository, and you often have a lot more network overhead and transfer volume over HTTP than with any of the other network protocols.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Klonovat nebo vyzvedávat data z repozitáře trvá v případě protokolu HTTP obecně mnohem déle a vyžádá si většinou podstatně větší režii síťových operací a objem přenášených dat, než je tomu u ostatních síťových protokolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It gets a list of all the commits you’re about to rewrite and checks whether they exist in any of your remote references.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Použije seznam všech revizí, které hodláte přepsat, a ověří, zda neexistují už v některé z vašich vzdálených referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It has paused the process while you resolve the conflict.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prozatím pozastavil celý proces do doby, než konflikt vyřešíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is also the case that many Linux distributions contain very old packages; so unless you’re on a very up-to-date distro or are using backports, installing from source may be the best bet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skutečností také je, že mnoho linuxových distribucí obsahuje velmi staré balíčky. Takže pokud nepoužíváte velmi čerstvou distribuci, nebo pokud záměrně používáte starší verzi, bývá instalace ze zdrojových souborů nejlepší volbou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is easy to forget which directory you’re in and accidentally write to the wrong file or copy over files you don’t mean to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Člověk snadno zapomene, ve kterém adresáři se právě nachází, a nedopatřením začne zapisovat do nesprávného souboru nebo přepíše nesprávné soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It is very difficult to get the system to do anything that is not undoable or to make it erase data in any way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Přimět systém, aby udělal něco, co nelze vzít zpět, nebo aby smazal jakákoli data, je velice obtížné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It keeps a special pointer called HEAD.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá speciální ukazatel zvaný HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lets you edit the default message before the commit author sees it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Umožňuje upravit výchozí zprávu dřív, než se zobrazí autorovi revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lists the URL for the remote repository as well as the tracking branch information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bude obsahovat adresu URL vzdáleného repozitáře a informace ke sledování větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lists the changes you’ve staged on the left and unstaged changes on the right.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vypíše všechny změny, které jste připravili k zapsání, na levé straně, nepřipravené změny na pravé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lists the oldest at the top, rather than the newest, because that’s the first one it will replay.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Seznam uvádí nejstarší revizi nahoře z toho důvodu, že to bude první revize, kterou příkaz přehraje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It lists the shortnames of each remote handle you’ve specified.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systém vypíše krátké názvy, přes které se se vzdálenými repozitáři manipuluje, a které jste dříve určili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It looks basically like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V principu vypadá asi takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It looks like the bottom commit is the one you lost, so you can recover it by creating a new branch at that commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zdá se, že revize úplně dole je hledanou ztracenou revizí. Můžete ji obnovit tak, že na ní vytvoříte novou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vypadá například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git díky tomu znovu zkoumá skoro každý aspekt správy verzí, které ostatní systémy kopírovaly z předchozí generace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It may be easier to remember the `~3` because you’re trying to edit the last three commits; but keep in mind that you’re actually designating four commits ago, the parent of the last commit you want to edit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snazší k zapamatování je varianta s výrazem `~3`, neboť se pokoušíte upravit poslední tři revize. Nezapomeňte ale, že tím ve skutečnosti označujete čtvrtou revizi od konce, tedy rodiče poslední revize, kterou chcete upravit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It may be helpful to think of your branches as silos.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větve si můžeme představit jako zásobníky</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It means that at the core of Git is a simple key-value data store.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znamená to, že v jádru systému Git se nachází jednoduché úložiště dat, ke kterému lze přistupovat pomocí klíčů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It moved the HEAD pointer back to point to the `master` branch, and it reverted the files in your working directory back to the snapshot that `master` points to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přemístil ukazatel `HEAD` zpět, takže nyní ukazuje na větev `master`, a vrátil soubory ve vašem pracovním adresáři zpět ke snímku, na nějž větev `master` ukazuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It must run its own daemon, which is custom — we’ll look at setting one up in the “Gitosis” section of this chapter — it requires `xinetd` configuration or the like, which isn’t always a walk in the park.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyžaduje spuštění vlastního démona – na jeho nastavení se podíváme v části „Gitosis“ této kapitoly – a dále konfiguraci `xinetd` nebo podobnou, což není zrovna procházka růžovou zahradou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It often happens that while working on one project, you need to use another project from within it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Často se stává, že pracujete na jednom projektu, ale na chvíli si potřebujete odskočit do jiného.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It performs a three-way merge between the two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2), creating a new snapshot (and commit), as shown in Figure 3-28.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ten provede třícestné sloučení mezi dvěma posledními snímky (C3 a C4) a jejich nejmladším společným předkem (C2), přičemž vytvoří nový snímek (a novou revizi) – viz obrázek 3-28.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It records the snapshots and then tries to figure out what was renamed implicitly, after the fact.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaznamenává snímky a poté se snaží zjistit, co bylo později implicitně přejmenováno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It rewrites every commit object downstream from the earliest tree you have to modify to remove a large file reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepisují se všechny objekty revizí nacházejících se dál od vašeho nejstaršího objektu stromu, který musíte při odstraňování odkazu na velký soubor upravovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It sends all the objects it already has with "have" and then the SHA.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Objekty, které už vlastní, uvádí kombinací výrazu „have“ (mám) a hodnoty SHA.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It should be fairly straightforward to determine which solution or combination of solutions is appropriate for you and your organization.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď už byste se měli umět rozhodnout, které řešení nebo jaká kombinace řešení se pro vás a pro vaši organizaci hodí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It shows you a list of your staged files, and you can select the ones for which you would like to see the staged diff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz zobrazí seznam připravených souborů. Můžete vybrat ty soubory, pro něž chcete zobrazit rozdíly připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It shows you that a couple of lines are staged and a couple are unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oznamuje vám, že několik řádků je připravených k zapsání a několik není.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It shows you that the 'scott' user — the user with whose public key you initialized Gitosis — is the only one who has access to the `gitosis-admin` project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato informace znamená, že uživatel 'scott' – ten, jehož veřejným klíčem jste inicializovali Gitosis – je jediným uživatelem, který má přístup k projektu `gitosis-admin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It shows you what commit was the last to modify each line of any file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukáže vám, při které revizi byly jednotlivé řádky každého souboru naposledy změněny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It starts with the 4 bytes specifying how much data is following, then the command to run followed by a null byte, and then the server’s hostname followed by a final null byte.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace začínají 4 byty, které uvádějí, jaké množství dat následuje; po nich následuje příkaz, který má být spuštěn, nulový byte, název hostitelského serveru a na závěr další nulový byte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It summarizes all the commits in the range you give it; for example, the following gives you a summary of all the commits since your last release, if your last release was named v1.0.1:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz shrne všechny revize v zadaném rozmezí. Například následující příkaz zobrazí shrnutí všech revizí od posledního vydání (pokud bylo vaše poslední vydání pojmenováno v1.0.1):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes a list of references that are being pushed from stdin; if it exits non-zero, none of them are accepted.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript používá seznam referencí, které jsou odesílány ze standardního vstupu stdin. Je-li návratová hodnota nenulová, nebude ani jedna z nich přijata.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes a single argument: the name of the temporary file that contains the proposed commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá jediný parametr: název dočasného souboru s požadovaným tvarem zprávy k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes no arguments and is run after the patch is applied, so you can use it to inspect the snapshot before making the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nepoužívá žádné parametry a spouští se až po aplikaci záplaty, takže ho můžete využít k ověření snímku před zapsáním revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes only a few minutes to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celý postup nezabere víc než pár minut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes quite a few commands, so you’ll learn about the common ones while going through a few small workflows.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je jich docela dost, takže se na několika modelových postupech seznámíme s těmi nejběžnějšími.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes the Git repository by itself, without a working directory, and creates a directory specifically for it alone.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oba vezmou samotný repozitář Git (bez pracovního adresáře) a vytvoří pro něj samostatný adresář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes the patch that was introduced in a commit and tries to reapply it on the branch you’re currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při této operaci vezme systém záplatu, která byla provedena v dané revizi, a pokusí se ji znovu aplikovat na větev, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It takes the same stdin data as the `pre-receive` hook.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá stejná data ze standardního vstupu jako zásuvný modul `pre-receive`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It tells you pretty explicitly how to discard the changes you’ve made (at least, the newer versions of Git, 1.6.1 and later, do this — if you have an older version, we highly recommend upgrading it to get some of these nicer usability features).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výpis vám sděluje, jak zahodit změny (discard changes), které jste provedli (přinejmenším tak činí novější verze systému Git, od verze 1.6.1; pokud máte starší verzi, doporučujeme ji aktualizovat, čímž získáte některé z těchto vylepšených funkcí).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It tells you the SHA-1 of the first bad commit and show some of the commit information and which files were modified in that commit so you can figure out what happened that may have introduced this bug:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sdělí vám SHA-1 první revize s chybou a zobrazí některé další informace o revizi a o tom, které soubory byly v této revizi změněny. Zjistíte tak, co bylo součástí revize a co může způsobovat hledanou chybu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It tries to run a command on the remote server via an SSH call that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na vzdáleném serveru se pokusí spustit příkaz prostřednictvím volání SSH:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out that Git stages a file exactly as it is when you run the `git add` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Věc se má tak, že Git po spuštění příkazu `git add` připraví soubor k zapsání přesně ve tvaru, v jakém se nachází v daném okamžiku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out that it can.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A podívejme, ono to jde.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out that you can write your own filters for doing substitutions in files on commit/checkout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak zjistíte, můžete pro substituce v souborech určených k zapsání/checkoutu napsat i vlastní filtry.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out there is no issue here, and you tell Git that by typing `git bisect good` and continue your journey:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukáže se, že na této revizi k problému nedochází, a tak to systému Git sdělíte příkazem `git bisect good` a budete v hledání pokračovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It turns out you can do this fairly well using Git attributes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomínejme však na atributy Git, v této situaci vám odvedou nanahraditelnou službu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používá stejný mechanismus přenosu dat jako protokol SSH, na rozdíl od něj ale není zpomalován šifrováním a ověřováním identity (autentizací).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It will also use these values to help you when you apply patches with `git apply`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git se těmito hodnotami řídí také při aplikaci záplat příkazem `git apply`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It will start at the commit you specify on the command line (`HEAD~3`) and replay the changes introduced in each of these commits from top to bottom.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začne na revizi, kterou jste označili na příkazovém řádku (`HEAD~3`), a přehraje změny provedené v každé z těchto revizí od shora dolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It won’t create a commit for you — after running it, you must stage and commit the changes introduced manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto příkazem ostatně ani nezapíšete revizi, po jeho spuštění budete muset připravit a zapsat provedené změny ručně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládání funguje takto: systém najde společného předka obou větví (větve, na níž se nacházíte, a větve, na kterou přeskládáváte), provede příkaz diff pro všechny revize větve, na níž se nacházíte, uloží zjištěné rozdíly do dočasných souborů, vrátí aktuální větev na stejnou revizi jako větev, na kterou přeskládáváte, a nakonec po jedné aplikuje všechny změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s a good way to sneak Git into the corporate environment and help your fellow developers become more efficient while you lobby to get the infrastructure changed to support Git fully.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jistě nebude od věci, jestliže se pokusíte propašovat Git do prostředí vaší společnosti a lobbováním za změnu infrastruktury směrem k plné podpoře systému Git pomůžete svým kolegům-vývojářům k vyšší efektivitě práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s almost identical to running a `patch -p1` command to apply the patch, although it’s more paranoid and accepts fewer fuzzy matches than patch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to téměř stejné, jako byste k aplikaci záplaty použili příkaz `patch -p1`. Tento postup je však přísnější a nepřijímá tolik přibližných shod jako příkaz patch.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also a good idea to use the imperative present tense in these messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytváříte-li zprávy k revizím v angličtině, často se také doporučuje používat rozkazovací způsob.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also common to add a `last` command, like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Běžně se také přidává příkaz `last`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also important to mention that this isn’t necessarily the fastest option if you’re using a shared mount of some kind.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zapomenout bychom neměli ani na to, že používáte-li sdílené připojení určitého druhu, nemusí být tato možnost vždy nutně nejrychlejší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also possible for Git to stage certain parts of files and not the rest.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git také může připravit k zapsání pouze určité části souborů a ignorovat jejich zbytek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also possible to take a series of commits and squash them down into a single commit with the interactive rebasing tool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další možností, jak lze využít interaktivního nástroje přeskládání, je komprimace série revizí do jediné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also probably the most difficult protocol to set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravděpodobně se také jedná o protokol s nejobtížnějším nastavením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s also very similar in many ways to CVS, which was the big boy of the source-control world before that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V mnoha ohledech je velmi podobný systému CVS, který platil ve světě správy verzí před příchodem systému Subversion za nepřekonatelný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s best to have a clean working state when you switch branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při přepínání větví je ideální, pokud máte čistý pracovní stav.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s easiest to push the remote branch you’re working on up to your repository, rather than merging into your master branch and pushing that up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Lepším řešením bude odeslat vzdálenou větev, na níž pracujete, do svého repozitáře, než ji začlenit do hlavní větve a tu pak celou odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s easiest to use a Linux server for it — these examples use a stock Ubuntu 8.10 server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejjednodušší je k ní použít linuxový server – tyto příklady používají běžný Ubuntu server 8.10.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s fine to keep that identifier there, in case you need to reference the Perforce change number later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je dobré ponechat tu identifikátor pro případ, že budete někdy v budoucnu potřebovat odkázat na číslo změny Perforce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s generally a good idea to do this in a testing branch and then hard-reset your master branch after you’ve determined the outcome is what you really want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou se vyplatí provádět toto všechno v testovací větvi a k tvrdému resetu hlavní větve přistoupit až poté, co se ujistíte, že výsledek odpovídá vašim očekáváním.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s generally easier to think about them as work silos, where sets of commits graduate to a more stable silo when they’re fully tested (see Figure 3-19).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snáze si je můžeme představit jako pracovní zásobníky, v nichž se sada revizí dostává do stabilnějšího zásobníku, když úspěšně absolvovala testování (viz obrázek 3-19).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s generally recommended that you create annotated tags so you can have all this information; but if you want a temporary tag or for some reason don’t want to keep the other information, lightweight tags are available too.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obecně se doporučuje používat v zájmu úplnosti informací spíše anotované značky. Pokud však vytváříte pouze dočasnou značku nebo z nějakého důvodu nechcete zadávat podrobnější informace, můžete využívat i prosté značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s generally undesirable for the Git protocol to be the only access to your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou není žádoucí, aby protokol Git tvořil jediný přístup k vašemu projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou se používá u obřích projektů se stovkami spolupracovníků. Možná nejznámějším příkladem je vývoj jádra Linuxu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note how this tool namespaces your remote references differently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Doplňme také, že tento nástroj odlišně přiřazuje jmenný prostor vzdálených referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that `git diff` by itself doesn’t show all changes made since your last commit — only changes that are still unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomu je třeba poznamenat, že příkaz `git diff` sám o sobě nezobrazí všechny změny provedené od poslední revize, ale jen změny, které zatím nejsou připraveny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that anything your script prints to stdout will be transferred to the client.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli bychom také upozornit, že všechno, co váš skript vypíše do standardního výstupu stdout, bude přeneseno také klientovi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that it doesn’t check you out into that branch; if you commit at this point, that commit will go to `trunk` on the server, not `opera`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli bychom také dodat, že příkaz neprovede automaticky checkout dané větve. Pokud nyní zapíšete revizi, dostane se do větve `trunk` na serveru, ne do větve `opera`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that nothing is checked out — you don’t have any files in your working directory at first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli bychom také dodat, že nejsou načtena žádná data, zatím neproběhl checkout žádných souborů do pracovního adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that the `fetch` command pulls the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli bychom zmínit, že příkaz `fetch` stáhne data do vašeho lokálního repozitáře. V žádném případě ale data automaticky nesloučí s vaší prací ani jinak nezmění nic z toho, na čem právě pracujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that the reflog information is strictly local — it’s a log of what you’ve done in your repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli bychom také doplnit, že informace záznamu reflog jsou čistě lokální, vztahují se pouze na to, co jste provedli ve svém repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that these commits are listed in the opposite order than you normally see them using the `log` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady bychom chtěli upozornit, že revize jsou uvedeny v opačném pořadí, než jste zvyklí v případě příkazu `log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that this file is version-controlled with your other files, like your `.gitignore` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za zmínku stojí, že je tento soubor verzován spolu s ostatními soubory, podobně jako třeba soubor `.gitignore`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that this is literally all you need to do to run a useful Git server to which several people have access — just add SSH-able accounts on a server, and stick a bare repository somewhere that all those users have read and write access to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A to je skutečně vše, co je třeba ke spuštění serveru Git, k němuž bude mít přístup více lidí – na server stačí přidat SSH účty a umístit holý repozitář někam, kam budou mít všichni uživatelé oprávnění ke čtení i zápisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that when you do a fetch that brings down new remote branches, you don’t automatically have local, editable copies of them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady je důležité upozornit, že pokud vyzvedáváte data a stáhnete s nimi i nové vzdálené větve, nemáte automaticky jejich lokální, editovatelné kopie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that when you’re using `git svn`, you’re interacting with Subversion, which is a system that is far less sophisticated than Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto místě bych rád upozornil, že použijete-li příkaz `git svn`, zahajujete interakci se systémem Subversion, nástrojem zdaleka ne tak sofistikovaným jako Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to note that with the exception of the HTTP protocols, all of these require Git to be installed and working on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Neměli bychom zamlčet ani to, že s výjimkou protokolu HTTP všechny vyžadují, aby byl na serveru nainstalován a zprovozněn systém Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to notice that it isn’t the SHA of the commit, but of the blob itself:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je tedy důležité si uvědomit, že se nejedná o SHA revize, ale SHA samotného blobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to remember that unlike Git, which requires you to merge upstream work you don’t yet have locally before you can push, `git svn` makes you do that only if the changes conflict.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za zmínku stojí, že na rozdíl od systému Git, který před přijetím odesílaných dat vyžaduje, abyste začlenili práci na serveru, kterou ještě nemáte lokálně, nástroj `git svn` si toto vyžádá pouze v případě, že změny navzájem kolidují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s important to remember when you’re doing all this that these branches are completely local.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při tom všem, co nyní děláte, je důležité mít na paměti, že všechny tyto větve jsou čistě lokální.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s incredibly fast, it’s
	 very efficient with large projects, and it has an incredible branching
	-system for non-linear development.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090409Z" creationid="Prikryl" creationdate="20151024T090409Z">
        <seg>It’s incredibly fast, it’s
	 very efficient with large projects, and it has an incredible branching
	-system for non-linear development.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s incredibly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development (See Chapter 3).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Je extrémně rychlý, velmi efektivně pracuje i s velkými projekty a nabízí skvělý systém větvení pro nelineární způsob vývoje (viz kapitola 3).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s like a branch reference, but it never moves — it always points to the same commit but gives it a friendlier name.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podobá se také referenci větve, jen se nikdy nepřesouvá. Stále ukazuje na stejnou revizi, jen jí dává hezčí jméno.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s like a very small rebase — don’t amend your last commit if you’ve already pushed it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to něco jako malé přeskládání – neopravujte poslední revizi, pokud jste ji už odeslali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s more like the last known state of the commits on the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se tak spíše o poslední známý stav revizí na serveru Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s much easier to create Git objects this way than to run the raw Git commands or try to write the raw objects (see Chapter 9 for more information).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je podstatně jednodušší vytvořit objekty Git tímto způsobem než spouštět syrové příkazy Git či se pokoušet zapsat syrové objekty (podrobnější informace v kapitole 9).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s nice that you can fetch namespaced references that way, but how does the QA team get their branches into a `qa/` namespace in the first place?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je sice hezké, že můžete tímto způsobem vyzvedávat reference na základě jmenného prostoru, jenže jak vůbec QA tým dostane své větve do jmenného prostoru `qa/`?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s now time to learn some Git basics.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejvyšší čas podívat se na základy práce se systémem Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s often helpful to get a review of all the commits that are in this branch but that aren’t in your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Často může být užitečné získat přehled o všech revizích, které jsou obsaženy v určité větvi, ale dosud nejsou ve vaší hlavní větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s possible to make Git push over HTTP as well, although that technique isn’t as widely used and requires you to set up complex WebDAV requirements.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odesílat data do repozitáře Git je možné také přes protokol HTTP, avšak tento způsob není příliš rozšířený a vyžaduje nastavení komplexních požadavků protokolu WebDAV.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s pretty easy on your part.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není to nic obtížného.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s pushed and pulled with the rest of your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor se odesílá a stahuje se zbytkem projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s sometimes referred to as the index, but it’s becoming standard to refer to it as the staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Soubor se někdy označuje také anglickým výrazem „index“, ale oblast připravených změn (staging area) je už dnes termín běžnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s strange, but it works.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to sice trochu zvláštní, ale opravdu to tak funguje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s the most popular open source VCS and has been around for nearly a decade.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Subversion je nejpopulárnějším systémem VCS s otevřeným zdrojovým kódem a využívá se už téměř deset let.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s time to e-mail your mailing list of people who want to know what’s happening in your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní je na čase obeslat e-mailem poštovní konferenci lidí, kteří chtějí vědět, co je ve vašem projektu nového.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s used to inspect the snapshot that’s about to be committed, to see if you’ve forgotten something, to make sure tests run, or to examine whatever you need to inspect in the code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Slouží ke kontrole snímku, který hodláte zapsat. Může zjišťovat, zda jste na něco nezapomněli, spouštět kontrolní testy nebo prověřovat cokoli jiného, co potřebujete ve zdrojovém kódu zkontrolovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s used to pull in topic branches (short-lived branches, like your earlier `iss53` branch) when they’re ready, to make sure they pass all the tests and don’t introduce bugs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do ní se vtahují tématické větve (ty dočasné, jako byla vaše větev `iss53`) ve chvíli, kdy jsou připravené a je jisté, že projdou všemi testy a nezavlečou chyby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s very easy for patches or other collaborated work to introduce subtle whitespace changes because editors silently introduce them or Windows programmers add carriage returns at the end of lines they touch in cross-platform projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U záplat nebo jiné společné práce dochází u prázdných znaků velmi snadno k nepatrným změnám, které v tichosti vytvářejí editory nebo programátoři pracující ve Windows, jež vkládají v projektech z jiných platforem na konce řádků znak pro návrat vozíku (CR, http://cs.wikipedia.org/wiki/Carriage_return).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s worth mentioning that this changes your remote branch names, too.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za zmínku stojí, že tímto příkazem změníte zároveň i názvy vzdálených větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s worth noting here that the work you did in your `hotfix` branch is not contained in the files in your `iss53` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za zmínku stojí, že práce, kterou jste udělali ve větvi `hotfix`, není obsažena v souborech ve větvi `iss53`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>It’s worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than CVS or Subversion (before version 1.5), where the developer doing the merge has to figure out the best merge base for themselves.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na tomto místě bych chtěl zopakovat, že Git určuje nejvhodnějšího společného předka, který bude použit jako základna pro sloučení, automaticky. Liší se tím od systému CVS i Subversion (před verzí 1.5), kde musí vývojář při slučování najít nejvhodnější základnu pro sloučení sám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll cover aspects of each of these in a series of use cases, moving from simple to more complex; you should be able to construct the specific workflows you need in practice from these examples.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všem těmto aspektům bych se teď chtěl věnovat na sérii praktických příkladů, od těch jednodušších až po složité. Z uvedených příkladů byste si pak měli být schopni odvodit vlastní pracovní postup, který budete v praxi využívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll cover most of the major hook filenames here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalších částech se budeme věnovat většině nejvýznamnějších názvů souborů zásuvných modulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll demonstrate how to send a patch via Gmail, which happens to be the e-mail agent I use; you can read detailed instructions for a number of mail programs at the end of the aforementioned `Documentation/SubmittingPatches` file in the Git source code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Já budu dokumentovat odeslání záplaty na příkladu Gmailu, který používám jako svého e-mailového agenta. Podrobné instrukce pro celou řadu poštovních programů najdete na konci již dříve zmíněného souboru `Documentation/SubmittingPatches` ve zdrojovém kódu systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll demonstrate setting up the Perforce Visual Merge Tool (P4Merge) to do your diffs and merge resolutions, because it’s a nice graphical tool and it’s free.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Já na tomto místě ukážu, jak můžete pro zobrazení rozdílů a řešení konfliktů využít nástroj Perforce Visual Merge Tool (P4Merge). Jde o šikovný grafický nástroj a je dostupný zdarma.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll go over all these plumbing commands in detail in Chapter 9; but for now, here’s what that command gives you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všem těmto nízkoúrovňovým příkazům se budu podrobněji věnovat v kapitole 9. Pro tuto chvíli se jen podívejme, co příkazem získáme:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvedeme jejich přednosti i eventuální slabiny. Budete si moci vybrat některý z postupů nebo je navzájem kombinovat a spojovat jejich vlastnosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll use path names in the examples that work on Mac and Linux systems; for Windows, you’ll have to change `/usr/local/bin` to an executable path in your environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V příkladech budu používat označení cest platné pro systémy Mac a Linux; pro systémy Windows budete muset cestu `/usr/local/bin` nahradit cestou ke spustitelnému souboru ve vašem prostředí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ll use the Mac path for the executable; in other systems, it will be where your `p4merge` binary is installed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako cestu ke spustitelnému souboru používám cestu v systému Mac. V ostatních systémech použijte cestu k umístění, kde máte nainstalován binární soubor `p4merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>I’ve mentioned and given some demonstrations of adding remote repositories in previous sections, but here is how to do it explicitly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V předchozích částech už jsem se letmo dotkl přidávání vzdálených repozitářů. V této části se dostávám k tomu, jak přesně při přidávání postupovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica Smith (2):
	      add limit to log function
	      change log output to 30 from 25</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220924Z" creationid="Prikryl" creationdate="20151023T220924Z">
        <seg>Jessica Smith (2):
	      add limit to log function
	      change log output to 30 from 25</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica can now merge this into the work she did with `git merge`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní může Jessica začlenit tyto změny do své práce pomocí příkazu `git merge`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica doesn’t have push access to the `master` branch — only the integrators do — so she has to push to another branch in order to collaborate with John:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica nemá oprávnění pro odesílání dat do větve `master` (ten mají pouze zprostředkovatelé integrace), a proto musí své revize odeslat do jiné větve, aby mohla s Johnem spolupracovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica e-mails John to tell him that she’s pushed some work into a branch named `featureA` and he can look at it now.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica pošle Johnovi e-mail s informací, že odeslala svou práci do větve pojmenované `featureA` a že se na ni může podívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica first needs to merge those changes in with her own before she can push to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Než bude Jessica moci odeslat svou práci na server, bude do ní nejprve muset začlenit práci Josie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica thinks her topic branch is ready, but she wants to know what she has to merge her work into so that she can push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica považuje svou tematickou větev za dokončenou, ale chce vědět, do čeho má svou práci začlenit, aby mohla změny odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica wants to sync up with John, so she fetches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica chce synchronizovat svou práci s Johnem, a proto vyzvedne jeho data:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica wants to tweak something, so she commits again and then pushes this back up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica by ráda něco vylepšila, a proto vytvoří novou revizi a odešle ji zpět na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica, Josie, and John inform the integrators that the `featureA` and `featureBee` branches on the server are ready for integration into the mainline.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica, Josie a John pošlou zprávu zprostředkovatelům integrace, že větve `featureA` a `featureBee` jsou na serveru připraveny k integraci do hlavní linie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s commit history now looks something like Figure 5-13.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie revizí Jessicy bude nyní vypadat jako na obrázku 5-13.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s history after committing on a feature branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie Jessicy po zapsání revizí do větve s úkolem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s history after fetching John’s changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie Jessicy po vyzvednutí Johnových změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s history after merging John’s changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie Jessicy po začlenění Johnových změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s history after merging both her topic branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie Jessicy po začlenění obou jejích tematických větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s history after pushing all changes back to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie Jessicy po odeslání všech změn zpět na server</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s history now looks like Figure 5-8.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie revizí Jessicy teď vypadá jako na obrázku 5-8.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s initial commit history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výchozí historie revizí – Jessica</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Jessica’s repository looks like Figure 5-12.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Repozitář Jessicy vypadá jako na obrázku 5-12.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John has a reference to the changes Jessica pushed up, but he has to merge them into his own work before he is allowed to push:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John má referenci ke změnám, které odeslala Jessica, ale než bude moci sám odeslat svá data, bude muset začlenit její práci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John has to fetch Jessica’s changes and merge them in before he will be allowed to push:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John musí vyzvednout změny, které provedla Jessica, a začlenit je do své práce, než ji bude moci odeslat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John isn’t allowed to push because Jessica has pushed in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John nyní nesmí odeslat revize, protože mezitím odeslala své změny Jessica.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John tries to push his change up, too:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také John se pokusí odeslat své změny na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John’s history after pushing to the origin server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Johnova historie po odeslání revize na server origin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John’s initial repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Johnův výchozí repozitář</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>John’s repository after merging `origin/master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Johnův repozitář po začlenění větve `origin/master`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just for fun, you’ll add the first tree as a subdirectory into this one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jen pro zábavu nyní můžete přidat první strom jako podadresář do tohoto stromu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just to have a target, assume that each message has to include a string that looks like "ref: 1234" because you want each commit to link to a work item in your ticketing system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom si stanovili nějaký cíl, řekněme, že každá zpráva musí obsahovat řetězec ve tvaru „ref: 1234“, protože potřebujete, aby se každá revize vztahovala k jedné pracovní položce vašeho tiketovacího systému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Just type `git tag`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stačí zadat příkaz `git tag`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Keeping all users’ public keys in the `authorized_keys` file for access works well only for a while.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uchovávat veřejné klíče všech uživatelů v souboru `authorized_keys` není uspokojivým řešením na věčné časy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Key-based SSH authentication usually enforces security by requiring restricted rights on the involved files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Autentizace vůči SSH, která je založená na klíči, obvykle vynucuje zvýšenou bezpečnost tím, že pro zúčastněné soubory vyžaduje omezená oprávnění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Last we have the HTTP protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na konec jsme si nechali protokol HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Last, like the Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A stejně jako protokoly Git a Local je i protokol SSH výkonný, protože data jsou před přenosem upravena do co nejkompaktnější podoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Last, we’ll go over a few hosted options, if you don’t mind hosting your code on someone else’s server and don’t want to go through the hassle of setting up and maintaining your own server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nakonec se podíváme na několik možností hostování pro případ, že nebudete mít chuť podstupovat martyrium s nastavováním a správou vlastního serveru a nevadí vám umístit svůj kód na cizí server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Lastly, you have this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A na konci stojí následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let us say, in the situation above, we want engineers to be able to rewind any branch _except_ master and integ.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že ve výše uvedené situaci budeme chtít, aby skupina engineers mohla vracet změny v jakékoliv větvi _s výjimkou_ větví `master` a `integ`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s add the rest of the team.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní přidáme zbytek vašeho týmu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s assume you’ve received a few keys by e-mail and saved them to temporary files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že jste e-mailem dostali několik klíčů a uložili jste je do dočasných souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s change a file that was already tracked.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní provedeme změny v souboru, který už byl sledován.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s create a hotfix branch on which to work until it’s completed (see Figure 3-13):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořme větev s hotfixem, v níž budeme pracovat, dokud nebude oprava hotová (viz obrázek 3-13):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s do what it says:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uděláme, co nám výpis radí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s follow Jessica’s workflow as she works on her two features, collaborating in parallel with two different developers in this environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sledujme pracovní postup Jessicy pracující na dvou úkolech a spolupracující v tomto prostředí paralelně s dvěma různými vývojáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s follow the `http-fetch` process for the simplegit library:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se na proces `http-fetch` pro knihovnu „simplegit“:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s get into using some Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je načase začít systém Git aktivně používat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s get rid of it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto ho raději odstraníme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s go back to the objects database for your test Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vraťme se zpět do databáze objektů vašeho testovacího repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s go through a simple example of branching and merging with a workflow that you might use in the real world.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořme si jednoduchý příklad větvení a slučování s pracovním postupem, který můžete využít i v reálném životě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s look at an example of how rebasing work that you’ve made public can cause problems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se na malý příklad, jaké problémy může přeskládání již zveřejněných dat způsobit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s look at one more possible scenario: the maintainer has looked at work in your second branch and likes the concept but would like you to change an implementation detail.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se ještě na jeden pravděpodobnější scénář: Správce se podíval na práci ve vaší druhé větvi, váš koncept se mu líbí, ale rád by, abyste změnili jeden implementační detail.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s make a few changes and commit again:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proveďme pár změn a zapišme další revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s re-add the public keys for John, Josie, and Jessica:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidejme znovu veřejné klíče pro uživatele Johna, Josie a Jessicu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s run `git add` now to stage the `benchmarks.rb` file, and then run `git status` again:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spusťme nyní příkaz `git add`, abychom soubor `benchmarks.rb` připravili k zapsání, a potom znovu zadejme příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say that John and Jessica are working together on one feature, while Jessica and Josie are working on a second.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že John a Jessica spolupracují na jednom úkolu a Jessica a Josie spolupracují na jiném.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say the project maintainer has pulled in a bunch of other patches and tried your first branch, but it no longer cleanly merges.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že správce projektu natáhl do projektu několik jiných záplat a nyní vyzkoušel vaši první větev, jenže tu už nelze čistě začlenit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you add a new file to your project, a simple `README` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že nyní přidáte do projektu nový soubor, například soubor `README`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you create a new branch called testing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že vytvoříte novou větev a nazvete ji testing.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you decide to pull in your server branch as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že se později rozhodnete vtáhnout i větev server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you edit and stage the `README` file again and then edit the `benchmarks.rb` file without staging it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že znovu upravíte a připravíte soubor `README` a poté bez připravení upravíte soubor `benchmarks.rb`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you have a Git server on your network at `git.ourcompany.com`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že máte v síti server Git označený `git.ourcompany.com`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you just pushed out a release of your code to a production environment, you’re getting bug reports about something that wasn’t happening in your development environment, and you can’t imagine why the code is doing that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že jste právě odeslali vydání svého zdrojového kódu do produkčního prostředí, ale dostanete hlášení o chybě, která se ve vašem vývojovém prostředí nevyskytovala, a nemáte tušení, proč kód takto zlobí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s say you’ve set up a server called `git.example.com` that you have SSH access to, and you want to store all your Git repositories under the `/opt/git` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že jste nastavili server nazvaný `git.example.com`, k němuž máte SSH přístup, a všechny svoje repozitáře Git chcete uložit do adresáře `/opt/git`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s see how much space you saved.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se, kolik místa jste ušetřili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s see what it might look like when two developers start to work together with a shared repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se, jak to může vypadat, když dva vývojáři začnou spolupracovat na projektu se sdíleným repozitářem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s see why you should do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se, proč byste to měli dělat také tak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s switch back to the `master` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepněme zpět na větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s switch to the new testing branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>My můžeme přepnout na novou větev testing:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s take a minute to look at how Git stores its objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zaměřme se teď chvíli na to, jak Git ukládá své objekty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s use `gitserver` as the hostname of the server on which you’ve set up your 'git' user and repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro server, na kterém jste nastavili uživatele 'git' a repozitář, můžeme použít název hostitele `gitserver`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s walk through setting up SSH access on the server side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projděme si nastavení SSH přístupu na straně serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Let’s work from the previous example.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžeme pokračovat v našem předchozím příkladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Lieutenants merge the developers’ topic branches into their master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poručíci začleňují tematické větve vývojářů do svých hlavních větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Like many other Version Control Systems, Git has a way to fire off custom scripts when certain important actions occur.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně jako jiné systémy správy verzí přistupuje i Git k tomu, že spouští uživatelské skripty, nastane-li určitá důležitá akce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Like most VCSs, Git has the ability to tag specific points in history as being important.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně jako většina systémů VCS nabízí i Git možnost označovat v historii určitá místa, jež považujete za důležitá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Limit log functionality to the first 20</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221010Z" creationid="Prikryl" creationdate="20151023T221010Z">
        <seg>Limit log functionality to the first 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Lines starting
	# with '#' will be ignored, and an empty message aborts the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205704Z" creationid="Prikryl" creationdate="20151022T205704Z">
        <seg>Lines starting
	# with '#' will be ignored, and an empty message aborts the commit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Listing the available tags in Git is straightforward.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pořízení výpisu dostupných značek (tags) je v systému Git jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local Git commits that you haven’t dcommited don’t show up; neither do commits that people have made to the Subversion server in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezobrazuje tedy lokální revize Git, které jste nezapsali příkazem dcommit. Stejně tak nezobrazuje revize, které ostatní zapsali na server Subversion od vašeho posledního připojení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local VCS systems suffer from this same problem—whenever you have the entire history of the project in a single place, you risk losing everything.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Lokální systémy pro správu verzí trpí stejným problémem. Kdykoliv máte celou historii projektu uloženou na jednom místě, hrozí, že přijdete o vše.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Local version control diagram.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Diagram lokální správy verzí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Log says:
	Sendmail: /usr/sbin/sendmail -i jessica@example.com
	From: Jessica Smith &lt;jessica@example.com&gt;
	To: jessica@example.com
	Subject: [PATCH 1/2] added limit to log function
	Date: Sat, 30 May 2009 13:29:15 -0700
	Message-Id: &lt;1243715356-61726-1-git-send-email-jessica@example.com&gt;
	X-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty
	In-Reply-To: &lt;y&gt;
	References: &lt;y&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221041Z" creationid="Prikryl" creationdate="20151023T221041Z">
        <seg>Log says:
	Sendmail: /usr/sbin/sendmail -i jessica@example.com
	From: Jessica Smith &lt;jessica@example.com&gt;
	To: jessica@example.com
	Subject: [PATCH 1/2] added limit to log function
	Date: Sat, 30 May 2009 13:29:15 -0700
	Message-Id: &lt;1243715356-61726-1-git-send-email-jessica@example.com&gt;
	X-Mailer: git-send-email 1.6.2.rc1.20.g8c5b.dirty
	In-Reply-To: &lt;y&gt;
	References: &lt;y&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Look back at the example commit history in Figure 6-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podívejme se ještě jednou na příklad historie revizí na obrázku 6-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Looking at your Git status again, you can see that you’ve unstaged the TODO file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se nyní znovu podíváte na stav Git souboru TODO, uvidíte, že už není připraven k zapsání:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Luckily, Git provides a tool to help you send properly formatted patches via IMAP, which may be easier for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git naštěstí nabízí nástroj, který vám pomůže odeslat správně formátované patche pomocí protokolu IMAP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Luckily, `git status` tells you how to do that, too.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git status` vám naštěstí řekne, co dělat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>M 644 inline path/to/file
	data (size)
	(file contents)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091457Z" creationid="Prikryl" creationdate="20151024T091457Z">
        <seg>M 644 inline path/to/file
	data (size)
	(file contents)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Managing a complex series of parallel contributed topic branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správa komplexní série současně zpracovávaných příspěvků v tematických větvích</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Managing remote repositories includes knowing how to add remote repositories, remove remotes that are no longer valid, manage various remote branches and define them as being tracked or not, and more.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při správě vzdálených repozitářů musíte vědět, jak lze přidat vzdálený repozitář, jak odstranit vzdálený repozitář, který už není platný, jak spravovat různé vzdálené větve, jak je definovat jako sledované či nesledované a další věci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many Git developers have a workflow that embraces this approach, such as having only code that is entirely stable in their `master` branch — possibly only code that has been or will be released.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mnoho vývojářů systému Git používá pracovní postup, kdy mají ve větvi `master` pouze kód, který je stoprocentně stabilní — třeba jen kód, který byl nebo bude součástí vydání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many groups switch to Git because of this ability to have multiple teams working in parallel, merging the different lines of work late in the process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mnoho skupin přechází na systém Git právě kvůli této možnosti paralelní spolupráce několika týmů a následného slučování různých linií práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many larger projects have established procedures for accepting patches — you’ll need to check the specific rules for each project, because they will differ.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mnoho větších projektů si vytvořilo vlastní, odlišné procedury pro přijímání záplat. U každého projektu se tak budete muset informovat o konkrétních pravidlech, protože se mohou lišit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many options are useful only in edge cases that I won’t go over here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mnoho parametrů je využitelných pouze ve specifických případech, jimž se nebudu v této knize věnovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many people use Git without using any of these tips, and we won’t refer to them or assume you’ve used them later in the book; but you should probably know how to do them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mnoho uživatelů pracuje se systémem Git, aniž by tyto triky používali. V dalších částech knihy se už o nich nebudeme zmiňovat, ale asi byste měli vědět, jak jich využít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many people’s version-control method of choice is to copy files into another directory (perhaps a time-stamped directory, if they’re clever).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Uživatelé často provádějí správu verzí tím způsobem, že zkopírují soubory do jiného adresáře (pokud jsou chytří, označí adresář i příslušným datem).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Many times, when working with Git, you may want to revise your commit history for some reason.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při práci se systémem Git možná budete z nějakého důvodu čas od času potřebovat poopravit historii revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Merge branch 'experiment'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101853Z" creationid="Prikryl" creationdate="20151023T101853Z">
        <seg>Merge branch 'experiment'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Merge branch 'iss53'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103024Z" creationid="Prikryl" creationdate="20151023T103024Z">
        <seg>Merge branch 'iss53'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Merge commit 'phedders/rdocs'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221525Z" creationid="Prikryl" creationdate="20151023T221525Z">
        <seg>Merge commit 'phedders/rdocs'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Merging a branch to integrate the diverged work history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Integrace rozdělené historie sloučením větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Merging contributed topic branches into long-term integration branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začlenění tematických větví s příspěvky do dlouhodobých integračních větví</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Metadata won't give you a full representation of your file's content, but in any case it's better than nothing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Metadata vám sice neposkytnou plnou reprezentaci obsahu souboru, ale v každém případě je to lepší než nic.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Minor fixes since 1.4.2, including git-mv and git-http with alternates.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101921Z" creationid="Prikryl" creationdate="20151023T101921Z">
        <seg>Minor fixes since 1.4.2, including git-mv and git-http with alternates.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Modified means that you have changed the file but have not committed it to your database yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Změněno znamená, že v souboru byly provedeny změny, avšak soubor ještě nebyl zapsán do databáze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>More detailed explanatory text, if necessary.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215518Z" creationid="Prikryl" creationdate="20151023T215518Z">
        <seg>Podrobnější popis revize, je-li třeba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Důležitější je, že můžete použít jakýkoli způsob přejmenování a příkaz add/rm provést později, před zapsáním revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>More stable branches are generally farther down the commit history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stabilnější větve většinou leží v historii revizí níže.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most of that should be easy to follow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většina uvedeného by měla být jasná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most of the time, this command does nothing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve většině případů neprovede tento příkaz vůbec nic.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Most operations in Git only need local files and resources to operate — generally no information is needed from another computer on your network.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Většina operací v systému Git vyžaduje ke své činnosti pouze lokální soubory a zdroje a nejsou potřeba informace z jiných počítačů v síti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Move it to its rightful place</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112054Z" creationid="Prikryl" creationdate="20151023T112054Z">
        <seg>Move it to its rightful place</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Much as the `git svn log` command simulates the `svn log` command offline, you can get the equivalent of `svn annotate` by running `git svn blame [FILE]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tak jako příkaz `git svn log` simuluje příkaz `svn log` (bez nutnosti připojení), ekvivalentem příkazu `svn annotate` je provedení `git svn blame [SOUBOR]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Multiple branches pointing into the commit’s data history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Několik větví ukazujících do historie dat revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>NOTE: If you are running on Windows you’ll need to make sure that you add one extra step.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poznámka: Pokud používáte Windows, budete muset provést jeden krok navíc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Name this remote `teamone`, which will be your shortname for that whole URL (see Figure 3-25).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pojmenujte tento vzdálený server jako `teamone`, což bude zkrácený název pro celou URL adresu (viz obrázek 3-25).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Nearly every VCS has some form of branching support.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Téměř každý systém pro správu verzí podporuje do určité míry větvení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next is the Git protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším protokolem v pořadí je protokol Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next you can create a new repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako další krok následuje vytvoření nového repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next you need to turn your shell back on for the 'git' user, if you changed it to the `git-shell` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále musíte znovu zapnout shell na uživatele 'git', jestliže jste ho změnili na příkaz `git-shell`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, Gitosis wants to put its repositories under `/home/git`, which is fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Gitosis dále vyžaduje, abyste jeho repozitáře uložili do adresáře `/home/git`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, John e-mails Jessica to say he’s pushed some changes to the `featureA` branch and ask her to verify them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté pošle John Jessice e-mail, že odeslal několik změn do větve `featureA`, a poprosí ji, aby je ověřila.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, access over SSH is secure — all data transfer is encrypted and authenticated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z dalších výhod bychom měli zmínit také to, že přístup přes protokol SSH je bezpečný, veškerý přenos dat je šifrovaný a autentizovaný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, move the rest of the references under `refs/remotes` to be local branches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ze zbytku referencí vytvořte v repozitáři `refs/remotes` lokální větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, suppose your loss was for some reason not in the reflog — you can simulate that by removing `recover-branch` and deleting the reflog.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžeme ale také uvažovat situaci, že ztracené revize nebyly ve výpisu reflog k nalezení. Tento stav můžeme simulovat tak, že odstraníme větev `recover-branch` a smažeme reflog.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, the client uploads a packfile of all the objects the server doesn’t have yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako další krok nahraje klient balíčkový soubor se všemi třemi objekty, které na serveru dosud nejsou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jenže osoba, která odeslala a začlenila své změny, se rozhodne vrátit a svou práci raději přeskládat. Provede příkaz `git push --force` a přepíše historii na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, try to make each commit a logically separate changeset.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále se snažte provádět každou revizi jako logicky samostatný soubor změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, we’ll cover Git’s killer feature: its branching model.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V další kapitole se podíváme na exkluzivní funkci systému Git – na model větvení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you clone and install Gitosis from the project’s main site:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále naklonujte a nainstalujte Gitosis z hlavní stránky projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you have a hotfix to make.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní přichází na řadu hotfix.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you have to manually set the execute bit on the `post-update` script for your new control repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále je třeba ručně nastavit právo spuštění na skriptu `post-update` pro nový řídicí repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you have to tell your Gitosis server which repositories to allow unauthenticated Git server-based access to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále budete muset svému serveru Gitosis sdělit, k jakým repozitářům si přejete povolit neautentizovaný serverový přístup Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you have two more objects to retrieve — `cfda3b`, which is the tree of content that the commit we just retrieved points to; and `085bb3`, which is the parent commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte však ještě další dva objekty, které potřebujete načíst: `cfda3b`, což je strom obsahu, na nějž ukazuje revize, kterou jsme právě načetli; druhým objektem je `085bb3`, což je rodič revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you look for what the HEAD reference is so you know what to check out when you’re finished:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále budete chtít zjistit, co je referencí HEAD, abyste mohli po dokončení procesu provést checkout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you need to add a VirtualHost entry to your Apache configuration with the document root as the root directory of your Git projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále je třeba přidat záznam VirtualHost do konfigurace Apache s kořenovým adresářem dokumentů nastaveným jako kořenový adresář vašich projektů Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you need to add some developer SSH public keys to the `authorized_keys` file for that user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalším kroku musíte vložit veřejné SSH klíče od svých vývojářů do souboru `authorized_keys` pro tohoto uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you need to push your change upstream.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako další krok tak chcete odeslat provedené změny do vzdáleného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you want to make sure you aren’t modifying files that are outside your ACL scope.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále se budete chtít ujistit, že neměníte soubory, jejichž úpravu vám zakazuje seznam ACL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you’ll see how to work the other side of the coin: maintaining a Git project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V další části se na projekty podíváme z té druhé strany – ukážeme, jak může vypadat jejich správa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Next, you’ll write the other two commit objects, each referencing the commit that came directly before it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále zapíšete i zbylé dva objekty revize. Oba budou odkazovat na revizi, která jim bezprostředně předcházela:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>No `-w` option is needed — calling `write-tree` automatically creates a tree object from the state of the index if that tree doesn’t yet exist:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tentokrát se obejdete bez parametru `-w`. Příkaz `write-tree` automaticky vytvoří objekt stromu ze stavu indexu, pokud tento strom ještě neexistuje:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>No commit was completed in that instance.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě nebyla zapsána žádná revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>No more branch on your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A větev je ze serveru pryč.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>No problems occur; as you can see, it was a simple fast-forward.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento postup je bezproblémový. Jak vidíte, šlo o jednoduchý posun „rychle vpřed“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Non-rewind push to master or integ is allowed by the first rule.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odeslání do větve `master` nebo `integ`, která nevracejí zpět změny (non-rewind push), jsou povolena prvním pravidlem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Normal merge conflict for 'index.html':
	  {local}: modified file
	  {remote}: modified file
	Hit return to start merge resolution tool (opendiff):</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103005Z" creationid="Prikryl" creationdate="20151023T103005Z">
        <seg>Normal merge conflict for 'index.html':
	  {local}: modified file
	  {remote}: modified file
	Hit return to start merge resolution tool (opendiff):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Normally, you get as the original commit the commit where you copied the code over, because that is the first time you touched those lines in this file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Normálně se jako původní revize zobrazí ta, kam jste kód zkopírovali, protože to bylo poprvé, kdy jste v daném souboru sáhli do těchto řádků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Not nearly as many configuration options are available for the server side of Git, but there are a few interesting ones you may want to take note of.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na straně serveru není ani zdaleka tolik parametrů konfigurace jako na straně klienta, avšak několik zajímavých si jistě zaslouží vaši pozornost.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Not only does the Author field look a lot better, but the `git-svn-id` is no longer there, either.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejenže teď pole Author vypadá podstatně lépe, ale navíc jste se zbavili i záznamu `git-svn-id`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note on Windows usage: you should use Git with the provided msysGit shell (Unix style), it allows to use the complex lines of command given in this book.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poznámka k používání pod Windows: Git byste měli používat z dodaného shellu msysGit (unixový styl). Umožní vám zadávat složité řádkové příkazy, které v této knize naleznete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that someone must shell onto the machine and create a bare repository every time you want to add a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že pokaždé, když chcete vytvořit projekt, musí se k počítači někdo přihlásit a vytvořit holý repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that the snapshot pointed to by the final commit you end up with, whether it’s the last of the rebased commits for a rebase or the final merge commit after a merge, is the same snapshot — it’s only the history that is different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ještě jednou bychom chtěli upozornit, že snímek, na který ukazuje závěrečná revize – ať už se jedná o poslední z přeskládaných revizí po přeskládání, nebo poslední revizi sloučením jako výsledek začlenění – je vždy stejný. Jediné, co se liší, je historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note that this is a lot different than the concept of HEAD in other VCSs you may be used to, such as Subversion or CVS.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nenechte se mást, tento HEAD je velmi odlišný od všech koncepcí v ostatních systémech pro správu verzí, na něž jste možná zvyklí, jako Subversion nebo CVS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note the backslash (`\`) in front of the `*`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si tu zpětného lomítka (`\`) před znakem `*`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Note:	Because many systems think of their revisions as changes from one commit to another, fast-import can also take commands with each commit to specify which files have been added, removed, or modified and what the new contents are.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poznámka: Vzhledem k tomu, že mnoho systémů chápe revize jako změny od jednoho zapsání k druhému, přijímá fast-import také příkazy s každým zapsáním a zjišťuje, které soubory byly přidány, odstraněny nebo změněny a co je jejich novým obsahem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice how in the example of remote references imported from `git svn`, tags are added as remote branches, not as real Git tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že v příkladu vzdálených referencí importovaných nástrojem `git svn` jsou značky přidány jako vzdálené větve, nikoli jako skutečné značky Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice how this changes the way you work with Subversion — you can do several commits offline and then push them all at once to the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, jak se tím mění váš způsob práce v systému Subversion. Můžete zapsat několik revizí offline a poté je na server Subversion odeslat všechny najednou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice how you don’t have to run `git add` on the `benchmarks.rb` file in this case before you commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Povšimněte si, že kvůli souboru `benchmarks.rb` v tomto případě nemusíte před zapsáním revize provádět příkaz `git add`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that "scott" (the name of the pubkey in the `gitolite setup` command you used earlier) has read-write permissions on the `gitolite-admin` repository as well as a public key file of the same name.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že „scott“ (jméno veřejného klíče v dříve použitém příkazu `gitolite setup`) má práva pro čtení i zápis k repozitáři `gitolite-admin` a také stejnojmenný veřejný klíč.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that the SHA checksum that originally started with `97031e5` when you committed now begins with `938b1a5`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že kontrolní součet SHA, který před zapsáním revize původně začínal kombinací znaků `97031e5`, nyní začíná `938b1a5`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that the `lib` subdirectory isn’t a blob but a pointer to another tree:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že podadresář `lib` není blob, ale ukazatel na jiný strom:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that the first field is the partial SHA-1 of the commit that last modified that line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že první pole je část hodnoty SHA-1 revize, v níž byl řádek naposled změněn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that the object entry points to the commit SHA-1 value that you tagged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že záznam objektu ukazuje na hodnotu revize SHA-1, k níž jste značku přidali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that this tree has both file entries and also that the test.txt SHA is the "version 2" SHA from earlier (`1f7a7a`).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že tento strom má oba záznamy souborů a že hodnota SHA souboru test.txt je SHA původní „verze 2“ (`1f7a7a`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that you don’t need to specify the path (in fact, doing so won’t work), just a colon and then the name of the project — Gitosis finds it for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že není třeba zadávat cestu (naopak, příkaz by pak nefungoval), pouze dvojtečku a za ní název projektu. Gitosis už projekt vyhledá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that you have to tell the command where to find your Git repositories with the `GITWEB_PROJECTROOT` variable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že musíte příkazu pomocí proměnné `GITWEB_PROJECTROOT` sdělit, kde najde repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice that you printed that out to stdout at the very beginning of your update script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že toto bylo posláno na standardní výstup „stdout“ na samém začátku skriptu update.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice the 160000 mode for the rack entry.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si režimu (mode) 160000 u záznamu rack.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice the `*` character that prefixes the `master` branch: it indicates the branch that you currently have checked out.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si znaku `*`, který předchází větvi `master`. Označuje větev, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice the last line of the file, which begins with a `^`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si také posledního řádku souboru, který začíná znakem `^`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Notice the reverse order.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si, že se pořadí obrátilo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now Git knows that if it tries to do a diff between two snapshots, and any of the files end in `.doc`, it should run those files through the "word" filter, which is defined as the `catdoc` program.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nyní ví, že až se bude pokoušet vypočítat rozdíl mezi dvěma snímky a každý ze souborů končící na `.doc` se má prohnat přes filtr „word“, který je definován jako program `catdoc`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now Jessica merges in John’s work (`origin/master`):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní Jessica začlení Johnovu práci (`origin/master`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now John can clone the project and get updates, but Gitosis won’t allow him to push back up to the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John nyní může naklonovat projekt a stahovat jeho aktualizace, ale Gitosis mu neumožní, aby odesílal data zpět do projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now `benchmarks.rb` is listed as both staged and unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor `benchmarks.rb` je nyní uveden jak v části připraveno k zapsání (Changes to be committed), tak v části nepřipraveno k zapsání (Changes not staged for commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now `git diff` will be able to tell you what changed in `.odt` files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď už bude `git diff` schopen říci, co se v `.odt` souborech změnilo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now `origin/master` is reachable from Jessica’s `master` branch, so she should be able to successfully push (assuming John hasn’t pushed again in the meantime):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev `origin/master` teď má Jessica dostupnou ze své větve `master`, takže může svou práci úspěšně odeslat (za předpokladu, že John mezitím neodeslal další revize):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now all the old branches are real Git branches and all the old tags are real Git tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny staré větve jsou nyní skutečnými větvemi Git a všechny staré značky jsou nyní skutečnými značkami Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now it’s time to initialize Gitosis.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku můžeme inicializovat nástroj Gitosis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now set up the `odt` diff filter in `.git/config`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A teď v `.git/config` nastavte diff filtr pro `odt`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now suppose you did that in a branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní předpokládejme, že toto vše se odehrálo ve větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that it knows the server’s state, your `send-pack` process determines what commits it has that the server doesn’t.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když zná proces `send-pack` stav serveru, určí, jaké revize má, které přitom nejsou na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you can (I hope) determine which workflow combination may work for you, I’ll cover some more specific examples of how to accomplish the main roles that make up the different flows.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když už se (jak doufám) dokážete rozhodnout, která kombinace postupů pro vás bude ta nejvhodnější, ukážeme si některé konkrétní příklady, jak lze rozdělit hlavní role, z nichž vyplývají jednotlivé postupy práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you can specify individual commits, let’s see how to specify ranges of commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když umíte určit jednotlivé revize, podíváme se, jak lze určovat celé intervaly revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have Git on your system, you’ll want to do a few things to customize your Git environment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když máte Git nainstalovaný, můžete provést některá uživatelská nastavení systému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have a Subversion repository to which you have write access, you can go through a typical workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte repozitář Subversion s oprávněním pro zápis, a proto se můžeme podívat na typický postup práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have a bare copy of your repository, all you need to do is put it on a server and set up your protocols.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když máte vytvořenu holou kopii repozitáře, zbývá ji už jen umístit na server a nastavit protokoly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have a remote Git repository set up as a point for all the developers to share their code, and you’re familiar with basic Git commands in a local workflow, you’ll look at how to utilize some of the distributed workflows that Git affords you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte vytvořen vzdálený repozitář Git jako místo, kde mohou všichni vývojáři sdílet zdrojový kód, a znáte základní příkazy systému Git pro práci v lokálním prostředí. Je čas podívat se na využití některých distribuovaných postupů, které vám Git nabízí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have a working repository, you can do some work on the project and push your commits back upstream, using Git effectively as a SVN client.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte vytvořen pracovní repozitář a můžete se pustit do práce na projektu. Časem ale budete chtít odeslat revize zpět do repozitáře a použít při tom Git jako klienta SVN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have an integer representation of your commit, you need a date for the commit metadata.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní jste označili revizi celým číslem a zbývá stanovit datum pro metadata revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have basic read/write and read-only access to your project, you may want to set up a simple web-based visualizer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když máte ke svému projektu nastavena základní oprávnění pro čtení/zápis a pouze pro čtení, možná budete chtít nastavit jednoduchou online vizualizaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have the basics of branching and merging down, what can or should you do with them?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď, když jste absolvovali základní seznámení s větvemi a jejich slučováním, nabízí se otázka, k čemu je to vlastně dobré.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have the contents of your key in Git, you can create a tag that points directly to it by specifying the new SHA-1 value that the `hash-object` command gave you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte obsah svého klíče v systému Git a můžete vytvořit značku, která bude ukazovat přímo na něj. Zadejte proto novou hodnotu SHA-1, kterou jste získali příkazem `hash-object`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have the packfile index, you can see if your object is in it — because the index lists the SHAs of the objects contained in the packfile and the offsets to those objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když máte index balíčkového souboru, můžete ověřit, zda se v něm nachází váš objekt. Index uvádí hodnoty SHA všech objektů obsažených v balíčkovém souboru a ofsety k těmto objektům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you have the permissions sorted out, you need to determine what paths the commits being pushed have modified, so you can make sure the user who’s pushing has access to all of them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste uspořádali příslušná oprávnění, zbývá zjistit, která umístění odesílané revize změnily, abyste měli jistotu, že k nim ke všem má odesílající uživatel přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your filter is ready, you can test it by setting up a file with your `$Date$` keyword and then setting up a Git attribute for that file that engages the new filter:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když máte filtr hotový, můžete ho otestovat vytvořením souboru s klíčovým slovem `$Date$` a nastavením atributu Git pro tento soubor, jímž nový filtr aktivujete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste zadali své osobní údaje, můžete nastavit výchozí textový editor, který se použije, když po vás Git bude chtít napsat nějakou zprávu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your staging area is set up the way you want it, you can commit your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste seznam připravených změn nastavili podle svých představ, můžete začít zapisovat změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that your work is merged in, you have no further need for the `iss53` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste svou práci sloučili, větev `iss53` už nebudete potřebovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you’re here, let’s get started.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se však už pusťme do práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you’ve created, merged, and deleted some branches, let’s look at some branch-management tools that will come in handy when you begin using branches all the time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jste vytvořili, sloučili a odstranili své první větve, můžeme se podívat na pár nástrojů ke správě větví, které se vám budou hodit, až začnete s větvemi pracovat pravidelně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now that you’ve seen the difficulties of the submodule system, let’s look at an alternate way to solve the same problem.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní, když jsme poznali obtíže spojené se systémem submodulů, podívejme se na jedno alternativní řešení tohoto problému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now the first two commits aren’t reachable by anything:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První dvě revize tak nejsou odnikud dostupné:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can add them all to your 'mobile' team so they have read and write access to `iphone_project`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní je můžete všechny přidat do týmu 'mobile', čímž získají oprávnění pro čtení i pro zápis k `iphone_project`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can fast-forward your master branch (see Figure 3-33):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete posunout hlavní větev „rychle vpřed“ (viz obrázek 3-33):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can look at your new commit object with `cat-file`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se můžete podívat na nově vytvořený objekt revize. Použijte příkaz `cat-file`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can remove your topic branch and drop the commits you didn’t want to pull in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete tematickou větev odstranit a zahodit revize, které nehodláte natáhnout do jiné větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can revert the file back to the first version</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor nyní můžete vrátit do první verze:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can see how Git has stored your data:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se můžete podívat, jak Git vaše data uložil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can see that the TODO and index.html files are staged and the simplegit.rb file is still unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, soubory TODO a index.html jsou připraveny k zapsání, soubor simplegit.rb nikoli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can send the maintainer a message that you’ve made the requested changes and they can find those changes in your `featureBv2` branch (see Figure 5-18).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete správci oznámit, že jste provedli požadované změny a že je najde ve vaší větvi `featureBv2` (viz obrázek 5-18).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can set up your config file to use your custom merge resolution and diff tools.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete nastavit konfigurační soubor k používání vlastních nástrojů diff a nástrojů k řešení slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can switch back to your work-in-progress branch on issue #53 and continue working on it (see Figure 3-15):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete přepnout zpět na větev s rozdělanou prací a pokračovat na chybě č. 53 (viz obrázek 3-15):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can take the changes that have been reset, and create multiple commits out of them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď můžete vzít změny, které jste resetovali, a vytvořit z nich několik dílčích revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can use `git diff` to see what is still unstaged</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git diff` nyní můžete použít k zobrazení změn, které dosud nejsou připraveny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you can use the string `pb` on the command line in lieu of the whole URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řetězec `pb` nyní můžete používat na příkazovém řádku místo kompletní adresy URL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you get the call that there is an issue with the web site, and you need to fix it immediately.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku vám zavolají, že se na webových stránkách vyskytl problém, který musíte okamžitě vyřešit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you have a directory named `gitosis-admin`, which has two major parts:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte adresář s názvem `gitosis-admin`, sestávající ze dvou hlavních částí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you have a list of the remote references and SHAs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte k dispozici seznam SHA a referencí na vzdálené repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you have a new repository on GitHub (see Figure 4-6).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte na serveru GitHub vytvořen nový repozitář (viz obrázek 4-6).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you have a topic branch that contains contributed work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte tematickou větev s prací, kterou jste obdrželi od jiného vývojáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you have the Rack project under a subdirectory named `rack` within your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte projekt Rack uložen ve svém projektu v podadresáři `rack`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you have the root of the Rack project in your `rack_branch` branch and your own project in the `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte kořenový adresář s projektem Rack ve větvi `rack_branch` a vlastní projekt ve větvi `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you have two commits that you want to send to the mailing list.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte dvě revize, které chcete odeslat do poštovní konference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you should have a nicer Subversion import in your `my_project` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Import ze systému Subversion v adresáři `my_project` by měl nyní vypadat o něco lépe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you want to release a build.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní budete chtít sestavení vydat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you want to switch branches, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní chcete přepnout na jinou větev, ale nechcete zapsat změny, na nichž jste dosud pracovali – proto změny odložíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your `rack` subdirectory is at the exact state it was in when you committed earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš podadresář `rack` je nyní přesně ve stejném stavu, jako když jste předtím zapisovali revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your history looks like Figure 5-27.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše historie revizí bude nyní vypadat jako na obrázku 5-27.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your new project root is what was in the `trunk` subdirectory each time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaším nový kořenovým adresářem je nyní obsah podadresáře `trunk`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your project history has diverged (see Figure 3-9).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se historie vašeho projektu rozdělila (viz obrázek 3-9).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your project is hosted on GitHub, and you can give the URL to anyone you want to share your project with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní je váš projekt hostován na serveru GitHub a vy můžete dát adresu URL komukoli, s kým chcete svůj projekt sdílet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now your users can’t push any commits with badly formed messages or with modified files outside of their designated paths.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaši uživatelé tak už teď nebudou moci odesílat revize se zprávami v nepatřičném tvaru nebo se soubory změněnými mimo umístění jim vyhrazená.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’ll explore a number of very powerful things that Git can do that you may not necessarily use on a day-to-day basis but that you may need at some point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní poznáte několik velmi účinných nástrojů, které vám Git nabízí. Pravděpodobně je nebudete používat každý den, ale přesto se vám mohou čas od času hodit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’ll learn a few of the more interesting options that you can set in this manner to customize your Git usage.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se podíváme na pár dalších zajímavých možností, jež můžete tímto způsobem nastavit, a přizpůsobit tak systém Git svým individuálním potřebám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’re on another commit, halfway between the one you just tested and your bad commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní jste na jiné revizi, na půl cesty mezi revizí, kterou jste právě otestovali, a problémovou revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’re ready to add your contributed work into this topic branch and determine if you want to merge it into your longer-term branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní tedy můžete vložit svůj příspěvek do této tematické větve a rozhodnout se, zda ho chcete začlenit do svých trvalejších větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’re ready to begin printing out the commit data for your importer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní je už vše připraveno k vygenerování dat revizí pro váš importér.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’re ready to collaborate on the same project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nic vám teď nebrání začít spolupracovat na projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now you’ve created your first commit!</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní jste vytvořili svou první revizi!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Git will check the integrity of your repository before each push is accepted to make sure faulty clients aren’t introducing corrupt data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nyní bude kontrolovat integritu vašeho repozitáře před přijetím odeslaných souborů, aby zajistil, že defektní klienti nedodávají data s chybami.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Git will use the KDiff3 tool for diff viewing and merge conflict resolution.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git bude nyní k zobrazení výstupů nástoje diff a k řešení konfliktů při slučování používat nástroj KDiff3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Git won’t try to convert or fix CRLF issues; nor will it try to compute or print a diff for changes in this file when you run `git show` or `git diff` on your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až v projektu spustíte příkaz `git show` nebo `git diff`, Git se nebude pokoušet konvertovat nebo opravovat chyby CRLF ani vypočítat ani zobrazit rozdíly v tomto souboru pomocí nástroje diff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Jessica can merge her topic work into her `master` branch, merge John’s work (`origin/master`) into her `master` branch, and then push back to the server again.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica nyní může začlenit tematickou větev do své větve `master`, začlenit (merge) i Johnovu práci (`origin/master`) do své větve `master` a vše odeslat zpět na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Jessica makes a couple of commits on the `featureB` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica nyní vytvoří několik revizí ve větvi `featureB`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, Jessica pushes her work up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica nyní odešle svou práci na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, John can test his code to make sure it still works properly, and then he can push his new merged work up to the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John nyní může otestovat svůj kód, aby se ujistil, že stále pracuje správně, a pak může odeslat svou novou sloučenou práci na server:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, `gc` your database and see how much space you’re using:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď provedete `gc` své databáze, protože chcete zjistit, kolik místa je obsazeno:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, all your work is on top of what is on the Subversion server, so you can successfully `dcommit`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní je všechna vaše práce na vrcholu revizí, které jsou na serveru Subversion. Příkaz `dcommit` bude nyní úspěšně proveden:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, each of your topics is contained within a silo — similar to a patch queue — that you can rewrite, rebase, and modify without the topics interfering or interdepending on each other as in Figure 5-16.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní mají obě vaše témata samostatný zásobník – podobně jako řada záplat – které můžete přepsat, přeskládat a upravit, aniž by se tím obě témata navzájem ovlivňovala nebo omezovala (viz obrázek 5-16).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, each user that does this has to send their public key to you or whoever is administrating the Git server (assuming you’re using an SSH server setup that requires public keys).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každý uživatel, který si tímto způsobem nechá vygenerovat veřejný klíč, ho nyní pošle vám nebo jinému správci serveru Git (za předpokladu, že používáte nastavení SSH serveru vyžadující veřejné klíče).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, if you commit and push the project, GitWeb will automatically start showing the `iphone_project`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud teď zapíšete a odešlete projekt, GitWeb začne automaticky zobrazovat `iphone_project`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, if you want to merge your `opera` branch into `trunk` (your `master` branch), you can do so with a normal `git merge`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li nyní chtít začlenit větev `opera` do větve `trunk` (vaše větev `master`), můžete tak učinit běžným příkazem `git merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, let’s add a new project for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní přidáme nový projekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, let’s say you decide you like the second solution to your issue best (`iss91v2`); and you showed the `dumbidea` branch to your coworkers, and it turns out to be genius.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že se nyní rozhodnete, že druhé řešení vašeho problému bude vhodnější (`iss91v2`). Dále jste také ukázali svůj nápad ve větvi `dumbidea` kolegům a ti ho považují za geniální.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, modify that file a little, and see what happens:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní soubor trochu upravíme a uvidíme, co se stane:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, move the `master` branch back to the middle commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní vrátíme větev `master` zpět na prostřední revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, no matter what is set as your default shell editor variable, Git will fire up Emacs to edit messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní už nezáleží na tom, jaký editor máte v shellu nastaven jako výchozí, Git bude k editaci zpráv spouštět Emacs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, pay attention.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>A nyní pozor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, run the `cat-file` command on that SHA-1 value:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní pro tuto hodnotu SHA-1 spusťte příkaz `cat-file`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, someone else does more work that includes a merge, and pushes that work to the central server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdo jiný teď provede jiné úpravy, jejichž součástí bude i začlenění, a odešle svou práci na centrální server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, store some text in your Git database:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete uložit kousek textu do databáze Git:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, suppose you forgot to tag the project at `v1.2`, which was at the "updated rakefile" commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní předpokládejme, že jste projektu zapomněli přidělit značku `v1.2`, která byla obsažena v revizi označené jako „updated rakefile“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, the 'git' user can only use the SSH connection to push and pull Git repositories and can’t shell onto the machine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatel 'git' nyní může používat SSH připojení k odesílání a stahování repozitářů Git, ale nemůže se přihlásit k počítači.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, the snapshot pointed to by C3' is exactly the same as the one that was pointed to by C5 in the merge example.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snímek, na který nyní ukazuje revize C3', je zcela totožný se snímkem, na který v příkladu v části o slučování ukazovala C5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, when someone else clones or pulls from your repository, they will get all your tags as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nyní někdo bude klonovat nebo stahovat z vašeho repozitáře, stáhne rovněž všechny vaše značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, when you run `git archive` to create a tarball of your project, that directory won’t be included in the archive.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až nyní spustíte příkaz `git archive` k vytvoření tarballu projektu, nebude tento adresář součástí archivu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can add content to Git and pull it back out again.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní tedy umíte vložit do systému Git určitý obsah a ten poté zase vytáhnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can run `git fetch teamone` to fetch everything the remote `teamone` server has that you don’t have yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete spustit příkaz `git fetch teamone`, který ze vzdáleného serveru `teamone` vyzvedne vše, co ještě nemáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can run `git log` to see your new history:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní si můžete nechat příkazem `git log` zobrazit svoji novou historii:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can set up an empty repository for your users by running `git init` with the `--bare` option, which initializes the repository without a working directory:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní pro ně můžete nastavit prázdný repozitář. Spusťte příkaz `git init` s parametrem `--bare`, který inicializuje repozitář bez pracovního adresáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can sign tags without having to specify your key every time with the `git tag` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete podepisovat značky, aniž byste museli pokaždé znovu zadávat svůj klíč příkazem `git tag`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can use the `write-tree` command to write the staging area out to a tree object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete použít příkaz `write-tree`, jímž zapíšete stav oblasti připravovaných změn neboli indexu do objektu stromu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you can use the head reference you just created instead of the SHA-1 value in your Git commands:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete v příkazech Git používat „head“ referenci, kterou jste právě vytvořili, místo hodnoty SHA-1:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you need to make Apache use CGI for that script, for which you can add a VirtualHost:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní musíte zajistit, aby server Apache používal CGI pro skript, pro který můžete přidat VirtualHost:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you need to remove this file from all trees in your past.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní potřebujete odstranit tento soubor ze všech minulých stromů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, you need to set up a filter in Git (call it `dater`) and tell it to use your `expand_date` filter to smudge the files on checkout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní budete muset nastavit filtr v systému Git (pojmenujte ho `dater`) a určit, aby k operaci smudge při checkoutu souborů používal filtr `expand_date`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, your Git database conceptually looks something like Figure 9-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše databáze Git bude nyní v principu vypadat tak, jak je znázorněno na obrázku 9-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Now, your local branch `sf` will automatically push to and pull from `origin/serverfix`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše lokální větev `sf` bude nyní automaticky stahovat data ze vzdálené větve `origin/serverfix` a bude do ní i odesílat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Occasionally, Git automatically runs a command called "auto gc".</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git čas od času automaticky spustí příkaz „auto gc“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Occasionally, this process doesn’t go smoothly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se stát, že sloučení neproběhne bez problémů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Occasionally, you may have to do some cleanup — make a repository more compact, clean up an imported repository, or recover lost work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Občas budete patrně nuceni přistoupit k menšímu úklidu – uvést repozitář do kompaktnější podoby, vyčistit importovaný repozitář nebo obnovit ztracenou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Oddly enough, you have a real Git history now that you can view with the `git log` command, if you run it on the last commit SHA-1:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se to zdát zvláštní, ale nyní máte vytvořenu skutečnou historii revizí Git, kterou lze zobrazit příkazem `git log` spuštěným pro hodnotu SHA-1 poslední revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Of course, a refex can be far more powerful than shown here, so don’t overdo it if you’re not comfortable with Perl regexes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Refex může mít samozřejmě mnohem více použití než je tady ukázáno, takže si dejte pozor ať to nepřeženete, zvláště pokud nejste kovaní v perlovských regulárních výrazech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Of the more than 36,000 commits in the Git source code history, this command shows the 6 that match those criteria.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z více než 36 tisíc revizí v historii zdrojového kódu Git zobrazí tento příkaz 6 záznamů, které odpovídají zadaným kritériím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, the quickest way is to use a tool called `git reflog`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejrychlejší cestou často bývá použít nástroj `git reflog`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, when you’ve been working on part of your project, things are in a messy state and you want to switch branches for a bit to work on something else.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až budete pracovat na některé části svého projektu, často vám může připadat, že je vaše práce poněkud neuspořádaná a vy budete třeba chtít přepnout větve a pracovat na chvíli na něčem jiném.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, you’ll do this to make sure your commits apply cleanly on a remote branch — perhaps in a project to which you’re trying to contribute but that you don’t maintain.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto metodu budete často používat v situaci, kdy chcete mít jistotu, že byly vaše revize čistě aplikovány na vzdálenou větev – např. v projektu, do nějž chcete přidat příspěvek, který ale nespravujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Often, you’ll have a class of files that you don’t want Git to automatically add or even show you as being untracked.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve vašem adresáři se často vyskytne skupina souborů, u nichž nebudete chtít, aby je Git automaticky přidával nebo aby je vůbec uváděl jako nesledované.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On Linux machines, `lighttpd` is often installed, so you may be able to get it to run by typing `git instaweb` in your project directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V počítačích se systémem Linux je často nainstalován `lighttpd`. Spustit ho lze zadáním příkazu `git instaweb` v adresáři vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`%USERPROFILE%` in Windows’ environment), which is `C:\Documents and Settings\$USER` or `C:\Users\$USER` for most people, depending on version (`$USER` is `%USERNAME%` in Windows’ environment).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve Windows Git hledá soubor `.gitconfig` v adresáři `$HOME` (v proměnných prostředí Windows je to `%USERPROFILE%`), což je u většiny uživatelů `C:\Documents and Settings\$USER` nebo `C:\Users\$USER` (`$USER` se ve Windows zapisuje odkazem na proměnnou prostředí `%USERNAME%`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On Windows with the system console, the backslash must be omitted.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V konzolovém okně systému Windows musíte zpětné lomítko vynechat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On a project for which you’re not the maintainer, it’s generally easier to have a branch like `master` always track `origin/master` and to do your work in topic branches that you can easily discard if they’re rejected.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U projektů, u nichž nejste v roli správce, je většinou jednodušší, aby vaše větev `master` stále sledovala větev `origin/master` a abyste práci prováděli v tematických větvích, jichž se můžete beze všeho vzdát v případě, že budou odmítnuty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On an Ubuntu machine, you use an Upstart script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U počítačů s Ubuntu můžete použít skript Upstart.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On other systems, you may want to use `xinetd`, a script in your `sysvinit` system, or something else — as long as you get that command daemonized and watched somehow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V jiných systémech možná budete chtít použít `xinetd`, skript systému `sysvinit`, nebo podobný skript – můžete-li spouštět příkaz démonizovaný a sledovaný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On the ACL file you looked at earlier, this `get_acl_access_data` method returns a data structure that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V kombinaci se souborem ACL, který jsme si ukázali před chvílí, poskytne tato metoda `get_acl_access_data` datovou strukturu v této podobě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>On the command line, you can pull down several branches like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Několik větví můžete přímo z příkazového řádku stáhnout například takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Once again, this changes the SHAs of all the commits in your list, so make sure no commit shows up in that list that you’ve already pushed to a shared repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také v tomto případě se změní hodnoty SHA všech revizí v seznamu, a proto se nejprve ujistěte, že seznam neobsahuje žádné revize, které jste už odeslali do sdíleného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Once the install is done, you switch to the `gitolite-admin` clone you just made on your workstation, and poke around to see what you got:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakmile je instalace dokončena, přepněte se do repozitáře `gitolite-admin`, který jste naklonovali na váš počítač, a podívejte se co tam je:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Once you’re satisfied with your changes, run</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222754Z" creationid="Prikryl" creationdate="20151023T222754Z">
        <seg>Jakmile jste s vašimi změnami spokojeni, spusťte</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One Rubyism that may not be clear is `path.index(access_path) == 0`, which is true if path begins with `access_path` — this ensures that `access_path` is not just in one of the allowed paths, but an allowed path begins with each accessed path.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snad jediným specifickým Ruby výrazem, který nemusí být jasný, je `path.index(access_path) == 0`, který je pravdivý, pokud kontrolovaná cesta začíná řetězcem `access_path` (cesta oprávnění) – díky tomu nepovoluje cesta v `access_path` jen konkrétní místo na disku (soubor nebo adresář), ale také všechny soubory nebo adresáře, které začínají tímto řetězcem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One caveat is that it expects you to be running locally as the same user you push as to the remote machine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je však třeba upozornit, že skript očekává, že lokálně pracujete v roli stejného uživatele jako odesíláte data na vzdálený server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One central hub, or repository, can accept code, and everyone synchronizes their work to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedno centrální úložiště (hub) nebo repozitář přijímá zdrojový kód a každý podle něj synchronizuje svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One common problem happens when a developer makes a change locally in a submodule but doesn’t push it to a public server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tradičním problémům dochází, jestliže vývojář provede lokální změnu v submodulu, ale neodešle ji na veřejný server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One cool trick for which you can use Git attributes is telling Git which files are binary (in cases it otherwise may not be able to figure out) and giving Git special instructions about how to handle those files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedním ze skvělých triků, který vás možná přesvědčí o užitečnosti atributů, je označení souborů jako binárních (v případech, kdy je Git není schopen identifikovat sám) a zadání speciálních instrukcí, jak s těmito soubory nakládat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One nice thing about making Git push over HTTP is that you can use any WebDAV server, without specific Git features; so, you can use this functionality if your web-hosting provider supports WebDAV for writing updates to your web site.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příjemným faktem na odesílání dat přes protokol HTTP je, že můžete použít jakýkoli server WebDAV i bez speciálních funkcí systému Git. Tuto možnost tak můžete využít, pokud váš poskytovatel webhostingu podporuje WebDAV pro zápis aktualizací na vaše webové stránky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of Git’s great features is a bidirectional bridge to Subversion called `git svn`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou ze skvělých funkcí systému Git je obousměrný most k systému Subversion: `git svn`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedním z nejčastějších důvodů pro rušení úprav je situace, kdy zapíšete revizi příliš brzy a ještě jste například zapomněli přidat některé soubory, nebo byste rádi změnili zprávu k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the first things you did was set up your name and e-mail address:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z prvních věcí, kterou jsme udělali, bylo nastavení nastavení jména a e-mailové adresy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the great things about Git is that it allows you to make decisions at the last possible moment.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou ze skvělých možností, které vám Git nabízí, jsou rozhodnutí na poslední chvíli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the interesting features of this is that you can ask it to figure out all sorts of code movement as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zajímavou funkcí je také to, že můžete systému Git zadat, aby zjistil všechny druhy přesouvání kódu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the largest Git projects, the Linux kernel, is beginning to need 12 characters out of the possible 40 to stay unique.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V jednom z největších projektů Git, v jádru Linuxu, začíná být nutné zadávat pro jednoznačné určení už 12 znaků z celkových 40 možných.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z hlavních předností tohoto postupu je, že můžete pracovat bez přerušení a správce hlavního repozitáře může natáhnout vaše změny do projektu, kdykoli uzná za vhodné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the more helpful options is `-p`, which shows the diff introduced in each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedním z nejužitečnějších je parametr `-p`, který zobrazí rozdíly (diff) provedené v každé revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the more popular VCS tools was a system called rcs, which is still distributed with many computers today.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jedním z velmi oblíbených nástrojů VCS byl systém s názvem rcs, který je ještě dnes distribuován s mnoha počítači.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the most complicated aspects of setting up a Git server is user management.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedním z nejsložitějších aspektů nastavení serveru Git je totiž správa uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the things Git does in the background while you’re working away is keep a reflog — a log of where your HEAD and branch references have been for the last few months.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z věcí, které probíhají na pozadí systému Git, zatímco vy pracujete, je uchovávání záznamu reflog, v němž se ukládají pozice referencí HEAD a všech vašich větví za několik posledních měsíců.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the things you’ll want to do is create an archive of the latest snapshot of your code for those poor souls who don’t use Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z věcí, kterou budete chtít udělat, je vytvoření archivu nejnovějšího snímku vašeho kódu pro všechny nebohé duše, které nepoužívají systém Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of the workarounds to the `denyNonFastForwards` policy is for the user to delete the branch and then push it back up with the new reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z možností, jak může uživatel obejít pravidlo `denyNonFastForwards`, je odstranit větev a odeslat ji zpět s novou referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One of them is the _subtree_ merge, and you can use it to deal with the subproject issue.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z nich je tzv. začlenění _podstromu_ (subtree merge), které lze použít jako řešení problémů se subprojektem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One simple workflow merges your work into your `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jeden jednoduchý pracovní postup začlení vaší práci do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One very useful option is to tell Git to not try to merge specific files when they have conflicts, but rather to use your side of the merge over someone else’s.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Velmi užitečnou možností je například nastavení, aby se Git nepokoušel sloučit konkrétní soubory, pokud u nich dojde ke konfliktu, a raději použil vaši verzi souboru než jinou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One way is to use the `git fsck` utility, which checks your database for integrity.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednou z možností je použít nástroj `git fsck`, který zkontroluje integritu vaší databáze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>One way to do this is to run PNG files through a filter that extracts their EXIF information — metadata that is recorded with most image formats.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedním způsobem, jak to udělat, je spustit soubory JPEG přes filtr, který extrahuje jejich informace EXIF – metadata, která se zaznamenávají s většinou obrázkových souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Only 16 months later.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091435Z" creationid="Prikryl" creationdate="20151024T091435Z">
        <seg>Only 16 months later.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Oops — it looks like that tree object isn’t in loose format on the server, so you get a 404 response back.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uf, zdá se, že objekt stromu není na serveru ve volném formátu, proto byla vygenerována chyba 404.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Oops — you didn’t want to add a huge tarball to your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ale ne! Vlastně jste nechtěli do projektu vložit tak velký tarball.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>OpenDocument files are actually zip’ped directories containing multiple files (the content in an XML format, stylesheets, images, etc.).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>OpenDocument soubory jsou ve skutečnosti zazipované adresáře, které obsahují více souborů (obsah ve formátu XML, styly, obrázky atd.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Option	Description
	-(n)	Show only the last n commits
	--since, --after	Limit the commits to those whose CommitDate was made on-or-after the specified date/time.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210918Z" creationid="Prikryl" creationdate="20151022T210918Z">
        <seg>Parametr	Popis
	-(n)	Zobrazí pouze posledních n revizí.
	--since, --after	Omezí výpis na revize provedené po zadaném datu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Option	Description
	-p	Show the patch introduced with each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210353Z" creationid="Prikryl" creationdate="20151022T210158Z">
        <seg>Parametr	Popis
	-p	Zobrazí záplatu vytvořenou s každou revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Option	Description of Output
	%H	Commit hash
	%h	Abbreviated commit hash
	%T	Tree hash
	%t	Abbreviated tree hash
	%P	Parent hashes
	%p	Abbreviated parent hashes
	%an	Author name
	%ae	Author e-mail
	%ad	Author date (format respects the --date= option)
	%ar	Author date, relative
	%cn	Committer name
	%ce	Committer email
	%cd	Committer date
	%cr	Committer date, relative
	%s	Subject</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210028Z" creationid="Prikryl" creationdate="20151022T210028Z">
        <seg>Parametr	Popis výstupu
	%H	Otisk (hash) revize
	%h	Zkrácený otisk revize
	%T	Otisk stromu
	%t	Zkrácený otisk stromu
	%P	Otisky rodičovských revizí
	%p	Zkrácené otisky rodičovských revizí
	%an	Jméno autora
	%ae	E-mail autora
	%ad	Datum autora (formát je možné nastavit parametrem --date)
	%ar	Datum autora, relativní
	%cn	Jméno autora revize
	%ce	E-mail autora revize
	%cd	Datum autora revize
	%cr	Datum autora revize, relativní
	%s	Předmět</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Options include oneline, short, full, fuller, and format (where you specify your own format).</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T210757Z" creationid="Prikryl" creationdate="20151022T210757Z">
        <seg>Parametry příkazu jsou oneline, short, full, fuller a format (ve kterém uvedete svůj vlastní formát).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or if someone tries to edit a file they don’t have access to and push a commit containing it, they will see something similar.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo pokud se někdo pokusí upravit soubor, k němuž nemá přístup, a odešle revizi, jejíž součástí bude tento soubor, zobrazí se podobná zpráva.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or if you’re on a Debian-based distribution like Ubuntu, try apt-get:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V distribuci založené na Debianu (jako je například Ubuntu) zkuste použít program apt-get:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or maybe you have a bunch of automated build servers or continuous integration servers that change a lot, and you don’t want to have to generate SSH keys all the time — you just want to add simple anonymous read access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo možná máte několik serverů průběžné integrace, které se neustále mění a vy nechcete stále generovat SSH klíče. Rádi byste vždy přidali jen obyčejné anonymní oprávnění pro čtení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or you can do this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo můžete provést následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or you can have Git try to automatically fix the issue before applying the patch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git se může také pokusit automaticky daný problém vyřešit, ještě než bude záplata aplikována:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or you can use the shorter scp-like syntax for SSH protocol:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo můžete pro SSH protokol použít kratší zápis jako u scp:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or, if you want to also switch to it immediately, you can use the `checkout -b` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo pokud na ni chcete rovnou přepnout, můžete použít parametr `checkout -b`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or, to compare what is in your `rack` subdirectory with what the `master` branch on the server was the last time you fetched, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Popřípadě chcete-li porovnat, co je ve vašem podadresáři `rack`, s tím, co bylo ve větvi `master` na serveru v okamžiku, kdy jste naposledy vyzvedávali data, spusťte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Or, you can do something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provést můžete také tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Other maintainers prefer to rebase or cherry-pick contributed work on top of their master branch, rather than merging it in, to keep a mostly linear history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jiní správci dávají před začleněním práce z příspěvků přednost jejímu přeskládání nebo částečnému převzetí na vrchol hlavní větve, čímž udržují historii co nejlineárnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Other options are `100755`, which means it’s an executable file; and `120000`, which specifies a symbolic link.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalšími možnostmi režimu jsou `100755`, který označuje spustitelný soubor, a `120000`, který znamená symbolický odkaz.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Other possible settings are false, which never colors the output, and always, which sets colors all the time, even if you’re redirecting Git commands to a file or piping them to another command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalšími možnostmi nastavení jsou false, které výstup nevybarví nikdy, a always, které použije barvy pokaždé, a to i když jste přesměrovali příkazy Git do souboru nebo k jinému příkazu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Other systems tend to store data as changes to a base version of each file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Ostatní systémy ukládají data jako změny v základní verzi každého souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Other useful formats include `--date=iso` (ISO 8601), `--date=rfc` (RFC 2822), `--date=raw` (seconds since the epoch (1970-01-01 UTC)) `--date=local` (times according to your local timezone) as well as `--date=relative` (e.g. "2 hours ago").</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112125Z" creationid="Prikryl" creationdate="20151023T112125Z">
        <seg>K dalším užitečným formátům patří `--date=iso` (ISO 8601), `--date=rfc` (RFC 2822), `--date=raw` (sekundy od počátku (epoch; 1970-01-01 UTC)), `--date=local` (časy ve vašem lokálním časovém pásmu) a také `--date=relative` (jako například "2 hours ago", tj. před dvěma hodinami).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Otherwise, it will start from the beginning and will unnecessarily take longer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bez této konkretizace začne proces od začátku a bude trvat zbytečně dlouho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>P4Merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>P4Merge</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Partly for this reason, working with Git-based remote versions of your projects concurrently with a Subversion server isn’t a good idea.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je také jeden z důvodů, proč není vhodné pracovat zároveň se serverem Subversion a s verzemi vzdálených repozitářů Git k témuž projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Passing `-p` to it instructs the `cat-file` command to figure out the type of content and display it nicely for you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte-li k příkazu `cat-file` parametr `-p`, říkáte mu, aby zjistil typ obsahu a přehledně vám ho zobrazil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Pasting the text often causes formatting issues, especially with "smarter" clients that don’t preserve newlines and other whitespace appropriately.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vložení textu může často způsobovat problémy s formátováním, zvlášť v případě některých „chytřejších“ klientů, kteří správně nezachovávají nové řádky a jiné prázdné znaky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Paul’s master branch is accessible locally as `pb/master` — you can merge it into one of your branches, or you can check out a local branch at that point if you want to inspect it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Paulova hlavní větev (master branch) je teď lokálně dostupná jako `pb/master`. Můžete ji začlenit (merge) do některé ze svých větví, nebo ji můžete zpřístupnit jako lokální větev (check out), jestliže si ji chcete prohlédnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>People can fork a project and push to it, and the main project maintainer can pull in those changes by adding them as remotes and merging in their work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatelé mohou projekt rozštěpit a odesílat do něj revize. Hlavní správce projektu tyto změny natáhne tím, že je přidá jako vzdálené repozitáře a začlení jejich data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>People must have access to your machine over SSH to access it, even in a read-only capacity, which doesn’t make SSH access conducive to open source projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chce-li někdo získat přístup do vašeho repozitáře, byť třeba jen ke čtení, musí mít přístup k vašemu počítači přes SSH. Proto se protokol SSH nehodí pro projekty s otevřeným zdrojovým kódem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>People still won’t be able to log in, but Gitosis will control that for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatelé se stále ještě nebudou moci přihlásit, ale Gitosis za vás bude provádět správu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perhaps instead of hosting an internal private project, you want to host an open source project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nehostujete třeba interní soukromý projekt, ale „open source“ projekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perhaps it’s a library that a third party developed or that you’re developing separately and using in multiple parent projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se třeba o knihovnu, kterou vyvinula třetí strana, nebo kterou vyvíjíte odděleně a používáte ji v několika nadřazených projektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perhaps you accidentally committed a file that contained a password, and you want to make your project open source.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo jste omylem zapsali soubor obsahující vaše heslo, ale chcete, aby byl váš projekt veřejný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Perhaps your main branch has diverged too far from the branch the patch was built from, or the patch depends on another patch you haven’t applied yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše hlavní větev se mohla příliš odchýlit od větve, z níž byla záplata vytvořena, nebo je záplata závislá na jiné záplatě, kterou jste ještě neaplikovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Please review 
--&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222703Z" creationid="Prikryl" creationdate="20151023T222703Z">
        <seg>Please review 
--&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Possibly have one to speed up clones for new developers, but don’t push anything to it that doesn’t have a `git-svn-id` entry.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete ho sice využít k urychlení klonování pro nové vývojáře, ale neodesílejte na něj nic, co nemá záznam `git-svn-id`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Press the Tab key when you’re writing a Git command, and it should return a set of suggestions for you to pick from:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při zadávání příkazu Git stiskněte klávesu Tab a měla by se objevit nabídka, z níž můžete zvolit příslušné dokončení:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Probably the most common transport protocol for Git is SSH.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Patrně nejčastějším přenosovým protokolem pro systém Git je SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Probably the simplest way for smaller setups is to run a static web server with its document root where your Git repositories are, and then enable that `post-update` hook we mentioned in the first section of this chapter.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Patrně nejjednodušším způsobem pro menší týmy je spustit statický webový server s kořenovým adresářem dokumentů, v němž budou uloženy vaše Git repozitáře, a zapnout zásuvný modul `post-update`, o kterém jsme se zmínili už v první části této kapitoly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Project header with a public URL and a private URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záhlaví projektu s veřejnou a soukromou adresou URL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Providing the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte-li k příkazu `git commit` parametr `-a`, Git do revize automaticky zahrne každý soubor, který je sledován. Odpadá potřeba zadávat příkaz `git add`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Put the following line in your `.gitattributes` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru `.gitattributes` vložte následující řádek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Putting that in your `update` script will reject updates that contain commits that have messages that don’t adhere to your rule.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud toto vložíte do skriptu `update`, budou odmítnuty všechny aktualizace s revizemi, které mají zprávu neodpovídající zadanému pravidlu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>R     anu-wsd</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105506Z" creationid="Prikryl" creationdate="20151023T105506Z">
        <seg>R     anu-wsd</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>R     entrans</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105507Z" creationid="Prikryl" creationdate="20151023T105507Z">
        <seg>R     entrans</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>R     indic_web_input</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105511Z" creationid="Prikryl" creationdate="20151023T105511Z">
        <seg>R     indic_web_input</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>R     shreelipi_converter</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105512Z" creationid="Prikryl" creationdate="20151023T105512Z">
        <seg>R     shreelipi_converter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>R  W  git-notes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105508Z" creationid="Prikryl" creationdate="20151023T105508Z">
        <seg>R  W  git-notes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>R  W  gitolite</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105509Z" creationid="Prikryl" creationdate="20151023T105509Z">
        <seg>R  W  gitolite</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>R  W  gitolite-admin</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105510Z" creationid="Prikryl" creationdate="20151023T105510Z">
        <seg>R  W  gitolite-admin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>README
	lib/test.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090843Z" creationid="Prikryl" creationdate="20151024T090843Z">
        <seg>README
	lib/test.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>README           |    6 ++++++
	 Rakefile         |   23 +++++++++++++++++++++++
	 lib/simplegit.rb |   25 +++++++++++++++++++++++++
	 3 files changed, 54 insertions(+)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205840Z" creationid="Prikryl" creationdate="20151022T205840Z">
        <seg>README           |    6 ++++++
	 Rakefile         |   23 +++++++++++++++++++++++
	 lib/simplegit.rb |   25 +++++++++++++++++++++++++
	 3 files changed, 54 insertions(+)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>README | 1 +
	 1 file changed, 1 insertion(+)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102545Z" creationid="Prikryl" creationdate="20151023T102545Z">
        <seg>README | 1 +
	 1 file changed, 1 insertion(+)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>RW                      =   @junior_devs @senior_devs</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105453Z" creationid="Prikryl" creationdate="20151023T105453Z">
        <seg>RW                      =   @junior_devs @senior_devs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>RW  master integ    = @engineers
	    -   master integ    = @engineers
	    RW+                 = @engineers</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105449Z" creationid="Prikryl" creationdate="20151023T105449Z">
        <seg>RW  master integ    = @engineers
	    -   master integ    = @engineers
	    RW+                 = @engineers</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rakefile |    2 +-
	 1 file changed, 1 insertion(+), 1 deletion(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205837Z" creationid="Prikryl" creationdate="20151022T205837Z">
        <seg>Rakefile |    2 +-
	 1 file changed, 1 insertion(+), 1 deletion(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rather than remove a specific file with something like `rm file`, you have to remove it with `git rm --cached` — you must remove it from the index, not from disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nepomůže odstranit konkrétní soubor příkazem `rm file` nebo podobným. Odstraňte ho raději příkazem `git rm --cached` – soubor musíte odstranit z indexu, ne z disku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rebase any work you do outside of your mainline branch back onto it; don’t merge it in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Práci, kterou provedete mimo základní větev, na ni přeskládejte (rebase), nezačleňujte ji (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rebasing a topic branch off another topic branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládání tematické větve, která byla součástí jiné tematické větve 72.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rebasing changes the SHA-1 hashes of these commits so to Git they look like new commits, when in fact you already have the C4 work in your history (see Figure 3-39).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládáním se změnily otisky SHA-1 těchto revizí, a Git je proto považuje za nové revize, přestože změny označené jako C4 už jsou ve skutečnosti ve vaší historii obsaženy (viz obrázek 3-39).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládání provede změny učiněné v jedné linii práce ještě jednou v jiné linii, a to v pořadí, v jakém byly provedeny. Sloučení naproti tomu vezme koncové body větví a sloučí je dohromady.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rebasing the change introduced in C3 onto C4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládání změny provedené v revizi C3 na revizi C4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rebasing your server branch on top of your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přeskládání větve server na vrcholu hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Recently, I was refactoring a file named `GITServerHandler.m` into multiple files, one of which was `GITPackUpload.m`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nedávno jsem refaktoroval soubor s názvem `GITServerHandler.m` do několika jiných souborů, jeden z nich se jmenoval `GITPackUpload.m`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Regular developers work on their topic branch and rebase their work on top of master.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stálí vývojáři pracují na svých tematických větvích a přeskládávají svou práci na vrchol hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember again that this is a rebasing command — every commit included in the range `HEAD~3..HEAD` will be rewritten, whether you change the message or not.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mějte na paměti, že se stále jedná o příkaz přeskládání a každá revize zahrnutá v intervalu `HEAD~3..HEAD` bude přepsána, ať už její zprávu změníte, nebo ponecháte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that although you’re using `git merge` to do this operation, and the merge likely will be much easier than it would be in Subversion (because Git will automatically detect the appropriate merge base for you), this isn’t a normal Git merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že přestože k operaci používáte příkaz `git merge` a sloučení bude pravděpodobně o mnoho snazší, než by bylo v systému Subversion (Git automaticky vyhledá vhodnou základu pro sloučení), nejedná se o standardní příkaz merge systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that anything that is still unstaged — any files you have created or modified that you haven’t run `git add` on since you edited them — won’t go into this commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že všechno, co dosud nebylo připraveno k zapsání – všechny soubory, které jste vytvořili nebo změnili a na které jste po úpravách nepoužili příkaz `git add` –, nebudou do revize zahrnuty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that each file in your working directory can be in one of two states: _tracked_ or _untracked_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že každý soubor ve vašem pracovním adresáři může být ve dvou různých stavech: _sledován_ (tracked) a _nesledován_ (untracked).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that if you’re importing from a real hosted Subversion repository, you should replace the `file:///tmp/test-svn` here with the URL of your Subversion repository:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že pokud import provádíte z reálně hostovaného repozitáře Subversion, je třeba nahradit `file:///tmp/test-svn` adresou URL vašeho repozitáře Subversion:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember that the commit records the snapshot you set up in your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte, že revize zaznamená snímek projektu, jak je obsažen v oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remember, anything that is committed in Git can almost always be recovered.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zapamatujte si, že vše, co je zapsáno v systému Git, lze téměř vždy obnovit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote branches act as bookmarks to remind you where the branches on your remote repositories were the last time you connected to them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálené větve slouží jako záložky, které vám připomínají, kde byly větve ve vzdálených repozitářích, když jste se k nim naposledy připojili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote branches are references to the state of branches on your remote repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálené větve jsou reference (tj. odkazy) na stav větví ve vašich vzdálených repozitářích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote references differ from branches (`refs/heads` references) mainly in that they can’t be checked out.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Reference na vzdálené repozitáře se od větví (reference `refs/heads`) liší zejména tím, že nelze provést jejich checkout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Remote repositories are versions of your project that are hosted on the Internet or network somewhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálené repozitáře jsou verze vašeho projektu umístěné na Internetu nebo kdekoli v síti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resolving deltas: 100% (1951/1951), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223018Z" creationid="Prikryl" creationdate="20151023T223018Z">
        <seg>Resolving deltas: 100% (1951/1951), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resolving deltas: 100% (1952/1952), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223112Z" creationid="Prikryl" creationdate="20151023T223112Z">
        <seg>Resolving deltas: 100% (1952/1952), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Resolving deltas: 100% (772/772), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101810Z" creationid="Prikryl" creationdate="20151023T101810Z">
        <seg>Resolving deltas: 100% (772/772), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Result: OK</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221045Z" creationid="Prikryl" creationdate="20151023T221045Z">
        <seg>Result: OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Rewrite 6df764092f3e7c8f5f94cbe08ee5cf42e92a0289 (1/2)rm 'git.tbz2'
	Rewrite da3f30d019005479c99eb4c3406225613985a1db (2/2)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091829Z" creationid="Prikryl" creationdate="20151024T091829Z">
        <seg>Rewrite 6df764092f3e7c8f5f94cbe08ee5cf42e92a0289 (1/2)rm 'git.tbz2'
	Rewrite da3f30d019005479c99eb4c3406225613985a1db (2/2)
	Ref 'refs/heads/master' was rewritten</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Right below the “Changes to be committed” text, it says "use `git reset HEAD &lt;file&gt;...` to unstage".</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přímo pod nadpisem „Changes to be committed“ (Změny k zapsání) se říká: pro návrat z oblasti připravených změn použijte příkaz `git reset HEAD &lt;soubor&gt;...`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run `git push (remote) (branch)`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spusťte příkaz `git push (server) (větev)`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Run the `git-p4 clone` command to import the Jam project from the Perforce server, supplying the depot and project path and the path into which you want to import the project:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spusťte příkaz `git-p4 clone`, jímž importujete projekt Jam ze serveru Perforce. K příkazu zadejte depot a cestu k projektu, kromě toho také cestu, kam chcete projekt importovat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running `dcommit` on a branch with merged history works fine, except that when you look at your Git project history, it hasn’t rewritten either of the commits you made on the `experiment` branch — instead, all those changes appear in the SVN version of the single merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `dcommit` na větvi se začleněnou historií bude fungovat bez problémů, pomineme-li, že při pohledu na historii projektu Git zjistíme, že nepřepsal žádnou z revizí, kterou jste provedli ve větvi `experiment`. Všechny změny se místo toho objeví v SVN verzi jedné revize vzniklé sloučením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running `git commit` checksums all project directories and stores them as `tree` objects in the Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte-li revizi příkazem `git commit`, provede Git kontrolní součet každého adresáře (v tomto případě pouze kořenového adresáře projektu) a uloží tyto objekty stromu v repozitáři Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git pull` většinou vyzvedne data ze serveru, z něhož jste původně klonovali, a automaticky se pokusí začlenit je do kódu, na němž právě pracujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running `git show HEAD@{2.months.ago}` will work only if you cloned the project at least two months ago — if you cloned it five minutes ago, you’ll get no results.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git show HEAD@{2.months.ago}` bude fungovat, pouze pokud jste projekt naklonovali minimálně před dvěma měsíci (tedy „2 months ago“). Pokud jste jej naklonovali před pěti minutami, neobdržíte žádný výsledek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running `git svn rebase` every once in a while makes sure your code is always up to date.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li čas od času příkaz `git svn rebase`, budete mít jistotu, že pracujete s aktuálním kódem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running a Git server is simple.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zprovoznění gitového serveru je jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running the handful of required commands gives you a simple way to give the world read access to your Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vystačíte s několika málo příkazy, ale získáte jednoduchý způsob, jak nastavit oprávnění pro čtení repozitáře Git pro okolní svět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running this command gives you a list of commits in your text editor that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spuštěním tohoto příkazu otevřete textový editor se seznamem revizí zhruba v této podobě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Running your own server gives you a lot of control and allows you to run the server within your own firewall, but such a server generally requires a fair amount of your time to set up and maintain.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provoz vlastního serveru vám dává celou řadu možností kontroly a umožňuje provozovat server za vaším firewallem. Nastavení a správa takového serveru však obvykle bývají časově náročné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>SSH is also an authenticated network protocol; and because it’s ubiquitous, it’s generally easy to set up and use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>SSH je také síťovým protokolem s autentizací, a protože je hojně rozšířen, je jeho nastavení a používání většinou snadné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>SSH is also the only network-based protocol that you can easily read from and write to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>SSH je navíc jediným síťovým protokolem, z nějž lze snadno číst a do nějž lze snadno zapisovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>SVN- or CVS-style keyword expansion is often requested by developers used to those systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vývojáři, kteří jsou zvyklí na jiné systémy, mohou požadovat nahrazení klíčového slova pro SVN nebo CVS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Say you have a database settings file called database.xml that is different in two branches, and you want to merge in your other branch without messing up the database file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že máte soubor s nastavením databáze nazvaný database.xml, který se ve dvou větvích liší, a vy sem chcete začlenit jinou svoji větev, aniž byste tento soubor změnili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Say you have your repositories in the `/opt/git` directory, and an Apache server is running on your machine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že máte repozitáře uloženy v adresáři `/opt/git` a na vašem počítači je spuštěn server Apache.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Say you want to use vimdiff:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že jste se rozhodli používat vimdiff:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Second, SSH is relatively easy to set up — SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadruhé: protokol SSH se snadno nastavuje – SSH démoni jsou zcela běžní, správci sítě si s nimi většinou vědí rady a mnoho distribucí OS je má ve výchozí instalaci nebo poskytuje nástroje pro jejich správu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Second, it only shows you commits that have been committed up to the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadruhé pak to, že zobrazuje pouze revize, jež byly zapsány na server Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See 'git --help'.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090232Z" creationid="Prikryl" creationdate="20151024T090232Z">
        <seg>See 'git --help'.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See 'git mergetool --tool-help' or 'git help config' for more details.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103002Z" creationid="Prikryl" creationdate="20151023T103002Z">
        <seg>See 'git mergetool --tool-help' or 'git help config' for more details.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See _Chapter 3_ for more detailed information on how to push to remote servers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Více informací o odesílání na vzdálené servery najdete v _kapitole 3_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See Chapter 9 for a more detailed discussion of Git refspecs and different things you can do with them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Více o vzorcích refspec systému Git a různých možnostech, k nimž je lze využít, najdete v kapitole 9.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See the [BFG](http://rtyley.github.io/bfg-repo-cleaner/) website for details.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podrobnosti naleznete na stránkách [BFG](http://rtyley.github.io/bfg-repo-cleaner/).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>See the `git config` manpage for all the subsettings you can configure, if you want to do that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li použít dílčí nastavení, podrobnější informace naleznete na manuálové stránce `git config`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Set up a merge wrapper script named `extMerge` that calls your binary with all the arguments provided:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavte wrapperový skript pro slučování `extMerge`, který bude volat binární soubor všemi dostupnými parametry:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Set your key ID like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>ID svého klíče nastavíte takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Setting up a `.gitignore` file before you get going is generally a good idea so you don’t accidentally commit files that you really don’t want in your Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoření a naplnění souboru `.gitignore` ještě dříve než se pustíte do práce bývá většinou dobrý nápad. Alespoň se vám nestane, že byste nedopatřením zapsali také soubory, o které v repozitáři Git nestojíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She can do so by specifying the local branch followed by a colon (:) followed by the remote branch to the `git push` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může tak učinit příkazem `git push` s určením lokální větve, za níž bude následovat dvojtečka (:) a za ní vzdálená větev:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She can merge either `origin/master` or `issue54` first — they’re both upstream, so the order doesn’t matter.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako první může začlenit buď větev `origin/master` nebo `issue54`. Obě jsou z linie předchozích revizí referenčního zdroje (upstream), a tak jejich pořadí nehraje žádnou roli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She can then fetch Josie’s changes down with `git fetch`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změny, které Josie provedla, vyzvedne příkazem `git fetch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She chooses to merge in `issue54` first:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica se rozhodne začlenit jako první větev `issue54`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She creates a new branch for the feature and does some work on it there:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoří si pro něj novou větev a udělá v ní určité penzum práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She hasn’t fetched John’s changes yet, so her commit history looks like Figure 5-7.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zatím ještě nevyzvedla Johnovy změny, a proto její historie revizí vypadá jako na obrázku 5-7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She runs `git log` to find out:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustí proto příkaz `git log`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She runs a `git fetch` to pull down those changes:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica spustí příkaz `git fetch`, jímž tyto změny stáhne.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She’s created a topic branch called `issue54` and done three commits on that branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořila tematickou větev s názvem `issue54` a zapsala do ní tři revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>She’s ready to push up her work, but gets an e-mail from Josie that a branch with some initial work on it was already pushed to the server as `featureBee`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jessica je připravena odeslat svou práci, ale dostane e-mail od Josie, že již na server odeslala větev `featureBee`, v níž už je část práce hotová.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Short (50 chars or less) summary of changes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215417Z" creationid="Prikryl" creationdate="20151023T215417Z">
        <seg>Krátké (do 50 znaků) shrnutí změn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Side note: There are different kinds of binary formats with a text content, which are hard to find usable converter for.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poznámka: Existují různé druhy binárních formátů, které obsahují text, a pro které se dají obtížně najít použitelné konvertory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Signed-off-by: Junio C Hamano &lt;gitster@pobox.com&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112058Z" creationid="Prikryl" creationdate="20151023T112058Z">
        <seg>Signed-off-by: Junio C Hamano &lt;gitster@pobox.com&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Signed-off-by: Ramkumar Ramachandra &lt;artagnon@gmail.com&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112057Z" creationid="Prikryl" creationdate="20151023T112057Z">
        <seg>Signed-off-by: Ramkumar Ramachandra &lt;artagnon@gmail.com&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102447Z" creationid="Prikryl" creationdate="20151023T102447Z">
        <seg>Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Simple version of the Git data model.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zjednodušený model dat v systému Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Simply download the installer exe file from the GitHub page, and run it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ze stránky GitHub stáhněte instalační soubor exe a spusťte ho:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Simply set it to the path of a file that has content similar to what a `.gitignore` file would have.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduše nastavte cestu k souboru s obsahem podobným souboru `.gitignore`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Simply set up a single repository, and give everyone on your team push access; Git won’t let users overwrite each other.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduše vytvořte repozitář a přidělte všem ze svého týmu oprávnění k odesílání dat. Git neumožní uživatelům, aby se navzájem přepisovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Simply stage and commit files until you have several commits, and run `git rebase --continue` when you’re done:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zkrátka postupně soubory připravíte a zapíšete, čímž vznikne několik zápisů. Jakmile s tím budete hotovi, zadejte příkaz `git rebase --continue`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Od svého vzniku v roce 2005 se Git vyvinul a vyzrál v snadno použitelný systém, který si dodnes uchovává své prvotní kvality.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Since you have no code there yet, GitHub will show you instructions for how create a brand-new project, push an existing Git project up, or import a project from a public Subversion repository (see Figure 4-7).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protože v něm ještě nemáte uložen žádný kód, GitHub vám nabízí instrukce, jak vytvořit zcela nový projekt, odeslat sem existující projekt Git nebo naimportovat projekt z veřejného repozitáře Subversion (viz obrázek 4-7).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Single commit repository data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Repozitář s daty jedné revize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So far, I’ve covered the basics of how Git works and how to use it, and I’ve introduced a number of tools that Git provides to help you use it easily and efficiently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do této chvíle jsem se věnoval základům práce v systému Git a tomu, jak systém používat. Představil jsem několik nástrojů, které Git nabízí pro usnadnění a zefektivnění práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So far, we’ve only seen permissions to be one of `R`, `RW`, or `RW+`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prozatím jsme si ukázali jen oprávnění nastavená na jednu z hodnot `R`, `RW` nebo `RW+`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So we call it a "refex"!</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nazvěme jej tedy „refex“!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, `git fetch origin` fetches any new work that has been pushed to that server since you cloned (or last fetched from) it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takže příkaz `git fetch origin` vyzvedne veškerou novou práci, která byla na uvedený server poslána (push) od okamžiku, kdy jste odtud klonovali (nebo kdy jste odtud naposledy vyzvedávali práci).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if the Rack project updates, you can pull in upstream changes by switching to that branch and pulling:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud je proto projekt Rack aktualizován, můžete natáhnout novější změny přepnutím na tuto větev a jejím natažením:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if there is a `master` branch on the server, you can access the log of that branch locally via</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li tedy na serveru hlavní větev `master`, lokálně lze získat přístup k jejímu logu některým z příkazů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if you see that a method in your code is buggy, you can annotate the file with `git blame` to see when each line of the method was last edited and by whom.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud zjistíte, že některá metoda ve vašem kódu obsahuje chybu, můžete soubor anotovat příkazem `git blame`, který u každého řádku metody zobrazí, kdo a kdy ho naposledy upravil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if you send in a patch to a project and one of the core members applies the patch, both of you get credit — you as the author and the core member as the committer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tedy pošlete záplatu k projektu a některý z ústředních členů (core members) ji použije, do výpisu se dostanete oba – vy jako autor a core member jako autor revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, if you want to make a single commit from these three commits, you make the script look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li tedy vytvořit jedinou revizi z těchto tří revizí, bude skript vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, in the following file</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, let’s change this line in your `/etc/passwd` file</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takže v souboru `/etc/passwd` změňte následující řádek</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, let’s do an actual Git command — you’ll clone the Gitosis control repository:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedeme tedy skutečný příkaz systému Git a naklonujeme řídicí repozitář Gitosis:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, let’s use that advice to unstage the `benchmarks.rb` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budeme se tedy řídit touto radou a vrátíme soubor `benchmarks.rb` z oblasti připravených změn:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, the first thing to do in your `print_export` method is generate a mark from the directory name:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním krokem, který tak při metodě se souborem `print_export` uděláte, bude vygenerování označovače na základě názvu adresáře:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, these are scripts to help developers, and they must be set up and maintained by them, although they can be overridden or modified by them at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou tedy skripty, které slouží jako pomůcka pro vývojáře. Uživatel je musí nastavit a spravovat, ale kdykoli je může také potlačit nebo upravit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, to create a tree object, you first have to set up an index by staging some files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto chcete-li vytvořit objekt stromu, musíte ze všeho nejdříve připravit soubory k zapsání, a vytvořit tak index.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, to get a list of all the commit SHAs introduced between one commit SHA and another, you can run something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tedy chcete získat seznam všech hodnot SHA revizí provedených mezi dvěma konkrétními revizemi, můžete spustit zhruba toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, what is Git in a nutshell?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jak bychom tedy mohli Git charakterizovat?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>So, you can either run four config commands</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete tedy spustit kterýkoli ze čtyř konfiguračních příkazů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some Linux distributions have a `gitweb` package that you may be able to install via `apt` or `yum`, so you may want to try that first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé linuxové distribuce mají balíček `gitweb`, který by mělo být možné nainstalovat pomocí nástrojů `apt` nebo `yum`. Zkuste proto tuto možnost jako první.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some changes can be made simply by editing the rc file, but if that is not sufficient, there’s documentation on customising Gitolite.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Něco můžete změnit jednoduše editací rc souboru. Pokud to ale nestačí, naleznete víc v dokumentaci věnované přizpůsobení Gitolite.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some files look like text files but for all intents and purposes are to be treated as binary data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé soubory se tváří jako textové, ale v podstatě je s nimi třeba zacházet jako s binárními daty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some larger projects also have a `proposed` or `pu` (proposed updates) branch that has integrated branches that may not be ready to go into the `next` or `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé větší projekty mají také větev `proposed` nebo `pu` (proposed updates, návrh aktualizací) s integrovanými větvemi, které nemusí být nutně způsobilé k začlenění do větve `next` nebo `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of the goals of the new system were as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Mezi požadované vlastnosti systému patřily zejména:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of the variables involved are active contributor size, chosen workflow, your commit access, and possibly the external contribution method.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mezi proměnné patří v tomto procesu počet aktivních přispěvatelů, zvolený pracovní postup, vaše oprávnění pro odesílání revizí a případně i metoda externího přispívání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of these files may use an UTF-16 encoding or other "codepages" and `strings` won’t find anything useful in there.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé z těchto souborů ale mohou používat kódování UTF-16 nebo jiné kódování a `strings` v nich nic rozumného nenajde.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some of these settings can also be specified for a path, so that Git applies those settings only for a subdirectory or subset of files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některá z těchto nastavení lze také provést pouze pro určité umístění, a Git je tak aplikuje pouze na jeden podadresář nebo skupinu souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some people have full access, and others only have access to push changes to certain subdirectories or specific files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někteří uživatelé budou mít plný přístup, jiní budou mít přístup jen do některých podadresářů nebo ke konkrétním souborům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some people refer to the branching model in Git as its “killer feature”  , and it certainly sets Git apart in the VCS community.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někteří lidé mluví o modelu větvení v systému Git jako o převratné vlastnosti. Není sporu o tom, že je Git díky tomu ve skupině systémů pro správu verzí poměrně jedinečný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Some rdoc changes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221553Z" creationid="Prikryl" creationdate="20151023T221553Z">
        <seg>Some rdoc changes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Someone accidentally commits a huge binary file with a thoughtless `git add .`, and you want to remove it everywhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdo příkazem `git add .` bezmyšlenkovitě zapsal obří binární soubor a vy ho chcete odstranit ze všech revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Someone pushes rebased commits, abandoning commits you’ve based your work on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kdosi odeslal přeskládané revize a zahodil ty, na nichž jste založili svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Sometimes it's easier to review changes on the word level rather than on the line level.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdy se změny kontrolují snadněji na úrovni slov než na úrovni řádků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Sometimes you’re stuck on a project using another VCS, and many times that system is Subversion.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Někdy jste nuceni pracovat na projektu v jiném systému VCS, jímž často bývá Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Sometimes, developers want to get a combination of a large project’s subdirectories, depending on what team they’re on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vývojáři někdy chtějí získat kombinaci podadresářů velkého projektu podle toho, v jakém týmu pracují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Splitting a commit undoes a commit and then partially stages and commits as many times as commits you want to end up with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozdělení revize vrátí všechny změny v revizi obsažené a po částech je znovu připraví a zapíše do tolika revizí, kolik určíte jako konečný počet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Stage this hunk [y,n,a,d,/,j,J,g,e,?]?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221834Z" creationid="Prikryl" creationdate="20151023T221834Z">
        <seg>Stage this hunk [y,n,a,d,/,j,J,g,e,?]?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Staged means that you have marked a modified file in its current version to go into your next commit snapshot.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Připraveno k zapsání znamená, že jste změněný soubor v jeho aktuální verzi určili k tomu, aby byl zapsán v další revizi (tzv. commit).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Staging the file marks it as resolved in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Připravení souboru k zápisu ho v systému Git označí jako vyřešený.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Staging the files checksums each one (the SHA-1 hash we mentioned in Chapter 1), stores that version of the file in the Git repository (Git refers to them as blobs), and adds that checksum to the staging area:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při přípravě souborů k zapsání je pro každý z nich vypočítán kontrolní součet (o otisku SHA-1 jsme se zmínili v kapitole 1), daná verze souborů se uloží v repozitáři Git (Git na ně odkazuje jako na bloby) a přidá jejich kontrolní součet do oblasti připravených změn:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start by clicking the "create a new one" link next to Your Repositories on the user dashboard.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začněte kliknutím na odkaz „create a new one“ (vytvořit nový) vedle nadpisu „Your Repositories“ na ovládacím panelu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Start with the first tree you wrote:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začněte prvním stromem, který jste zapsali:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Stashing takes the dirty state of your working directory — that is, your modified tracked files and staged changes — and saves it on a stack of unfinished changes that you can reapply at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odložení vezme neuspořádaný stav vašeho pracovního adresáře – tj. změněné sledované soubory a změny připravené k zapsání – a uloží ho do zásobníku nehotových změn, který můžete kdykoli znovu aplikovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Submodule path 'rack': checked out '08d709f78b8c5b0fbeb7821e37fa53e69afcf433'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223051Z" creationid="Prikryl" creationdate="20151023T223051Z">
        <seg>Submodule path 'rack': checked out '08d709f78b8c5b0fbeb7821e37fa53e69afcf433'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Submodules allow you to keep a Git repository as a subdirectory of another Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Submoduly umožňují uchovávat repozitář Git jako podadresář jiného repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Subversion can have only a single linear history, and confusing it is very easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Subversion může mít pouze jednu lineární historii a opravdu není těžké uvést ho do rozpaků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Subversion has to clone one revision at a time and then push it back into another repository — it’s ridiculously inefficient, but it’s the only easy way to do this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Subversion musí klonovat každou revizi zvlášť a tu pak odesílá zpět do jiného repozitáře. Tento postup je sice velice neefektivní, ale jiná jednoduchá možnost neexistuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Subversion importing interface.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozhraní importu ze systému Subversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suffice it to say that this is rare.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je jasné, že to většinou nechcete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you add a remote like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že přidáte například tento vzdálený repozitář:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you clone from a central server and then do some work off that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Představme si situaci, kdy jste naklonovali repozitář z centrálního serveru a provedli jste v něm několik změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you decide that you want to merge your client-side changes into your mainline for a release, but you want to hold off on the server-side changes until it’s tested further.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že nyní chcete začlenit změny provedené na straně klienta do své hlavní linie k vydání, ale prozatím chcete počkat se změnami na straně serveru, dokud nebudou pečlivě otestovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you look at the history of your project:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete mít například takovouto historii projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you want to add a mechanism that uses an access control list (ACL) that specifies which users are allowed to push changes to which parts of your projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že chcete přidat mechanismus, který bude používat seznam oprávnění ACL (access control list), v němž bude stanoveno, kteří uživatelé smějí do které části vašeho projektu odesílat změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you want to add the Rack library (a Ruby web server gateway interface) to your project, possibly maintain your own changes to it, but continue to merge in upstream changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že budete chtít vložit do svého projektu knihovnu Rack (rozhraní brány webového serveru Ruby), udržovat v ní vlastní změny, ale nadále začleňovat i změny ze serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you work in current, you back up your project by occasionally copying the directory into a time-stamped `back_YYYY_MM_DD` backup directory, and you want to import this into Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že pracujete na projektu, který příležitostně zálohujete zkopírováním pracovního adresáře do zálohového, datem označeného adresáře `back_YYYY_MM_DD`, a ten chcete nyní importovat do systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose your commit history looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že vaše historie revizí vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose your history looks like the following: you created an `experiment` branch, did two commits, and then merged them back into `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že vaše historie vypadá následovně: vytvořili jste větev `experiment`, zapsali jste dvě revize a začlenili jste je zpět do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose your repository contains the following branches and tags:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že váš repozitář obsahuje tyto větve a značky:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you’re developing a web site and creating Atom feeds.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Programujete webové stránky a vytváříte kanály Atom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you’re done with a remote branch — say, you and your collaborators are finished with a feature and have merged it into your remote’s `master` branch (or whatever branch your stable codeline is in).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že už nepotřebujete jednu ze vzdálených větví. Spolu se svými spolupracovníky jste dokončili určitou funkci a začlenili jste ji do větve `master` na vzdáleném serveru (nebo do jakékoli jiné větve, kterou používáte pro stabilní kód).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you’ve decided that your issue #53 work is complete and ready to be merged into your `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že jste dokončili práci na chybě č. 53 a nyní byste ji rádi začlenili do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Suppose you’ve done an import from another source control system and have subdirectories that make no sense (trunk, tags, and so on).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládejme, že jste dokončili import z jiného systému ke správě zdrojového kódu a máte podadresáře, které nedávají žádný smysl (trunk, tags apod.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switch back to your original story and continue working.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepnete zpět na svou původní část a pokračujete v práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switch back to your production branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vrátíte se zpět na produkční větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switched to a new branch "rack_branch"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223130Z" creationid="Prikryl" creationdate="20151023T223130Z">
        <seg>Switched to a new branch "rack_branch"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switched to a new branch 'serverfix'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104656Z" creationid="Prikryl" creationdate="20151023T104656Z">
        <seg>Switched to a new branch 'serverfix'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switched to a new branch 'sf'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104703Z" creationid="Prikryl" creationdate="20151023T104703Z">
        <seg>Switched to a new branch 'sf'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Switching branches with submodules in them can also be tricky.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problematické může být také přepínání větví obsahujících submoduly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>TODO |    1 +
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220452Z" creationid="Prikryl" creationdate="20151023T220452Z">
        <seg>TODO |    1 +
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Table 2-1 lists some of the more useful options that format takes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tabulka 2-1 uvádí některé užitečné parametry, které format akceptuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Table 2-2 lists the options we’ve covered so far and some other common formatting options that may be useful, along with how they change the output of the `log` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tabulka 2-2 uvádí parametry, které jsme už zmínili, a některé další běžné parametry formátování, které mohou být užitečné. Pravý sloupec popisuje, jak který parametr změní výstup `log`u.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Take a history like Figure 3-31, for example.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vezměme například historii na obrázku 3-31.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Take the contents of the public key of that pair, and paste it into the SSH Public Key text box.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vezměte obsah veřejného klíče z daného páru a vložte ho do textového pole „SSH Public Key“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Technically you won’t lose the work, but you won’t have a branch pointing to it, so it will be somewhat difficult to retrieve.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Technicky vzato práci neztratíte, ale nebude žádná větev, která by na ni ukazovala, a tak bude poněkud obtížené získat práci zpět.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Technically, `git am` is built to read an mbox file, which is a simple, plain-text format for storing one or more e-mail messages in one text file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git am` je technicky koncipován tak, aby přečetl soubor mbox, tj. formát prostého textu pro ukládání jedné či více e-mailových zpráv do jednoho textového souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Technically, you can do that by explicitly figuring out the common ancestor and then running your diff on it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete tedy explicitně najít společného předka obou větví a spustit na něm příkaz diff:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That approach lets you do more complex things like deny non-fast-forwards to a certain subset of users.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato metoda umožňuje pokročilejší nastavení, jako zamítnutí jiných aktualizací než „rychle vpřed“ určité skupině uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That being said, many Git servers authenticate using SSH public keys.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mnoho serverů Git provádí ověřování totožnosti pomocí veřejných SSH klíčů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That change will be rejected until you merge in their work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jejich změna bude odmítnuta, dokud nezačlení dříve odeslanou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That command compares what is in your working directory with what is in your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz srovná obsah vašeho pracovního adresáře a oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That command did two things.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz provedl dvě věci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That command does the same thing as the previous one, but the target directory is called `mygrit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz učiní totéž co příkaz předchozí, ale cílový adresář se bude jmenovat `mygrit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That commit is when this file was first added to this project, and those lines have been unchanged since.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato revize vznikla prvním přidáním tohoto souboru do projektu a tyto řádky zůstaly od té doby nezměněny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That creates a directory named `grit`, initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto příkazem se vytvoří adresář s názvem `grit`, inicializuje se v něm adresář `.git`, stáhnou se všechna data pro tento repozitář a vytvoří se pracovní kopie nejnovější verze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That drops you into your text editor, which has your last commit message in it, ready for you to modify the message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím se přesunete do textového editoru, v němž bude otevřena vaše poslední zpráva k revizi. Nyní ji můžete upravit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That gives you the log output in XML format — you can look for the authors, create a unique list, and then strip out the XML.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoříte tím log ve formátu XML. Můžete v něm vyhledávat autory, vytvořit si vlastní seznam a XML zase vyjmout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That gives you your next commit object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím získáte další objekt revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That installs a couple of executables that Gitosis will use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto příkazem nainstalujete několik spustitelných souborů, které bude Gitosis používat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is a simple example you’re likely to encounter.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S uvedeným jednoduchým případem se pravděpodobně setkáte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is a special mode in Git that basically means you’re recording a commit as a directory entry rather than a subdirectory or a file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o speciální režim systému Git, který udává, že revizi zaznamenáváte jako adresář, ne jako podadresář nebo soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is a very basic case of the transfer protocols.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou pouze základní případy přenosových protokolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is a very useful syntax to remember.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Určitě uděláte dobře, pokud si tuto syntaxi zapamatujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is all a lightweight tag is — a branch that never moves.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je celá prostá značka – větev, která se nikdy nepřemisťuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is one of the simplest workflows.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je jeden z nejjednodušších pracovních postupů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is probably the simplest workflow, but it’s problematic if you’re dealing with larger repositories or projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se patrně o nejjednodušší pracovní postup. Je však problematický, pokud ho používáme u velkých repozitářů nebo projektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is, the most recent commits show up first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejnovější revize tak budou uvedeny nahoře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is, you can specify that certain people (or groups of people) can only push certain "refs" (branches or tags) but not others.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že lze nastavit, aby určití lidé mohli odesílat jen do určité větve (nebo určité značky; obecně „refs“), ale do jiné ne.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That is, you’ll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naučíte se tedy, jak úspěšně přispívat svým kódem do projektů a jak to učinit co nejjednodušeji pro vás i správce projektu. Dále se dozvíte, jak efektivně spravovat projekt, do nějž přispívá velký počet vývojářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That last command creates new Git repository called `gitolite-admin` on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední příkaz vytvoří na serveru nový gitovský repozitář nazvaný `gitolite-admin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That means Gitosis recognized you but shut you out because you’re not trying to do any Git commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že vás Gitosis sice rozpoznal, ale nedovolí vám přístup, protože se nepokoušíte zadat žádný příkaz Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That means when I host my `grit` project on GitHub, you won’t find it at `github.com/grit` but instead at `github.com/schacon/grit`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že pokud budu hostovat svůj projekt `grit` na serveru GitHub, nenajdete ho na adrese `github.com/grit`, ale jako `github.com/schacon/grit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That means you can do things such as</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete tak zadat například příkaz ve tvaru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That pulls down the work John has pushed up in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím stáhne práci, kterou mezitím odeslal John.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That returns an integer value for the date of each directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím dostanete celé číslo pro data každého adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That rule will just get added to the ruleset for the `gitolite` repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto pravidlo se pak přidá do skupiny pravidel repozitáře `gitolite`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That shows the tagger information, the date the commit was tagged, and the annotation message before showing the commit information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz zobrazí ještě před informacemi o revizi informace o autorovi značky, datu, kdy byla revize označena, a zprávu značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That shows you where the branch tip was yesterday.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vám ukáže, kde se vrchol větve nacházel včera.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That starts up an HTTPD server on port 1234 and then automatically starts a web browser that opens on that page.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím spustíte HTTPD server na portu 1234 a automaticky se spustí webový prohlížeč, který otevře tuto stránku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That way, the maintainer doesn’t have to do any integration work — just a fast-forward or a clean apply.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce v tomto případě nemusí provádět žádnou integraci, provede pouze posun „rychle vpřed“ nebo čistou aplikaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That way, they can correct any problems before committing and before those issues become more difficult to fix.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny problémy tak budou moci opravit, dokud to ještě není příliš složité a dokud je nezapsali do revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That way, you can use private branches for work you don’t want to share, and push up only the topic branches you want to collaborate on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem si můžete zachovat soukromé větve pro práci, kterou nehodláte sdílet, a odesílat pouze tematické větve, na nichž chcete spolupracovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That way, you don’t litter the project with `.gitignore` files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu si nemusíte projekt znečišťovat soubory `.gitignore`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s 1,200 times the number of grains of sand on the earth.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je 1200násobek počtu všech zrnek písku na celé Zemi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s a pretty nice trick and may save you some time and documentation reading.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o užitečný trik, který vám může ušetřit čas a pročítání dokumentace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s all we’ll cover about GitHub, but it’s important to note how quickly you can do all this.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>O serveru GitHub je to vše. Ještě jednou bych rád zdůraznil, že všechny tyto kroky lze provést opravdu velmi rychle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s all.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A to je vše.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s basically what a branch in Git is: a simple pointer or reference to the head of a line of work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A to je také skutečná podstata větví v systému Git. Jedná se o jednoduché ukazatele, neboli reference na „hlavu“ (angl. head) jedné linie práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s it — you’ve created a valid Git blob object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A je hotovo. Právě jste vytvořili platný objekt blobu Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A to je celé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>That’s why `git push` and `git pull` work out of the box with no other arguments.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je také důvod, proč příkazy `git push` a `git pull` fungují samy od sebe i bez dalších parametrů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Commits tab shows a list of commits in reverse chronological order, similar to the output of the `git log` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záložka „Commits“ zobrazuje seznam revizí v obráceném chronologickém pořadí, podobně jako výstup příkazu `git log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Downloads tab allows you to upload project binaries and link to tarballs and zipped versions of any tagged points in your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záložka „Downloads“ umožňuje nahrávat binární soubory k projektu a přidávat odkazy na tarbally a komprimované verze všech míst ve vašem projektu, které jsou označeny značkou (tagem).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git daemon checks that the command can be run and that the repository exists and has public permissions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Démon Git zkontroluje, zda je příkaz skutečně možné spustit, zda existuje daný repozitář a zda jsou oprávnění k němu veřejná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git data is served as basic static files (see Chapter 9 for details about exactly how it’s served).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Data repozitáře Git jsou obsluhována jako obyčejné statické soubory (podrobnosti o přesném způsobu obsluhy naleznete v kapitole 9).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git directory is where Git stores the metadata and object database for your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Adresář Git (repozitář) je místo, kde Git uchovává metadata a databázi objektů vašeho projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project also has a `maint` branch that is forked off from the last release to provide backported patches in case a maintenance release is required.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt Git má kromě toho větev `maint`, která byla odštěpena z posledního vydání a představuje záplaty backportované pro případ, že by bylo třeba vydat opravnou verzi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project has four long-running branches: `master`, `next`, and `pu` (proposed updates) for new work, and `maint` for maintenance backports.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš projekt Git má čtyři trvalé větve: `master`, `next` a `pu` (proposed updates, tj. návrh aktualizací) pro novou práci a `maint` pro backporty správy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project has well-formatted commit messages — I encourage you to run `git log --no-merges` there to see what a nicely formatted project-commit history looks like.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt Git obsahuje kvalitně naformátované zprávy k revizím. Mohu vám doporučit, abyste v něm zkusili zadat příkaz `git log --no-merges` a podívali se, jak vypadá pěkně naformátovaná historie revizí projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project provides a document that lays out a number of good tips for creating commits from which to submit patches — you can read it in the Git source code in the `Documentation/SubmittingPatches` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt Git obsahuje dokument, v němž je navržena celá řada dobrých tipů pro vytváření revizí, z nichž se skládají jednotlivé záplaty. Dokument najdete ve zdrojovém kódu systému Git v souboru `Documentation/SubmittingPatches`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git project requires that the more detailed explanation include your motivation for the change and contrast its implementation with previous behavior — this is a good guideline to follow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt Git vyžaduje, aby podrobnější popis revize obsahoval vaši motivaci ke změnám a vymezil jejich implementaci na pozadí předchozích kroků. Tuto zásadu je dobré dodržovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git protocol is far more efficient and thus faster than the HTTP protocol, so using it will save your users time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protokol Git je daleko výkonnější, a proto také rychlejší než protokol HTTP, takže uživatelům ušetří nějaký čas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git protocol is the fastest transfer protocol available.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protokol Git je ze všech dostupných protokolů nejrychlejší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Git source repo, for instance, contains more than 240 tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Například zdrojový kód Git „repo“ obsahuje více než 240 značek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The GitHub plan page.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výběr typu účtu na serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The GitHub user dashboard.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatelský ovládací panel na serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The GitHub user signup form.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Registrační formulář na serveru GitHub</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The GitWeb web-based user interface.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Online uživatelské rozhraní GitWeb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Graphs tab has some contribution visualizations and statistics about your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záložka „Graphs“ graficky zobrazuje některé příspěvky a statistiky k vašemu projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The HEAD file is a symbolic reference to the branch you’re currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor HEAD je symbolická reference na větev, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The HTTP method is simple but a bit inefficient.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Metoda přenosu HTTP je jednoduchá, avšak málo výkonná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The HTTP protocol also isn’t very resource intensive on your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Protokol HTTP navíc jen minimálně omezuje zdroje serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Linux kernel is an open source software project of fairly large scope.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jádro Linuxu je software celkem velkého rozsahu, s otevřeným kódem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Linux kernel repository also has a non-commit-pointing tag object — the first tag created points to the initial tree of the import of the source code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také jádro Linuxu obsahuje objekt značky, který neukazuje na revizi. První vytvořená značka ukazuje na první strom importu zdrojového kódu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Network tab shows all the people who have forked your project and contributed back.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záložka „Network“ zobrazuje všechny uživatele, kteří se odštěpili od vašeho projektu a zase do něj přispěli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Public Clone URL is a public, read-only Git URL over which anyone can clone the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>„Public Clone URL“ je veřejná adresa Git pouze pro čtení, na níž si může váš projekt kdokoli naklonovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The SHA-1 digest is 20 bytes or 160 bits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Otisk SHA-1 má 20 bytů, neboli 160 bitů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The SHA-1 value of all '0's means that nothing was there before — because you’re adding the experiment reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodnota SHA-1 ze samých nul znamená, že na tomto místě předtím nic nebylo, protože přidáváte větev „experiment“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Subversion bridge is the gateway drug to the DVCS world.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Most k systému Subversion je branou do světa DVCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Wiki tab provides a wiki where you can write documentation or other information about your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záložka „Wiki“ vám nabízí stránku wiki, kam můžete napsat dokumentaci nebo jiné informace ke svému projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The Your Clone URL is a read/write SSH-based URL that you can read or write over only if you connect with the SSH private key associated with the public key you uploaded for your user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>„Your Clone URL“ je SSH adresa ke čtení a zápisu, přes níž můžete číst a zapisovat. To však pouze v případě, že se připojíte se soukromým klíčem SSH asociovaným s veřejným klíčem, který jste zadali pro svého uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The _author_ is the person who originally wrote the patch, whereas the _committer_ is the person who last applied the patch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>_Autor_ (author) je osoba, která práci původně napsala, zatímco _autor revize_ (committer) je osoba, která práci zapsala do repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `*` next to each file means the file is selected to be staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znak `*` vedle souborů znamená, že je soubor vybrán jako připravený k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `+` tells Git to update the reference even if it isn’t a fast-forward.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znak `+` systému Git říká, aby aktualizoval referenci i v případě, že nesměřuje „rychle vpřed“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `--author` umožňuje filtrovat výpisy podle konkrétního autora, pomocí parametru `--grep` můžete ve zprávách k revizím vyhledávat klíčová slova.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--ignore-unmatch` option to `git rm` tells it not to error out if the pattern you’re trying to remove isn’t there.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li k příkazu `git rm` parametr `--ignore-unmatch`, nařídíte systému Git, aby nepovažoval za chybu, jestliže nenajde vzor, který se snažíte odstranit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--index-filter` option is similar to the `--tree-filter` option used in Chapter 6, except that instead of passing a command that modifies files checked out on disk, you’re modifying your staging area or index each time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `--index-filter` je podobný parametru `--tree-filter`, který jsme používali v kapitole 6, jen s tím rozdílem, že příkazem nezměníte soubory načtené na disku, ale oblast připravených změn, čili index.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--no-commit` option tells Git not to automatically record a commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `--no-commit` říká systému Git, aby revizi automaticky nezaznamenával.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--squash` option takes all the work on the merged branch and squashes it into one non-merge commit on top of the branch you’re on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `--squash` (komprimovat) vezme všechnu vaši práci v začleněné větvi a zkomprimuje ji do jedné revize, která nevznikla jako výsledek sloučení a leží na vrcholu větve, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `--tree-filter` option runs the specified command after each checkout of the project and then recommits the results.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `--tree-filter` spustí zadaný příkaz po každém checkoutu projektu a znovu zapíše jeho výsledky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-M` switch tells Git to look for renames.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepínač `-M` řekne systému Git, aby zkontroloval případné přejmenování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-T trunk -b branches -t tags` part tells Git that this Subversion repository follows the basic branching and tagging conventions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Část `-T trunk -b branches -t tags` říká systému Git, že tento repozitář Subversion dodržuje základní zásady větvení a značkování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-m` specifies a tagging message, which is stored with the tag.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `-m` udává zprávu značky, která bude uložena spolu se značkou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `-w` tells `hash-object` to store the object; otherwise, the command simply tells you what the key would be.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `-w` sděluje příkazu `hash-object`, aby objekt uložil. Bez parametru by vám příkaz jen sdělil, jaký klíč by byl přidělen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `.pub` file is your public key, and the other file is your private key.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor `.pub` je váš veřejný klíč, druhý soubor je soukromý klíč.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `Author` information is the individual who originally created the patch and when it was originally created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace `Author` naproti tomu označuje jedince, který patch původně vytvořil, a kdy tak učinil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `Commit` information indicates the person who applied the patch and the time it was applied.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace `Commit` uvádí osobu, která patch aplikovala, a čas, kdy se tak stalo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `SHA^@` syntax resolves to all the parents of that commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Syntaxe `SHA^@` se vztahuje na všechny rodiče této revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `benchmarks.rb` file appears under a section named “Changes not staged for commit” — which means that a file that is tracked has been modified in the working directory but not yet staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor `benchmarks.rb` je uveden v části „Changes not staged for commit“ (změny, které nejsou připraveny k zapsání). Znamená to, že soubor, který je sledován, byl v pracovním adresáři změněn, avšak ještě nebyl připraven k zapsání (staged).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `benchmarks.rb` file is modified but once again unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor `benchmarks.rb` má stav „změněn“, ale už se nenachází v oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `bisect` command does a binary search through your commit history to help you identify as quickly as possible which commit introduced an issue.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `bisect` zahájí binární vyhledávání ve vaší historii revizí a pomůže vám co nejrychleji identifikovat, která revize je původcem problému.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `branches` directory isn’t used by newer Git versions, and the `description` file is only used by the GitWeb program, so don’t worry about those.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Adresář `branches` se už v novějších verzích systému Git nepoužívá a soubor `description` používá pouze program GitWeb, takže o tyto dvě položky se nemusíte starat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `cat` program is basically a no-op: it spits out the same data that it gets in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Program `cat` ve své podstatě nic neudělá: jeho výstupem jsou stejná data, která tvořila vstup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `color.ui = true` setting is almost always what you’ll want to use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Téměř vždy vystačíte s příkazem `color.ui = true`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `commit-msg` hook takes one parameter, which again is the path to a temporary file that contains the current commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `commit-msg` používá jeden parametr, jímž je cesta k dočasnému souboru obsahujícímu aktuální zprávu k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `config` file contains your project-specific configuration options, and the `info` directory keeps a global exclude file for ignored patterns that you don’t want to track in a `.gitignore` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor `config` obsahuje konfigurační nastavení vašeho projektu a v adresáři `info` je uložen globální soubor `exclude` s maskami ignorovaných souborů a adresářů, které chcete explicitně ignorovat prostřednictvím souboru `.gitignore`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `dcommit` command that you run erases any information that says what branch was merged in, so subsequent merge-base calculations will be wrong — the dcommit makes your `git merge` result look like you ran `git merge --squash`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `dcommit`, smažete všechny informace, které sdělují, jaká větev byla začleněna, a všechny následné výpočty základny pro sloučení tak budou nesprávné. Příkaz dcommit způsobí, že bude výsledek příkazu `git merge` vypadat, jako byste spustili příkaz `git merge --squash`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `fetch-pack` process sends data that looks like this to the daemon after connecting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces `fetch-pack` pošle démonovi po připojení data, která mají následující podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `format-patch` command prints out the names of the patch files it creates.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `format-patch` vypíše názvy souborů záplaty, kterou vytváří.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `gc` stands for garbage collect, and the command does a number of things: it gathers up all the loose objects and places them in packfiles, it consolidates packfiles into one big packfile, and it removes objects that aren’t reachable from any commit and are a few months old.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Písmena `gc` jsou zkratkou anglického výrazu „garbage collect“ (sběr odpadků). Příkaz provádí hned několik věcí: sbírá všechny volné objekty a umisťuje je do balíčkových souborů, spojuje balíčkové soubory do jednoho velkého a odstraňuje objekty, jež nejsou dostupné z žádné revize a jsou starší několika měsíců.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git add` command takes a path name for either a file or a directory; if it’s a directory, the command adds all the files in that directory recursively.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git add` je doplněn uvedením cesty buď k souboru, nebo k adresáři. Pokud se jedná o adresář, příkaz přidá rekurzivně všechny soubory v tomto adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git branch` command does more than just create and delete branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git branch` umí víc, než jen vytvářet a mazat větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git branch` command only created a new branch — it didn’t switch to that branch (see Figure 3-5).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkazem `git branch` jste pouze vytvořili novou větev, zatím jste na ni nepřepnuli (viz obrázek 3-5).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git describe` command favors annotated tags (tags created with the `-a` or `-s` flag), so release tags should be created this way if you’re using `git describe`, to ensure the commit is named properly when described.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git describe` upřednostňuje anotované značky (značky vytvořené s příznakem `-a` nebo `-s`). Pokud tedy používáte příkaz `git describe`, abyste se při vytváření popisu ujistili, že je revize pojmenována správně, měli byste značky jednotlivých vydání vytvářet tímto způsobem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git fetch` command updates your remote references.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git fetch` aktualizuje vaše reference na vzdálený server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git rm` command does that and also removes the file from your working directory so you don’t see it as an untracked file next time around.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odstranění provedete příkazem `git rm`, který odstraní soubor zároveň z vašeho pracovního adresáře, a proto ho už příště neuvidíte mezi nesledovanými soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git status` command reminds you:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Připomene vám to příkaz `git status`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git svn` tools are useful if you’re stuck with a Subversion server for now or are otherwise in a development environment that necessitates running a Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroje `git svn` využijete, jestliže chcete pozvolna přejít ze systému Subversion na systém Git nebo pokud pracujete ve vývojovém prostředí, v němž je z nějakého důvodu nutné používat server Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git svn` toolset provides a number of commands to help ease the transition to Git by providing some functionality that’s similar to what you had in Subversion.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sada nástrojů `git svn` dává uživateli do ruky celou řadu příkazů, jež jsou svou funkcí podobné příkazům v systému Subversion a uživateli tím usnadňují přechod do systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git verify-pack` plumbing command allows you to see what was packed up:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nízkoúrovňový příkaz `git verify-pack` umožňuje prohlížet, co bylo zabaleno:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `git-receive-pack` command immediately responds with one line for each reference it currently has — in this case, just the `master` branch and its SHA.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git-receive-pack` okamžitě odpoví jedním řádkem pro každou referenci, kterou v danou chvíli obsahuje – v tomto případě je to pouze větev `master` a její SHA.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `gitosis.conf` file is the control file you use to specify users, repositories, and permissions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor `gitosis.conf` je řídicí soubor, který slouží ke specifikaci uživatelů, repozitářů a oprávnění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `hooks` directory contains your client- or server-side hook scripts, which are discussed in detail in Chapter 7.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Adresář `hooks` obsahuje skripty zásuvných modulů na straně klienta nebo serveru, které jsme podrobně popisovali v kapitole 7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `keydir` directory is where you store the public keys of all the users who have any sort of access to your repositories — one file per user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V adresáři `keydir` jsou pak uloženy veřejné klíče pro všechny uživatele, kteří mají (ať už jakýkoli) přístup k vašim repozitářům – jeden soubor pro každého uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `master^{tree}` syntax specifies the tree object that is pointed to by the last commit on your `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Syntaxe `master^{tree}` určuje objekt stromu, na nějž ukazuje poslední revize větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `objects` directory stores all the content for your database, the `refs` directory stores pointers into commit objects in that data (branches), the `HEAD` file points to the branch you currently have checked out, and the `index` file is where Git stores your staging area information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V adresáři `objects` je uložen celý obsah vaší databáze, v adresáři `refs` jsou uloženy ukazatele na objekty revizí v datech (větve). Soubor `HEAD` ukazuje na větev, na níž se právě nacházíte, a soubor `index` je pro systém Git úložištěm informací o oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `oneline` and `format` options are particularly useful with another `log` option called `--graph`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametry `oneline` a `format` jsou zvlášť užitečné ve spojení s další možností `log`u – parametrem `--graph`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `oneline` option prints each commit on a single line, which is useful if you’re looking at a lot of commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `oneline` vypíše všechny revize na jednom řádku. Tuto možnost oceníte při velkém množství revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `post-receive` hook runs after the entire process is completed and can be used to update other services or notify users.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `post-receive` se spouští až poté, co je celý proces dokončen. Lze ho použít k aktualizaci jiných služeb nebo odeslání oznámení jiným uživatelům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `post-update` hook that comes with Git by default runs the appropriate command (`git update-server-info`) to make HTTP fetching and cloning work properly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `post-update`, který je standardně součástí systému Git, spustí příslušný příkaz (`git update-server-info`), který zajistí správné vyzvedávání a klonování dat přes protokol HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `pre-commit` hook is run first, before you even type in a commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `pre-commit` se spouští jako první, ještě než začnete psát zprávu k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `pre-rebase` hook runs before you rebase anything and can halt the process by exiting non-zero.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `pre-rebase` se spouští před každým přeskládáním a při nenulové hodnotě může tento proces zastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `prepare-commit-msg` hook is run before the commit message editor is fired up but after the default message is created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `prepare-commit-msg` se spouští ještě předtím, než se otevře editor pro vytvoření zprávy k revizi, ale poté, co byla vytvořena výchozí zpráva.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `rack` directory is there, but empty.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte sice adresář `rack`, ten je však prázdný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `request-pull` command takes the base branch into which you want your topic branch pulled and the Git repository URL you want them to pull from, and outputs a summary of all the changes you’re asking to be pulled in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `request-pull` vezme základní větev (základnu), do níž chcete natáhnout svou tematickou větev, a adresu URL repozitáře Git, z nějž chcete práci natáhnout, a vytvoří shrnutí všech změn, které by měl správce podle vaší žádosti natáhnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `send-pack` process runs on the client and connects to a `receive-pack` process on the remote side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces `send-pack` se spouští na klientovi a připojuje se k procesu `receive-pack` na straně vzdáleného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The `size-pack` entry is the size of your packfiles in kilobytes, so you’re using 2MB.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řádek `size-pack` uvádí velikost vašich balíčkových souborů v kilobytech, využity jsou tedy 2 MB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The ability of smaller subgroups of a team to collaborate via remote branches without necessarily having to involve or impede the entire team is a huge benefit of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možnost, aby několik menších podskupin jednoho týmu spolupracovalo prostřednictvím vzdálených větví a aby si práce nevyžádala účast celého týmu nebo nebránila ostatním v jiné práci, je velkou devízou systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The above times (`AuthorDate`, `CommitDate`) are displayed in default format (`--date=default`), which shows timezone information of respective author and commiter.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výše uvedené časy (`AuthorDate`, `CommitDate`) se zobrazují v základním tvaru (`--date=default`), který zobrazuje informaci o časovém pásmu autora nebo přispěvatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The access rules are checked in order of appearance in the config file, looking for a match for this combination (but remember that the refname is regex-matched, not merely string-matched).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravidla pro přístup jsou procházena postupně v pořadí, tak jak jsou uvedena v konfiguračním souboru a hledají se záznamy odpovídající této kombinaci uživatelského jména a reference (nezapomeňte ale, že refname se porovnává jako regulární výraz nikoliv jako pouhý řetězec).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The answer is the HEAD file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odpověď zní: soubor HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The answer to this dilemma is to provide some client-side hooks that users can use to notify them when they’re doing something that the server is likely to reject.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problém vám mohou pomoci vyřešit zásuvné moduly na straně klienta. Poskytněte je svým uživatelům a ti budou upozorněni pokaždé, až provedou něco, co by server s největší pravděpodobností odmítl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The answer to this issue is the `git stash` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řešením této situace je odložení (stashing) příkazem `git stash`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The apply option only tries to apply the stashed work — you continue to have it on your stack.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr apply se pouze pokusí aplikovat odloženou práci, ta zůstává uložena ve vašem zásobníku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The author information is taken from the e-mail’s `From` and `Date` headers, and the message of the commit is taken from the `Subject` and body (before the patch) of the e-mail.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace o autorovi jsou převzaty z polí `From` a `Date` v e-mailu a zpráva k revizi je převzata z `Subject` a těla e-mailu (před samotnou záplatou).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The base command in Git for all the Subversion bridging commands is `git svn`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Základním příkazem systému Git ke všem operacím směřujícím do systému Subversion je `git svn`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The basic Git workflow goes something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Standardní pracovní postup vypadá v systému Git následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The beauty of the HTTP or HTTPS protocol is the simplicity of setting it up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Co je na protokolu HTTP nebo HTTPS sympatické, je jejich jednoduché nastavení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The benevolent dictator’s repository serves as the reference repository from which all the collaborators need to pull.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Repozitář benevolentního diktátora slouží jako referenční repozitář, z nějž všichni spolupracovníci musí stahovat data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The best solution is to find some tool that does conversion for your binary format to a text representation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejlepší by bylo, kdybyste našli nějaký nástroj, který vám binární tvar na textový převede.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The big object is at the bottom: 2MB.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hledaný velký objekt se nachází úplně dole: 2 MB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The blank
	line separating the summary from the body is critical (unless you omit
	the body entirely); tools like rebase can get confused if you run the
	two together.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215836Z" creationid="Prikryl" creationdate="20151023T215836Z">
        <seg>Prázdný řádek
	oddělující shrnutí od těla zprávy je nezbytně nutný (pokud
	nehodláte vypustit celé tělo). Spojení obou částí může zmást
	některé nástroje, např. přeskládání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The blob is now a different blob, which means that although you added only a single line to the end of a 400-line file, Git stored that new content as a completely new object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní jde o úplně jiný blob. Přestože jste na konec 400řádkového souboru vložili jen jeden jediný řádek, Git uložil nový obsah jako úplně nový objekt:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The book’s first eight chapters deal almost exclusively with porcelain commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvních osm kapitol této knihy se zabývá téměř výhradně vysokoúrovňovými příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The branch histories have diverged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie větví se rozdělila.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The branch that HEAD points to moves forward with each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev, na niž ukazuje soubor HEAD, se posouvá vpřed s každou revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The changes to your files were reapplied, but the file you staged before wasn’t restaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změny byly znovu aplikovány na vaše soubory, ale soubor, který jste předtím připravili k zapsání, nebyl znovu připraven.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The client initiates a `fetch-pack` process that connects to an `upload-pack` process on the remote side to negotiate what data will be transferred down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Klient iniciuje proces `fetch-pack`, který vytvoří připojení k procesu `upload-pack` na straně vzdáleného serveru a dojedná, která data budou stažena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The client-side hooks are for client operations such as committing and merging.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvné moduly na straně klienta jsou určeny pro operace klienta, např. zapisování revizí či slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The code looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kód má tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command for this is simple: `git push [remote-name] [branch-name]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz pro tuto akci je jednoduchý: `git push [název vzdáleného repozitáře] [název větve]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz zamíří do vzdáleného projektu a stáhne z něj všechna data, která ještě nemáte u sebe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command helpfully tells you that if you’re on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz vám mimo jiné sděluje, že pokud se nacházíte na hlavní větvi (branch `master`) a spustíte příkaz `git pull`, pak se po vyzvednutí všech vzdálených referencí (fetch) práce z hlavní větve na vzdáleném serveru automaticky začlení (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command is `filter-branch`, and it can rewrite huge swaths of your history, so you probably shouldn’t use it unless your project isn’t yet public and other people haven’t based work off the commits you’re about to rewrite.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz pro tento případ je `filter-branch`. Dokáže přepsat velké části vaší historie, a proto byste ho určitě neměli používat, pokud už byl váš projekt zveřejněn a ostatní uživatelé už založili svou práci na revizích, které hodláte přepsat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command is a bit strange, but it works.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz je sice trochu zvláštní, ale funguje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command just shows the commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz zobrazí pouze samotnou revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The command to do this is `git archive`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz pro vytvoření archivu zní `git archive`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The commit message by default looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zpráva revize má v takovém případě přednastavenu tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The commit message must be expressed in a special format:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zpráva k revizi musí být ve speciálním formátu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The committing-workflow client-side scripts can be used in just about any workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skripty k zapisování revizí na straně klienta lze používat prakticky v každém pracovním postupu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The config file syntax for Gitolite is well documented, so we’ll only mention some highlights here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Syntaxe konfiguračního souboru pro Gitolite je dobře dokumentovaná, takže zde zdůrazníme jen pár věcí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The configuration options recognized by Git fall into two categories: client side and server side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametry konfigurace systému Git se dělí do dvou kategorií: strana klienta a strana serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The cons of this method are that shared access is generally more difficult to set up and reach from multiple locations than basic network access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nevýhodou této metody je, že nastavit a získat sdílený přístup z více umístění je většinou těžší než obyčejný síťový přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The content structure of your current Git data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Struktura obsahu vašich současných dat Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The content-addressable filesystem layer is amazingly cool, so I’ll cover that first in this chapter; then, you’ll learn about the transport mechanisms and the repository maintenance tasks that you may eventually have to deal with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na systému Git je skvělý jeho obsahově adresovatelný systém souborů, a proto se v této kapitole zaměřím nejprve na něj. Poté se podíváme na mechanismy přenosu a úkony správy repozitářů, s nimiž se můžete jednou setkat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The contributor pushes to their own public copy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přispěvatel odešle změny do své vlastní veřejné kopie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The contributor sends the maintainer an e-mail asking them to pull changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přispěvatel pošle správci e-mail s žádostí, aby natáhl změny do projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The core.pager setting determines what pager is used when Git pages output such as `log` and `diff`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavení core.pager určuje, jaký stránkovač bude použit, musí-li Git rozdělit výpis na stránky (např. výstup příkazu `log` nebo `diff`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The default branch name in Git is master.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výchozím názvem větve v systému Git je `master` (hlavní větev).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The dictator merges the lieutenants’ master branches into the dictator’s master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Diktátor začleňuje hlavní větve poručíků do své hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The dictator pushes their master to the reference repository so the other developers can rebase on it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Diktátor odesílá svou hlavní větev do referenčního repozitáře, aby si na jeho základě mohli ostatní vývojáři přeskládat data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The diff viewer in the bottom half of the window shows you the changes introduced at any commit you click.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prohlížeč rozdílů v dolní polovině okna zobrazuje změny provedené v každé revizi, na niž kliknete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The diff wrapper checks to make sure seven arguments are provided and passes two of them to your merge script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Wrapper nástroje diff zkontroluje zda je skutečně zadáno sedm parametrů a předá dva z nich do skriptu pro slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The difference becomes apparent when you specify a number.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozdíl mezi nimi je patrný při zadání čísla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The difference is how you submit them to the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Liší se to, jak je budete doručovat do projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The double-dot syntax is useful as a shorthand; but perhaps you want to specify more than two branches to indicate your revision, such as seeing what commits are in any of several branches that aren’t in the branch you’re currently on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zápis s dvěma tečkami přestavuje užitečnou zkratku. Možná ale budete chtít k označení revize určit více než dvě větve, např. až budete chtít zjistit, které revize jsou obsaženy ve všech ostatních větvích a zároveň nejsou obsaženy ve větvi, na níž se právě nacházíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The downside of serving your repository over HTTP is that it’s relatively inefficient for the client.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nevýhodou obsluhy repozitáře přes protokol HTTP je poměrně nízká výkonnost pro klienta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The downside of the Git protocol is the lack of authentication.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nevýhodou protokolu Git je, že neprovádí autentizaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The downside to this approach is the whining that will inevitably result when your users’ commit pushes are rejected.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nevýhodou uvedeného postupu jsou nářky vašich uživatelů, které vás nevyhnutelně čekají jako výsledek odmítnutí jejich revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The easiest is to use the graphical Git installer, which you can download from the SourceForge page (see Figure 1-7):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím nejjednodušším je použít grafický instalátor Git, který si můžete stáhnout ze stránky SourceForge (viz obrázek 1-7):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The easiest way is to specify `-a` when you run the `tag` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejjednodušším způsobem je zadat k příkazu `tag` parametr `-a`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The easiest way to integrate the branches, as we’ve already covered, is the `merge` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Víme, že nejjednodušším způsobem, jak integrovat větve, je příkaz `merge`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The editor displays the following text (this example is a Vim screen):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Editor zobrazí následující text (tento příklad je z editoru Vim):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The end snapshot should be identical no matter which order she chooses; only the history will be slightly different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Konečný snímek bude stejný, ať zvolí jakékoli pořadí, mírně se bude lišit jen historie revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The entire output of this process looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celý výstup tohoto procesu vypadá následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The example `pre-rebase` hook that Git installs does this, although it assumes that next is the name of the branch you publish.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukázkový zásuvný modul `pre-rebase`, který Git nainstaluje, dělá právě toto, ačkoli předpokládá, že následuje název větve, kterou publikujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The examples in the previous section show `schacon` in some places, such as the `blame` output and the `git svn log`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V předchozí části se u některých příkladů (výstupy příkazů `blame` nebo `git svn log`) objevilo jméno `schacon`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The expression after the `RW` or `RW+` is a regular expression (regex) that the refname (ref) being pushed is matched against.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výraz za `RW` nebo `RW+` je regulární výraz (regex), se kterým se porovnává jméno odesílané reference (ref).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The fetch process is a series of GET requests, where the client can assume the layout of the Git repository on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces vyzvednutí dat je sledem požadavků GET, kdy klient dokáže předpokládat rozložení repozitáře Git na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The file is meant to be consumed by a machine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor je určen ke strojovému zpracování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The files end up looking like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubory nakonec vypadají takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first developer, John, clones the repository, makes a change, and commits locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První vývojář, John, naklonuje repozitář, provede změny a zapíše lokální revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first four hooks have to do with the committing process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První čtyři zásuvné moduly se týkají zapisování revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first hook that is run is `applypatch-msg`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První zásuvným modulem, který se spouští, je `applypatch-msg`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first is `git svn create-ignore`, which automatically creates corresponding `.gitignore` files for you so your next commit can include them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím prvním je `git svn create-ignore`, jenž automaticky vytvoří odpovídající soubory `.gitignore`, podle nichž se bude řídit už vaše příští revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first is at the repository level; if you have read (or write) access to _any_ ref in the repository, then you have read (or write) access to the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První je úroveň repozitářů; jestliže máte práva na čtení (nebo zápis) _k jakékoliv_ referenci v repozitáři, máte tím práva na čtení (nebo zápis) k tomuto repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first is to set up accounts for everybody, which is straightforward but can be cumbersome.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním způsobem je nastavit účty pro všechny, což je sice přímočaré, ale může to být poněkud zdlouhavé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first line also has a list of the server’s capabilities (here, `report-status` and `delete-refs`).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První řádek uvádí rovněž seznam schopností serveru (zde `report-status` a `delete-refs`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first line also has the client’s capabilities.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První řádek navíc popisuje schopnosti klienta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first line tells Git to ignore any files ending in `.o` or `.a` — _object_ and _archive_ files that may be the product of building your code.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První řádek říká systému Git, že má ignorovat všechny soubory končící na `.o` nebo `.a` – _objekty_ a _archivní_ soubory, které mohou být výsledkem překladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first line was printed out by you, the other two were Git telling you that the update script exited non-zero and that is what is declining your push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První řádek jste vytvořili vy, dalšími dvěma řádky vám Git sděluje, že je výstup skriptu update nenulový, a proto bude odeslání odmítnuto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first parent is the branch you were on when you merged, and the second is the commit on the branch that you merged in:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První rodič je větev, na níž jste se během začlenění nacházeli, druhým rodičem je větev, kterou jste začleňovali:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first place Git looks for these values is in an `/etc/gitconfig` file, which contains values for every user on the system and all of their repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním místem, kde Git tyto hodnoty vyhledává, je soubor `/etc/gitconfig`, obsahující hodnoty pro každého uživatele v systému a všechny jejich repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first problem is the author information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním problémem jsou informace o autorovi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first script to run when handling a push from a client is `pre-receive`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním skriptem, který se při manipulaci s revizemi přijatými od klienta spustí, je `pre-receive`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first section of this chapter will cover the available protocols and the pros and cons of each.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První část této kapitoly se bude věnovat možným protokolům, jejich přednostem a nevýhodám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first takes an existing project or directory and imports it into Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První způsob spočívá v tom, že vezmeme existující projekt nebo adresář a importujeme ho do systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first thing this command does is pull down the `info/refs` file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První věcí, kterou příkaz udělá, je stažení souboru `info/refs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first thing you need to do is set up a free user account.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První věcí, kterou budete muset udělat, je vytvoření bezplatného uživatelské účtu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first thing you should do is clone the external repository into your subdirectory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První věcí, kterou byste měli udělat, je naklonovat externí repozitář do vlastního podadresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first thing you should do when you install Git is to set your user name and e-mail address.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První věcí, kterou byste měli po nainstalování systému Git udělat, je nastavení vašeho uživatelského jména (user name) a e-mailové adresy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first thing you’ll do is write your ACL.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvním krokem, který budete muset udělat, je vytvoření seznamu ACL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The first variable is active contributor size.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První proměnnou je počet aktivních přispěvatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The following command is equivalent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující příkaz je ekvivalentní:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The format consists of the word data, the size of the data to be read, a newline, and finally the data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento formát tedy obsahuje slovo data, velikost načítaných dat (size), nový řádek a konečně data samotná (contents).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The format for a commit object is simple: it specifies the top-level tree for the snapshot of the project at that point; the author/committer information pulled from your `user.name` and `user.email` configuration settings, with the current timestamp; a blank line, and then the commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Formát objektu revize je prostý. Udává strom nejvyšší úrovně pro snímek projektu v tomto místě; informace o autorovi řešení/autorovi změny revize získané z konfiguračního nastavení `user.name` a `user.email`, spolu s aktuálním časovým údajem; poté následuje prázdný řádek a za ním zpráva k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The format for listing the new file contents or specifying a modified file with the new contents is as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Formát pro výpis obsahu nového souboru nebo určení změněného souboru s novým obsahem je následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The format of the refspec is an optional `+`, followed by `&lt;src&gt;:&lt;dst&gt;`, where `&lt;src&gt;` is the pattern for references on the remote side and `&lt;dst&gt;` is where those references will be written locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Refspec má následující formát: fakultativní znak `+`, za nímž následuje `&lt;src&gt;:&lt;dst&gt;`, kde `&lt;src&gt;` je vzor pro referenci na straně vzdáleného serveru a `&lt;dst&gt;` je lokální umístění, kam mají být tyto reference zapsány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The general sequence is something like that shown in Figure 5-11.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obecná posloupnost kroků je naznačena na obrázku 5-11.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The gitk history visualizer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Graficky zpracovaná historie v nástroji „gitk“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The group names are just like macros; when defining them, it doesn’t even matter whether they are projects or users; that distinction is only made when you _use_ the "macro".</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jména skupin se chovají jako makra; když je definujete, je úplně jedno jestli jde o projekty nebo uživatele; rozdíl se pozná až v momentu, kdy „makro“ _použijete_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The hooks are all stored in the `hooks` subdirectory of the Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny zásuvné moduly jsou uloženy v podadresáři `hooks` adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The idea is that your branches are at various levels of stability; when they reach a more stable level, they’re merged into the branch above them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Idea je taková, že se větve nacházejí na různé úrovni stability. Jakmile dosáhnou stability o stupeň vyšší, jsou začleněny do větve nad nimi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The idea of the subtree merge is that you have two projects, and one of the projects maps to a subdirectory of the other one and vice versa.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začlenění podstromu spočívá v tom, že máte dva projekty a jeden z projektů se promítá do podadresáře druhého projektu a naopak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The index is a file that contains offsets into that packfile so you can quickly seek to a specific object.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Index je soubor, který obsahuje ofsety do tohoto balíčkového souboru, díky nimž lze rychle vyhledat konkrétní objekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The initial format in which Git saves objects on disk is called a loose object format.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prvotní formát, v němž Git ukládá objekty na disku, se nazývá volný formát objektů (loose object format).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The initial information states that you’re defining a commit object and what branch it’s on, followed by the mark you’ve generated, the committer information and commit message, and then the previous commit, if any.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Úvodní informace sděluje, že definujete objekt revize a na jaké větvi se nachází. Následuje vygenerovaný označovač, informace o autorovi revize a zpráva k revizi, po ní následuje eventuální předchozí revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The interactive rebase gives you a script that it’s going to run.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V interaktivním režimu přeskládání se nyní spustí skript.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The iss53 branch has moved forward with your work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev iss53 se s vaší prací posouvá vpřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The issue is that you generally don’t want to work in a detached HEAD environment, because it’s easy to lose changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problém je, že většinou nechcete pracovat v prostředí oddělené hlavy, protože byste tak velmi snadno mohli přijít o provedené změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The issue with including the library is that it’s difficult to customize the library in any way and often more difficult to deploy it, because you need to make sure every client has that library available.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problém s použitím knihovny je ten, že je obtížné knihovnu jakýmkoli způsobem upravit a často ještě těžší ji nasadit, protože se musíte ujistit, že ji má k dispozici každý klient.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The issue with vendoring the code into your own project is that any custom changes you make are difficult to merge when upstream changes become available.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problémem s převzetím zdrojového kódu do vlastního projektu bývá, že jakékoli uživatelské změny, které provedete, se obtížně začleňují, pokud se objeví novější změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The key fingerprint is:
	43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104940Z" creationid="Prikryl" creationdate="20151023T104940Z">
        <seg>The key fingerprint is:
	43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last hook to run during a `git am` operation is `post-applypatch`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posledním zásuvným modulem, který je během operace `git am` spuštěn, je `post-applypatch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last main caveat that many people run into involves switching from subdirectories to submodules.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední velký problém s nímž se uživatelé často setkávají, souvisí s přepínáním z podadresářů na submoduly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last major range-selection syntax is the triple-dot syntax, which specifies all the commits that are reachable by either of two references but not by both of them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední významnou syntaxí k určení intervalu je trojtečková syntaxe, která vybere všechny revize dostupné ve dvou referencích, ale ne v obou zároveň.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last piece of meta-information you need for each commit is the committer data, which you hardcode in a global variable:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posledními metadaty, jež budete pro všechny revize potřebovat, jsou informace o autorovi revize, které zadáte v globální proměnné:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last really useful option to pass to `git log` as a filter is a path.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posledním opravdu užitečným parametrem, který lze přidat k příkazu `git log` , je zadání cesty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last thing to do is add your new Git server as a remote and push to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední věcí, která ještě zbývá, je přidat nový server Git jako vzdálený repozitář a odeslat do něj revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last thing to keep in mind is the commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední věcí, na niž se vyplatí soustředit pozornost, jsou zprávy k revizím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last thing you have to do is check that you’re not trying to push non-fast-forwarded references, but that is a bit less common.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posledním krokem, který budete muset provést, je ověření, že nebudete odesílat reference nesměřující rychle vpřed. Tento krok však už není tak jednoduchý.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The last thing you need to do is to return the current mark so it can be passed to the next iteration:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední věcí, kterou musíte udělat, je vrátit aktuální označovač, aby mohl být zadán do příští iterace:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The latter wouldn’t be ideal, because all your code repository instances would reside on the same computer, making a catastrophic loss much more likely.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato druhá varianta není právě ideální, protože všechny instance repozitáře s kódem jsou v takovém případě umístěny v jednom počítači, čímž se zvyšuje riziko nevratné ztráty dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The lifecycle of the status of your files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Cyklus stavů vašich souborů</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The line should look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řádek by měl vypadat takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The lines must be formatted as follows
&lt;TAB&gt;&lt;First column text&gt;&lt;TAB&gt;&lt;Second column text&gt;
--&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T160932Z" creationid="Prikryl" creationdate="20151022T205845Z">
        <seg>Řádky musí být formátovány následovně
&lt;TAB&gt;&lt;Text prvního sloupce&gt;&lt;TAB&gt;&lt;Text druhého sloupce&gt;
--&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The logic for checking this is to see if any commits are reachable from the older revision that aren’t reachable from the newer one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kontrolu můžete provést tak, že se podíváte, zda jsou některé revize dostupné ze starších verzí, ale nejsou dostupné z novějších.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main Source tab that you land on shows your project’s main directory listing and automatically renders the README file below it if you have one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavní záložka „Source“, na níž se stránka otvírá, zobrazuje hlavní adresář vašeho projektu, a máte-li soubor README, automaticky pod adresářem projektu zobrazí jeho obsah.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main difference is that a tag object points to a commit rather than a tree.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavním rozdílem je, že objekt značky ukazuje na revizi, zatímco objekt revize na strom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main difficulty with describing this process is that there are a huge number of variations on how it’s done.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Popsat tento proces není právě jednoduché, protože existuje obrovské množství variací, jak lze do projektů přispívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main drawback to this approach is that it can be very slow and is often unnecessary — if you don’t try to force the push with `-f`, the server will warn you and not accept the push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Největší nevýhodou tohoto postupu je, že může být velmi pomalý a není vždy nutný. Pokud se nesnažíte vynutit si odeslání parametrem `-f`, server vás sám upozorní a odesílané revize nepřijme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main problem with this in Git is that you can’t modify a file with information about the commit after you’ve committed, because Git checksums the file first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavním problémem v systému Git je, že nelze upravit soubor s informacemi o revizi poté, co jste revizi zapsali, protože Git nejprve provede kontrolní součet souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main reason is speed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mluví pro něj především rychlost.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main reason to specify the `file://` prefix is if you want a clean copy of the repository with extraneous references or objects left out — generally after an import from another version-control system or something similar (see Chapter 9 for maintenance tasks).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavním důvodem, proč zadat předponu `file://` je to, že tak získáte čistou kopii repozitáře bez nepotřebných referencí a objektů, například po importu z jiného verzovacího systému a podobně (úkony správy jsou popsány v kapitole 9).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The main tool you use to determine which files are in which state is the `git status` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavním nástrojem na zjišťování stavu jednotlivých souborů je příkaz `git status`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer adds the contributor’s repo as a remote and merges locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce přidá repozitář přispěvatele jako vzdálený repozitář a provede lokální začlenění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer of the Git project has solved this issue by including their public key as a blob in the repository and then adding a tag that points directly to that content.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce projektu Git vyřešil tento problém tak, že přidal svůj veřejný klíč jako blob do repozitáře a poté vložil značku, která ukazuje přímo na tento obsah.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer of the Git project tends to namespace these branches as well — such as `sc/ruby_client`, where `sc` is short for the person who contributed the work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce projektů Git přiřazuje těmto větvím také jmenný prostor, např. `sc/ruby_client`, kde `sc` je zkratka pro osobu, která práci vytvořila.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The maintainer pushes merged changes to the main repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce odešle začleněné změny do hlavního repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Hlavním rozdílem mezi systémem Git a všemi ostatními systémy VCS (včetně Subversion a jemu podobných) je způsob, jakým Git zpracovává data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The majority of the options are client side—configuring your personal working preferences.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většina parametrů připadá na stranu klienta, neboť se jedná o konfiguraci osobního pracovního nastavení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The manual page for `git config` lists all the available options in quite a bit of detail.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Manuálová stránka pro `git config` zobrazí seznam všech dostupných parametrů i s celou řadou podrobností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The master branch is that of the dictator.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavní větev je větev diktátora.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The mechanism that Git uses for this checksumming is called a SHA-1 hash.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Mechanismus, který Git k tomuto kontrolnímu součtu používá, se nazývá otisk SHA-1 (SHA-1 hash).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The merge goes smoothly — John’s commit history now looks like Figure 5-5.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sloučení probíhá hladce, Johnova historie revizí teď vypadá jako na obrázku 5-5.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The mode is taken from normal UNIX modes but is much less flexible — these three modes are the only ones that are valid for files (blobs) in Git (although other modes are used for directories and submodules).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Režim (mode) je převzat z normálních režimů UNIX, jen je podstatně méně flexibilní. Tyto tři režimy jsou jediné platné pro soubory (bloby) v systému Git (ačkoli se pro adresáře a submoduly používají ještě další režimy).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most basic and powerful tool to do this is the `git log` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejzákladnějším a nejmocnějším nástrojem je v tomto případě příkaz `git log`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most basic is the _Local protocol_, in which the remote repository is in another directory on disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejzákladnější variantou je _lokální protokol_ (Local protocol), v němž je vzdálený repozitář uložen v jiném adresáři na disku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most common range specification is the double-dot syntax.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejčastěji se při označení intervalu používá dvojtečková syntaxe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most interesting option is `format`, which allows you to specify your own log output format.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejzajímavějším parametrem je pak `format`, který umožňuje definovat vlastní formát výstupu logu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most obvious is the single point of failure that the centralized server represents.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tím nejkřiklavějším je riziko kolapsu celého projektu po výpadku jediného místa — centrálního serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The most straightforward way to specify a commit requires that it have a branch reference pointed at it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejčistší způsob, jak určit konkrétní revizi, vyžaduje, aby měla revize referenci větve, která na ni ukazuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The msysGit project has one of the easier installation procedures.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Postup instalace projektu msysGit patří k těm nejjednodušším.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The name of the file in `keydir` (in the previous example, `scott.pub`) will be different for you — Gitosis takes that name from the description at the end of the public key that was imported with the `gitosis-init` script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Název souboru v adresáři `keydir` (v předchozím příkladu `scott.pub`) bude ve vašem případě jiný. Gitosis převezme tento název z popisu na konci veřejného klíče, který byl importován spolu se skriptem `gitosis-init`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The negative aspect of SSH is that you can’t serve anonymous access of your repository over it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nevýhodou protokolu SSH je, že neumožňuje anonymní přístup do repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next chapter will cover the raw internals of Git so you can craft every single byte, if need be.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V následující kapitole se podíváme na elementární principy systému Git, abyste dokázali efektivně využívat každý jeho byte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next chapter will go over branches and references in detail.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větve a reference budou podrobně popsány v následující kapitole.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next hook to run when applying patches via `git am` is `pre-applypatch`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další zásuvným modulem, který se může spouštět při aplikaci záplaty příkazem `git am`, je `pre-applypatch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next issue is your commit access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další otázkou je vaše oprávnění k zapisování revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next line in your `print_export` file is</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším řádkem v souboru `print_export` bude</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next line is 0000, meaning the server is done with its references listing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující řádek je 0000 – touto kombinací server označuje konec seznamu referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next line starts with 003e, which is 62, so you read the remaining 62 bytes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další řádek začíná hodnotou 003e (tedy 62), což znamená dalších 62 bytů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next major issue that people encounter is that they need to collaborate with developers on other systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Dalším velkým problémem, s nímž se uživatelé potýkají, je potřeba spolupráce s dalšími pracovníky týmu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next place Git looks is the `~/.gitconfig` file, which is specific to each user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším místem, kde Git vyhledává, je soubor `~/.gitconfig`, který je specifický pro každého uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next section deals with projects that prefer to accept contributed patches via e-mail.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další část se pak zabývá projekty, u nichž je upřednostňováno doručování záplat e-mailem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next sections will explain some typical setups using those protocols and how to get your server running with them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dalších částech popíšeme některá typická nastavení pro použití těchto protokolů, a jak s nimi uvést server do provozu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next system you’ll look at importing from is Perforce.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším systémem, z nějž budeme importovat, bude Perforce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next thing you’ll notice is the error message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další věcí, jíž si všimnete, je chybové hlášení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next time one of your collaborators fetches from the server, they will get a reference to where the server’s version of `serverfix` is under the remote branch `origin/serverfix`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až bude příště některý z vašich spolupracovníků vyzvedávat data ze serveru, obdrží referenci o tom, kde se nachází serverová verze větve `serverfix` ve vzdálené větvi `origin/serverfix`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next time you check out this file, Git injects the SHA of the blob:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při příštím checkoutu tohoto souboru Git vloží SHA blobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next time you commit, the file will be gone and no longer tracked.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po příštím zapsání revize soubor zmizí a přestane být sledován.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next two fields are values extracted from that commit—the author name and the authored date of that commit — so you can easily see who modified that line and when.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další dvě pole jsou hodnoty získané z revize: jméno autora a datum, zapsané u této revize. Z toho vyčtete, kdo a kdy tento řádek upravil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next two sections demonstrate how to wrangle your staging area and working directory changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující dvě části popisují, jak se poprat s oblastí připravených změn a se změnami v pracovním adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next type you’ll look at is the tree object, which solves the problem of storing the filename and also allows you to store a group of files together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dalším typem objektu, na který se podíváme, je objekt stromu (tree object), jenž řeší problém ukládání názvu souboru a zároveň umožňuje uložit skupinu souborů dohromady.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The next variable is the workflow in use for the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další proměnnou je pracovní postup, který se u projektu využívá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je příjemné, že příkaz, jímž se zjišťuje stav těchto dvou oblastí, zároveň připomíná, jak v nich nežádoucí změny zrušit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The nice thing about this is that applying a patch from an e-mail generated with `format-patch` preserves all the commit information properly, as you’ll see more of in the next section when you apply these patches:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výhodou tohoto postupu je, že aplikace záplaty z e-mailu, který byl vygenerován příkazem `format-patch`, v pořádku uchová všechny informace o revizi. Podrobněji si to ukážeme v následující části, až budeme aplikovat tyto revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The nice thing about this wrapper setup is that you can change your diff and merge tools easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příjemné na tomto wrapperovém nastavení je, že lze snadno změnit nástroj diff i nástroj pro slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The number of randomly hashed objects needed to ensure a 50% probability of a single collision is about 2^80 (the formula for determining collision probability is `p = (n(n-1)/2) * (1/2^160)`).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Počet objektů s náhodným otiskem, které bychom potřebovali k 50% pravděpodobnosti, že nastane jediná kolize, je asi 2^80 (vzorec k určení pravděpodobnosti kolize je `p = (n(n-1)/2) * (1/2^160)`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The objects that remain are the blobs that aren’t pointed to by any commit — in this case, the "what is up, doc?" example and the "test content" example blobs you created earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Objekty, které zůstaly, jsou bloby, na něž neukazuje žádná revize, v našem případě bloby z příkladů „what is up, doc?“ a „test content“, které jsme vytvořili před časem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The octopus merge can handle multiple branches but is more cautious to avoid difficult conflicts, so it’s chosen as the default strategy if you’re trying to merge more than two branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chobotnicové sloučení dokáže naproti tomu sloučit několik větví, ale je opatrnější s cílem předejít složitým konfliktům. Proto se vybírá jako výchozí strategie při slučování více než dvou větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The only real difference is that `mv` is one command instead of three — it’s a convenience function.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jediným skutečným rozdílem je, že `mv` je jediný příkaz, zatímco u druhého způsobu potřebujete příkazy tři — příkaz `mv` je pouze zjednodušením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The only thing left is to enforce fast-forward-only pushes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poslední věcí, která nám ještě zbývá, je povolit pouze odeslání směřující „rychle vpřed“ (fast forward).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The original commit message for this functionality gives a simple example of running all your C source code through the `indent` program before committing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Původní zpráva k revizi s touto funkcí uvádí jednoduchý příklad, jak můžete před zapsáním prohnat veškeré vaše céčkové zdrojové texty programem `indent`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other advantage of this approach is that you get the history of the commits as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další výhodou tohoto postupu je, že získáte rovněž historii revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other files are your new packfile and an index.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ostatní soubory jsou v novém balíčkovém souboru a indexu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other important difference is the way you get a listing of the files that have been changed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhým důležitým rozdílem je způsob, jak se zobrazí seznam změněných souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other listing in the `git status` output is the rack entry.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím dalším, co se objevuje ve výstupu příkazu `git status`, je položka rack.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other main ancestry specification is the `~`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další základní možností označení původu je znak `~`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other main way to specify a commit is via its ancestry.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další základní způsob, jak specifikovat konkrétní revizi, je na základě jejího původu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other major way is to install Git via MacPorts (`http://www.macports.org`).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jiným obvyklým způsobem je instalace systému Git prostřednictvím systému MacPorts (`http://www.macports.org`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other thing `gc` will do is pack up your references into a single file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Další operací, kterou `gc` provede, je zabalení referencí do jediného souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other two network protocols (HTTP and Git) are generally read-only, so even if you have them available for the unwashed masses, you still need SSH for your own write commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oba zbývající síťové protokoly (HTTP i Git) jsou většinou určeny pouze ke čtení, a proto i když je dáváte k dispozici ostatním, pro sebe budete potřebovat SSH protokol pro příkazy zápisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other way to move introduced work from one branch to another is to cherry-pick it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhým způsobem, jak přesunout práci z jedné větve do druhé, je tzv. částečné převzetí (angl. cherry picking, tedy něco jako „vyzobání třešniček“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The other way you can do this is via server-side receive hooks, which I’ll cover in a bit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhou možností, jak to provést, jsou přijímací zásuvné moduly (receive hooks) na straně serveru, jimž se budu věnovat později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The output can be sent to the maintainer—it tells them where the work was branched from, summarizes the commits, and tells where to pull this work from.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstup příkazu lze odeslat správci. Sdělí mu, odkud daná větev pochází, podá mu přehled o revizích a řekne mu, odkud lze práci stáhnout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The output from the command is a 40-character checksum hash.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstupem příkazu je 40znakový otisk kontrolního součtu (checksum hash).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The output looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jeho výstup vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The packed repository size is down to 7K, which is much better than 2MB.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Velikost zabaleného repozitáře byla zredukována na 7 kB, což je jistě lepší než 2 MB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The packfile is a single file containing the contents of all the objects that were removed from your filesystem.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Balíčkový soubor je jediný soubor, v němž je zabalen obsah všech objektů odstraněných ze systému souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The pre hooks can exit non-zero at any time to reject the push as well as print an error message back to the client; you can set up a push policy that’s as complex as you wish.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvné moduly spouštěné před přijetím revizí mohou v případě nenulového výstupu odesílaná data kdykoli odmítnout a poslat klientovi chybové hlášení. Díky nim můžete nastavit libovolně komplexní požadavky na odesílané revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The presence of that file tells Git that it’s OK to serve this project without authentication.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přítomnost tohoto souboru systému Git sděluje, že si přejete obsluhovat tento projekt bez ověřování totožnosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The previous example uses the `git://` protocol, but you may also see `http(s)://` or `user@server:/path.git`, which uses the SSH transfer protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předchozí příklad využívá protokol `git://`, můžete se ale setkat také s protokolem `http(s)://` nebo `user@server:/path.git`, který používá přenosový protokol SSH.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The problem is, you don’t want to do a commit of half-done work just so you can get back to this point later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problém je, že nebudete chtít zapsat revizi nehotové práce, budete se k ní chtít vrátit později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The process works as follows (see Figure 5-2):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Postup práce je následující (viz obrázek 5-2):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The process works like this (see Figure 5-3):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Postup práce je následující (viz obrázek 5-3):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The project maintainer pushes to their public repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce projektu odešle data do svého veřejného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The project snapshot at the tip of the branch is identical whether you do one commit or five, as long as all the changes are added at some point, so try to make things easier on your fellow developers when they have to review your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snímek projektu na vrcholu větve bude stejný, ať zapíšete jednu revizi, nebo pět (za předpokladu, že vložíte všechny změny). Snažte se proto usnadnit práci svým kolegům, kteří – možná – budou vaše změny kontrolovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The pros of file-based repositories are that they’re simple and they use existing file permissions and network access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výhoda souborových repozitářů spočívá v tom, že jsou jednoduché a používají existující oprávnění k souborům a síťový přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The pros of using SSH are many.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používání protokolu SSH přináší mnoho výhod.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The public keys look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veřejné klíče mají zhruba tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The question now is, when you run `git branch (branchname)`, how does Git know the SHA-1 of the last commit?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se však nabízí otázka, jak může Git při spuštění příkazu `git branch (název větve)` znát hodnotu SHA-1 poslední revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The really interesting part is that the UI for this tool for adding people and determining access isn’t a web interface but a special Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejzajímavější je na nástroji Gitosis jeho uživatelské rozhraní pro přidávání uživatelů a specifikaci přístupu – nejedná se totiž o webové rozhraní, ale o speciální repozitář Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The really nice thing about this is that it can be repacked at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na celém balíčku je navíc příjemné, že ho můžete kdykoli znovu zabalit do nové podoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The reason is that if the work isn’t accepted or is cherry picked, you don’t have to rewind your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Důvod je prostý: pokud nebude vaše práce přijata nebo bude převzata částečně, nebudete muset vracet změny začleněné do vaší hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The reason to do it this way is speed — because Git doesn’t have to check out each revision to disk before running your filter, the process can be much, much faster.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Důvodem je rychlost. Git nemusí před spuštěním filtru provádět checkout každé jednotlivé revize na disk a celý proces je tak mnohem, mnohem rychlejší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The reason to prefer rebasing is that Subversion has a linear history and doesn’t deal with merges like Git does, so `git svn` follows only the first parent when converting the snapshots into Subversion commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Důvod, proč raději využít možnosti přeskládání, spočívá v tom, že Subversion uchovává lineární historii a neprovádí začleňování stejně jako Git. Takže `git svn` při konverzi snímků na revize Subversion sleduje pouze prvního rodiče.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The references won’t be the same on someone else’s copy of the repository; and right after you initially clone a repository, you’ll have an empty reflog, as no activity has occurred yet in your repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V kopii repozitáře na počítači kohokoli jiného se budou tyto reference lišit. Bezprostředně poté, co poprvé naklonujete repozitář, bude váš reflog prázdný, protože ve vašem repozitáři ještě nebyla provedena žádná operace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The reflog is also updated by the `git update-ref` command, which is another reason to use it instead of just writing the SHA value to your ref files, as we covered in the "Git References" section of this chapter earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Reflog se také aktualizuje s každým spuštěním příkazu `git update-ref` – o důvod víc používat tento příkaz a nezapisovat hodnotu SHA přímo do souborů referencí, jak už jsme uváděli v části „Reference Git“ v této kapitole.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The repo.or.cz and GitHub hosting sites both support this, and many project maintainers expect this style of contribution.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak server repo.or.cz, tak místa pro hostování podporují štěpení a mnoho správců projektů tento styl přispívání vyžaduje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The result tells you the changes you’ve made that you haven’t yet staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výsledek vám ukáže provedené změny, které jste dosud nepřipravili k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The rules for the patterns you can put in the `.gitignore` file are as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravidla pro masky, které můžete použít v souboru `.gitignore`, jsou následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The same approach that we used for MS Word files (`*.doc`) can be used for OpenDocument Text files (`*.odt`) created by OpenOffice.org.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejný postup, který jsme použili pro soubory MS Word (`*.doc`), můžeme použít i pro soubory ve formátu OpenDocument Text (`*.odt`), které vytváří OpenOffice.org.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The same commit-message editor fires up, but it already contains the message of your previous commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustí se stejný editor pro editaci zpráv k revizím, ale tentokrát už obsahuje zprávu z vaší předchozí revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The script puts helpful instructions in the rebase message:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript vám ve zprávě k přeskládání podává užitečné instrukce:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second clones an existing Git repository from another server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhý způsob spočívá v naklonování již existujícího repozitáře Git z jiného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second command is `git svn show-ignore`, which prints to stdout the lines you need to put in a `.gitignore` file so you can redirect the output into your project exclude file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhým z příkazů je `git svn show-ignore`, který zobrazí standardní výstup stdout s řádky, které budete muset vložit do souboru `.gitignore`. Výstup pak můžete přesměrovat do souboru exclude svého projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second developer must merge in the first one’s work before pushing changes up, so as not to overwrite the first developer’s changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhý vývojář musí před odesláním svých změn začlenit práci prvního vývojáře do své, aby nepřepsal jeho změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second developer, Jessica, does the same thing — clones the repository and commits a change:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhý vývojář, Jessica, učiní totéž – naklonuje repozitář a zapíše provedené změny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second level, applicable only to "write" access, is by branch or tag within a repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhá úroveň se dá použít jen pro práva pro „zápis“ a vázána na větve nebo značky v repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second line tells Git to ignore all files that end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Druhý řádek systému Git říká, aby ignoroval všechny soubory končící vlnovkou (`~`), kterou mnoho textových editorů (např. Emacs) používá k označení dočasných souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The second part of this chapter covers how to migrate your project into Git: first from Subversion, then from Perforce, and finally via a custom import script for a nonstandard importing case.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V druhé části této kapitoly se proto naučíte, jak přesunout svůj projekt do systému Git: nejprve ze systému Subversion, poté z Perforce a nakonec pomocí vlastního skriptu i v případech nestandardního importu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The sequence for the workflow you saw here is something like Figure 5-15.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posloupnost kroků vypadá v případě pracovního postupu, který jsme si právě ukázali, jako na obrázku 5-15.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The sequence looks basically like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Posloupnost příkazů bude tedy následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The server-side hooks are for Git server operations such as receiving pushed commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvné moduly na straně serveru se týkají operací serveru Git, např. přijímání odeslaných revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The simple case is the example you just saw, running `git checkout -b [branch] [remotename]/[branch]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduchým případem je příklad, který jste právě viděli: spuštění příkazu `git checkout -b [větev] [vzdálený server]/[větev]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The simplest setup you’re likely to encounter is a private project with one or two other developers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejjednodušší sestavou, s níž se pravděpodobně setkáte, je soukromý projekt, na němž kromě vás pracují ještě jeden nebo dva vývojáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The simplest way to commit is to type `git commit`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejjednodušší způsob zapsání změn spočívá v použití příkazu `git commit`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The stable branches are farther down the line in your commit history, and the bleeding-edge branches are farther up the history (see Figure 3-18).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stabilní větve leží v linii historie revizí níže a nové, neověřené větve se nacházejí nad nimi (viz obrázek 3-18).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The staging area is a simple file, generally contained in your Git directory, that stores information about what will go into your next commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Oblast připravených změn je jednoduchý soubor, většinou uložený v adresáři Git, který obsahuje informace o tom, co bude obsahovat příští revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The status of the simplegit.rb file is interesting.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zajímavý je stav souboru simplegit.rb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The subdirectory is named with the first 2 characters of the SHA, and the filename is the remaining 38 characters.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podadresář je pojmenován prvními dvěma znaky SHA, název souboru zbývajícími 38 znaky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The tag object is very much like a commit object — it contains a tagger, a date, a message, and a pointer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Objekt značky se v mnohém podobá objektu revize – obsahuje autora značky, datum, zprávu a ukazatel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The test project has only about 75 commits and the codebase isn’t that big, so it takes just a few minutes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Testovací projekt má pouze kolem 75 revizí a základ kódu není příliš velký, takže bude stačit několik minut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The third column in the output is the size of the object’s content, so you can see that the content of `05408` takes up 12K, but that of `9bc1d` only takes up 7 bytes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Třetí sloupec výpisu udává velikost objektu v balíčku. Můžete si tak všimnout, že blob `05408` zabírá 12 kB z celkové velikosti souboru, zatímco blob `9bc1d` pouze 7 bytů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The third type of reference that you’ll see is a remote reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Třetím typem reference, s níž se setkáte, je reference na vzdálený repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The trick is finding that latest commit SHA — it’s not like you’ve memorized it, right?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Trik spočívá v určení hodnoty SHA nejnovější revize, protože nepředpokládáme, že si ji pamatujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The two that are disabled by default but can be turned on are `indent-with-non-tab`, which looks for lines that begin with eight or more spaces instead of tabs, and `cr-at-eol`, which tells Git that carriage returns at the end of lines are OK.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Funkce, které jsou standardně vypnuté, ale lze je zapnout, jsou `indent-with-non-tab`, která vyhledává řádky začínající osmi nebo více mezerami místo tabulátoru, a `cr-at-eol`, která systému Git sděluje, že návraty vozíku na koncích řádků jsou v pořádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The two that are turned on by default are `trailing-space`, which looks for spaces at the end of a line, and `space-before-tab`, which looks for spaces before tabs at the beginning of a line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Funkce, které jsou standardně zapnuté, jsou `trailing-space`, která vyhledává mezery na koncích řádků, a `space-before-tab`, která vyhledává mezery před tabulátory na začátcích řádků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The update file runs once per branch being pushed and takes the reference being pushed to, the old revision where that branch was, and the new revision being pushed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor update bude spuštěn jednou na každou odesílanou větev a jako parametr použije referenci, do níž se odesílá, starou revizi, kde byla tato větev umístěna, a novou, odesílanou revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The update script is very similar to the `pre-receive` script, except that it’s run once for each branch the pusher is trying to update.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript update je velice podobný skriptu `pre-receive`, avšak s tím rozdílem, že se spouští zvlášť pro každou větev, kterou chce odesílatel aktualizovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The upside of using the HTTP protocol is that it’s easy to set up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro používání protokolu HTTP mluví zejména jeho snadné nastavení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The username, the access being attempted (`W` or `+`), and the refname being updated are known.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatelské jméno uživatele snažícího se o přístup (`W` nebo `+`) a jméno reference, kterou uživatel chce aktualizovat, jsou dané.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The way Git branches is incredibly lightweight, making branching operations nearly instantaneous and switching back and forth between branches generally just as fast.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větvení je v systému Git neuvěřitelně snadné a operace s ním související probíhají téměř okamžitě. A stejně rychlé je i přepínání mezi jednotlivými větvemi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The whole method looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celá metoda vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The workflow is similar to the previous use case — you create topic branches for each patch series you work on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracovní postup je podobný jako v předchozím případě. Pro každou sérii záplat, na níž pracujete, vytvoříte samostatnou tematickou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The workflow required in order to contribute to a project is much different if you have write access to the project than if you don’t.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracovní postup při přispívání do projektu se velmi liší podle toho, zda máte, či nemáte oprávnění k zápisu do projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The working directory is a single checkout of one version of the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pracovní adresář obsahuje lokální kopii jedné verze projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The world isn’t perfect.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Svět není dokonalý.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The “clean” filter is run when files are staged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Filtr clean spuštěný při přípravě souborů k zapsání – git add</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>The “smudge” filter is run on checkout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Filtr smudge spuštěný při checkoutu – git checkout</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then run these commands:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Potom proveďte následující příkazy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then you can add the submodule:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto ho musíte nejprve vrátit, až potom můžete přidat submodul:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, Git spits out a bunch of log information looking something like this for each patch you’re sending:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git poté vytvoří log s určitými informacemi, který bude pro každou záplatu, kterou posíláte, vypadat asi takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, I ran `git diff` to see what changed:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté jsem spustil příkaz `git diff`, abych se podíval, co se změnilo:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, John, Josie, or Jessica can push the first version of their project into that repository by adding it as a remote and pushing up a branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>John, Josie a Jessica pak mohou do tohoto repozitáře odeslat první verzi svého projektu: přidají si ho jako vzdálený repozitář a odešlou do něj svou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, compile and install:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté spusťte kompilaci a instalaci:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, enable all users to change revprops — the easy way is to add a pre-revprop-change script that always exits 0:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté umožněte všem uživatelům měnit vlastnosti vlastnosti revprops – jednoduše to provedete přidáním skriptu pre-revprop-change, jehož návratovou hodnotou bude vždy 0:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, for each of those, you find which files are modified and make sure the user who’s pushing has access to all the paths being modified.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U každé z revizí uvidíte také soubory, které byly změněny, a budete se moci přesvědčit, zda má odesílající uživatel přístup ke všem umístěním, která svými daty mění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, if you run `git rm`, it stages the file’s removal:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nyní provedete příkaz `git rm`, bude k zapsání připraveno odstranění souboru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, it adds a space followed by the size of the content and finally a null byte:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté vloží mezeru, za níž bude následovat velikost obsahu a na konec nulový byte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, open the file with `File.open()` and write out the previously zlib-compressed content to the file with a `write()` call on the resulting file handle:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté zadejte `File.open()` pro otevření souboru a voláním `write()` na vzniklý identifikátor souboru zapište do souboru právě zkomprimovaný (zlib) obsah:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté spusťte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, she can see what has been changed with `git log`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté si může příkazem `git log` prohlédnout, co všechno bylo změněno:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, tell Git what the "indent" filter does on smudge and clean:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté řekněte systému Git, co má filter indent dělat v situacích smudge a clean:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, they commit a pointer to that non-public state and push up the superproject.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté zapíše ukazatel do tohoto neveřejného stavu a superprojekt odešle na server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, when the codebase on that branch is stable and passes tests, you merge it into a develop branch; and when that has proven itself stable for a while, you fast-forward your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teprve pokud je kód v této větvi stabilní a projde testováním, začleníte ho do větve develop. A až se větev develop ukáže v některém okamžiku jako stabilní, posunete rychle vpřed i svou hlavní větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, when you switch back, you get an empty `rack` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až poté přepnete zpět, bude adresář `rack` prázdný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, write some new content to the file, and save it again:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté do souboru zapište nový obsah a znovu ho uložte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you branched off that to make the client-side changes (`client`) and committed a few times.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté jste tuto větev opustili a začali pracovat na změnách na straně klienta (`client`). I tady jste zapsali několik revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can directly import the key into the Git database by exporting it and piping that through `git hash-object`, which writes a new blob with those contents into Git and gives you back the SHA-1 of the blob:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté můžete klíč přímo importovat do databáze Git: vyexportujte ho a použijte příkaz `git hash-object`, který zapíše nový blob s tímto obsahem do systému Git a vrátí vám otisk SHA-1 tohoto blobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can fast-forward the base branch (`master`):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté se můžete přesunout „rychle vpřed“ po základně (větev `master`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can merge those changes back into your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto změny pak můžete začlenit zpět do hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can push to and pull from that remote as though you were doing so over a network.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté můžete odesílat data a stahovat je z tohoto vzdáleného serveru, jako byste tak činili prostřednictvím sítě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can see the previous commit by specifying `HEAD^`, which means "the parent of HEAD":</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zobrazit předchozí revizi pak můžete pomocí `HEAD^`, což doslova znamená „rodič revize HEAD“:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can see what the `master` branch on the `origin` remote was the last time you communicated with the server, by checking the `refs/remotes/origin/master` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté se můžete podívat, jakou podobu měla větev `master` na vzdáleném serveru `origin`, když jste s ním naposledy komunikovali. Pomůže vám s tím soubor `refs/remotes/origin/master`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can send a request to the maintainer of the main project to pull in your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté odešlete správci hlavního projektu žádost, aby do projektu natáhl vaše změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you can use a branch name in any Git command that expects a commit object or SHA-1 value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě můžete použít název větve v libovolném příkazu Git, který vyžaduje objekt revize nebo hodnotu SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you e-mail that guy and yell at him.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní znáte provinilcovu e-mailovou adresu a můžete mu vyčinit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you must tell bisect when the last known good state was, using `git bisect good [good_commit]`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté musíte nástroji bisect sdělit, kdy byl kód naposled nepochybně funkční. K tomu použijete příkaz `git bisect good [good_commit]`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, you specify the mode, SHA-1, and filename:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomu všemu přidáte režim, SHA-1 a název souboru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Then, your editor will open to something like this for your placeholder commit message when you commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při zapisování revize váš editor otevře následující šablonu zprávy k revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a couple of interesting things here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstup obsahuje řadu zajímavých informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a couple of minor differences in the configuration file; but for your purpose, this is close to the same thing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bude tu sice pár menších rozdílů v konfiguračním souboru, ale pro náš účel můžeme příkazy považovat za ekvivalentní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a couple of reasons for this — the object could be in an alternate repository, or it could be in a packfile in this repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chyba má hned několik příčin. Objekt by mohl být v jiném repozitáři nebo by mohl být v tomto repozitáři, avšak v balíčkovém souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a few ways you can give access to everyone on your team.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existuje několik způsobů, jak umožnit přístup všem členům vašeho týmu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a lot of client-side hooks.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na straně klienta existuje mnoho zásuvných modulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are a lot of great things about Git, but one feature that can cause issues is the fact that a `git clone` downloads the entire history of the project, including every version of every file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systém Git nabízí velké množství úžasných funkcí a možností. Je však jedna věc, která vám může způsobovat problém. Je jí fakt, že příkaz `git clone` stáhne vždy celou historii projektu, všechny verze všech souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are also more interesting ways to do this on a per-user basis via ACLs, as you’ll learn at the end of this chapter.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A jak uvidíte na konci kapitoly, existují ještě další zajímavé způsoby, jak provést stejné nastavení na bázi jednotlivých uživatelů prostřednictvím ACL.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are different ways to initiate the `upload-pack` process on the remote repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existují i jiné způsoby, jak iniciovat proces `upload-pack` ve vzdáleném repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are three easy ways to install Git on a Mac.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existují tři jednoduché způsoby, jak nainstalovat Git v systému Mac.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are two groups of these hooks: client side and server side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozlišujeme dvě skupiny těchto zásuvných modulů (háčků, angl. hooks): na straně klienta a na straně serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are two levels of access control in Gitolite.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V Gitolite jsou dvě úrovně kontroly přístupů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are two sets of processes for transferring data: a pair for uploading data and a pair for downloading data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existují dvě sady procesů pro přenos dat: jeden pár pro upload dat a jeden pár pro jejich stahování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are two ways to apply an e-mailed patch: with `git apply` or with `git am`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existují dva způsoby aplikace záplaty z e-mailu: příkazem `git apply` nebo příkazem `git am`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are useful `--merged` and `--no-merged` options available in Git for this purpose.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomuto účelu slouží v systému Git od verze 1.5.6 užitečné příkazy `--merged` a `--no-merged`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There are ways to get around this (namely, stashing and commit amending) that we’ll cover later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existují způsoby, jak to obejít (jmenovitě odložení (stashing) a doplnění revize (commit amending)), těm se však budeme věnovat až později.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is a `--word-diff` option available in Git, that you can append to the `git log -p` command to get word diff instead of normal line by line diff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git nabízí parametr `--word-diff`, který můžeme přidat za příkaz `git log -p`. Místo obvyklé detekce rozdílů po řádcích získáme rozdíly po slovech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is a bit of a problem — she needs to push the merged work in her `featureB` branch to the `featureBee` branch on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady nastává určitý problém. Musí odeslat práci začleněnou ve své větvi `featureB` do větve `featureBee` na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is another history-rewriting option that you can use if you need to rewrite a larger number of commits in some scriptable way — for instance, changing your e-mail address globally or removing a file from every commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existuje ještě další možnost přepisu historie, kterou vám Git nabízí pro případy, kdy potřebujete skriptovatelným způsobem přepsat větší počet revizí, např. globálně změnit e-mailovou adresu nebo odstranit jeden soubor ze všech revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is no canonical version of any project, which allows a project to move from one user to another seamlessly if the first author abandons the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Neexistuje tu žádná standardní verze projektu, která by umožňovala kompletní přechod projektu z jednoho uživatele na druhého, jestliže první autor projekt ukončí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is no difference in the end product of the integration, but rebasing makes for a cleaner history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V koncových produktech integrace není žádný rozdíl, výsledkem přeskládání je však čistší historie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There is only one packfile on the server, so your object is obviously in there, but you’ll check the index file to make sure.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na serveru je pouze jeden balíčkový soubor, takže váš objekt musí být evidentně v něm. Pro jistotu se však ještě podíváte do souboru indexu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There may also be occasional changes to this section itself, so you may also want to look at the latest version [here][gldpg].</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato podkapitola se může občas změnit, takže se možná chcete podívat na její [poslední verzi][gldpg].</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There you go — a nice, clean Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A máme to tu — krásný, čistý repozitář Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>There, you can do a mixed reset of that commit with `git reset HEAD^`, which effectively undoes that commit and leaves the modified files unstaged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odtud můžete vytvořit smíšený reset této revize zadáním příkazu `git reset HEAD^`, který efektivně vrátí všechny změny v revizi a ponechá změněné soubory nepřipraveny k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Therefore, the preferred method for collaborating with someone is to set up an intermediate repository that you both have access to, and push to and pull from that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako nejlepší metodu spolupráce s ostatními proto můžeme doporučit nastavení „neutrálního“ repozitáře, do nějž budete mít všichni přístup, budete do něj moci odesílat data a budete z něj moci stahovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These are generally automatically generated files such as log files or files produced by your build system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se většinou o automaticky vygenerované soubory, jako soubory log nebo soubory vytvořené při překladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These are some commonly used workflows that are possible with a distributed system like Git, but you can see that many variations are possible to suit your particular real-world workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou tedy některé z běžně používaných pracovních postupů, které můžete využít v distribuovaných systémech, jako je například Git. Uvidíte ale, že na pozadí vašich konkrétních potřeb v reálných situacích lze vytvořit celou řadu variací na tyto postupy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These are the "clean" and "smudge" filters.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o filtry clean a smudge.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These are the core parts of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To jsou ústřední součásti adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These channels are regularly filled with hundreds of people who are all very knowledgeable about Git and are often willing to help.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na těchto kanálech se většinou pohybují stovky lidí, kteří mají se systémem Git bohaté zkušenosti a často ochotně pomohou. (Nutno ovšem podotknout, že se na těchto kanálech mluví anglicky – pozn. překl.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These commands are generally referred to as "plumbing" commands, and the more user-friendly commands are called "porcelain" commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Těmto příkazům většinou říkáme „nízkoúrovňové“ (angl. plumbing commands), zatímco uživatelsky přívětivější příkazy označujeme jako „vysokoúrovňové“ (porcelain commands).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These commands are nice because you can access them anywhere, even offline.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto příkazy jsou užitečné, neboť je můžete spustit kdykoli, dokonce i offline.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These commands aren’t meant to be used manually on the command line, but rather to be used as building blocks for new tools and custom scripts.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nepředpokládám, že byste chtěli tyto příkazy používat osamoceně na příkazovém řádku. Podíváme se na ně spíše jako na stavební kameny pro nové nástroje a skripty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These days, you have a huge number of hosting options to choose from, each with different advantages and disadvantages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V dnešní době můžete vybírat z velkého počtu možností hostingu. Každá má jiné klady a zápory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These example hook files end with .sample; you’ll need to rename them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukázkové soubory zásuvných modulů končí příponou .sample, budete je muset přejmenovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These examples use a very simple project called `simplegit` that I often use for demonstrations.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující příklady ukazují velmi jednoduchý projekt pojmenovaný `simplegit`, který pro názornost často používám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These features help encourage developers to create and use branches often.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto funkce slouží k tomu, aby se vývojáři nebáli vytvářet a používat nové větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tyto soubory jsou staženy ze zkomprimované databáze v adresáři Git a umístěny na disk, kde je můžete používat nebo upravovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These filters can be set to do all sorts of fun things.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto filtry lze nastavit k různým šikovným úkonům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These instructions are similar to what we’ve already gone over.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto instrukce jsou podobné těm, které jsme už uváděli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These instructions tell you exactly what to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto instrukce vám sdělují, že nyní můžete upravit revizi příkazem git commit --amend, a až budete se změnami hotovi, spustit příkaz git rebase --continue.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These options apply to the `git rebase` command as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A toto nastavení platí také pro příkaz `git rebase`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These path-specific settings are called Git attributes and are set either in a `.gitattributes` file in one of your directories (normally the root of your project) or in the `.git/info/attributes` file if you don’t want the attributes file committed with your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tomuto nastavení konkrétního umístění se říká atributy Git. Nastavují se buď v souboru `.gitattributes` v jednom z vašich adresářů (většinou kořenový adresář vašeho projektu), nebo v souboru `.git/info/attributes`, pokud nechcete, aby byl soubor s atributy zapsán spolu s projektem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These protocols have a process on the remote end that is intelligent about Git — it can read local data and figure out what the client has or needs and generate custom data for it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto protokoly mají na vzdáleném konci proces, který inteligentně spolupracuje se systémem Git. Umí načítat lokální data a zjistí, co klient vlastní a co potřebuje. Podle toho pro něj vygeneruje potřebná data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These scripts run before and after pushes to the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto skripty se spouštějí před odesíláním revizí na server i po něm.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These strategies are automatically chosen for you because the recursive strategy can handle complex three-way merge situations — for example, more than one common ancestor — but it can only handle merging two branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vybírá tyto strategie automaticky, protože rekurzivní strategie zvládá složité třícestné slučování (například s více než jedním společným předkem), ale nedokáže sloučit více než dvě větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time, as illustrated in Figure 1-4.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tyto systémy (CVS, Perforce, Bazaar atd.) chápou uložené informace jako sadu souborů a seznamů změn těchto souborů v čase — viz obrázek 1-4.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned files, and a number of clients that check out files from that central place.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tyto systémy, jmenovitě např. CVS, Subversion či Perforce, obsahují serverovou část, která uchovává všechny verzované soubory. Z tohoto centrálního úložiště si potom soubory stahují jednotliví klienti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These three main Git objects — the blob, the tree, and the commit — are initially stored as separate files in your `.git/objects` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto tři základní objekty Git – bloby, stromy a revize – jsou nejprve uloženy jako samostatné soubory do adresáře `.git/objects`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These tools are very helpful if you modify a bunch of files and then decide that you want those changes to be in several focused commits rather than one big messy commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto nástroje se vám mohou velmi hodit, jestliže upravujete několik souborů a rozhodnete se, že tyto změny zapíšete raději do několika specializovaných revizí než do jedné velké nepřehledné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These values are specific to that single repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto hodnoty platí pouze pro tento konkrétní repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>These variables can be stored in three different places:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto proměnné mohou být uloženy na třech různých místech:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They aren’t necessarily obvious but are helpful to know.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není nezbytně nutné, abyste je všechny znali, ale mohou být užitečné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They can add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Správce může váš repozitář přidat jako vzdálený repozitář, lokálně otestovat vaše změny, začlenit je do své větve a odeslat zpět do svého repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They can use that key to verify all your signed tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Klíč pak může použít k ověření všech vašich podepsaných značek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They have another parallel branch named develop or next that they work from or use to test stability — it isn’t necessarily always stable, but whenever it gets to a stable state, it can be merged into `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kromě ní mají další paralelní větev, pojmenovanou `develop` nebo `next`, v níž skutečně pracují nebo testují stabilitu kódu. Tato větev nemusí být nutně stabilní, ale jakmile se dostane do stabilního stavu, může být začleněna do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They take the form `(remote)/(branch)`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálené větve mají podobu `(vzdálený repozitář)/(větev)`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They will be told that they’re trying to push non-fast-forward changes and that they won’t be able to do so until they fetch and merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git vývojáři při odmítnutí sdělí, že se pokouší odeslat změny, které nesměřují „rychle vpřed“, což není možné provést, dokud nevyzvedne a nezačlení (fetch and merge) stávající data z repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They will stay as modified files on your disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zůstanou na vašem disku jako změněné soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They’re all also within the packfile you just downloaded, so you don’t have to do any more requests to your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny jsou navíc součástí balíčkového souboru, který jste právě stáhli, a proto nebude nutné zadávat serveru žádné další požadavky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They’re all equivalent, because Git expands each of them to `refs/remotes/origin/master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny tři jsou přitom ekvivalentní, protože Git vždy rozšíří jejich podobu na `refs/remotes/origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They’re all invoked by the `git am` command, so if you aren’t using that command in your workflow, you can safely skip to the next section.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všechny tři se spouštějí spolu s příkazem `git am`, takže pokud tento příkaz nepoužíváte, můžete beze všeho přeskočit rovnou na následující část.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They’re checksummed; contain the tagger name, e-mail, and date; have a tagging message; and can be signed and verified with GNU Privacy Guard (GPG).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U anotovaných značek se provádí kontrolní součet. Obsahují jméno autora značky (tagger), e-mail a datum, nesou vlastní zprávu (tagging message) a mohou být podepsány (signed) a ověřeny (verified) v programu GNU Privacy Guard (GPG).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They’re local branches that you can’t move; they’re moved automatically whenever you do any network communication.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jsou to lokální větve, které nemůžete přesouvat. Přesouvají se automaticky při síťové komunikaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>They’re often used to enforce certain policies, although it’s important to note that these scripts aren’t transferred during a clone.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Často se používají jako ujištění, že budou dodržovány stanovené standardy. Tady je však nutné upozornit, že se tyto skripty při klonování nepřenášejí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This Perl snippet strips out anything it sees in a `$Date$` string, to get back to where you started.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento fragment Perl vyjme vše, co najde v řetězci `$Date$`, čímž se vrátí zpět do stavu, kde jste začali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This allows you to introduce all the changes from another branch and then make more changes before recording the new commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To vám umožní provést všechny změny z jiné větve a poté udělat více změn, než zaznamenáte novou revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This allows you to set up several types of workflows that aren’t possible in centralized systems, such as hierarchical models.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Můžete zavést několik typů pracovních postupů, které nejsou v centralizovaných systémech možné — jako jsou například hierarchické modely.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This also means that there is very little you can’t do if you’re offline or off VPN.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>To také znamená, že je jen velmi málo operací, které nemůžete provádět offline nebo bez připojení k VPN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This also means the changes you make from this point forward will diverge from an older version of the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To také znamená, že změny, které od teď provedete, se odštěpí od starší verze projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This also refers to the first parent, so `HEAD~` and `HEAD^` are equivalent.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také tento znak označuje prvního rodiče, výrazy `HEAD~` a `HEAD^` jsou proto ekvivalentní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This also works with options, which is probably more useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Automatické dokončování pravděpodobně více využijete v případě parametrů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This approach also makes it easier to pull out or revert one of the changesets if you need to later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomuto přístupu také později snáze vyjmete nebo vrátíte některou z provedených změn, bude-li to třeba.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This approach is very common because it is so simple, but it is also incredibly error prone.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Takový přístup je velmi častý, protože je jednoduchý. Je s ním však spojeno také velké riziko omylů a chyb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This basically asks Git to resolve a range of commits that are reachable from one commit but aren’t reachable from another.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí ní systému Git v podstatě říkáte, aby uvažoval celý interval revizí, které jsou dostupné z jedné revize, ale nejsou dostupné z jiné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This basically says, “Check out the client branch, figure out the patches from the common ancestor of the `client` and `server` branches, and then replay them onto `master`.” It’s a bit complex; but the result, shown in Figure 3-32, is pretty cool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím v podstatě říkáte: „Proveď checkout větve `client`, zjisti záplaty ze společného předka větví `client` a `server` a znovu je aplikuj na hlavní větev `master`.“ Postup je možná trochu složitý, ale výsledek, znázorněný na obrázku 3-32, stojí opravdu za to.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This book covers how to use Git with 30 or so verbs such as `checkout`, `branch`, `remote`, and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této knize jsme dosud uvedli asi 30 příkazů, které se používají k ovládání systému Git, např. `checkout`, `branch` nebo `remote`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can also be written `HEAD^^^`, which again is the first parent of the first parent of the first parent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Totéž by bylo možné označit výrazem `HEAD^^^`, který opět udává prvního rodiče prvního rodiče prvního rodiče:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can be a huge problem when you’re converting Subversion or Perforce repositories into Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To může způsobovat velké problémy, pokud konvertujete repozitáře Subversion nebo Perforce do systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can be confusing, because if you’ve staged all of your changes, `git diff` will give you no output.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To může být občas matoucí, protože pokud jste připravili všechny provedené změny, bude výstup příkazu `git diff` prázdný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can consist of accepting and applying patches generated via `format-patch` and e-mailed to you, or integrating changes in remote branches for repositories you’ve added as remotes to your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do této oblasti spadá přijímání a aplikace záplat vygenerovaných příkazem `format-patch`, které vám vývojáři poslali, nebo třeba integrace změn ve vzdálených větvích pro repozitáře, které jste do svého projektu přidali jako vzdálené repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can involve changing the order of the commits, changing messages or modifying files in a commit, squashing together or splitting apart commits, or removing commits entirely — all before you share your work with others.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K této možnosti patří změna pořadí revizí, změny ve zprávách nebo úprava souborů v revizích, komprimace i dělení revizí nebo třeba jejich úplné odstranění. Všechno toto můžete provést, dokud nezačnete sdílet revize s ostatními.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can take a while.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces může chvíli trvat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To může zabrat – podle velikosti projektu – několik sekund i minut, zatímco v systému Git probíhá tento proces vždy okamžitě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This chapter covers every basic command you need to do the vast majority of the things you’ll eventually spend your time doing with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato kapitola popíše všechny základní příkazy, jejichž prováděním strávíte při práci se systémem Git drtivou většinu času.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This chapter has covered a number of plumbing commands — commands that are lower level and simpler than the porcelain commands you’ve learned about in the rest of the book.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg> Seznámili jsme se s celou řadou nízkoúrovňových příkazů, tj. takových, které jsou na nižší úrovni a jsou jednodušší než „vysokoúrovňové příkazy“, jimiž jsme se zabývali ve všech předchozích kapitolách.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This chapter will be about getting started with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tato kapitola vám ve stručnosti představí systém Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This combination effectively filters all C source code files through `indent` before committing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato kombinace ještě před zapsáním účinně přefiltruje veškeré zdrojové soubory pro jazyk C přes program `indent`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command adds a section to your `.git/config` that looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz do vašeho `.git/config` přidá sekci, která vypadá následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command also exits with a non-zero status if the check fails, so you can use it in scripts if you want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže kontrola selže, příkaz vrací nenulový návratový kód, a proto ho lze snadno používat ve skriptech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command gives you a diff, but it may be misleading.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstupem tohoto příkazu bude výpis diff, který však může být lehce matoucí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command is run when you push to this repository over SSH; then, other people can clone via something like</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz se spustí, když do tohoto repozitáře odesíláte data přes protokol SSH. Poté mohou ostatní klonovat třeba takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command is sort of a Swiss army knife for inspecting Git objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz je něco jako švýcarský nůž k prohlížení objektů Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command lists the tags in alphabetical order; the order in which they appear has no real importance.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vypíše značky v abecedním pořadí. Pořadí, v němž se značky vyskytují, není relevantní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command looks up which server origin is (in this case, it’s `git.ourcompany.com`), fetches any data from it that you don’t yet have, and updates your local database, moving your `origin/master` pointer to its new, more up-to-date position (see Figure 3-24).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz zjistí, který server je `origin` (v našem případě je to `git.ourcompany.com`), vyzvedne z něj všechna data, která ještě nemáte, a aktualizuje vaši lokální databázi. Při tom přemístí ukazatel `origin/master` na novou, aktuálnější pozici (viz obrázek 3-24).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command puts conflict markers in any files it has issues with, much like a conflicted merge or rebase operation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vloží poznámku o konfliktu (conflict marker) do všech souborů, u nichž došlo k problémům, stejně jako u operací sloučení nebo přeskládání, při nichž došlo ke konfliktu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command reads simple instructions from stdin to write specific Git data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz načítá ze vstupů stdin jednoduché instrukce k zapsáni specifických dat systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command removes all files that end with `~`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz odstraní všechny soubory, které končí vlnovkou (`~`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command removes all files that have the `.log` extension in the `log/` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto příkazem odstraníte všechny soubory s příponou `.log` z adresáře `log/`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command shows which branch is automatically pushed when you run `git push` on certain branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz ukazuje, která větev bude automaticky odeslána, pokud spustíte příkaz `git push` na určitých větvích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command shows you any commits in your current branch that aren’t in the `master` branch on your `origin` remote.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz zobrazí všechny revize ve vaší aktuální větvi, které nejsou obsaženy ve větvi `master` vzdáleného repozitáře `origin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command shows you only the work your current topic branch has introduced since its common ancestor with master.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz zobrazí pouze práci, která byla ve vaší aktuální tematické větvi provedena od chvíle, kdy se oddělila od hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command takes your staging area and uses it for the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vezme vaši oblast připravených změn a použije ji k vytvoření revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command uses GPG to verify the signature.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz využívá k ověření podpisu program GPG.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command will apply the other two commits automatically, and then you’re done.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz automaticky aplikuje zbývající dvě revize. Tím je celý proces dokončen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz bude funkční, pouze pokud jste klonovali ze serveru, k němuž máte oprávnění pro zápis, a pokud sem od vašeho klonování nikdo neposílal svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This command works with lots of formats — you can specify a specific date (“2008-01-15”) or a relative date such as “2 years 1 day 3 minutes ago”.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz pracuje s velkým množstvím formátů. Můžete zadat konkrétní datum („2008-01-15“) nebo relativní datum, např. „2 years 1 day 3 minutes ago“ (před 2 roky, 1 dnem a 3 minutami).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This commit is fine, and now Git has all the information it needs to determine where the issue was introduced.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato revize je v pořádku, a Git tak má nyní všechny informace, které potřebuje k určení, kde problém vznikl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This concept is true in Git as it is in Subversion (or any CVCS), and this model works perfectly in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento koncept platí jak pro Git, tak pro Subversion (popř. jakýkoli CVCS). I v systému Git funguje bez problémů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This creates a new pointer at the same commit you’re currently on (see Figure 3-4).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz vytvoří nový ukazatel na stejné revizi, na níž se právě nacházíte (viz obrázek 3-4).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This creates a new subdirectory named `.git` that contains all of your necessary repository files — a Git repository skeleton.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz vytvoří nový podadresář s názvem `.git`, který bude obsahovat všechny soubory nezbytné pro repozitář, tzv. kostru repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This denies branch and tag deletion over a push across the board — no user can do it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Paušálně tím zamezíte možnému smazání větve a značek při odesílání, žádný z uživatelů je nebude moci odstranit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This discussion will include not having to create user accounts for each user, adding public read access to repositories, setting up web UIs, using the Gitosis tool, and more.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dozvíte se v nich, jak se vyhnout nutnosti vytvářet uživatelské účty pro všechny uživatele, jak k repozitářům přiřadit veřejné oprávnění pro čtení, jak nastavit webová rozhraní nebo k čemu se používá nástroj Gitosis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This does a one-time pull and doesn’t save the URL as a remote reference:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz provede jednorázové stažení a nebude ukládat URL jako referenci na vzdálený repozitář:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This does the equivalent of the `svn copy trunk branches/opera` command in Subversion and operates on the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz je ekvivalentní s příkazem `svn copy trunk branches/opera` v systému Subversion a pracuje na serveru Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This doesn’t affect the commit data in any way — the SSH user you connect as doesn’t affect the commits you’ve recorded.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento postup nemá žádný vliv na data vašich revizí – SSH uživatel, jehož účtem se přihlašujete, neovlivní revize, které jste nahráli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This effectively makes nice text-based versions of your Word files before attempting to diff them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Než se Git pokusí zjistit ve wordovských souborech rozdíly, dojde k jejich převedení na hezké textové verze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This entire chapter basically deals with the stuff in this directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celá tato kapitola se bude zabývat v podstatě jen obsahem tohoto adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This example uses the `-L` option to limit the output to lines 12 through 22:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Následující příklad používá parametr `-L`, který omezí výstup na řádky 12 až 22:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This file exists for performance reasons, as it is more efficient to have a single file rather than many small ones for references that don't change very often.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Důvodem k existenci tohoto souboru je výkonnost. Pro reference, které se často nemění je mnohem efektivnější udržovat jeden soubor než mnoho malých.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This file is written by the `update-server-info` command, which is why you need to enable that as a `post-receive` hook in order for the HTTP transport to work properly:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento soubor se zapisuje příkazem `update-server-info`. To je také důvod, proč ho je nutné zapnout jako zásuvný modul `post-receive`, aby přenos dat prostřednictvím protokolu probíhal správně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This first example describes contributing via forking on Git hosts that support easy forking.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První příklad popisuje, jak se přispívá s využitím rozštěpení na hostitelských serverech Git, které podporují snadné štěpení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This functionality is built into Git at the lowest levels and is integral to its philosophy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tato funkce je integrována do systému Git na nejnižších úrovních a je nedílnou součástí jeho filozofie.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This gives you a local branch that you can work on that starts where `origin/serverfix` is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem získáte lokální větev, na níž můžete pracovat a která začíná na pozici `origin/serverfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This gives you a lot more power, at the expense of some complexity, because now fallthrough is not the _only_ way for access to be denied, so the *order of the rules now matters*!</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To vám dává mnohem více možností, ale za cenu zvýšení složitosti. Popadnutí sítem pravidel už totiž není _jedinou_ možností vedoucí k zamítnutí přístupu. *Záleží na pořadí pravidel!*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This goes through and rewrites every commit to have your new address.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz projde a přepíše všechny revize tak, aby obsahovaly novou adresu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This happens because Git directly compares the snapshots of the last commit of the topic branch you’re on and the snapshot of the last commit on the `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to z toho důvodu, že Git přímo srovnává snímky poslední revize v tematické větvi, na níž se nacházíte, se snímky poslední revize ve větvi `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This helps make the data more useful:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu získáte k datům další užitečné informace:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This hook can likewise validate the presence of files external to Git control that you may want copied in when the working tree changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul může rovněž ověřit přítomnost souborů nezahrnutých do správy verzí systému Git, které možná budete chtít po změnách v pracovním stromě zkopírovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This hook generally isn’t useful for normal commits; rather, it’s good for commits where the default message is auto-generated, such as templated commit messages, merge commits, squashed commits, and amended commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento zásuvný modul většinou není pro normální revize využitelný. Hodí se spíše pro revize, u nichž je výchozí zpráva generována automaticky, např. zprávy k revizím ze šablony, revize sloučením, komprimované revize a doplněné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This hook takes a few options: the path to the file that holds the commit message so far, the type of commit, and the commit SHA-1 if this is an amended commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento zásuvný modul vyžaduje některá nastavení: cestu k souboru, v němž je zpráva k revizi uložena, typ revize, a jedná-li se o doplněnou revizi, také SHA-1 revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jedná se o řetězec o 40 hexadecimálních znacích (0–9; a–f) vypočítaný na základě obsahu souboru nebo adresářové struktury systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a bit of a shortcut.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je zkrácená verze příkazu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a configuration file that stores the mapping between the project’s URL and the local subdirectory you’ve pulled it into:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o konfigurační soubor, v němž je uloženo mapování mezi adresou URL projektu a lokálním podadresářem, do nějž jste stáhli repozitář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a directory of scripts that Bash will automatically load to provide shell completions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jde o adresář skriptů, ze kterého si Bash automaticky načítá podporu pro shellové dokončování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a good option if you’re the only Git user on a Subversion team, and your teammates don’t want `.gitignore` files in the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto možnost oceníte, jste-li jediným uživatelem systému Git v týmu používajícím Subversion a vaši kolegové nestojí ve svém projektu o soubory `.gitignore`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a nice shortcut to recover stashed work easily and work on it in a new branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o příjemný a jednoduchý způsob, jak obnovit odloženou práci a pokračovat na ní v nové větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a powerful tool that can help you check hundreds of commits for an introduced bug in minutes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz představuje výkonný nástroj, který vám pomůže vyhledat zavlečenou chybu mezi stovkami revizí za pár minut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a relatively expensive operation and may add a lot of time to each push, depending on the size of the repository or the push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o poměrně náročnou operaci, která může každé odesílání výrazně zpomalit. Závisí přitom na velikosti repozitáře nebo odesílaných dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a safety feature to prevent accidental removal of data that hasn’t yet been recorded in a snapshot and that can’t be recovered from Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o bezpečnostní funkci, jež má zabránit nechtěnému odstranění dat, která ještě nebyla nahrána do snímku, a nemohou proto být ze systému Git obnovena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to speciální démon, který je distribuován spolu se systémem Git. Naslouchá na vyhrazeném portu (9418) a poskytuje podobnou službu jako protokol SSH, avšak bez jakékoliv autentizace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a subtle but incredibly annoying fact of cross-platform work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to sice malý, ale neuvěřitelně obtěžující průvodní jev spolupráce mezi různými platformami.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a tad confusing, because now you’ve seen at least three different ways that Git uses the `^` to modify a commit SHA, but that is what it means here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to trochu matoucí, protože jsme před chvílí viděli minimálně tři různé způsoby, jak Git používá znak `^` k modifikaci hodnoty SHA revize. Tady má tento znak jiný význam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a variant of a multiple-repository workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o variantu pracovního postupu s více repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is a very common workflow with sites like GitHub, where it’s easy to fork a project and push your changes into your fork for everyone to see.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento pracovní postup je velmi rozšířený na serverech jako je GitHub, kde je snadné rozštěpit projekt a odeslat změny do své odštěpené části, kde jsou pro každého k nahlédnutí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is also a nice option for quickly grabbing work from someone else’s working repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se také o výbornou možnost, jak rychle získat práci z pracovního repozitáře někoho jiného.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is also a valid mbox e-mail format.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zároveň je to také platný e-mailový formát mbox.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is also useful if you have multiple packfiles on the server, so you can see which packfile contains the object you need:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je rovněž užitečné, máte-li na serveru více balíčkových souborů. Zjistíte tak, který z nich obsahuje hledaný objekt:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Cesta je vždy posledním parametrem a většinou jí předcházejí dvě pomlčky (`--`) , jimiž je oddělena od ostatních parametrů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important distinction between Git and nearly all other VCSs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Toto je důležitý rozdíl mezi systémem Git a téměř všemi ostatními systémy VCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important distinction — Git receives a copy of nearly all data that the server has.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Souvisí to s jedním podstatným rozdílem: Git získá kopii téměř všech dat na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important point to remember: Git resets your working directory to look like the snapshot of the commit that the branch you check out points to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento důležitý bod si zapamatujte: Git vždy vrátí pracovní adresář do stejného stavu, jak vypadal snímek revize, na niž ukazuje větev, jejíž checkout nyní provádíte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important point with submodules: you record them as the exact commit they’re at.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je důležitá vlastnost submodulů: zaznamenáváte je jako přesné revize, na nichž se nacházejí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is an important section to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git effectively will probably be much easier for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Odpověď na tuto otázku je velmi důležitá, protože pokud pochopíte, co je Git a na jakém principu pracuje, budete ho bezpochyby moci používat mnohem efektivněji.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is basically the `git log` command, but by default it prints out only the SHA-1 values and no other information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz má v podstatě stejnou funkci jako `git log`, jeho výstupem jsou ale pouze hodnoty SHA-1 bez dalších informací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is basically the commit checksum stored in a file — no other information is kept.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prostá značka je v podstatě kontrolní součet revize uložený v souboru, žádné další informace neobsahuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is because SSH access to servers is already set up in most places — and if it isn’t, it’s easy to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to z toho důvodu, že SSH přístup k serverům je na většině míst už nastaven, a pokud ne, není ho těžké nastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is because Windows uses both a carriage-return character and a linefeed character for newlines in its files, whereas Mac and Linux systems use only the linefeed character.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Windows ve svých souborech používá pro nové řádky jak znak pro návrat vozíku (carriage return), tak znak pro posun o řádek (linefeed), zatímco systémy Mac a Linux používají pouze znak posun o řádek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is called a _refspec_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Říká se tomu _refspec_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is called having a detached HEAD — it means the HEAD file points directly to a commit, not to a symbolic reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Říká se tomu oddělená hlava (detached head) – znamená to, že soubor HEAD ukazuje přímo na revizi, ne na symbolickou referenci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is common if you’re coming from CVS or Subversion, where you’ve defined a module or collection of subdirectories, and you want to keep this type of workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomu může dojít, pokud přecházíte ze systému CVS nebo Subversion, kde jste definovali modul nebo několik podadresářů, a chcete v tomto typu pracovního postupu pokračovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is different than using a Git server — in Git, you can fully test the state on your client system before publishing it, whereas in SVN, you can’t ever be certain that the states immediately before commit and after commit are identical.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tom se tento postup liší od používání serveru Git. V systému Git můžete kompletně otestovat stav v systému klienta ještě před zveřejněním. V SVN si naproti tomu nemůžete být nikdy jisti, že je stav bezprostředně před revizí a po revizi identický.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is easy, because you have each one in a directory — you can print out the `deleteall` command followed by the contents of each file in the directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To bude snadné, protože máte všechny v jednom adresáři. Zadejte příkaz `deleteall` a k němu přidejte obsah každého souboru v adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is especially important to understand if you’re used to Subversion, because you’ll notice that the two developers didn’t edit the same file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je třeba si uvědomit, zejména pokud jste zvyklí na systém Subversion. Oba vývojáři totiž neupravovali stejný soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is especially useful when you’re generating output for machine parsing — because you specify the format explicitly, you know it won’t change with updates to Git:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato možnost je užitečná zejména v situaci, kdy vytváříte výpis pro strojovou analýzu. Jelikož specifikujete formát explicitně, máte jistotu, že se s aktualizací systému Git nezmění:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is essentially what Git does when you run the `git add` and `git commit` commands — it stores blobs for the files that have changed, updates the index, writes out trees, and writes commit objects that reference the top-level trees and the commits that came immediately before them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je v podstatě také to, co se odehrává, když zadáte příkazy jako `git add` nebo `git commit` – Git uloží bloby souborů, které byly změněny, akutalizuje index, uloží stromy a zapíše objekty revize, které referencí odkazují na stromy nejvyšší úrovně a revize, které jim bezprostředně předcházely.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is fine if the whole thing is source code, because Git is highly optimized to compress that data efficiently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je však jedna věc, která vám může způsobovat problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is generally good policy; but in the case of the rebase, you may determine that you know what you’re doing and can force-update the remote branch with a `-f` flag to your push command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou většinou užitečná pravidla. V případě přeskládání však můžete oznámit, že víte, co děláte, a příznakem `-f` v kombinaci s příkazem push můžete donutit vzdálenou větev k aktualizaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is generally straightforward to do.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S tím obvykle nebývá problém.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is helpful if a branch in your project has diverged or is specialized, but you want to be able to merge changes back in from it, and you want to ignore certain files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto možnost využijete, pokud se rozdělila nebo specializovala některá z větví vašeho projektu, avšak vy z ní budete chtít začlenit změny zpět a ignorovat přitom určité soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is how Git stores the content initially — as a single file per piece of content, named with the SHA-1 checksum of the content and its header.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takto Git ukládá nejprve veškerý obsah – jeden soubor pro každý kus obsahu, nazvaný kontrolním součtem SHA-1 obsahu a záhlaví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is how other people who clone this project know where to get the submodule projects from.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ostatní uživatelé, kteří budou tento projekt klonovat, díky tomu zjistí, kde najdou projekty submodulů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is important because every Git commit uses this information, and it’s immutably baked into the commits you pass around:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to důležité, protože tuto informaci Git používá pro každý zápis revize a uvedené údaje stanou trvalou složkou záznamů o revizi, které budou putovat po okolí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is important because it means that all the SHA-1 checksums for your commits change.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je důležité, protože to znamená, že se změní všechny kontrolní součty SHA-1 vašich revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is important because with more and more developers, you run into more issues with making sure your code applies cleanly or can be easily merged.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je důležité zejména z toho hlediska, že s rostoucím počtem vývojářů se také zvětšují starosti s tím, aby byl kód aplikován čistě a aby ho bylo možné snadno začlenit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is important to remember, because the outcome is a project state that didn’t exist on either of your computers when you pushed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto skutečnost je dobré mít na paměti, neboť výsledkem takového postupu je stav projektu, který ve chvíli vašeho odeslání neexistoval na žádném z počítačů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is in sharp contrast to the way most VCS tools branch, which involves copying all of the project’s files into a second directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato metoda se výrazně liší od způsobu, jakým probíhá větvení v ostatních nástrojích VCS, kde je nutné zkopírovat všechny soubory projektu do jiného adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is interesting, because now your testing branch has moved forward, but your `master` branch still points to the commit you were on when you ran `git checkout` to switch branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výsledek je zajímavý z toho důvodu, že se větev `testing` posunula vpřed, zatímco větev `master` stále ukazuje na revizi, na níž jste se nacházeli v okamžiku, kdy jste spustili příkaz `git checkout` a přepnuli tím větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is just the default refspec for `git fetch` for that remote.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je výchozí vzorec refspec pro příkaz `git fetch` pro tento vzdálený server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is like `blame` and `log` in that it runs offline and is up to date only as of the last time you communicated with the Subversion server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně jako v případě příkazů `blame` a `log` pracuje i tento příkaz offline a zobrazuje stav v okamžiku, kdy jste naposledy komunikovali se serverem Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is most useful if you’re working with a person consistently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto možnost využijete zejména tehdy, když s někým spolupracujete dlouhodobě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is much like specifying `git diff --cached` on the command line:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to prakticky totéž, jako byste na příkazovém řádku zadali příkaz `git diff --cached`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is necessary because Git does its own filename expansion in addition to your shell’s filename expansion.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je tu proto, že Git provádí své vlastní nahrazování masek souborů nad to, které provádí váš shell.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is nice because with this syntax you can specify more than two references in your query, which you cannot do with the double-dot syntax.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato syntaxe je užitečná zejména proto, že pomocí ní můžete zadat více než dvě reference, což není pomocí dvojtečkové syntaxe možné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is nice if you have a number of patches saved, because you can view the patch first if you don’t remember what it is, or not apply the patch if you’ve already done so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To oceníte v situaci, kdy máte uložených několik záplat. Pokud si nepamatujete, o co v dané záplatě šlo, můžete si ho před aplikací prohlédnout. Stejně tak vyloučíte záplaty, které jste už jednou aplikovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is often called a pull request, and you can either generate it via the website — GitHub has a "pull request" button that automatically messages the maintainer — or run the `git request-pull` command and e-mail the output to the project maintainer manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tomu se říká „žádost o natažení“ (angl. pull request). Můžete ji vygenerovat buď na webové stránce – server GitHub má tlačítko „pull request“, které automaticky odešle správci upozornění – nebo můžete zadat příkaz `git request-pull` a jeho výstup e-mailem ručně odeslat správci projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is often used if everyone on your team has access to a shared filesystem such as an NFS mount, or in the less likely case that everyone logs in to the same computer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Často se využívá v případech, kdy mají všichni z vašeho týmu přístup k vašim sdíleným souborům, např. přes připojení systému NFS, nebo – v méně pravděpodobném případě – se všichni přihlašují na jednom počítači.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is one of the few areas in Git where you may lose some work if you do it wrong.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to jedna z mála oblastí v systému Git, kdy při neuváženém postupu riskujete, že přijdete o část své práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is particularly useful for managing your branches — if you have a lot of branches, you can use range specifications to answer questions such as, "What work is on this branch that I haven’t yet merged into my main branch?"</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To využijete zejména při správě větví. Máte-li větší množství větví, pomůže vám označení intervalu revizí dohledat odpovědi na otázky typu: „Jaká práce je obsažena v této větvi, kterou jsem ještě nezačlenil do hlavní větve?“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To může být užitečné zejména v situaci, kdy něco zapomenete přidat do souboru `.gitignore`, a omylem to tak zahrnete do revize, např. velký log soubor nebo pár zkompilovaných souborů s příponou `.a`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is really useful.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato funkce je opravdu užitečná.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is referred to as a merge commit and is special in that it has more than one parent.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takové revizi se říká revize sloučením (merge commit) a její zvláštností je to, že má více než jednoho rodiče.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is roughly equivalent to something like</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to přibližně stejné, jako byste zadali například:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is roughly the same script as the server-side part, but with two important differences.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o přibližně stejný skript, jaký funguje na serveru, avšak se dvěma podstatnými rozdíly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is shorthand for:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem jste spojili dva příkazy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is something you’ve likely never done with a VCS before because it’s generally too expensive to create and merge branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to záležitost, do které byste se v jiném systému pro správu verzí asi raději nikdy nepustili, protože vytvářet a slučovat větve je v něm opravdu složité.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the SHA-1 hash — a checksum of the content you’re storing plus a header, which you’ll learn about in a bit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedná se o otisk SHA-1 – kontrolní součet spojení ukládaného obsahu a záhlaví, o němž si povíme za okamžik.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the basic information that the commit object stores for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto jsou základní informace, které obsahuje objekt revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the beginning of the output of the format-patch command that you saw in the previous section.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je začátek výstupu příkazu format-patch, s nímž jsme se setkali v předchozí části.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the case because the pointer you have for the submodule isn’t what is actually in the submodule directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A tak to opravdu je, protože ukazatel, který máte pro submodul, není to, co máte skutečně v adresáři submodulu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the main thing to remember about Git if you want the rest of your learning process to go smoothly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud chcete dále hladce pokračovat ve studiu Git, budou pro vás následující informace stěžejní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is the most important part of Git, and it is what is copied when you clone a repository from another computer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Je to nejdůležitější část systému Git a zároveň adresář, který se zkopíruje, když klonujete repozitář z jiného počítače.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is useful if you have a number of commits on a topic branch and you want to integrate only one of them, or if you only have one commit on a topic branch and you’d prefer to cherry-pick it rather than run rebase.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To využijete například v situaci, kdy máte několik revizí v tematické větvi, ale chcete integrovat pouze jednu z nich. Částečné převzetí však můžete použít i místo přeskládání, pokud máte v tematické větvi pouze jednu revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is useful if you want to keep the `experiment` branch up to date and preview what you’re about to merge in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento log využijete, pokud chcete udržovat větev `experiment` stále aktuální a zjistit, co hodláte začlenit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is useful if you write your own tools that work with a Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto možnost využijete, pokud si píšete své vlastní nástroje, které fungují s repozitářem Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is very helpful for code review or to quickly browse what happened during a series of commits that a collaborator has added.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato funkce je velmi užitečná při kontrole kódu nebo k rychlému zjištění, co bylo obsahem série revizí, které přidal váš spolupracovník.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is very similar to what `receive-pack` responds with, but the capabilities are different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace se nápadně podobají těm, jimiž odpovídá proces `receive-pack`, liší se však schopnosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This is where Distributed Version Control Systems (DVCSs) step in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>V tomto místě přicházejí ke slovu tzv. distribuované systémy správy verzí (DVCS z angl. Distributed Version Control System).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This kind of workflow isn’t common but can be useful in very big projects or in highly hierarchical environments, as it allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento typ pracovního postupu není sice obvyklý, ale může být užitečný u velmi velkých projektů nebo v silně hierarchizovaných prostředích, neboť umožňuje, aby vedoucí projektu (diktátor) velkou část práce delegoval. Pak sbírá velké kusy kódu, které integruje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Z toho vyplývá, že projekt je v systému Git rozdělen do tří hlavních částí: adresář systému Git (Git directory), pracovní adresář (working directory) a oblast připravených změn (staging area).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This leaves four important entries: the `HEAD` and `index` files and the `objects` and `refs` directories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zbývají čtyři důležité položky: soubory `HEAD` a `index` a adresáře `objects` a `refs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This lets the user with that key modify the main Git repository that controls the Gitosis setup.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatel s tímto klíčem poté bude moci měnit hlavní repozitář Git, kterým se ovládá nastavení nástroje Gitosis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This lets you clone another repository into your project and keep your commits separate.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do svého projektu tak můžete naklonovat jiný repozitář a uchovávat revize oddělené.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This lifecycle is illustrated in Figure 2-1.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracovní cyklus je znázorněn na obrázku 2-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This looks a bit different than the `hotfix` merge you did earlier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto už se trochu liší od začlenění větve `hotfix`, které jste prováděli před chvílí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Git se podobá malému systému souborů (spíše než obyčejnému VCS) s řadou skutečně výkonných nástrojů, jež jsou na něm postavené.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes for a very powerful revision query system that should help you figure out what is in your branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím máte v rukou velmi efektivní systém vyhledávání revizí, který vám pomůže zjistit, co vaše větve obsahují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes merging a heck of a lot easier in Git than in these other systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Slučování větví je proto v systému Git o poznání jednodušší než v ostatních systémech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes the following two commands equivalent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zadání takového příkazu budete mít k dispozici dva ekvivalentní příkazy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Díky tomu vás bude práce se systémem Git bavit. Budete pracovat s vědomím, že můžete experimentovat, a neriskujete přitom nevratné zničení své práce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This makes your `import` command look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš příkaz `import` pak bude mít tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This may be a bit confusing, so let’s look at an example.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mohlo by to být trochu matoucí, takže si uveďme příklad.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local master branch to track the remote master branch on the server you cloned from (assuming the remote has a master branch).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento postup pro vás může být snazší a pohodlnější. Standardně přitom příkaz `git clone` automaticky nastaví vaši lokální hlavní větev, aby sledovala vzdálenou hlavní větev na serveru, z kterého jste klonovali (za předpokladu, že má vzdálený server hlavní větev).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This may mean moving in large binary files that you don’t want source controlled, auto-generating documentation, or something along those lines.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pod tím si můžete představit například přesouvání velkých binárních souborů, jejichž zdrojový kód si nepřejete verzovat, automatické generování dokumentace apod.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This may not seem like a huge deal, but you may be surprised what a big difference it can make.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Možná to vypadá jako maličkost, ale divili byste se, jak velký je v tom rozdíl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means I can pull contributions from any of these users pretty easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že mohu velmi snadno stáhnout příspěvky od kteréhokoli z těchto uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means `master` almost always moves forward, `next` is rebased occasionally, and `pu` is rebased even more often (see Figure 5-25).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že se větev `master` téměř neustále posouvá vpřed, větev `next` je čas od času přeskládána a větev `pu` je přeskládávána ještě o něco častěji (viz obrázek 5-25).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means it’s impossible to change the contents of any file or directory without Git knowing about it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Znamená to, že není možné změnit obsah jakéhokoli souboru nebo adresáře, aniž by o tom Git nevěděl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that if two developers clone from the hub and both make changes, the first developer to push their changes back up can do so with no problems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že pokud dva vývojáři klonují z centrálního úložiště a oba provedou změny, jen první z nich, který odešle své změny, to může provést bez komplikací.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that if you commit at this point, the `master` branch will be moved forward with your new work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tedy nyní zapíšete revizi, vaše nová práce posune vpřed větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that there is generally no pushing over this protocol.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že se přes tento protokol nedají odesílat žádné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that when you push to the server via SSH, Git will run this command to update the files needed for HTTP fetching.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znamená to, že až budete odesílat data na server prostřednictvím SSH, Git spustí tento příkaz a aktualizuje soubory vyžadované pro přístup přes HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means that, for example, instead of typing `git commit`, you just need to type `git ci`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že například místo kompletního příkazu `git commit` stačí zadat pouze zkrácené `git ci`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means the tag directly above is an annotated tag and that line is the commit that the annotated tag points to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento řádek znamená, že značka bezprostředně nad ním je anotovaná a tento řádek je revize, na niž tato anotovaná značka ukazuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means the version in HEAD (your master branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že verze ve větvi s ukazatelem HEAD (vaše hlavní větev – v té jste se nacházeli při provádění příkazu merge) je uvedena v horní části tohoto bloku (všechno nad oddělovačem `=======`), verze obsažená ve větvi `iss53` je vše, co se nachází v dolní části.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you can do local branching and merging, use the staging area, use rebasing and cherry-picking, and so on, while your collaborators continue to work in their dark and ancient ways.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že můžete vytvářet nové lokální větve a slučovat je, používat oblast připravených změn, přeskládávat, částečně přejímat atd., zatímco vaši spolupracovníci budou dále pracovat svými zašlými a prastarými způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you can have several branches that are always open and that you use for different stages of your development cycle; you can merge regularly from some of them into others.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete tak mít několik větví, které jsou stále otevřené a které používáte pro různé fáze vývojového cyklu. Pravidelně můžete začleňovat práci z jedné větve do ostatních.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you have a clean working directory — in other words, no tracked files are modified.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To znamená, že žádné soubory nejsou připraveny k zapsání a pracovní adresář je čistý. Jinými slovy, žádné sledované soubory nebyly změněny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This means you see the project history almost instantly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Znamená to, že se historie projektu zobrazí téměř hned.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This message is displayed because 'merge.tool' is not configured.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T103001Z" creationid="Prikryl" creationdate="20151023T103001Z">
        <seg>This message is displayed because 'merge.tool' is not configured.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This modifies the files in your working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím změníte soubory ve svém pracovním adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This moves HEAD to point to the testing branch (see Figure 3-6).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto příkazem přesunete ukazatel HEAD tak, že ukazuje na větev testing (viz obrázek 3-6).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This object type is called a blob.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento typ objektu se nazývá blob.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This occurs fairly commonly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto je opravdu velmi častá situace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This opens a vast range of workflow possibilities for your project and/or your team, so I’ll cover a few common paradigms that take advantage of this flexibility.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím se pro váš projekt a váš tým otvírá široké spektrum pracovních postupů. Zkusíme se tedy podívat na pár častých přístupů, které tato flexibilita umožňuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option adds a nice little ASCII graph showing your branch and merge history, which we can see in our copy of the Grit project repository:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento parametr vloží pěkný malý ASCII graf, znázorňující historii vaší větve a slučování, kterou si ukážeme na naší kopii repozitáře projektu Grit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option changes the log output to formats other than the default.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento parametr změní výstup logu na jiný než výchozí formát.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option displays the same information but with a diff directly following each entry.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento parametr zobrazí tytéž informace, ale za každým záznamem následuje informace o rozdílech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option is available only in Git 1.6.1 and later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato možnost je dostupná ve verzi systému Git 1.6.1 a novějších.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This option isn’t on by default because it doesn’t work if the commit the patch says it was based on isn’t in your repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato možnost není nastavena jako výchozí, protože ji nelze použít v situaci, kdy revize, o níž záplata říká, že je na ní založena, není obsažena ve vašem repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This process is just like sharing remote branches — you can run `git push origin [tagname]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento proces je stejný jako sdílení vzdálených větví. Spusťte příkaz `git push origin [název značky]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This process is similar across all operating systems.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento proces se napříč operačními systémy téměř neliší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This prompted the Linux development community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>To přimělo komunitu vývojářů Linuxu (a zejména Linuse Torvaldse, tvůrce Linuxu), aby vyvinula vlastní nástroj, založený na poznatcích, které nasbírala při užívání systému BitKeeper.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This pulls the same change introduced in `e43a6`, but you get a new commit SHA-1 value, because the date applied is different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto natáhnete stejnou změnu, která byla provedena revizí `e43a6`, avšak hodnota SHA-1 obou revizí se bude lišit, neboť bude rozdílné datum aplikace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This reduces the load on the main admin, and makes him less of a bottleneck.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To snižuje vytížení hlavního administrátora, který tím přestává být úzkým místem správy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This replays your `server` work on top of your `master` work, as shown in Figure 3-34.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz provede změny obsažené ve větvi `server` ještě jednou na vrcholu větve `master`, jak je znázorněno na obrázku 3-34.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This resolution has a little of each section, and I’ve fully removed the `&lt;&lt;&lt;&lt;&lt;&lt;&lt;`, `=======`, and `&gt;&gt;&gt;&gt;&gt;&gt;&gt;` lines.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto řešení obsahuje trochu z každé části a zcela jsem odstranil řádky `&lt;&lt;&lt;&lt;&lt;&lt;&lt;`, `=======` a `&gt;&gt;&gt;&gt;&gt;&gt;&gt;`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This rewrites your history to now look like Figure 5-17.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím přepíšete svou historii, která teď bude vypadat jako na obrázku 5-17.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This runs the equivalent of two commands — `git svn init` followed by `git svn fetch` — on the URL you provide.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na adrese URL, kterou jste zadali, tím v podstatě provedete dva příkazy: `git svn init` a `git svn fetch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This scenario often includes a canonical repository that represents the "official" project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento scénář často zahrnuje jeden standardní repozitář, který reprezentuje „oficiální“ projekt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This script can’t stop the push process, but the client doesn’t disconnect until it has completed; so, be careful when you try to do anything that may take a long time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento skript nedokáže zastavit proces odesílání, avšak klient se neodpojí, dokud není dokončen. Buďte proto opatrní, pokud se chystáte provést akci, která může dlouho trvat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This script uses a syntax that wasn’t covered in the Revision Selection section of Chapter 6.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento skript používá syntaxi, které jsme se v části Výběr revize v kapitole 6 nevěnovali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section goes over some importers that are included with Git for common systems and then demonstrates how to develop your own custom importer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části se seznámíte s několika importéry pro běžné systémy, které jsou součástí systému Git, a poté ukážeme, jak si můžete vytvořit importér vlastní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section has covered a number of common workflows for dealing with several very different types of Git projects you’re likely to encounter and introduced a couple of new tools to help you manage this process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části jsme popsali několik obvyklých pracovních postupů při přispívání do velmi odlišných typů projektů Git, s nimiž se můžete setkat. Představili jsme k nim také nové nástroje, které vám mohou v těchto procesech pomoci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section outlines the various ways you can refer to a single commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato část uvede několik různých způsobů, jak lze určit jednu konkrétní revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section revisits a couple of commands so you can see how you can use them to review exactly what you’ll be introducing if you merge this into your main branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části zopakujeme některé příkazy a podíváme se, jak je můžete použít, chcete-li zjistit, co přesně se stane, pokud novou práci začleníte do své hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section serves as a quick introduction to Gitolite, and provides basic installation and setup instructions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato podkapitola slouží k rychlému seznámení s Gitolite a uvádí základní pokyny pro instalaci a nastavení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section splits them into committing-workflow hooks, e-mail-workflow scripts, and the rest of the client-side scripts.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části je rozdělíme na zásuvné moduly k zapisování revizí, zásuvné moduly pro práci s e-maily a na ostatní zásuvné moduly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section will cover some of these scenarios.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato část se na některé z těchto scénářů zaměří.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This section will quickly cover how these two main protocols operate.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato část se ve stručnosti zaměří na to, jak tyto dva základní protokoly fungují.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This seems a bit clearer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz unstage je o něco jasnější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This server is at `git.team1.ourcompany.com`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento server se nachází na `git.team1.ourcompany.com`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This sets up the properties to run the sync.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím nastavíte vlastnosti synchronizace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This setup offers many advantages, especially over local VCSs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Nabízí ostatně mnoho výhod, zejména v porovnání s lokálními systémy VCS.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This setup should leave you with CRLF endings in Windows checkouts but LF endings on Mac and Linux systems and in the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Toto nastavení by vám mělo pomoci zachovat zakončení CRLF při checkoutu v systému Windows a zakončení LF v systémech Mac a Linux a v repozitářích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This shows your other branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se zobrazila jiná větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This tab also shows a box with the latest commit information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato záložka obsahuje rovněž pole s informacemi o poslední zapsané revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This takes a number of custom settings: `merge.tool` to tell Git what strategy to use, `mergetool.*.cmd` to specify how to run the command, `mergetool.trustExitCode` to tell Git if the exit code of that program indicates a successful merge resolution or not, and `diff.external` to tell Git what command to run for diffs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S tím souvisí celá řada uživatelských nastavení: `merge.tool`, jímž systému Git sdělíte, kterou strategii slučování má používat, `mergetool.*.cmd`, jímž určíte, jak příkaz spustit, `mergetool.trustExitCode`, který systému Git sdělí, zda návratový kód tohoto programu oznamuje, nebo neoznamuje úspěšné vyřešení sloučení, a `diff.external`, který systému Git říká, jakým příkazem se zjišťují rozdíly.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This takes all the commits you’ve made on top of the Subversion server code, does a Subversion commit for each, and then rewrites your local Git commit to include a unique identifier.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz vezme všechny revize, které jste provedli na vrcholu kódu ze serveru Subversion, každou jednotlivě zapíše do systému Subversion a přepíše vaši lokální revizi Git tak, aby obsahovala unikátní identifikátor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This takes the references that were remote branches that started with `tag/` and makes them real (lightweight) tags.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím se reference, které označovaly vzdálené větve a začínaly `tag/`, převedou na skutečné (prosté) značky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This technique allows you to context-switch quickly and completely — because your work is separated into silos where all the changes in that branch have to do with that topic, it’s easier to see what has happened during code review and such.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato technika umožňuje rychlé a snadné kontextové přepínání. Protože je vaše práce rozdělena do zásobníků, kde všechny změny v jedné větvi souvisí s jedním tématem, je při kontrole kódu snazší dohledat, čeho se změny týkaly apod.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This technique can also be very useful in creating commands that you think should exist.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato metoda může být velmi užitečná také k vytváření příkazů, které by podle vás měly existovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This technique only works for data that’s still in your reflog, so you can’t use it to look for commits older than a few months.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato možnost funguje pouze pro data, jež jsou dosud v záznamu reflog. Nemůžete ji proto použít pro revize starší než několik měsíců.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This tells Git that any file that matches this pattern (.doc) should use the "word" filter when you try to view a diff that contains changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systému Git tím sdělíte, že pro všechny soubory, které odpovídají této masce (.doc), by měl být při zobrazení rozdílů použít filter „word“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This time, if you run `git show` on the tag, you don’t see the extra tag information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud spustíte pro značku příkaz `git show` tentokrát, nezobrazí se k ní žádné další informace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This tool allows you to use Git as a valid client to a Subversion server, so you can use all the local features of Git and then push to a Subversion server as if you were using Subversion locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento nástroj umožňuje používat Git jako platného klienta serveru Subversion. Můžete tak využívat všech lokálních funkcí systému Git, ale revize odesílat na server Subversion, jako byste tento systém používali i lokálně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This tool basically works by keeping patch sets (that is, the differences between files) from one revision to another in a special format on disk; it can then recreate what any file looked like at any point in time by adding up all the patches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Tento nástroj pracuje na tom principu, že na disku uchovává ve speciálním formátu seznam změn mezi jednotlivými verzemi. Systém později může díky porovnání těchto změn vrátit jakýkoli soubor do podoby, v níž byl v libovolném okamžiku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, it’s easy to tweak a patch individually and leave it if it’s not working until you have time to come back to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Snadno tak můžete záplatu individuálně opravit, a pokud není funkční, opustit ji, dokud nebudete mít čas k její opravě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, projects don’t have to worry about adding users as collaborators to give them push access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu se projekty nemusí starat o přidávání uživatelů do role spolupracovníků, kteří by měli právo zápisu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, when people clone your project’s repository, they can either check out master to build the latest stable version and keep up to date on that easily, or they can check out develop, which is the more cutting-edge stuff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud někdo při tomto postupu klonuje repozitář vašeho projektu, může provést buď checkout hlavní větve, aby získal nejnovější stabilní verzi a udržoval ji aktuální, nebo checkout větve develop, která může být ještě o něco napřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can export a snapshot or build and name it something understandable to people.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Díky tomu lze snímek nebo sestavení (build) vyexportovat a přiřadit mu pro člověka srozumitelný název.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can make sure your commits are logically separate changesets and can be easily reviewed by the developers working with you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem zajistíte, že budou vaše revize logicky oddělenými sadami změn, jež mohou vaši spolupracovníci snadno zkontrolovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can see the last commit easily:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem snadno zobrazíte poslední revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can set up HTTP-based read access to any of your projects for a fair number of users in a few minutes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem můžete během pár minut nastavit oprávnění pro čtení založené na protokolu HTTP pro větší počet uživatelů k jakémukoli svému projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This way, you can write an import script that reads the necessary information out of the system you’re importing from and prints straightforward instructions to stdout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem lze vytvořit importovací skript, který bude načítat potřebné informace ze systému, z nějž import provádíte, a vypíše jasné instrukce do výstupu stdout.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This will give you an idea of what is involved.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Získáte tak představu, co všechno vás čeká.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This will transfer all of your tags to the remote server that are not already there.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz přenese na vzdálený server všechny vaše značky, které tam ještě nejsou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This workflow is attractive to a lot of people because it’s a paradigm that many are familiar and comfortable with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento pracovní postup může být pro mnoho lidí zajímavý, protože je to schéma, které jsou zvyklí používat a jsou s ním spokojeni.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>This would normally cause the same branch name clutter as in a centralised VCS, plus setting up permissions for this becomes a chore for the admin.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To by za normálních okolností způsobilo stejný zmatek ve jménech větví jako v centralizovaných systémech správy verzí a navíc nastavování přístupových práv by administrátorovi přidalo práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Those are only some simple output-formatting options to `git log` — there are many more.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je jen několik základních parametrů k formátování výstupu pro příkaz `git log`, celkově jich je mnohem více.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Throughout this book, you’ve used simple mappings from remote branches to local references; but they can be more complex.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V celé této knize jsme používali jednoduché mapování ze vzdálených větví do lokálních referencí. Mapování však může být i složitější.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud v takové situaci dojde ke kolapsu serveru a pokud jej tyto systémy využívaly, můžeme obsah serveru obnovit zkopírováním repozitáře od libovolného uživatele.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus it’s a bit confusing that Git has a `mv` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Může se zdát zvláštní, že Git přesto používá příkaz `mv`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus these three commands are equivalent:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto tři příkazy jsou tedy ekvivalentní:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus, I’ve made this discussion the last chapter in the book so you could read it early or later in your learning process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proto jsem tyto úvahy shrnul do poslední kapitoly knihy, kterou si můžete přečíst v libovolné fázi seznamování se systémem Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Thus, when you clone the Git repository, you have four branches that you can check out to evaluate the project in different stages of development, depending on how cutting edge you want to be or how you want to contribute; and the maintainer has a structured workflow to help them vet new contributions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tedy klonujete repozitář Git, můžete stáhnout až čtyři větve, a hodnotit tak projekt na čtyřech různých úrovních vývoje. Záleží na vás, do jaké hloubky chcete proniknout nebo jak chcete přispívat. A správce projektu má k dispozici strukturovaný pracovní postup k evaluaci nových příspěvků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Tip: If your build scripts expect to be able to run `svn info` then providing a wrapper around git will often work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tip: Pokud vaše skripty pro sestavení projektu chtějí spouštět `svn info`, pak si často můžete vystačit s obálkou příkazu git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To add a local repository to an existing Git project, you can run something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K přidání lokálního repozitáře do existujícího projektu Git můžete použít příkaz například v tomto tvaru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To add a new remote Git repository as a shortname you can reference easily, run `git remote add [shortname] [url]`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li přidat nový vzdálený repozitář Git a zadat zkrácený název, přes který se můžete snadno odkazovat, spusťte příkaz `git remote add [zkrácený název] [url]`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To add a user called "alice", obtain her public key, name it `alice.pub`, and put it in the `keydir` directory of the clone of the `gitolite-admin` repo you just made on your workstation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chceme přidat uživatele „alice“, získáme její veřejný klíč, pojmenujeme jej `alice.pub` a umístíme jej do adresáře `keydir`. Je součástí klonu repozitáře `gitolite-admin`, který jsme právě vytvořili na pracovní stanici.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To allow read access to your repository over HTTP, do something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li u svého repozitáře nastavit oprávnění pro čtení pomocí protokolu HTTP, proveďte následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To apply a patch generated by `format-patch`, you use `git am`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K aplikaci patche vygenerovaného příkazem `format-patch` použijte příkaz `git am`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To avoid issues, you should delete the local branch (in this case, `opera`) after you merge it into trunk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li se vyhnout možným problémům, smažte lokální větev (v našem případě `opera`) hned poté, co jste ji začlenili do kmenové větve (trunk).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To avoid this issue, create a branch when you work in a submodule directory with `git checkout -b work` or something equivalent.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby ve vašem projektu k tomuto problému nedošlo, vytvořte během práce v adresáři submodulu příkazem `git checkout -b work` nebo podobným novou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To be able to collaborate on any Git project, you need to know how to manage your remote repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste mohli spolupracovat na projektech v systému Git, je třeba vědět, jak manipulovat se vzdálenými repozitáři (remote repositories).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To be clear, Git isn’t tied into any particular issue-tracking system; but because issue #53 is a focused topic that you want to work on, you’ll create a new branch in which to work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přesněji řečeno, Git není začleněn do žádného konkrétního systému sledování chyb, ale protože je chyba č. 53 významná a chcete na ní pracovat, vytvoříte si pro ni novou větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To be efficient, if files have not changed, Git doesn’t store the file again—just a link to the previous identical file it has already stored.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pokud v souborech nebyly provedeny žádné změny, Git v zájmu zefektivnění práce neukládá znovu celý soubor, ale pouze odkaz na předchozí identický soubor, který už byl uložen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To begin tracking the `README` file, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zahájit sledování souboru `README`, můžete zadat příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To begin, create a user called `git` on your server and login to this user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začněte tím, že na serveru vytvoříte uživatele nazvaného `git` a přihlásíte se na něj.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To begin, she starts a new feature branch, basing it off the server’s `master` branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začne tím, že založí novou větev, která bude založena na větvi `master` ze serveru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To begin, you should check your commit message just before each commit is recorded, so you know the server won’t reject your changes due to badly formatted commit messages.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro začátek byste měli zkontrolovat zprávy k revizi, než tyto revize nahrajete, abyste měli jistotu, že server vaše změny neodmítne jen kvůli zprávám v nesprávném formátu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To begin, you’ll change into the target directory and identify every subdirectory, each of which is a snapshot that you want to import as a commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na začátku přejdete do cílového adresáře a identifikujete všechny podadresáře, z nichž bude každý představovat jeden snímek, který chcete importovat jako revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To begin, you’ll set up external wrapper scripts to run your commands.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro začátek je třeba nastavit kvůli spouštění příkazů externí skripty wrapperu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To change that default to something else, you can use the `core.editor` setting:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li změnit výchozí hodnotu, použijte nastavení `core.editor`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To clone a Git repository over SSH, you can specify ssh:// URL like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li naklonovat repozitář Git pomocí protokolu SSH, zadejte `ssh://` URL, například:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To clone a repository like this or to add one as a remote to an existing project, use the path to the repository as the URL.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li takový repozitář naklonovat nebo přidat jako vzdálený repozitář do existujícího projektu, použijte jako URL cestu k repozitáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To contribute to that project, you create your own public clone of the project and push your changes to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li do tohoto projektu přispívat, vytvořte vlastní veřejný klon projektu a odešlete do něj změny, které jste provedli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a branch and switch to it at the same time, you can run the `git checkout` command with the `-b` switch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste vytvořili novou větev a rovnou na ni přepnuli, můžete spustit příkaz `git checkout` s přepínačem `-b`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a branch back at the second commit, you can do this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit větev zpětně na druhé revizi, můžete zadat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a commit object, you call `commit-tree` and specify a single tree SHA-1 and which commit objects, if any, directly preceded it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro vytvoření objektu revize zavolejte příkaz `commit-tree` a zadejte jeden SHA-1 stromu a eventuální objekty revize, které mu bezprostředně předcházely.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a lightweight tag, don’t supply the `-a`, `-s`, or `-m` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit prostou značku, nezadávejte ani jeden z parametrů `-a`, `-s` nebo `-m`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a new branch in Subversion, you run `git svn branch [branchname]`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit novou větev v systému Subversion, spusťte příkaz `git svn branch [název větve]`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create a new reference that will help you remember where your latest commit is, you can technically do something as simple as this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit novou referenci, díky níž si budete pamatovat, kde se nachází vaše poslední revize, lze to technicky provést velmi jednoduše:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To create an index with a single entry — the first version of your test.txt file — you can use the plumbing command `update-index`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vytvořit index s jediným záznamem – první verzí souboru text.txt – můžete k tomu použít nízkoúrovňový příkaz `update-index`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control (see Figure 1-1).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Aby se uživatelé tomuto riziku vyhnuli, vyvinuli programátoři už před dlouhou dobou lokální systémy VCS s jednoduchou databází, která uchovávala všechny změny souborů s nastavenou správou revizí (viz obrázek 1-1).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Řešení tohoto problému nabízejí tzv. centralizované systémy správy verzí (CVCS z angl. Centralized Version Control System).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let’s assume you have another internal Git server that is used only for development by one of your sprint teams.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom si mohli ukázat, jak se pracuje s několika vzdálenými servery a jak vypadají vzdálené větve takových vzdálených projektů, předpokládejme, že máte ještě další interní server Git, který při vývoji používá pouze jeden z vašich sprint teamů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate this functionality, you need a typical SVN repository that you have write access to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom si mohli tuto funkci ukázat, budete potřebovat typický repozitář SVN, k němuž máte oprávnění pro zápis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate, you can use the plumbing command `hash-object`, which takes some data, stores it in your `.git` directory, and gives you back the key the data is stored as.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom to předvedli, můžete použít nízkoúrovňový příkaz `hash-object`, který vezme určitá data, uloží je v adresáři `.git` a vrátí vám klíč, pod nímž jsou tato data uložena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate, you’ll add a large file into your test repository, remove it in the next commit, find it, and remove it permanently from the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyzkoušíme to na situaci, kdy do svého testovacího repozitáře vložíte velký soubor, v následující revizi ho odstraníte, vyhledáte ho a trvale ho z repozitáře odstraníte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To demonstrate, you’ll go into your project and start working on a couple of files and possibly stage one of the changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro názornost uvažujme situaci, že ve svém projektu začnete pracovat na několika souborech a jednu z provedených změn připravíte k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To determine which commits in the Git source code repository (git://git.kernel.org/pub/scm/git/git.git) have CommitDate on 2014-04-29 relative to your local timezone (as set on your computer), use</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete zjistit, které revize (commit) v repozitáři se zdrojovým kódem Git (git://git.kernel.org/pub/scm/git/git.git) mají datum zápisu (CommitDate) 2014-04-29 -- relativně k vašemu lokálnímu časovému pásmu (takovému, jaké je nastaveno na vašem počítači), použijte příkaz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To disable the ability to force-update remote branches to non-fast-forward references, set `receive.denyNonFastForwards`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vypnout možnost násilné aktualizace vzdálených větví na jiné reference než „rychle vpřed“, zadejte `receive.denyNonFastForwards`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do so, change the word pick to the word edit for each of the commits you want the script to stop after.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změňte proto slovo pick na edit pro každou z revizí, po níž má skript zastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do so, you can simply set the `receive.denyDeletes` and `receive.denyNonFastForwards` settings.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve verzi 1.6 systému Git a novějších lze nastavit možnosti `receive.denyDeletes` a `receive.denyNonFastForwards`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do so, you use `filter-branch`, which you used in Chapter 6:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Použijte k tomu příkaz `filter-branch`, s nímž jsme se seznámili v kapitole 6:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do so, you’ll likely have to edit your `/etc/passwd` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě pravděpodobně budete muset upravit soubor `/etc/passwd`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do that, you must run the `git stash apply` command with a `--index` option to tell the command to try to reapply the staged changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, aby se příkaz pokusil znovu aplikovat i změny připravené k zapsání, musíte zadat příkaz `git stash apply` s parametrem `--index`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this properly, you need a small script that takes a filename, figures out the last commit date for this project, and inserts the date into the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ke správnému postupu budete potřebovat malý skript, který vezme název souboru, zjistí datum poslední revize v tomto projektu a vloží datum do souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this, use the `--cached` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V takovém případě použijte parametr `--cached`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this, you can add the `commit-msg` hook.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomuto účelu můžete použít zásuvný modul `commit-msg`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To do this, you can figure out which key you want by running `gpg --list-keys`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí příkazu `gpg --list-keys` můžete určit, jaký klíč chcete:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To e-mail this to a mailing list, you can either paste the file into your e-mail program or send it via a command-line program.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li e-mail odeslat do poštovní konference, můžete soubor buď vložit do svého e-mailového programu, nebo ho odeslat pomocí příkazového řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To enable a hook script, put a file in the `hooks` subdirectory of your Git directory that is named appropriately and is executable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li aktivovat skript zásuvného modulu, vložte správně pojmenovaný a spustitelný soubor do podadresáře `hooks` adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To enforce this, you’ll write those rules to a file named `acl` that lives in your bare Git repository on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Základ tohoto systému bude představovat soubor `acl`, který bude uložen v adresáři repozitáře na serveru a do nějž zapíšete všechna příslušná pravidla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To exit the script and reject the push, exit non-zero.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li skript ukončit a odesílaná data odmítnout, návratová hodnota musí být nenulová.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To find out what file it is, you’ll use the `rev-list` command, which you used briefly in Chapter 7.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, o jaký soubor se jedná, můžete použít příkaz `rev-list`, který jsme používali už v kapitole 7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To fix this, you must run `git submodule update` again:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom to napravili, musíme ještě jednou spustit příkaz `git submodule update`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To follow along, you first need to create a new local Subversion repository:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li postupovat podle mě, budete si nejprve muset vytvořit nový lokální repozitář Subversion:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To fork a project, visit the project page (in this case, mojombo/chronic) and click the "fork" button in the header (see Figure 4-14).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li projekt rozštěpit, přejděte na stránku projektu (v tomto případě mojombo/chronic) a klikněte na tlačítko „fork“ v záhlaví (viz obrázek 4-14).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get a diff between what you have in your `rack` subdirectory and the code in your `rack_branch` branch — to see if you need to merge them — you can’t use the normal `diff` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li se podívat na výpis „diff“ s rozdíly mezi tím, co máte v podadresáři `rack`, a kódem ve větvi `rack_branch` (abyste věděli, jestli je nutné je slučovat), nelze použít běžný příkaz `diff`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get a list of the author names that SVN uses, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li získat seznam jmen autorů používaných v SVN, spusťte tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get a reference that isn’t a fast-forward, you either have to rebase past a commit you’ve already pushed up or try pushing a different local branch up to the same remote branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vyhledat reference nesměřující rychle vpřed, budete muset buď provést přeskládání po revizi, kterou jste již odeslali, nebo se do stejné vzdálené větve pokusit odeslat jinou lokální větev.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get around this problem and make `git fast-import` happy, you need to tell ruby to use LF instead of CRLF:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom tento problém obešli a přitom učinili příkaz `git fast-import` šťastným, musíte ruby říct, aby místo LF používal CRLF:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get it running without having to reboot, you can run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud nechcete počítač restartovat, spusťte tento příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get the appropriate SHA for a given reference, Git checks for that reference in the `refs` directory and then checks the `packed-refs` file as a fallback.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li třeba získat hodnotu SHA pro konkrétní referenci, Git se tuto referenci pokusí vyhledat nejprve v adresáři `refs` a poté, jako záložní možnost, v souboru `packed-refs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get the project, run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li si projekt naklonovat, zadejte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get the raw commit data, you can use another plumbing command called `git cat-file`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li získat syrová data revizí, můžete použít další nízkoúrovňový příkaz: `git cat-file`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To get them, you must reset your branch to where `master` is now:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li je získat, musíte vaši větev resetovat do místa, kde se nyní nachází větev `master`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To git@gitserver:project.git
	 !</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090903Z" creationid="Prikryl" creationdate="20151024T090903Z">
        <seg>To git@gitserver:project.git
	 !</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To give another user write access to your project, click the “Add another collaborator” link.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li k svému projektu poskytnout oprávnění pro zápis ještě dalším uživatelům, klikněte na odkaz „Add another collaborator“ (Přidat dalšího spolupracovníka).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To initialize a project if it isn’t already a Git project, you use</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K inicializaci projektu, pokud to ještě není projekt Git, použijte příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To install Git, you need to have the following libraries that Git depends on: curl, zlib, openssl, expat, and libiconv.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Před instalací samotného Gitu musí váš systém obsahovat následující knihovny, na nichž je Git závislý: curl, zlib, openssl, expat, a libiconv.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To merge this work into your current working branch, you can run `git merge origin/serverfix`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li začlenit tato data do své aktuální pracovní větve, spusťte příkaz `git merge origin/serverfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To modify a commit that is farther back in your history, you must move to more complex tools.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li změnit revizi, která leží hlouběji ve vaší historii, budete muset sáhnout po složitějších nástrojích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To move the tags to be proper Git tags, run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abyste značky upravili na korektní gitové značky, spusťte</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To obtain commits made at a specific instant in time (e.g. 29 April 2013 at 17:07:22 CET), we can use</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T111946Z" creationid="Prikryl" creationdate="20151023T111946Z">
        <seg>Pokud chceme získat zápisy z určitého časového okamžiku (například z 29. dubna 2013 v 17:07:22 středoevropského času), můžeme použít příkaz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To phrase that another way, when you try to merge one commit with a commit that can be reached by following the first commit’s history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together — this is called a "fast forward".</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jinými slovy: pokud se pokoušíte sloučit jednu revizi s revizí druhou, k níž lze dospět následováním historie první revize, Git proces zjednoduší a přesune ukazatel vpřed, protože neexistuje žádná rozdílná práce, kterou by bylo třeba sloučit. Tomuto postupu se říká „rychle vpřed“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To prevent SSH from refusing to work, type this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby SSH neodmítl pracovat, napište následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To pull in the changes and prepopulate the commit message, use the `--squash` and `--no-commit` options as well as the `-s subtree` strategy option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li natáhnout změny a předběžně vyplnit zprávu k revizi, použijte parametry `--squash`, `--no-commit` a také parametr strategie `-s subtree`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To pull the `master` branch on the remote down to `origin/mymaster` locally, you can run</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li stáhnout větev `master` ze vzdáleného serveru do lokálního adresáře `origin/mymaster`, můžete zadat příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To push a new stash onto your stack, run `git stash`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li do zásobníku odeslat nový odklad, spusťte příkaz `git stash`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To push to a Subversion server, you run the `git svn dcommit` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro odeslání revizí na server Subversion zadejte příkaz `git svn dcommit`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To quickly demonstrate, you’ll write a simple importer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako rychlou ukázku napíšeme jednoduchý importér.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To really understand the way Git does branching, we need to take a step back and examine how Git stores its data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Abychom skutečně pochopili, jak funguje v systému Git větvení, budeme se muset vrátit o krok zpět a podívat se, jak Git ukládá data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li odstranit soubor ze systému Git, musíte ho odstranit ze sledovaných souborů (přesněji řečeno odstranit z oblasti připravených změn) a zapsat revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To remove a file named passwords.txt from your entire history, you can use the `--tree-filter` option to `filter-branch`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro odstranění souboru s názvem passwords.txt z celé historie můžete použít parametr `--tree-filter`, který přidáte k příkazu `filter-branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To remove it, you can run `git stash drop` with the name of the stash to remove:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ji odstranit, spusťte příkaz `git stash drop` s názvem odkladu, který má být odstraněn:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To remove remote branches, you must remove the ref files from the server manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete-li chtít odstranit vzdálenou větev, budete muset ručně smazat referenční soubory ze serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To resolve this situation, you can run `git svn rebase`, which pulls down any changes on the server that you don’t have yet and rebases any work you have on top of what is on the server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li tuto situaci vyřešit, spusťte příkaz `git svn rebase`, jímž stáhnete veškeré změny na serveru, které ještě nemáte lokálně, a přeskládáte všechnu práci na vrchol toho, co se nachází na serveru:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To restore the original branch and stop patching run "git am --abort".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221313Z" creationid="Prikryl" creationdate="20151023T221313Z">
        <seg>To restore the original branch and stop patching run "git am --abort".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To run `filter-branch` on all your branches, you can pass `--all` to the command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li spustit příkaz `filter-branch` na všech větvích, zadejte k příkazu parametr `--all`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To run the importer, pipe this output through `git fast-import` while in the Git repository you want to import into.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro spuštění importéru přesměrujte tento výstup do příkazu `git fast-import`. Příkaz spouštějte v adresáři Gitu, do nějž chcete data importovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see a full diff of what would happen if you were to merge this topic branch with another branch, you may have to use a weird trick to get the correct results.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vidět plný výpis diff, jak by vypadaly rozdíly, kdybyste tuto tematickou větev začlenili do jiné větve, můžete použít speciální trik, který vám zobrazí požadované informace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see all the branches that contain work you haven’t yet merged in, you can run `git branch --no-merged`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit větve, které obsahují dosud nezačleněnou práci, spusťte příkaz `git branch --no-merged`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see an up-to-date list, check out the following page:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aktuální seznam těchto míst najdete na následující stránce:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see reflog information formatted like the `git log` output, you can run `git log -g`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit informace záznamu reflog ve formátu výstupu `git log`, zadejte příkaz `git log -g`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see the diff of what you’ve staged, you can use the `6` or `d` (for diff) command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit výpis diff připravených souborů, použijte příkaz `6` nebo `d` (jako „diff“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see the last commit on each branch, you can run `git branch -v`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit poslední revizi na každé větvi, spusťte příkaz `git branch -v`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see the same information in a much more useful way, we can run `git log -g`, which will give you a normal log output for your reflog.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zobrazit stejné informace v užitečnějším formátu, můžete spustit příkaz `git log -g`, jímž získáte normální výstup příkazu log pro reflog.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what changes each commit introduces, remember that you can pass the `-p` option to `git log` and it will append the diff introduced to each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, jaké změny byly v jednotlivých revizích provedeny, můžete k příkazu `git log` přidat parametr `-p`, který ke každé revizi připojí rozdíly ve formátu diff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what happens, you can manually ask Git to pack up the objects by calling the `git gc` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vidět, jak proces probíhá, můžete systému Git ručně zadat, aby objekty zabalil. Zadejte příkaz `git gc`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what packfiles are available on this server, you need to get the `objects/info/packs` file, which contains a listing of them (also generated by `update-server-info`):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, jaké balíčkové soubory jsou na serveru dostupné, pomůže vám soubor `objects/info/packs`, který obsahuje jejich seznam (rovněž generován příkazem `update-server-info`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see what you’ve changed but not yet staged, type `git diff` with no other arguments:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li vidět, co jste změnili, avšak ještě nepřipravili k zapsání, zadejte příkaz `git diff` bez dalších parametrů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see which branches are already merged into the branch you’re on, you can run `git branch --merged`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, které větve už byly začleněny do větve, na níž se nacházíte, spusťte příkaz `git branch --merged`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see which remote servers you have configured, you can run the `git remote` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li zjistit, jaké vzdálené servery máte nakonfigurovány, můžete použít příkaz `git remote`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To see which stashes you’ve stored, you can use `git stash list`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li se podívat, které soubory jste odložili, spusťte příkaz `git stash list`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To set up a local branch with a different name than the remote branch, you can easily use the first version with a different local branch name:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li nastavit lokální větev s jiným názvem, než má vzdálená větev, můžete jednoduše použít první variantu s odlišným názvem lokální větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To set up your client, you must export the P4PORT environment variable to point to the Perforce depot:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K nastavení svého klienta budete muset exportovat proměnnou prostředí P4PORT, která bude ukazovat na depot Perforce:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To stage it, you run the `git add` command (it’s a multipurpose command — you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ho připravit k zapsání, spusťte příkaz `git add` (jedná se o víceúčelový příkaz – používá se k zahájení sledování nových souborů i k dalším operacím, jako je například označení vyřešených případů kolize souborů při slučování).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To stage the TODO and index.html files, you can type the numbers:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže chcete připravit k zapsání soubory TODO a index.html, zadejte příslušná čísla:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To start `instaweb` with a non-lighttpd handler, you can run it with the `--httpd` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li spustit `instaweb` s jiným správcem než `lighttpd`, použijte parametr `--httpd`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To stay out of trouble, try to follow these guidelines:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li se vyhnout problémům, dodržujte tato pravidla:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To switch to an existing branch, you run the `git checkout` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li přepnout na existující větev, spusťte příkaz `git checkout`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To synchronize your work, you run a `git fetch origin` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K synchronizaci své práce použijte příkaz `git fetch origin`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To tag that commit, you specify the commit checksum (or part of it) at the end of the command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro označení revize značkou zadejte na konec příkazu kontrolní součet revize (nebo jeho část):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To tell Git to treat all `pbxproj` files as binary data, add the following line to your `.gitattributes` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li systému Git zadat, aby nakládal se všemi soubory `pbxproj` jako s binárními daty, vložte do souboru `.gitattributes` následující řádek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To tell Git to use it as the default message that appears in your editor when you run `git commit`, set the `commit.template` configuration value:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li systému Git zadat, aby soubor používal jako výchozí zprávu, která se zobrazí v textovém editoru po spuštění příkazu `git commit`, nastavte konfigurační hodnotu `commit.template`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To upload data to a remote process, Git uses the `send-pack` and `receive-pack` processes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K uploadu dat do vzdáleného procesu používá Git procesy `send-pack` a `receive-pack`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To use this, specify `git-shell` instead of bash or csh for your user’s login shell.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li nástroj použít, zadejte pro přihlašovací shell vašeho uživatele `git-shell` místo bash nebo csh.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To verify a signed tag, you use `git tag -v [tag-name]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li ověřit podepsanou značku, použijte příkaz `git tag -v [název značky]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>To visualize this, let’s assume that you have a directory containing three files, and you stage them all and commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro ilustraci předpokládejme, že máte adresář se třemi soubory, které připravíte k zapsání a následně zapíšete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Tom Preston-Werner (4):
	      fix dates in history
	      dynamic version method
	      Version bump to 1.0.2
	      Regenerated gemspec for version 1.0.2</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221520Z" creationid="Prikryl" creationdate="20151023T221520Z">
        <seg>Tom Preston-Werner (4):
	      fix dates in history
	      dynamic version method
	      Version bump to 1.0.2
	      Regenerated gemspec for version 1.0.2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Topic branches, however, are useful in projects of any size.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naproti tomu tematické větve se vám budou hodit v projektech jakékoli velikosti.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 15 (delta 5), reused 0 (delta 0)
	To git@github.com:schacon/simplegit.git
	 * [new branch]      serverfix -&gt; serverfix</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104626Z" creationid="Prikryl" creationdate="20151023T104626Z">
        <seg>Total 15 (delta 5), reused 0 (delta 0)
	To git@github.com:schacon/simplegit.git
	 * [new branch]      serverfix -&gt; serverfix</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 17 (delta 1), reused 10 (delta 0)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091729Z" creationid="Prikryl" creationdate="20151024T091729Z">
        <seg>Total 17 (delta 1), reused 10 (delta 0)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 19 (delta 3), reused 16 (delta 1)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091832Z" creationid="Prikryl" creationdate="20151024T091832Z">
        <seg>Total 19 (delta 3), reused 16 (delta 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 21 (delta 3), reused 15 (delta 1)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091824Z" creationid="Prikryl" creationdate="20151024T091824Z">
        <seg>Total 21 (delta 3), reused 15 (delta 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 3 (delta 0), reused 0 (delta 0)
	To git@gitserver:gitosis-admin.git
	   fb27aec..8962da8  master -&gt; master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105411Z" creationid="Prikryl" creationdate="20151023T105411Z">
        <seg>Total 3 (delta 0), reused 0 (delta 0)
	To git@gitserver:gitosis-admin.git
	   fb27aec..8962da8  master -&gt; master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 3 (delta 0), reused 0 (delta 0)
	To git@gitserver:iphone_project.git
	 * [new branch]      master -&gt; master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105416Z" creationid="Prikryl" creationdate="20151023T105416Z">
        <seg>Total 3 (delta 0), reused 0 (delta 0)
	To git@gitserver:iphone_project.git
	 * [new branch]      master -&gt; master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 3 (delta 1), reused 0 (delta 0)
	Unpacking objects: 100% (3/3), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090857Z" creationid="Prikryl" creationdate="20151024T090857Z">
        <seg>Total 3 (delta 1), reused 0 (delta 0)
	Unpacking objects: 100% (3/3), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 44 (delta 18), reused 8 (delta 1)
	To git@github.com:schacon/simplegit.git
	 * [new tag]         v0.1 -&gt; v0.1
	 * [new tag]         v1.2 -&gt; v1.2
	 * [new tag]         v1.4 -&gt; v1.4
	 * [new tag]         v1.4-lw -&gt; v1.4-lw
	 * [new tag]         v1.5 -&gt; v1.5</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102250Z" creationid="Prikryl" creationdate="20151023T102250Z">
        <seg>Total 44 (delta 18), reused 8 (delta 1)
	To git@github.com:schacon/simplegit.git
	 * [new tag]         v0.1 -&gt; v0.1
	 * [new tag]         v1.2 -&gt; v1.2
	 * [new tag]         v1.4 -&gt; v1.4
	 * [new tag]         v1.4-lw -&gt; v1.4-lw
	 * [new tag]         v1.5 -&gt; v1.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 44 (delta 18), reused 8 (delta 1)
	To git@github.com:schacon/simplegit.git
	* [new tag]         v1.5 -&gt; v1.5</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102245Z" creationid="Prikryl" creationdate="20151023T102245Z">
        <seg>Total 44 (delta 18), reused 8 (delta 1)
	To git@github.com:schacon/simplegit.git
	* [new tag]         v1.5 -&gt; v1.5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Total 7 (delta 2), reused 4 (delta 1)
	To git@github.com:schacon/simplegit-progit.git
	   a11bef0..ca82a6d  master -&gt; master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091713Z" creationid="Prikryl" creationdate="20151024T091713Z">
        <seg>Total 7 (delta 2), reused 4 (delta 1)
	To git@github.com:schacon/simplegit-progit.git
	   a11bef0..ca82a6d  master -&gt; master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Tracking branches are local branches that have a direct relationship to a remote branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sledující větve jsou lokální větve s přímým vztahem ke vzdálené větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Type</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadejme tedy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Type the name of the tool you’d rather use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadejte název nástroje, který chcete použít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Typing `?` shows a list of what you can do:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li znak `?`, zobrazí se seznam možností, které máte k dispozici.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>URL: https://schacon-test.googlecode.com/svn/trunk
	Repository Root: https://schacon-test.googlecode.com/svn
	Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
	Revision: 87
	Node Kind: directory
	Schedule: normal
	Last Changed Author: schacon
	Last Changed Rev: 87
	Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091404Z" creationid="Prikryl" creationdate="20151024T091404Z">
        <seg>URL: https://schacon-test.googlecode.com/svn/trunk
	Repository Root: https://schacon-test.googlecode.com/svn
	Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
	Revision: 87
	Node Kind: directory
	Schedule: normal
	Last Changed Author: schacon
	Last Changed Rev: 87
	Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Understanding and mastering this feature gives you a powerful and unique tool and can literally change the way that you develop.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tuto funkci pochopíte a zvládnete její ovládání, dostanete do ruky výkonný a unikátní nástroj, který doslova změní váš pohled na vývoj.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Understanding how Git works at a lower level should make it easier to understand why it’s doing what it’s doing and also to write your own tools and helping scripts to make your specific workflow work for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poznání, jak Git pracuje na nižší úrovni, by vám mělo pomoci pochopit, proč dělá to, co dělá, a zároveň by vám mělo umožnit napsat vlastní nástroje a podpůrné skripty, pomocí nichž budete moci automatizovat zvolený pracovní postup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unfortunately, there’s no good way to avoid this situation — Subversion can’t store this information, so you’ll always be crippled by its limitations while you’re using it as your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bohužel však neexistuje žádný dobrý způsob, jak této situaci předejít, Subversion nedokáže tyto informace uchovávat. Dokud tedy budete používat server Subversion, vždy se budete muset s tímto jeho nedostatkem vyrovnat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unfortunately, very few binary formats can be represented as human readable text (imagine trying to convert audio data to a text).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naneštěstí existuje jen velmi málo binárních formátů, které lze převést na lidsky čitelný text.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na rozdíl od centralizovaných systémů správy verzí (CVCS) umožňuje distribuovaný charakter systému Git mnohem větší flexibilitu při spolupráci vývojářů na projektech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unlike many other VCS systems, Git doesn’t explicitly track file movement.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na rozdíl od ostatních systémů pro správu verzí nesleduje Git explicitně přesouvání souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Unlike many other VCSs, Git encourages a workflow that branches and merges often, even multiple times in a day.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na rozdíl od ostatních systémů pro správu verzí vybízí Git ke způsobu práce s bohatým větvením a častým slučováním, a to i několikrát za den.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit); Git won’t start including it in your commit snapshots until you explicitly tell it to do so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není-li soubor sledován, obecně to znamená, že Git ví o souboru, který nebyl v předchozím snímku (v předchozí revizi), a nezařadí ho ani do dalších snímků, dokud mu k tomu nedáte výslovný příkaz.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Update derived jamgram.c</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091439Z" creationid="Prikryl" creationdate="20151024T091439Z">
        <seg>Update derived jamgram.c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Update&gt;&gt;
	updated 2 paths</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221626Z" creationid="Prikryl" creationdate="20151023T221626Z">
        <seg>Update&gt;&gt;
	updated 2 paths</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Update&gt;&gt; 1,2
	           staged     unstaged path
	* 1:    unchanged        +0/-1 TODO
	* 2:    unchanged        +1/-1 index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Update&gt;&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221624Z" creationid="Prikryl" creationdate="20151023T221624Z">
        <seg>Update&gt;&gt; 1,2
	           staged     unstaged path
	* 1:    unchanged        +0/-1 TODO
	* 2:    unchanged        +1/-1 index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Update&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Users who are migrating from the older Gitolite should note that there is a significant change in behaviour with regard to this feature; please see the migration guide for details.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uživatelé, kteří přecházejí ze starší verze Gitolite by si měli dát pozor na to, že v souvislosti s uvedeným rysem došlo k výrazné změně chování. Věnujte prosím pozornost detailům, které jsou uvedeny v příručce pro přechod k nové verzi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Using a VCS also means that if you screw things up or lose files, you can generally recover easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Používáte-li verzovací systém, většinou to také znamená, že snadno obnovíte soubory, které jste ztratili nebo v nichž byly provedeny nežádoucí změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Using attributes, you can do things like specify separate merge strategies for individual files or directories in your project, tell Git how to diff non-text files, or have Git filter content before you check it into or out of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí atributů lze například určit odlišnou strategii slučování pro konkrétní soubory nebo adresáře projektu, zadat systému Git nástroj diff pro netextové soubory nebo jak filtrovat obsah před načtením dat do systému Git nebo jejich odesláním.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Using smart protocols is a more common method of transferring data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozšířenější metodou přenosu dat je použití chytrého protokolu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Using submodules isn’t without hiccups, however.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Používání submodulů se však vždy neobejde bez zádrhelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Usually, you can’t immediately switch every project you come in contact with to Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou není možné okamžitě přepnout každý projekt, s nímž přijdete do styku, na systém Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Various integration managers are in charge of certain parts of the repository; they’re called lieutenants.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Několik různých integračních manažerů odpovídá za konkrétní části repozitáře – říká se jím poručíci (lieutenants).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Správa verzí je systém, který zaznamenává změny souboru nebo sady souborů tak, abyste se mohli později k určité verzi vrátit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We also assume you’re running a standard Linux distribution like Ubuntu.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládáme také, že pracujete se standardní linuxovou distribucí, jako je např. Ubuntu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We assume that if you have a server with which to do this, you already have an SSH server installed, and that’s how you’re accessing the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Předpokládáme, že pokud máte server, na němž to lze provést, máte už nainstalován server SSH a jeho prostřednictvím k serveru přistupujete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We can demonstrate by aliasing `git visual` to run `gitk`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako příklad můžeme uvést situaci, kdy nahradíte příkaz `git visual` aliasem `gitk`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We covered how to generate a new key earlier, in the "Simple Setups" section.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vygenerovat nový klíč, jsme popsali výše, v části 4.3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We will begin by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it set up to start working with.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Nejdříve si vysvětlíme něco z historie nástrojů pro správu verzí, poté se budeme věnovat tomu, jak spustit systém Git ve vašem počítači, a nakonec se podíváme na to, co musíme nastavit, abychom s ním mohli začít pracovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We will describe the simplest install method in this article; for the other methods please see the documentation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď si popíšeme nejjednodušší způsob instalace. V dokumentaci naleznete další metody.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We'll make use of the both described approaches to get usable diffs for some widely used binary formats.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Oba popsané přístupy k získání použitelných informací o rozdílech si ukážeme na některých běžně používaných binárních formátech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Well, doing so creates a new pointer for you to move around.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ano, nová větev znamená vytvoření nového ukazatele, s nímž můžete pohybovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Well, let’s do another commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dobře, proveďme další revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll also show you how to set up Git to ignore certain files and file patterns, how to undo mistakes quickly and easily, how to browse the history of your project and view changes between commits, and how to push and pull from remote repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ukážeme si také, jak nastavit Git, aby ignoroval určité soubory a masky souborů, jak rychle a jednoduše vrátit nežádoucí změny, jak procházet historii projektu a zobrazit změny mezi jednotlivými revizemi a jak posílat soubory do vzdálených repozitářů a naopak z nich soubory zase stahovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll cover `git diff` in more detail later; but you’ll probably use it most often to answer these two questions: What have you changed but not yet staged?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podrobněji se budeme příkazu `git diff` věnovat později. Vy ho však nejspíš budete nejčastěji využívat k zodpovězení těchto dvou otázek: Co jste změnili, ale ještě nepřipravili k zapsání?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll cover this distinction a bit more in _Chapter 5_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomuto rozlišení se blíže dostaneme v _kapitole 5_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll discuss how to export a bare repository copy for this purpose in the next section, “Getting Git on a Server.”</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>O exportu kopie holého repozitáře pro tento účel se více dočtete v následující části „Jak umístit Git na server“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in Chapter 3.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Některé přednosti, které tato metoda správy dat nabízí, si podrobně ukážeme na systému větvení v kapitole 3.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll go over what these commands do in just a minute.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K tomu, co přesně tyto příkazy provedou, se dostaneme za okamžik.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll need to write a script to extract the content and return it as plain text.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Potřebujeme napsat skript, který by extrahoval obsah a vrátil jej jako prostý text.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll quickly go over how that is done.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A právě u účtů se teď na chvíli zastavíme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll refer to this repository as a "Git server"; but you’ll notice that it generally takes a tiny amount of resources to host a Git repository, so you’ll rarely need to use an entire server for it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tomuto repozitáři budeme říkat „gitový server“. Jak ale zjistíte, nebývá hostování gitového repozitáře nijak zvlášť náročné na zdroje, a tak nejspíš nebudete potřebovat celý server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll round off this discussion with a sampling of other features, all of which, and many more, are described in great detail in the documentation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vysvětlení Gitolite završíme přehledem několika vlastností, které jsou detailně popsány v dokumentaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll use the normal path here because doing so is almost always faster.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>My budeme používat normální cestu, neboť tato metoda je téměř vždy rychlejší.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ll walk though installing GitWeb manually very quickly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ruční instalaci skriptu probereme velmi rychle.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>We’ve covered basic branching and merging in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této kapitole jsme se věnovali základům větvení a slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What does that mean?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A co to znamená?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What does this `post-update` hook do?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jaká je funkce zásuvného modulu `post-update`?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What gets interesting is that you can fairly easily merge changes from one of the branches to the other.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je zajímavé, že tak lze opravdu jednoduše začlenit změny z jedné větve do druhé.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What happens if you create a new branch?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Co se stane, když vytvoříte novou větev?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What if you realize that you don’t want to keep your changes to the `benchmarks.rb` file?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A co když zjistíte, že nechcete zachovat změny, které jste provedli v souboru `benchmarks.rb`?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What if you want anonymous read access to your project?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A co když chcete u svého projektu nastavit anonymní oprávnění pro čtení?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What is also interesting is that the second version of the file is the one that is stored intact, whereas the original version is stored as a delta — this is because you’re most likely to need faster access to the most recent version of the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za povšimnutí dále stojí, že byla v plné velikosti ponechána druhá verze souboru, původní verze byla uložena ve formě rozdílů. Je to z toho důvodu, že rychlejší přístup budete pravděpodobně potřebovat spíš k aktuálnější verzi souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What is cool is that although the objects on disk before you ran the `gc` were collectively about 8K in size, the new packfile is only 4K.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavní předností balíčkového souboru je jeho velikost. Přestože objekty na disku zabíraly před spuštěním příkazu `gc` celkem asi 8 kB, nový soubor má pouze 4 kB.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What is the "word" filter?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Co je to filtr „word“?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What is the significance of that?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A jaký to má smysl?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What is version control, and why should you care?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Co je to správa verzí a proč by vás měla zajímat?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What now&gt; 1
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:        +1/-1      nothing index.html
	  3:        +1/-1        +4/-0 lib/simplegit.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222613Z" creationid="Prikryl" creationdate="20151023T222613Z">
        <seg>What now&gt; 1
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:        +1/-1      nothing index.html
	  3:        +1/-1        +4/-0 lib/simplegit.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What now&gt; 2
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:    unchanged        +1/-1 index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Update&gt;&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221623Z" creationid="Prikryl" creationdate="20151023T221623Z">
        <seg>What now&gt; 2
	           staged     unstaged path
	  1:    unchanged        +0/-1 TODO
	  2:    unchanged        +1/-1 index.html
	  3:    unchanged        +5/-1 lib/simplegit.rb
	Update&gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What the heck?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Co to má být?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What then?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Co teď?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What used to be referenced at `pb/master` is now at `paul/master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z původní reference `pb/master` se tak nyní stává `paul/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>What you really want to see are the changes added to the topic branch — the work you’ll introduce if you merge this branch with master.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To, co chcete vidět ve skutečnosti, jsou změny přidané do tematické větve, práci, kterou provedete začleněním této větve do větve hlavní.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When Git merges, it looks at what it has to merge together and then chooses an appropriate merging strategy to use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git se vždy při slučování nejprve podívá, co a kam začleňuje, a podle toho zvolí vhodnou strategii začlenění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When Git packs objects, it looks for files that are named and sized similarly, and stores just the deltas from one version of the file to the next.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při balení objektů vyhledá Git soubory, které mají podobný název a podobnou velikost, a uloží pouze rozdíly mezi jednotlivými verzemi souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When a topic branch has finally been merged into `master`, it’s removed from the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Byla-li tematická větev konečně začleněna do větve `master`, může být odstraněna z repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When all the patches for your topic are applied and committed into your branch, you can choose whether and how to integrate them into a longer-running branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až budete mít všechny záplaty aplikovány a zapsány do tematické větve, můžete se rozhodnout, zda a jak je chcete integrovat do některé z trvalejších větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When all the work in your topic branch is ready to be integrated into a more mainline branch, the question is how to do it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když už je práce v tematické větvi připravena a může být integrována do některé z významnějších větví, vyvstává otázka, jak to provést.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When it’s determined that they’re totally stable, the topics are re-merged into `master` and are then rebuilt from the topics that were in `next` but didn’t yet graduate to `master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se ukáže, že jsou tyto tematické větve naprosto stabilní, budou začleněny do větve `master` a poté budou znovu sestaveny z tematických větví, které byly ve větvi `next`, ale ještě se nedostaly do větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When new work is introduced by contributors, it’s collected into topic branches in the maintainer’s repository in a manner similar to what I’ve described (see Figure 5-24).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud přispěvatelé vytvoří novou práci, je shromažďována v tematických větvích v repozitáři správce podobným způsobem, jaký už jsem popisoval (viz obrázek 5-24).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When other developers try to run `git submodule update`, the submodule system can’t find the commit that is referenced, because it exists only on the first developer’s system.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když se pak ostatní vývojáři pokusí spustit příkaz `git submodule update`, systém submodulu nemůže najít revizi, k níž se vztahuje jedna z referencí, protože existuje pouze v prvním systému vývojáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When other users visit this project page, they won’t see that URL—only the public one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Navštíví-li tuto stránku projektu ostatní uživatelé, tuto adresu URL neuvidí, zobrazí se jim pouze veřejná adresa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When people visit your project, they see this page.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Navštíví-li váš projekt ostatní uživatelé, tuto stránku uvidí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When someone else clones that work, all they see is the merge commit with all the work squashed into it; they don’t see the commit data about where it came from or when it was committed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud tuto práci naklonuje jiný uživatel, uvidí jen jednu revizi vzniklou sloučením, obsahující všechnu práci skomprimovanou do ní. Neuvidí data revizí s informacemi, odkud revize pochází nebo kdy byla zapsána.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When that is committed and pushed up, your running daemon should start serving requests for the project to anyone who has access to port 9418 on your server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zapsání a odeslání této revize by měl váš spuštěný démon začít obsluhovat požadavky k projektu pro všechny, kdo mají přístup k portu 9418 na vašem serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When that is done, click the "Create Repository" button.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté klikněte na tlačítko „Create Repository“ (Vytvořit repozitář).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When that is set up, you can use `git imap-send` to place the patch series in the Drafts folder of the specified IMAP server:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až toto nastavení dokončíte, můžete použít příkaz `git imap-send`, jímž umístíte sérii záplat (patch) do složky Koncepty (Drafts) zadaného serveru IMAP:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When that value is set, Git colors its output if the output goes to a terminal.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je-li tato hodnota nastavena, Git barevně zvýrazní výstup přicházející na terminál.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When using `git log` without specifying time, the time defaults to the time at which the command is run on your computer (keeping the identical offset from UTC).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud použijete příkaz `git log` bez určení času, uvažuje se čas odpovídající okamžiku spuštění na vašem počítači (používá stejný posun vůči UTC).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you `dcommit`, you see output like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstup příkazu `dcommit` bude nyní vypadat následovně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you clone a repository, it generally automatically creates a `master` branch that tracks `origin/master`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud klonujete repozitář, většinou se vytvoří větev `master`, která bude sledovat větev `origin/master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you commit in Git, Git stores a commit object that contains a pointer to the snapshot of the content you staged, the author and message metadata, and zero or more pointers to the commit or commits that were the direct parents of this commit: zero parents for the first commit, one parent for a normal commit, and multiple parents for a commit that results from a merge of two or more branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zapíšete-li v systému Git revizi, Git uloží objekt revize, obsahující ukazatel na snímek obsahu, který jste určili k zapsání, metadata o autorovi a zprávě a nula nebo více ukazatelů na revizi nebo revize, které byly přímými rodiči této revize: žádné rodiče nemá první revize, jednoho rodiče má běžná revize a několik rodičů mají revize, které vznikly sloučením ze dvou či více větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you commit, it looks like you have all the Rack files under that subdirectory — as though you copied them in from a tarball.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až zapíšete revizi, bude to vypadat, jako byste měli všechny soubory Rack v tomto podadresáři, jako byste je zkopírovali z tarballu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you commit, you see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže zapíšete revizi, zobrazí se přibližně toto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you design these filters, they should be able to fail gracefully and have the project still work properly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při navrhování těchto filtrů byste tedy měli myslet i na to, aby projekt pracoval správně, i když filtr selže.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you do actions in Git, nearly all of them only add data to the Git database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Jednotlivé operace ve většině případů jednoduše přidávají data do Git databáze.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you do the submodule update a second time, it will still revert your work, but at least you have a pointer to get back to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až budete podruhé provádět příkaz submodule update, i tentokrát sice vrátí vaši práci, ale přinejmenším budete mít ukazatel, k němuž se budete moci vrátit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you download data, the `fetch-pack` and `upload-pack` processes are involved.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do stahování dat se zapojují procesy `fetch-pack` a `upload-pack`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you find the correct user, click the Add button to add that user as a collaborator on your project (see Figure 4-11).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté, co najdete správného uživatele, klikněte na tlačítko „Add“. Tím uživatele přidáte jako spolupracovníka na svém projektu (viz obrázek 4-11).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you first clone a repository, all of your files will be tracked and unmodified because you just checked them out and haven’t edited anything.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po úvodním klonování repozitáře budou všechny vaše soubory sledované a nezměněné, protože jste právě provedli jejich checkout a dosud jste neudělali žádné změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have a Git repository locally, add GitHub as a remote and push up your master branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud už máte lokální repozitář Git, přidejte GitHub jako vzdálený server a odešlete na něj svou hlavní větev:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have all the necessary dependencies, you can go ahead and grab the latest snapshot from the Git web site:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po doinstalování všech potřebných závislostí můžete pokračovat stažením nejnovější verze z webových stránek systému Git:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have hundreds of users, it’s much more of a pain to manage that process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Musíte-li spravovat stovky uživatelů, je tento proces příliš náročný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have resolved this problem run "git am --resolved".</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221256Z" creationid="Prikryl" creationdate="20151023T221256Z">
        <seg>When you have resolved this problem run "git am --resolved".</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have work in a topic branch and have determined that you want to integrate it, you move to that branch and run the rebase command to rebuild the changes on top of your current master (or `develop`, and so on) branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li určitou práci v tematické větvi a rozhodli jste se, že ji integrujete, přejdete na tuto větev a spustíte příkaz rebase, jímž znovu sestavíte příslušné změny na vrcholu svojí aktuální hlavní větve (příp. větve `develop` apod.).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have work in a topic branch that you’ve done or that someone has contributed and you’ve verified, you merge it into your master branch, delete the topic branch, and then continue the process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li v tematické větvi práci, kterou jste vytvořili nebo kterou vám někdo doručil a vy jste ji schválili, začleníte ji do své hlavní větve, smažete tematickou větev a proces může pokračovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you have your project at a point that you want to share, you have to push it upstream.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se váš projekt nachází ve stavu, kdy ho chcete sdílet s ostatními, můžete ho odeslat (push) na referenční server (upstream).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you land on a project page that looks interesting and you want to hack on it a bit, you can click the "fork" button in the project header to have GitHub copy that project to your user so you can push to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud se dostanete na zajímavou stránku projektu a chtěli byste se do projektu zapojit, můžete kliknout na tlačítko „fork“ (rozštěpit -- doslova vidlička) v záhlaví projektu a GitHub vytvoří kopii projektu pro vašeho uživatele. Do ní pak můžete odesílat revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you make changes and commit in that subdirectory, the superproject notices that the HEAD there has changed and records the exact commit you’re currently working off of; that way, when others clone this project, they can re-create the environment exactly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedete-li v tomto podadresáři změny a zapíšete revizi, superprojekt (tedy celkový, nadřízený projekt) zjistí, že se ukazatel HEAD (podřízeného) projektu změnil, a zaznamená přesnou revizi, na níž právě pracujete. Pokud pak tento projekt naklonují jiní uživatelé, budou schopni přesně obnovit původní prostředí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you notice issues, you should be able to easily figure out what commit introduced them, when, and by whom.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyskytnou-li se jakékoli problémy, měli byste být schopni snadno odhalit závadnou revizi, kdo je jejím autorem a kdy byla zapsána.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you rebase stuff, you’re abandoning existing commits and creating new ones that are similar but different.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při přeskládání dat zahodíte existující revize a vytvoříte nové, které jsou jim podobné, ale přesto jiné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you receive such a project, you get the directories that contain submodules, but none of the files yet:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud takový projekt obdržíte, získáte adresáře, které tyto submoduly obsahují, ale zatím žádný soubor:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you restart Apache, you should be able to clone your repositories under that directory by specifying the URL for your project:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po restartování serveru Apache byste měli být schopni naklonovat své repozitáře v tomto adresáři. Zadejte adresu URL svého projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you restart your machine, your Git daemon will start automatically and respawn if it goes down.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při restartování počítače se démon Git spustí automaticky. V případě pádu démona bude jeho činnost automaticky obnovena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git archive`, the contents of that file when people open the archive file will look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git archive`, bude po otevření soubor archivu vypadat obsah tohoto souboru takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git commit`, it creates the commit object, specifying the parent of that commit object to be whatever SHA-1 value the reference in HEAD points to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git commit`, systém vytvoří objekt revize, jehož rodičem bude hodnota SHA-1, na niž ukazuje reference v souboru HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git init` in a new or existing directory, Git creates the `.git` directory, which is where almost everything that Git stores and manipulates is located.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li v novém nebo existujícím adresáři příkaz `git init`, Git vytvoří adresář `.git`, tj. místo, kde je umístěno téměř vše, co Git ukládá a s čím manipuluje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git log` in this project, you should get output that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po zadání příkazu `git log` v tomto projektu byste měli dostat výstup, který vypadá zhruba takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run `git submodule update`, it checks out the specific version of the project, but not within a branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spustíte-li příkaz `git submodule update`, provedete tím checkout konkrétní verze projektu, avšak nikoli v rámci větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you run commands like `git branch (branchname)`, Git basically runs that `update-ref` command to add the SHA-1 of the last commit of the branch you’re on into whatever new reference you want to create.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spouštíte-li příkaz typu `git branch (název větve)`, Git ve skutečnosti spustí příkaz `update-ref` a vloží hodnotu SHA-1 poslední revize větve, na níž se nacházíte, do nové reference, kterou chcete vytvořit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and close the editor, the editor writes a new commit containing that message and makes it your new last commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení změn a zavření editoru zapíše editor novou revizi, která bude obsahovat upravenou zprávu a která bude vaší novou poslední revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git applies all three changes and then puts you back into the editor to merge the three commit messages:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení změn a zavření editoru aplikuje Git všechny tři změny a znovu otevře textový editor, abyste sloučili všechny zprávy k revizím:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git rewinds to the parent of the first commit in your list, applies the first commit (`f7f3f6d`), applies the second (`310154e`), and drops you to the console.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když uložíte změny a zavřete editor, Git se vrátí na rodiče první revize ve vašem seznamu, aplikuje první revizi (`f7f3f6d`), aplikuje druhou revizi (`310154e`) a ocitnete se znovu na konzoli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git rewinds you back to the last commit in that list and drops you on the command line with the following message:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení změn a zavření editoru vás Git vrátí zpět na poslední revizi v seznamu a zobrazí vám příkazový řádek s touto zprávou:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save and exit the editor, Git rewinds your branch to the parent of these commits, applies `310154e` and then `f7f3f6d`, and then stops.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakmile uložíte změny a zavřete editor, Git vrátí vaši větev zpět na rodiče těchto revizí, aplikuje revizi `310154e`, po ní revizi `f7f3f6d` a zastaví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you save that, you have a single commit that introduces the changes of all three previous commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po uložení zprávy budete mít jedinou revizi, která bude obsahovat všechny změny předchozích tří revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you specify a subtree merge, Git is smart enough to figure out that one is a subtree of the other and merge appropriately — it’s pretty amazing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud určíte strategii začlenění podstromu, je Git natolik inteligentní, aby zjistil, že je jeden podstromem druhého, a provedl sloučení odpovídajícím způsobem – počíná si opravdu sofistikovaně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you want to share a branch with the world, you need to push it up to a remote that you have write access to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li svou větev sdílet s okolním světem, musíte ji odeslat na vzdálený server, k němuž máte oprávnění pro zápis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you want to share that work, you merge it into your own `master` branch, then fetch and merge `origin/master` if it has changed, and finally push to the `master` branch on the server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li tuto práci sdílet, začleníte ji do své větve `master`. Poté vyzvednete (fetch) a začleníte (merge) větev `origin/master`, jestliže se změnila. Nakonec odešlete všechna data do větve `master` na serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When your branch work is finished and you’re ready to contribute it back to the maintainers, go to the original project page and click the "Fork" button, creating your own writable fork of the project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až budete s prací ve větvi hotovi a budete ji chtít poslat zpět správcům, přejděte na původní stránku projektu a klikněte na tlačítko „Fork“, jímž vytvoříte vlastní odštěpenou větev projektu, do níž budete moci zapisovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When your work has been pushed up to your fork, you need to notify the maintainer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až svou práci odešlete do odštěpené větve, budete na ni muset upozornit správce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re applying patches, you can ask Git to warn you if it’s applying patches with the specified whitespace issues:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže aplikujete záplaty, můžete Git požádat, aby vás varoval, pokud je aplikována záplata s některým ze specifikovaných problémů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re branching and merging, everything is being done only in your Git repository — no server communication is happening.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veškeré větvení a slučování se odehrává pouze v repozitáři Git, neprobíhá žádná komunikace se serverem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re cloning a normal Git repository, you get all the branches on that remote server available locally as something like `origin/[branch]` - namespaced by the name of the remote.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jestliže klonujete normální repozitář Git, získáte ze vzdáleného serveru všechny větve, lokálně dostupné pod označením `origin/[větev]` – jmenný prostor je dán jménem vzdáleného serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re done and want to shut down the server, you can run the same command with the `--stop` option:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až skončíte a budete chtít server vypnout, spusťte stejný příkaz s parametrem `--stop`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re finished adding collaborators, you should see a list of them in the Repository Collaborators box (see Figure 4-12).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po přidání všech spolupracovníků byste měli vidět jejich seznam v poli „Repository Collaborators“ (viz obrázek 4-12).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re finished, you should run `git bisect reset` to reset your HEAD to where you were before you started, or you’ll end up in a weird state:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až vyhledávání dokončíte, měli byste použít příkaz `git bisect reset`, abyste vrátili ukazatel HEAD na pozici, z níž jste vyhledávání zahajovali. Jinak byste skončili v nějakém podivném stavu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re thinking of integrating new work, it’s generally a good idea to try it out in a topic branch — a temporary branch specifically made to try out that new work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud uvažujete o integraci nové práce do projektu, je většinou dobré zkusit si to v tematické větvi, tj. dočasné větvi, kterou vytvoříte konkrétně pro tento účel.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’re using Git more heavily, however, you may see much more information from `git remote show`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud však Git používáte na intenzivněji, může vám příkaz `git remote show` zobrazit mnohem více informací:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’ve become comfortable with a Git workflow, you’ll likely create topic branches, do work on them, and then merge them in.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jakmile pracovní postupy v systému Git zvládnete, začnete pravděpodobně vytvářet tematické větve, budete v nich pracovat a potom je budete začleňovat (merge).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>When you’ve decided to cut a release, you’ll probably want to drop a tag so you can re-create that release at any point going forward.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Až se rozhodnete vydat určitou verzi, pravděpodobně ji budete chtít označit značkou, abyste mohli toto vydání v kterémkoli okamžiku v budoucnosti obnovit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Whenever you make changes to the `gitosis-admin` project, you have to commit the changes and push them back up to the server in order for them to take effect:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé, když provedete změny v projektu `gitosis-admin`, musíte tyto změny zapsat a odeslat je zpět na server, aby nabyly účinnosti:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Whether you maintain a canonical repository or want to help by verifying or approving patches, you need to know how to accept work in a way that is clearest for other contributors and sustainable by you over the long run.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ať spravujete standardní repozitář, nebo pomáháte při ověřování či schvalování záplat, budete muset vědět, jak přijímat práci ostatních přispěvatelů, a to způsobem, který je pro ostatní co nejčistší a pro vás dlouhodobě udržitelný.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While she waits for feedback from John, Jessica decides to start working on `featureB` with Josie.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zatímco čeká na zpětnou vazbu od Johna, rozhodne se, že začne pracovat spolu s Josie na úkolu `featureB`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>While the default, quick, install works for most people, there are some ways to customise the install if you need to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Základní rychlá metoda instalace bude většině lidí vyhovovat. V případě potřeby existují další možnosti přizpůsobení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Why is it so special?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V čem je jeho větvení tak zvláštní?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With Git, you don’t have to deploy your fix along with the `iss53` changes you’ve made, and you don’t have to put a lot of effort into reverting those changes before you can work on applying your fix to what is in production.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jelikož pracujete v systému Git, nemusíte svou opravu vytvářet uprostřed změn, které jste provedli v části `iss53`, ani nemusíte dělat zbytečnou práci, abyste všechny tyto změny vrátili, než budete moci začít pracovat na opravě produkční verze stránek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With the `rebase` command, you can take all the changes that were committed on one branch and replay them on another one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkazem `rebase` vezmete všechny změny, které byly zapsány na jedné větvi, a necháte je znovu provést na jiné větvi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With the interactive rebase tool, you can then stop after each commit you want to modify and change the message, add files, or do whatever you wish.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S interaktivním nástrojem přeskládání pak můžete zastavit po každé revizi, kterou chcete upravit, a změnit u ní zprávu, přidat soubory nebo cokoli dalšího.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With these basic commands, you can use the interactive add mode to deal with your staging area a little more easily.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí těchto základních příkazů můžete použít režim interaktivního přidávání, a snáze tak ovládat svou oblast připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With these tools, it’s easy to get Git to work exactly the way you, your company, or your group needs it to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí těchto nástrojů lze systém Git snadno nastavit přesně tak, jak potřebujete vy, vaše společnost nebo vaše skupina.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With these tools, you can much more easily let Git know what commit or commits you want to inspect.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí těchto nástrojů můžete v systému Git daleko snáze specifikovat, kterou revizi nebo které revize chcete zobrazit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>With this method, you can quickly get a read/write Git server up and running for a handful of developers.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto způsobem lze rychle vytvořit a spustit server Git ke čtení i zápisu pro menší počet vývojářů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Without the `-3` option, it looks like a conflict.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Bez parametru `-3` se celá situace tváří jako konflikt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Word diff format is quite useless when applied to source code, but it comes in handy when applied to large text files, like books or your dissertation.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zjišťování rozdílů po slovech je u zdrojového kódu celkem k ničemu, ale pokud porovnáváme velké textové soubory -- jako například knihy nebo vaši disertační práci --, pak se tato možnost hodí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Working directory, staging area, and Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Pracovní adresář, oblast připravených změn a adresář Git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Working locally and having someone push to your remote server makes each history move forward differently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud pracujete lokálně a někdo jiný odešle svou práci na vzdálený server, obě historie se rozejdou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Works perfectly!</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Funguje to perfektně!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Wouldn’t it be nice if Git could store one of them in full but then the second object only as the delta between it and the first?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebylo by krásné, kdyby Git mohl uložit jeden z nich v plné velikosti, ale druhý už jen jako rozdíl mezi oběma těmito objekty?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Wrap it to about 72
	characters or so.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T215553Z" creationid="Prikryl" creationdate="20151023T215538Z">
        <seg>Snažte se nepřesáhnout
	zhruba 72 znaků.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Write out that tree (recording the state of the staging area or index to a tree object) and see what it looks like:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uložte tento strom (zaznamenáním stavu oblasti připravených změn neboli indexu do objektu stromu) a prohlédněte si výsledek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (15/15), 1.74 KiB, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104625Z" creationid="Prikryl" creationdate="20151023T104625Z">
        <seg>Writing objects: 100% (15/15), 1.74 KiB, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (17/17), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091728Z" creationid="Prikryl" creationdate="20151024T091728Z">
        <seg>Writing objects: 100% (17/17), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (19/19), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091831Z" creationid="Prikryl" creationdate="20151024T091831Z">
        <seg>Writing objects: 100% (19/19), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (21/21), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091823Z" creationid="Prikryl" creationdate="20151024T091823Z">
        <seg>Writing objects: 100% (21/21), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (3/3), 230 bytes | 0 bytes/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105415Z" creationid="Prikryl" creationdate="20151023T105415Z">
        <seg>Writing objects: 100% (3/3), 230 bytes | 0 bytes/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (3/3), 272 bytes | 0 bytes/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105410Z" creationid="Prikryl" creationdate="20151023T105410Z">
        <seg>Writing objects: 100% (3/3), 272 bytes | 0 bytes/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (3/3), 323 bytes, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090856Z" creationid="Prikryl" creationdate="20151024T090856Z">
        <seg>Writing objects: 100% (3/3), 323 bytes, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (44/44), 4.56 KiB, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102244Z" creationid="Prikryl" creationdate="20151023T102244Z">
        <seg>Writing objects: 100% (44/44), 4.56 KiB, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Writing objects: 100% (7/7), 716 bytes, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091712Z" creationid="Prikryl" creationdate="20151024T091712Z">
        <seg>Writing objects: 100% (7/7), 716 bytes, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You _stage_ these modified files and then commit all your staged changes, and the cycle repeats.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté všechny tyto změněné soubory _připravíte k zapsání_ (stage) a následně všechny připravené změny zapíšete (commit). A celý cyklus se opakuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You accomplish that by using refspecs to push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady vám při odesílání větví pomůže vzorec refspec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You add external projects as submodules with the `git submodule add` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Externí projekty přidáte do svého projektu jako submoduly příkazem `git submodule add`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You add the Rack project as a remote reference in your own project and then check it out into its own branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt Rack přidáte ve vlastním projektu jako vzdálenou referenci a provedete jeho checkout do vlastní větve:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You administer your Gitolite setup by making changes to this repository and pushing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Své nastavení Gitolite spravujete pomocí provádění změn v tomto repozitáři jejich odesíláním (push).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You also don’t have any information about who saved the snapshots, when they were saved, or why they were saved.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nemáte také žádné informace o tom, kdo snímky uložil, kdy byly uloženy a proč se tak stalo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You also have access to the user doing the pushing if the push is being run over SSH.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jsou revize odesílány prostřednictvím SSH, budete mít přístup také k uživateli, který data odesílá.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You also need to make sure these tools are executable:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále se potřebujete také ujistit, že lze tyto nástroje spustit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You and the other developers all have push access to the repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy a vaši ostatní vývojáři máte všichni oprávnění odesílat změny do repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You aren’t encouraged to directly edit the reference files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tím vás nenabádám, abyste přímo editovali soubory referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You begin by reading this data into a structure that you can use.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začnete načtením těchto dat do struktury, kterou můžete použít.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You branched a topic branch (`server`) to add some server-side functionality to your project, and made a commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořili jste novou tematickou větev (`server`), pomocí níž chcete do svého projektu přidat funkci na straně serveru, a zapsali jste revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can accomplish that with a few `git add` commands that specify the files you want to track, followed by a commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete tak učinit pomocí několika příkazů `git add`, jimiž určíte soubory, které chcete sledovat, a provedete revizi:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can accomplish the same task with `--tree-filter` if you want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud chcete, můžete provést stejný úkon i pomocí parametru `--tree-filter`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can add it after the fact.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Značku můžete přidat dodatečně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can add it as a new remote reference to the project you’re currently working on by running the `git remote add` command as we covered in Chapter 2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete ho přidat jako novou vzdálenou referenci k projektu, na němž právě pracujete – spusťte příkaz `git remote add` (viz kapitola 2).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can add the following line to your Git attributes file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru s atributy Git můžete přidat následující řádek:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also change them at any time by running through the commands again.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Opětovným použitím příkazů můžete nastavení kdykoliv změnit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also check what Git thinks a specific key’s value is by typing `git config {key}`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete také zkontrolovat, jakou hodnotu Git uchovává pro konkrétní klíč zadáním `git config {klíč}`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also combine these syntaxes — you can get the second parent of the previous reference (assuming it was a merge commit) by using `HEAD~3^2`, and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto syntaxe můžete také kombinovat. Druhého rodiče předchozí reference (jestliže se jednalo o revizi sloučením) lze získat výrazem `HEAD~3^2` atd.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also continue this concept, having an integrate branch where all the work is merged together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento koncept můžete dále rozšířit o integrační větev, v níž budete veškerou práci slučovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also create a zip archive in much the same way, but by passing the `--format=zip` option to `git archive`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejným způsobem můžete vytvořit také archiv zip. K příkazu `git archive` stačí přidat parametr `--format=zip`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also do `git push origin serverfix:serverfix`, which does the same thing — it says, “Take my serverfix and make it the remote’s serverfix.” You can use this format to push a local branch into a remote branch that is named differently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete rovněž zadat příkaz `git push origin serverfix:serverfix`, který provede totéž. Systému Git říká: „Vezmi mou větev `serverfix` a udělej z ní `serverfix` na vzdáleném serveru.“ Tento formát můžete použít k odeslání lokální větve do vzdálené větve, která se jmenuje jinak.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also do the opposite — make changes in the `rack` subdirectory of your master branch and then merge them into your `rack_branch` branch later to submit them to the maintainers or push them upstream.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete ale postupovat také opačně – provést změny v podadresáři `rack` vaší hlavní větve, poté je začlenit do větve `rack_branch` a poslat je správcům nebo je odeslat do repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also do this with content in files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Totéž můžete udělat také s obsahem v souborech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also edit these patch files to add more information for the e-mail list that you don’t want to show up in the commit message.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto soubory záplaty můžete také upravit a přidat k nim další informace určené pro seznam příjemců e-mailu, u nichž nechcete, aby byly obsaženy ve zprávě k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also filter the list to commits that match some search criteria.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Z výpisu rovněž můžete filtrovat pouze revize, které odpovídají určitým kritériím.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also get the same sort of information that `svn info` gives you by running `git svn info`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejné informace, jaké poskytuje příkaz `svn info`, získáte příkazem `git svn info`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also have modified and uncommitted files in your working directory when you apply a stash — Git gives you merge conflicts if anything no longer applies cleanly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Když aplikujete odklad, můžete mít v pracovním adresáři také změněné a nezapsané soubory. Nebude-li něco aplikováno čistě, Git vám oznámí konflikty při slučování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also have your rebase replay on something other than the rebase branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Opětovné provedení změn pomocí příkazu rebase můžete využít i jiným účelům než jen k přeskládání větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also initiate the process via the Git daemon, which listens on a server on port 9418 by default.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Proces můžete iniciovat také prostřednictvím démona Git, který na serveru standardně naslouchá portu 9418.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also leave off one side of the syntax to have Git assume HEAD.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednu stranu intervalu můžete zcela vynechat, Git na její místo automaticky dosadí HEAD.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also manually edit this file, but again a safer command exists to do so: `symbolic-ref`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor můžete editovat také ručně, ale opět existuje i bezpečnější příkaz: `symbolic-ref`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also manually repack at any time by running `git gc` by hand.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Totéž lze kdykoli provést i ručně spuštěním příkazu `git gc`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also not specify a user, and Git assumes the user you’re currently logged in as.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně tak nemusíte zadávat ani uživatele, Git automaticky použije uživatele, jehož účtem jste právě přihlášeni.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also pipe it through the `tail` command because you’re only interested in the last few largest files:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na výpis můžete rovněž použít příkaz `tail`, neboť vás beztak zajímá pouze několik posledních (největších) souborů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also run `git stash pop` to apply the stash and then immediately drop it from your stack.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete také spustit příkaz `git stash pop`, jímž odklad aplikujete a současně ho odstraníte ze zásobníku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also run something like `make` or `make tests` or whatever you have that runs automated tests for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podobně můžete spustit také příkaz `make` nebo `make tests` či cokoli jiného, čím spouštíte automatické testování.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also search for tags with a particular pattern.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Značky lze vyhledávat také pomocí konkrétní masky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also see from the header on each of your project’s pages that you have two Git URLs (see Figure 4-8).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V záhlaví na stránce všech vašich projektů si můžete všimnout, že máte dvě adresy URL (viz obrázek 4-8).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also send the patches through an SMTP server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Záplaty můžete odesílat i přes SMTP server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Své repozitáře můžete zpřístupnit ke čtení prostřednictvím protokolu HTTPS, což znamená, že se přenášený obsah šifruje. Nebo můžete zajít ještě dál a vyžadovat, aby klienti používali konkrétní podepsané SSL certifikáty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also set the value of HEAD:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodnotu pro soubor HEAD můžete také nastavit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also set these values by manually editing the file and inserting the correct syntax, but it’s generally easier to run the `git config` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto hodnoty můžete nastavit také ruční editací souboru a vložením příslušné syntaxe, většinou je však snazší spustit příkaz `git config`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also set up a custom tool; see Chapter 7 for more information about doing that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavit můžete ale i jiné uživatelské nástroje — více informací o této možnosti naleznete v kapitole 7.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also set up a graphical merge conflict-resolution tool instead of having to resolve conflicts manually.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stejně tak můžete nastavit vlastní grafický nástroj k řešení konfliktů při slučování, nechcete-li řešit konflikty ručně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also sign your tags with GPG, assuming you have a private key.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte-li soukromý klíč, lze značky rovněž podepsat v programu GPG.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify `-v`, which shows you the URL that Git has stored for the shortname to be expanded to:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete rovněž zadat parametr `-v`, jenž zobrazí adresu URL, kterou má Git uloženou pro zkrácený název, který si přejete rozepsat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify a number after the `^` — for example, `d921970^2` means "the second parent of d921970." This syntax is only useful for merge commits, which have more than one parent.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Za znakem `^` můžete zadat také číslo, např. `d921970^2` označuje „druhého rodiče revize d921970“. Tato syntaxe má význam pouze u revizí vzniklých sloučením, které mají více než jednoho rodiče.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify another group as one of the members (using `@` as prefix), to inherit all of its members automatically:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako jednoho ze členů skupiny můžete zadat také celou jinou skupinu (použijete pro ni předponu `@`). Všichni její členové se tím automaticky zdědí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify multiple refspecs for fetching in your configuration file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V konfiguračním souboru můžete také použít více vzorců refspec pro vyzvedávání dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also specify multiple refspecs.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Použít lze také kombinaci několika vzorců refspec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also tag commits after you’ve moved past them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revizi lze označit značkou i poté, co jste ji už opustili.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also tell `git svn` not to include the metadata that Subversion normally imports, by passing `--no-metadata` to the `clone` or `init` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroji `git svn` můžete také zadat, aby ignoroval metadata, která systém Subversion normálně importuje: zadejte parametr `--no-metadata` k příkazu `clone` nebo `init`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use Git attributes to tell Git to use different merge strategies for specific files in your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Atributy Git lze použít také k nastavení různých strategií slučování pro různé soubory v projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use `-2`, which limits the output to only the last two entries:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete také použít parametr `-2`, který omezí výpis pouze na dva poslední záznamy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use `git apply` to see if a patch applies cleanly before you try actually applying it — you can run `git apply --check` with the patch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git apply` můžete použít také ke kontrole, zda bude záplata aplikována čistě. V takovém případě použijte na patch příkaz `git apply --check`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use a built-in macro `binary` that means `-crlf -diff`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete také použít zabudované makro `binary` s významem `-crlf -diff`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use a series of summarizing options with `git log`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve spojení s příkazem `git log` můžete použít také celou řadu shrnujících parametrů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use interactive rebases to reorder or remove commits entirely.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Interaktivní přeskládání můžete použít rovněž ke změně pořadí revizí nebo k jejich odstranění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use the refspec to delete references from the remote server by running something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzorce refspec můžete využít také k mazání referencí ze vzdáleného serveru. Spustit lze například příkaz následujícího znění:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use this string as the target of a checkout or show command, although it relies on the abbreviated SHA-1 value at the end, so it may not be valid forever.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento řetězec můžete také použít jako cíl příkazu checkout nebo show, ačkoli ty pracují se zkrácenou hodnotou SHA-1, a tak nebudou platné navždy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also use this syntax to see where a branch was some specific amount of time ago.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto syntaxi můžete použít také k zobrazení pozice, na níž se větev nacházela před určitou dobou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can also verify that this is a tree object:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete si také ověřit, že jde skutečně o objekt stromu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can ask Git to show you a log of just those commits with `master..experiment` — that means "all commits reachable by experiment that aren’t reachable by master." For the sake of brevity and clarity in these examples, I’ll use the letters of the commit objects from the diagram in place of the actual log output in the order that they would display:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí výrazu `master..experiment` můžete systému Git zadat příkaz, aby vám zobrazil log právě s těmito revizemi, doslova „všemi revizemi dostupnými z větve experiment a nedostupnými z hlavní větve“. V zájmu stručnosti a názornosti použiji v těchto příkladech místo skutečného výstupu logu písmena objektů revizí z diagramu v pořadí, jak by se zobrazily:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can bisect the code to find out.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K odhalení problému můžete použít příkaz bisect (tedy „rozpůlit“).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can calculate the SHA-1 value of a string in Ruby by including the SHA1 digest library with the `require` command and then calling `Digest::SHA1.hexdigest()` with the string:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V Ruby můžete hodnotu SHA-1 daného řetězce spočítat tak, že příkazem `require` připojíte knihovnu pro počítání SHA1 a zavoláte `Digest::SHA1.hexdigest()` s daným řetězcem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can control permissions at the "ref" level.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete nastavovat přístupová práva na úrovni referencí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can control which projects GitWeb lets users browse by adding or removing a `gitweb` setting in the Gitosis configuration file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vložením nebo odstraněním nastavení `gitweb` z konfiguračního souboru Gitosis můžete určit, které projekty dovolí GitWeb uživatelům procházet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can create a new directory and then run `git init` in it for a starting point, and then run your script:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete vytvořit nový adresář a spustit v něm příkaz `git init`, jímž si vytvoříte nový výchozí bod. Poté spusťte svůj skript:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can create a new tag as I discussed in Chapter 2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Novou značku vytvoříte podle návodu v kapitole 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can create an account, add a new project, and push to it in a matter of minutes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvoření účtu, přidání nového projektu a odeslání prvních revizí je záležitostí několika minut.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can create as many of these groups as you want, each containing different users and projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takových skupin můžete vytvořit libovolně mnoho. Každá může obsahovat různé uživatele a projekty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can create your own tree.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete si vytvořit i vlastní strom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can daemonize this process a number of ways, depending on the operating system you’re running.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podle toho, jaký operační systém používáte, můžete přejít do režimu démon mnoha způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can decide what files go into which commits right before you commit with the staging area, you can decide that you didn’t mean to be working on something yet with the stash command, and you can rewrite commits that already happened so they look like they happened in a different way.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jaké soubory budou součástí jaké revize? To můžete rozhodnout až těsně před tím, než soubory zapíšete z oblasti připravených změn. Můžete se rozmyslet, že jste na něčem ještě nechtěli pracovat, a použít možnost odložení. A stejně tak můžete přepsat už jednou zapsané revize. Budou vypadat, jako by byly zapsány v jiné podobě.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can delete a remote branch using the rather obtuse syntax `git push [remotename] :[branch]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálenou větev nyní můžete smazat pomocí poněkud neohrabané syntaxe `git push [vzdálený server] :[větev]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can delete it and then manually close the ticket in your ticket-tracking system:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete ji smazat a poté ručně zavřít tiket v systému sledování tiketů:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can delete it with the `-d` option to `git branch`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev smažete přidáním parametru `-d` k příkazu `git branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can disable settings by either leaving them out of the setting string or prepending a `-` in front of the value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Funkci vypnete buď tím, že ji z řetězce nastavení zcela vynecháte, nebo tím, že před hodnotu vložíte znak `-`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can distribute these hooks within the project or in a separate project, but there is no way to set them up automatically.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvné moduly můžete distribuovat v rámci projektu nebo v samostatném projektu, nelze je však nastavit automaticky.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do a lot more with the `fast-import` tool — handle different modes, binary data, multiple branches and merging, tags, progress indicators, and more.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroj `fast-import` vám nabízí ještě spoustu dalších možností – nastavení různých režimů, práci s binárními daty, manipulaci s několika větvemi a jejich slučování, značky, ukazatele postupu atd.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do so with the `sed` command on Unix systems:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systémech Unix to lze provést příkazem `sed`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do that in Git with `git read-tree`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V systému Git k tomu slouží příkaz `git read-tree`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do that in the `rebase -i` script by changing the instruction on the commit you want to split to "edit":</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete to provést pomocí skriptu `rebase -i`. U revize, kterou si přejete rozdělit, změňte instrukci na edit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do things like check for code style (run lint or something equivalent), check for trailing whitespace (the default hook does exactly that), or check for appropriate documentation on new methods.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete kontrolovat záležitosti jako styl kódu (spustit lint apod.), koncové mezery (výchozí zásuvný modul dělá právě toto) nebo správnou dokumentaci k novým metodám.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do this by listing them with the `bisect start` command if you want, listing the known bad commit first and the known good commit second:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li, můžete to provést příkazem `bisect start` –- jako první uvedete známou revizi s chybou, jako druhá bude následovat poslední známá dobrá revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can do this with `-U1` as we did in the example above.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžeme toho dosáhnout zadáním parametru `-U1`, jako ve výše uvedeném příkladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can download P4Merge here:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>P4Merge můžete stáhnout na této adrese:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily check to see if you have a key already by going to that directory and listing the contents:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejsnazší způsob kontroly, zda už klíč vlastníte, je přejít do tohoto adresáře a zjistit jeho obsah:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily see that the file size and image dimensions have both changed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jasně vidíte, že se změnila jak velikost souboru, tak rozměry obrázku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can easily see what commits modified this file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí snadného příkazu lze zjistit, jaké revize tento soubor změnil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can edit the message the same as always, but it overwrites your previous commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zprávu můžete editovat stejným způsobem jako vždy. Zpráva přepíše předchozí revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can either run `git submodule update` to reclone, or you can move your `/tmp/rack` directory back into the empty directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Buď můžete spustit příkaz `git submodule update` a provést nové klonování, nebo můžete přesunout adresář `/tmp/rack` zpět do prázdného adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can enable push access; but given the lack of authentication, if you turn on push access, anyone on the internet who finds your project’s URL could push to your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možnost odesílání lze zapnout, ale vzhledem k tomu, že protokol neumožňuje autentizaci, aktivované odesílání znamená, že kdokoli na internetu, kdo najde URL vašeho projektu, do něj bude moci odesílat data.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can enforce policy on the server side to reject pushes of commits that don’t conform to some policy, but it’s entirely up to the developer to use these scripts on the client side.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Standardy můžete kontrolovat na straně serveru a odmítnout odesílané revize, které neodpovídají požadavkům. Záleží však jen na samotném vývojáři, jestli bude tyto skripty využívat i na straně klienta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can exclude commits in the master branch by adding the `--not` option before the branch name.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revize v hlavní větvi lze vyloučit vložením parametru `--not` před název větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get a Git project using two main approaches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt v systému Git lze získat dvěma základními způsoby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get a list of the SHA-1 values of all the commits that are being pushed by taking the `$newrev` and `$oldrev` values and passing them to a Git plumbing command called `git rev-list`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vezmete-li hodnoty `$newrev` a `$oldrev` a zadáte je k nízkoúrovňovému příkazu `git rev-list`, získáte seznam hodnot SHA-1 všech odesílaných revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get it a number of ways; the two major ones are to install it from source or to install an existing package for your platform.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Většinou se využívá buď instalace ze zdrojových souborů, nebo instalace z existujícího balíčku, určeného pro vaši platformu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can get very specific about what you want colored and how; but to turn on all the default terminal coloring, set `color.ui` to true:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Lze přitom velmi podrobně určit, co chcete barevně označit a jak. Chcete-li zapnout výchozí barvy terminálu, nastavte parametr `color.ui` na hodnotu true:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can go into that subdirectory, make changes, add your own writable remote repository to push your changes into, fetch and merge from the original repository, and more.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete přejít do tohoto podadresáře, provést změny, přidat vlastní vzdálený repozitář s oprávněním k zápisu, kam budete změny odesílat, vyzvednout a začlenit data z původního repozitáře atd.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can group users or repos for convenience.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro usnadnění můžete uživatele i repozitáře sdružovat do skupin.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can have Git tell you the object type of any object in Git, given its SHA-1 key, with `cat-file -t`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zadáte-li příkaz `cat-file -t` v kombinaci s klíčem SHA-1 objektu, Git vám sdělí jeho typ, ať se jedná o jakýkoli objekt Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can have several of them, each of which generally is either read-only or read/write for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vzdálených repozitářů můžete mít hned několik, každý pro vás přitom bude buď pouze ke čtení (read-only) nebo ke čtení a zápisu (read write).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can insert any kind of content into it, and it will give you back a key that you can use to retrieve the content again at any time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete do něj vložit jakýkoli obsah a na oplátku dostanete klíč, který můžete kdykoli v budoucnu použít k vyzvednutí obsahu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can keep all the common stuff together, like the rules for all `oss_repos` shown above, then add specific rules for specific cases later on, like so:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete nechat obecná nastavení, jako třeba pravidla pro všechny `oss_repos` z příkladu, a potom později přidávat pravidla pro více specifické případy. Například:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can keep doing this for several levels of stability.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento postup lze použít hned pro několik úrovní stability.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can keep the changes there for minutes, days, or months, and merge them in when they’re ready, regardless of the order in which they were created or worked on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změny tu můžete uchovávat několik minut, dní i měsíců a začlenit je přesně ve vhodnou chvíli. Na pořadí, v jakém byly větve vytvořeny nebo vyvíjeny, nezáleží.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can look into the packfile and see what Git did to save space.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do balíčkového souboru můžete ostatně nahlédnout a přesvědčit se, čím Git ušetřil místo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can make Git read and write to this file by passing the `--global` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Git bude načítat a zapisovat výhradně do tohoto souboru, jestliže zadáte parametr `--global`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can make Git read and write to this file specifically by passing the `--global` option.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Čtení a zápis do tohoto souboru zajistíte zadáním parametru `--global`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can make a lightweight tag by running something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Prostou značku lze vytvořit spuštěním například tohoto příkazu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can make your first push to the new `iphone_project` project by adding your server as a remote to your local version of the project and pushing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do nového projektu `iphone_project` teď můžete odeslat svá první data: přidejte do lokální verze projektu svůj server jako vzdálený repozitář a odešlete změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can modify that message with details about how you resolved the merge if you think it would be helpful to others looking at this merge in the future — why you did what you did, if it’s not obvious.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud myslíte, že to může být pro spolupracovníky, kteří si jednou budou toto sloučení prohlížet, užitečné, můžete tuto zprávu upravit a doplnit o podrobnosti, jak jste sloučení vyřešili – pokud to není zřejmé, můžete okomentovat, co jste udělali a proč právě takto.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can modify these limits with the `gc.auto` and `gc.autopacklimit` config settings, respectively.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto hodnoty můžete změnit podle svých potřeb v konfiguračním nastavení `gc.auto` a `gc.autopacklimit`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can name this file `expand_date` and put it in your path.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento soubor můžete pojmenovat `expand_date` a vložit ho do svého umístění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can now sync this project to your local machine by calling `svnsync init` with the to and from repositories.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní můžete tento projekt synchronizovat na svůj lokální počítač zadáním příkazu `svnsync init` s uvedením repozitářů „do“ a „z“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can obviously refer to a commit by the SHA-1 hash that it’s given, but there are more human-friendly ways to refer to commits as well.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Revizi můžete samozřejmě specifikovat na základě otisku SHA-1, jenž jí byl přidělen. Existují však i uživatelsky příjemnější způsoby, jak označit konkrétní revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can override that by specifying the `+` in front of the refspec.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odmítnutí serveru můžete potlačit zadáním znaku `+` před vzorec refspec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can pass files, directories, and file-glob patterns to the `git rm` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git rm` lze používat v kombinaci se soubory, adresáři a maskami souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can pretty easily see what files have been modified in a single commit with the `--name-only` option to the `git log` command (mentioned briefly in Chapter 2):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zjistit, které soubory byly v jedné revizi změněny, lze velmi snadno pomocí příkazu `git log` s parametrem `--name-only` (stručně popsáno v kapitole 2):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can provide this file to `git svn` to help it map the author data more accurately.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento soubor můžete dát k dispozici nástroji `git svn`, aby mohl přesněji zmapovat informace o autorech.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can pull the content back out of Git with the `cat-file` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obsah můžete ze systému Git zase vytáhnout, k tomu slouží příkaz `cat-file`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can put patterns in your project’s `.gitignore` file to have Git not see them as untracked files or try to stage them when you run `git add` on them, as discussed in Chapter 2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do souboru `.gitignore` ve svém projektu můžete vložit masky souborů, které Git neuvidí jakožto nesledované soubory ani se je nepokusí připravit k zapsání, až na ně spustíte příkaz `git add`, jak jsme popisovali v kapitole 2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can read the value of your HEAD via this command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodnotu souboru HEAD můžete načíst tímto příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can read trees into your staging area by calling `read-tree`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stromy můžete do oblasti připravených změn načíst příkazem `read-tree`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can reapply the one you just stashed by using the command shown in the help output of the original stash command: `git stash apply`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naposledy odložené soubory můžete znovu aplikovat příkazem, který byl uveden už v nápovědě ve výstupu původního příkazu stash: `git stash apply`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can rebase the server branch onto the master branch without having to check it out first by running `git rebase [basebranch] [topicbranch]` — which checks out the topic branch (in this case, `server`) for you and replays it onto the base branch (`master`):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev server můžete přeskládat na hlavní větev příkazem `git rebase [základna] [tematická větev]`. Příkaz provede checkout tematické větve (v tomto případě větve `server`) a přeskládá její změny na základnu (angl. base branch, v tomto případě `master`):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can recover it the same way, by adding a branch that points to that SHA.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní ji můžete obnovit stejným způsobem: přidejte novou větev, která bude ukazovat na její SHA.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can remove the `client` and `server` branches because all the work is integrated and you don’t need them anymore, leaving your history for this entire process looking like Figure 3-35:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté můžete větev `client` i `server` smazat, protože všechna práce z nich je integrována a tyto větve už nebudete potřebovat. Vaše historie pak bude vypadat jako na obrázku 3-35:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can remove these comments and type your commit message, or you can leave them there to help you remember what you’re committing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tyto komentáře můžete odstranit a napsat vlastní zprávu k revizi, nebo je můžete v souboru ponechat, abyste si lépe vzpomněli, co bylo obsahem dané revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run `git status` again to verify that all conflicts have been resolved:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ještě jednou můžete spustit příkaz `git status`, abyste si ověřili, že byly všechny konflikty vyřešeny:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run `git svn fetch` to grab the new data, but `git svn rebase` does the fetch and then updates your local commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nová data sice můžete vyzvednout i příkazem `git svn fetch`, avšak příkaz `git svn rebase` data nejen stáhne, ale navíc aktualizuje vaše lokální revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run auto gc manually as follows:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz auto gc můžete spustit také ručně:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run rebase interactively by adding the `-i` option to `git rebase`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Interaktivní režim přeskládání spustíte příkazem `git rebase` s parametrem `-i`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run something like `git log 1a410e` to look through your whole history, but you still have to remember that `1a410e` is the last commit in order to walk that history to find all those objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li si prohlédnout celou svou historii, můžete zadat příkaz `git log 1a410e`. Problém je v tom, že si k prohlížení historie a nalezení objektů stále ještě musíte pamatovat, že poslední revizí byla `1a410e`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run tests or otherwise inspect the working tree with this script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto skriptem lze spouštět různé testy nebo jinak kontrolovat pracovní strom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run the `count-objects` command to quickly see how much space you’re using:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li rychle zjistit, kolik místa je obsazeno, můžete použít příkaz `count-objects`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run via SSH in the same manner as the `receive-pack` process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete ho spustit prostřednictvím SSH stejným způsobem jako proces `receive-pack`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can run your tests, make sure the hotfix is what you want, and merge it back into your master branch to deploy to production.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete spustit testy, abyste se ujistili, že hotfix splňuje všechny požadavky, a pak můžete větev začlenit (merge) zpět do hlavní větve, aby byla připravena do produkce.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can save a stash on one branch, switch to another branch later, and try to reapply the changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Odklad můžete uložit na jedné větvi, později přepnout na jinou větev a aplikovat změny tam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see Chapter 9 for more information about plumbing tools; basically, `rev-parse` exists for lower-level operations and isn’t designed to be used in day-to-day operations.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Více o nízkoúrovňových nástrojích najdete v kapitole 9. Nástroj `rev-parse` se používá v podstatě pouze pro operace na nižších úrovních a není koncipován pro každodenní používání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see GitWeb in use at sites like `http://git.kernel.org` (see Figure 4-1).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V činnosti můžete GitWeb pozorovat například na stránkách `http://git.kernel.org` (viz obrázek 4-1).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see a file in the `objects` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, že v adresáři `objects` přibyl nový soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see from the size value that the big object is still in your loose objects, so it’s not gone; but it won’t be transferred on a push or subsequent clone, which is what is important.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Podle hodnoty velikosti je vidět, že se velký objekt stále ještě nachází mezi volnými objekty, a nebyl tedy odstraněn. Nebude ale součástí přenášených dat při odesílání nebo následném klonování, což je pro nás rozhodující.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see how powerful this technique can be for customized applications.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zde vidíte, jak může být tato metoda účinná pro uživatelsky nastavené aplikace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that Git re-modifies the files you uncommitted when you saved the stash.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, Git se pokusí obnovit změněné soubory, které jste nezapsali a uložili při odkladu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that it applied cleanly and automatically created the new commit for you.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, záplata byla aplikována čistě a automaticky byla vytvořena nová revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that the changes have been reverted.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, změny byly zahozeny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, že se po zapsání revize zobrazil výpis s informacemi: do jaké větve jste revizi zapsali (`master`), jaký je kontrolní součet SHA-1 revize (`463dc4f`), kolik souborů bylo změněno a statistiku přidaných a odstraněných řádků revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak vidíte, výchozí zpráva k revizi (commit message) obsahuje zakomentovaný aktuální výstup příkazu `git status` a nahoře jeden prázdný řádek.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that this command shows you a much different view of your staging area — basically the same information you get with `git status` but a bit more succinct and informative.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, že tento příkaz vám poskytne podstatně odlišný pohled na vaši oblast připravených změn. Stejné informace, i když o něco stručnější a hutnější, získáte také příkazem `git status`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that your new `README` file is untracked, because it’s under the “Untracked files” heading in your status output.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, že nový soubor `README` není sledován, protože je ve výpisu stavů uveden v části „Untracked files“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see that you’ve tagged the commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete se podívat, že jste revizi označil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see the `git-p4` identifier in each commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V každé revizi si můžete všimnout identifikátoru `git-p4`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see the added word enclosed in `{+ +}` and removed one enclosed in `[- -]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidaná slova jsou uzavřena mezi značkami `{+ +}` a odstraněná jsou uzavřena v `[- -]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see the commit history in the top half of the window along with a nice ancestry graph.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V horní polovině okna vidíte historii revizí, doplněnou názorným hierarchickým grafem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see the tag data along with the commit that was tagged by using the `git show` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Informace značky se zobrazí spolu s revizí, kterou značka označuje, po zadání příkazu `git show`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see this by creating an annotated tag (`-a` specifies that it’s an annotated tag):</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To je dobře vidět, vytvoříte-li anotovanou značku (`-a` udává, že se jedná o anotovanou značku):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see where you’ve been at any time by running `git reflog`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Spuštěním příkazu `git reflog` zjistíte, kde jste se nacházeli v libovolném okamžiku:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can see your reflog by using `git reflog`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Svůj reflog si můžete nechat zobrazit příkazem `git reflog`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set each value separately with a series of `git config` commands, or you can add them manually; but in the end, your config file should look something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každou hodnotu můžete nastavit zvlášť pomocí série příkazů `git config` nebo můžete vložit hodnoty ručně. Na konci by ale měl váš soubor config vypadat přibližně takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set it to `more` or to your favorite pager (by default, it’s `less`), or you can turn it off by setting it to a blank string:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete jej nastavit na `more` nebo na nějaký jiný oblíbený (výchozím stránkovačem je `less`). Můžete jej také vypnout zadáním prázdného řetězce:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set it up by setting the filter attribute in your `.gitattributes` file to filter `*.c` files with the "indent" filter:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V souboru `.gitattributes` můžeme nastavit atribut `filter` tak, aby se soubory `*.c` zpracovaly filtrem `indent`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set the color to any of the following values: `normal`, `black`, `red`, `green`, `yellow`, `blue`, `magenta`, `cyan`, or `white`, or, if your terminal supports more than 16 colors, an arbitrary numeric color value (between 0 and 255 on a 256-color terminal).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>U barev lze zadávat tyto hodnoty: `normal` (normální), `black` (černá), `red` (červená), `green` (zelená), `yellow` (žlutá), `blue` (modrá), `magenta` (purpurová), `cyan` (azurová) nebo `white` (bílá).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set up an attribute like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tom případě můžete nastavit tento atribut:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set up three client-side hooks for an e-mail-based workflow.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro pracovní postup založený na e-mailové komunikaci lze nastavit tři zásuvné moduly na straně klienta.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set up your new repository by copying your bare repository over:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nový repozitář můžete nastavit zkopírováním holého repozitáře příkazem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can set your merge tool to kdiff3, opendiff, tkdiff, meld, xxdiff, emerge, vimdiff, or gvimdiff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jako nástroj slučování můžete nastavit kdiff3, opendiff, tkdiff, meld, xxdiff, emerge, vimdiff nebo gvimdiff.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can start up interactive Ruby mode with the `irb` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Interaktivní režim Ruby spustíte příkazem `irb`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can take that output, loop through each of those commit SHAs, grab the message for it, and test that message against a regular expression that looks for a pattern.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento výstup můžete vzít, projít všechny hodnoty SHA jednotlivých revizí, vzít jejich zprávy a otestovat je proti regulárnímu výrazu, který vyhledává vzor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can take the changes on client that aren’t on server (C8 and C9) and replay them on your master branch by using the `--onto` option of `git rebase`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete vzít změny na větvi client, které nejsou na větvi server (C8 a C9), a nechat je znovu provést na hlavní větvi. Použijte k tomu příkaz `git rebase` v kombinaci s parametrem `--onto`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Git not to export certain files or directories when generating an archive.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systému Git můžete zadat, aby při generování archivu neexportoval určité soubory nebo adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Git to convert CRLF to LF on commit but not the other way around by setting `core.autocrlf` to input:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Systému Git tak můžete zadat, aby převáděl posloupnosti CRLF na LF (avšak nikoli obráceně) nastavením `core.autocrlf` na hodnotu input:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Git to pack references into that file by using the `git pack-refs` command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K zabalení referencí do tohoto souboru můžeme Git vyzvat příkazem `git pack-refs`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Git which of these you want enabled by setting `core.whitespace` to the values you want on or off, separated by commas.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Které z těchto funkcí si přejete zapnout a které vypnout, to můžete systému Git sdělit zadáním čárkami oddělených hodnot do parametru `core.whitespace`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell Gitolite:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroji Gitolite můžeme říct:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can tell that it’s staged because it’s under the “Changes to be committed” heading.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžeme říci, že je připraven k zapsání, protože je uveden v části „Changes to be committed“, tedy „Změny k zapsání“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can then check how big is that object on your disk:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí příkazu git cat-file zjistíte aktuální velikost objektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can then clone the code by running</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zdrojový kód pak naklonujete příkazem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can then run this program and pipe its output through `git fast-import`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento program můžete spustit a jeho výstup nechat zpracovat příkazem `git fast-import`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can think of the data that Git contains for these structures as being like Figure 9-2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Data, která Git pro tyto struktury obsahuje, si můžete představit jako ilustraci na obrázku 9-2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can throw away the original `iss91` branch (losing commits C5 and C6) and merge in the other two.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Původní větev `iss91` tak nyní můžete zahodit (s ní i revize C5 a C6) a začlenit zbylé dvě větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can treat the `rack` directory as a separate project and then update your superproject from time to time with a pointer to the latest commit in that subproject.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>S adresářem `rack` můžete pracovat jako se samostatným projektem a čas od času aktualizovat superprojekt ukazatelem na nejnovější revizi v tomto subprojektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can turn on this functionality with the `core.autocrlf` setting.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato funkce se zapíná pomocí parametru `core.autocrlf`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use `git filter-branch` to remove the identifier strings en masse:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K odstranění všech řetězců identifikátoru najednou můžete použít příkaz `git filter-branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use `git merge -s subtree` and it will work fine; but Git will also merge the histories together, which you probably don’t want.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete použít příkaz `git merge -s subtree` a začlenění proběhne úspěšně. Git však sloučí také obě historie, což pravděpodobně nebylo vaším záměrem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use it to notify a group or the author of the patch you pulled in that you’ve done so.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete ho použít k tomu, abyste skupině uživatelů nebo autorovi záplaty oznámili, že byla záplata natažena.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use it to restore data in the working tree that Git can’t track, such as permissions data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pomocí něj můžete obnovit data v pracovním stromě, které Git neumí sledovat, např. data oprávnění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use that incantation to grab the commit message from each commit that is trying to be pushed and exit if you see anything that doesn’t match.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento výraz můžete použít k extrakci zpráv ze všech odesílaných revizí a skript ukončit, jestliže najdete něco, co neodpovídá požadavkům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use the Git plumbing command `show-ref` to look at all your full reference names:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud si přejete zobrazit všechny své reference s úplným názvem, můžete použít nízkoúrovňový příkaz `show-ref`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use these hooks for all sorts of reasons, and you’ll learn about a few of them here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvné moduly se dají využívat k různým účelům. V krátkosti si tu některé z nich představíme.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use this hook to disallow rebasing any commits that have already been pushed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul můžete využít i k zakázání přeskládání všech revizí, které už byly odeslány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use this hook to do things like make sure none of the updated references are non-fast-forwards; or to check that the user doing the pushing has create, delete, or push access or access to push updates to all the files they’re modifying with the push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul můžete využít např. k ověření, že všechny aktualizované reference jsou „rychle vpřed“, nebo ke kontrole, že uživatel odesílající revize má oprávnění k vytváření, mazání nebo odesílání nebo oprávnění aktualizovat všechny soubory, které svými revizemi mění.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use this to find your blob’s name:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tuto kombinaci můžete použít k nalezení názvu hledaného blobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can use this to make sure a commit message is properly formatted or to normalize the message by having the script edit it in place.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul můžete použít k ujištění, že je zpráva k revizi ve správném formátu, nebo ke standardizaci zprávy – skript může zprávu rovnou upravit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can view the public key by running</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Veřejný klíč můžete zobrazit příkazem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can write this example pretty easily in anything you’re familiar with — it just needs to print the appropriate information to stdout.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příklad můžete ale beze všeho napsat v čemkoli, co vám vyhovuje. Jedinou podmínkou je, aby byly potřebné informace zapsány na standardní výstup (stdout).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can zlib-uncompress it, strip off the header, and look at the commit content:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Objekt můžete rozbalit, extrahovat záhlaví a prohlédnout si obsah revize:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can’t directly compare two versions unless you check them out and scan them manually, right?</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Srovnávat dvě verze přímo nelze, můžete je tak nanejvýš otevřít a ručně je projít, že?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can’t lose information in transit or get file corruption without Git being able to detect it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Nemůže tak dojít ke ztrátě informací při přenosu dat nebo k poškození souboru, aniž by to byl Git schopen zjistit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can’t record a submodule at `master` or some other symbolic reference.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Submodul nelze zaznamenat na větvi `master` nebo na jiné symbolické referenci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can’t set a symbolic reference outside of the refs style:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nelze však zadat symbolickou referenci mimo adresář refs:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can’t stop the patching process with this script.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto skriptem nelze proces aplikace záplaty a zapsání revizí zastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You can’t use partial globs in the pattern, so this would be invalid:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ve vzorci nelze použít částečné nahrazení, např. toto zadání by bylo neplatné:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You clone a repository with `git clone [url]`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Repozitář naklonujete příkazem `git clone [url]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You could calculate the differences between snapshots and provide only this data, but doing so is more complex — you may as well give Git all the data and let it figure it out.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mohli byste také vypočítat rozdíly mezi snímky a poskytnout pouze tato data. To je však o něco složitější. Stejně tak můžete systému Git zadat všechna data a přenechat výpočet na něm.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vytvořili jste novou větev, přepnuli jste na ni, provedli jste v ní změny a poté jste přepnuli zpět na hlavní větev, v níž jste rovněž provedli změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You did a few commits on them and deleted them directly after merging them into your main branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedli jste v nich pár revizí a smazali jste je hned po začlenění změn do hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zapíšete revizi. Snímky souborů, uložené v oblasti připravených změn, se trvale uloží do adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do not need root access, assuming Git, Perl, and an OpenSSH compatible SSH server are already installed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud už jsou nainstalovány nástroje Git, Perl a SSH server kompatibilní s OpenSSH, nebudete potřebovat ani přístup root.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do that by having Git compare the last commit on your topic branch with the first common ancestor it has with the master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tohoto srovnání dosáhnete tak, že necháte Git porovnat poslední revizi ve vaší tematické větvi s prvním předkem, kterého má společného s hlavní větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do this by running the `gitosis-init` command with your personal public key.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Učiníte tak spuštěním příkazu `gitosis-init` se svým osobním veřejným klíčem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do this by telling Git how to convert your binary data to a text format that can be compared via the normal diff.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dosáhnete toho tím, že systému Git sdělíte, jak má konvertovat binární data do textového formátu, který lze zpracovávat běžným algoritmem pro zjišťování rozdílů (diff).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do this with the `git branch` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Učiníte tak příkazem `git branch`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do this with the `git merge` command:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Učiníte tak příkazem `git merge`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You do want to start including README, so let’s start tracking the file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy si ale přejete soubor README zahrnout, a proto ho začněme sledovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You don’t have to add all the extras, but you’ll probably want to include +svn in case you ever have to use Git with Subversion repositories (see Chapter 8).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Není nutné přidávat všechny doplňky, ale pokud budete někdy používat Git s repozitáři systému Subversion, budete pravděpodobně chtít nainstalovat i doplněk +svn (viz kapitola 8).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You effectively change the order of those commits and remove the "added cat-file" commit completely.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jednoduše jste změnili pořadí těchto revizí a zároveň jste zcela odstranili revizi „added cat-file“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You fetch them and merge the new remote branch into your work, making your history look something like Figure 3-37.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy tyto změny vyzvednete a začleníte novou vzdálenou větev do své práce – vaše historie teď vypadá jako na obrázku 3-37.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You first add the Rack application to your project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve přidáte aplikaci Rack do svého projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You get a clean summary of all the commits since v1.0.1, grouped by author, that you can e-mail to your list.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výstupem příkazu je čisté shrnutí všech revizí od v1.0.1, seskupené podle autora, kterého můžete přidat do e-mailu své konference.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You get a list of commits that have already been pushed up by running this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Seznam revizí, které už byly odeslány, získáte takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You get a list of new commits being pushed to your server with `git rev-list`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkazem `git rev-list` získáte výpis nových revizí odesílaných na váš server.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You get a reference to teamone’s master branch position locally.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Lokálně získáte referenci na pozici hlavní větve serveru teamone.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You get an object back — that object is in loose format on the server, and you fetched it over a static HTTP GET request.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tímto postupem získáte jeden objekt. Ten je na serveru ve volném formátu a vy jste ho vyzvedli statickým požadavkem GET HTTP.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You go back to your code, and it turns out you can reproduce the issue, but you can’t figure out what is going wrong.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vrátíte se zpět ke svému kódu, a ukáže se, že dokážete problém reprodukovat, ne však identifikovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You hardcode the time zone (-0700) because doing so is easy.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Časové pásmo definujete napevno (-0700), protože je to jednoduché.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have a bona fide Git repository and a checkout or working copy of the files for that project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte vytvořen opravdový gitový repozitář a pracovní kopii souborů k projektu (checkout).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have a lot of options at this point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto se nabízí celá řada možností.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have a number of choices, so I’ll cover a few of them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existuje hned několik možností. Na některé z nich se můžeme podívat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have several options to get a remote Git repository up and running so that you can collaborate with others or share your work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Existuje několik možností, jak vytvořit a zprovoznit vzdálený repozitář Git tak, abyste mohli spolupracovat s ostatními uživateli nebo sdílet svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have three trees that specify the different snapshots of your project that you want to track, but the earlier problem remains: you must remember all three SHA-1 values in order to recall the snapshots.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte vytvořeny tři stromy označující různé snímky vašeho projektu, jež chcete sledovat. Původního problému jsme se však stále nezbavili: musíte si pamatovat všechny tři hodnoty SHA-1, abyste mohli snímky znovu vyvolat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to be careful, though, because the `.gitattributes` file is committed and passed around with the project but the driver (in this case, `dater`) isn’t; so, it won’t work everywhere.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přesto je na místě opatrnost. Soubor `.gitattributes` je zapisován a předáván spolu s projektem, avšak ovladač (v tomto případě je to `dater`) nikoli. Soubor tak nebude fungovat všude.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to change the path to the ACL file from this</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Cestu k souboru ACL budete muset změnit z</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to do this every time you pull down a submodule change in the main project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To budete muset udělat pokaždé, když v hlavním projektu stáhnete změny v submodulu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to either move it out of the way or remove it, in which case you have to clone it again when you switch back—and you may lose local changes or branches that you didn’t push up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete ho muset buď přemístit, nebo odstranit. V druhém případě ho budete muset znovu naklonovat, až přepnete zpět, navíc hrozí, že ztratíte lokální změny nebo větve, které jste neodeslali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to figure out how to get the commit message from each of these commits to test.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete muset najít postup, jak získat zprávy všech těchto revizí, které mají být otestovány.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to merge it manually into your work when you’re ready.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Sloučení s vaší prací musíte udělat ručně, až to uznáte za vhodné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to merge that work in at some point so you can keep up with the other developer in the future.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy musíte tyto změny ve vhodném okamžiku začlenit do své práce, abyste do budoucna neztratili kontakt s ostatními vývojáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to move the `rack` submodule directory out of the way before you can switch to a branch that doesn’t have it:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve budete muset přemístit adresář submodulu `rack`, než vám Git dovolí přepnout na větev, která adresář neobsahuje:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to push this data back to a Subversion server that can’t handle a commit that tracks more than one parent; so, after you push it up, it will look like a single commit that squashed in all the work of another branch under a single commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tato data budete muset odeslat zpět na server Subversion, který nedokáže pracovat s revizí sledující více než jednoho rodiče. Proto až je odešlete, budou vypadat jako jediná revize, jež zkomprimovala veškerou práci jiné větve do jedné revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to see who last changed the submodule:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Musíte zjistit, kdo změnil submodul jako poslední:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to set it up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>To budete muset nastavit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to shell onto the server each time, and there is no access control — everyone in the file has read and write access to every project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokaždé se musíte přihlásit na server a k dispozici nemáte žádnou správu přístupu – všichni, kdo jsou uvedeni v souboru, mají ke každému projektu oprávnění pro čtení i pro zápis.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have to unstage the `rack` directory first.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Adresář `rack` už byl připraven k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have two nearly identical 4K objects on your disk.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na disku teď máte dva téměř identické 12kB objekty.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have two remote servers: one named `gitserver` with a `master` branch; and another named `origin` with two branches, `master` and `testing`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Máte dva vzdálené servery: první nese označení `gitserver` a obsahuje větev `master`; druhý server je `origin`, který obsahuje větve `master` a`testing`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You have your tree object, so you continue walking your commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Stáhli jste objekt stromu, a můžete tak pokračovat v procházení revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You just append them to your `authorized_keys` file:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy nyní klíče přidáte do souboru `authorized_keys`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You just switched back to your `master` branch, and you pull the `rack_branch` branch into the `rack` subdirectory of your `master` branch of your main project:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přepnuli jste zpět na větev `master` a větev `rack_branch` natáhnete do podadresáře `rack` své větve `master` hlavního projektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You know what the different workflows are, and you should have a pretty good grasp of fundamental Git usage.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tuto chvíli už znáte různé pracovní postupy a na velmi solidní úrovni byste měli ovládat základy systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may also include a `log`, `tmp`, or `pid` directory; automatically generated documentation; and so on.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete rovněž přidat adresář `log`, `tmp` nebo `pid`, automaticky vygenerovanou dokumentaci a podobné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may also want to reduce the usual three lines context in diff output to only one line, as the context is now words, not lines.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná byste také rádi zredukovali obvyklé třířádkové okolí změny na pouhý jeden řádek, protože chcete znát okolí slova a ne okolí řádku.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may be wondering what the difference is between _author_ and _committer_.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná se ptáte, jaký je rozdíl mezi _autorem_ a _autorem revize_.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may even want to add a `pre-receive` hook that checks each commit message for a `git-svn-id` and rejects pushes that contain commits without it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná by nebylo od věci ani vytvořit zásuvný modul `pre-receive`, který by kontroloval všechny zprávy k revizím, zda obsahují `git-svn-id`, a odmítl by všechna odeslání, která obsahují revize bez něj.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may have skipped to this chapter from a previous chapter, or you may have gotten here after reading the rest of the book — in either case, this is where you’ll go over the inner workings and implementation of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Ať už jste do této kapitoly přeskočili z některé z předchozích, nebo jste se sem pročetli napříč celou knihou, v této kapitole se dozvíte něco o vnitřním fungování a implementaci systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may not want to run `adduser` and set temporary passwords for every user.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná nebudete mít chuť spouštět příkaz `adduser` (přidat uživatele) a nastavovat pro každého uživatele dočasná hesla.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may recall that when you ran `git init` earlier, you then ran `git add (files)` — that was to begin tracking files in your directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná si vzpomínáte, že když jste před časem spustili příkaz `git init`, provedli jste potom příkaz `git add (soubory)`. Příkaz jste zadávali kvůli zahájení sledování souborů ve vašem adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Některé klíče se mohou objevit vícekrát, protože Git načítá stejný klíč z různých souborů (například `/etc/gitconfig` a `~/.gitconfig`).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may see some other files in there, but this is a fresh `git init` repository — it’s what you see by default.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná ve svém adresáři najdete i další soubory. Toto je však příkazem `git init` čerstvě vytvořený repozitář s výchozím obsahem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may think to run this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete zadat následující příkaz:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may use it in conjunction with a commit template to programmatically insert information.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul můžete v kombinaci se šablonou revize využívat k vložení informací programem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may want to create an alias and effectively add a `stash-unapply` command to your Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Můžete si také vytvořit alias a do svého gitu tím přidat příkaz `stash-unapply`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may want to dog-ear this page, because you’ll need that command, and you’ll likely forget the syntax.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na této stránce si možná chcete ohnout rožek, protože tento příkaz budete určitě potřebovat, ale jeho syntaxi pravděpodobně zapomenete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You may want to use `rebase -i` to squash your work down to a single commit, or rearrange the work in the commits to make the patch easier for the maintainer to review — see Chapter 6 for more information about interactive rebasing.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možná budete chtít využít příkaz `rebase -i` a zkomprimovat svou práci do jediné revize nebo přeorganizovat práci v revizích tak, aby byla kontrola záplaty pro správce jednodušší – další informace o interaktivním přeskládání najdete v kapitole 6.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You merge in the same work again into a new merge commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znovu jste začlenili stejnou práci do nové revize sloučením.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You merged in what is basically a change to the pointer for your submodule; but it doesn’t update the code in the submodule directory, so it looks like you have a dirty state in your working directory:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začlenili jste něco, co je v podstatě změna ukazatele vašeho submodulu. Neaktualizovali jste tím však zdrojový kód v adresáři submodulu, takže to vypadá, jako že je váš pracovní adresář v chaotickém stavu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You modify files in your working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Změníte soubory ve svém pracovním adresáři.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must have Python and the `p4` tool installed on your machine for this import to work.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby vám import fungoval, musíte mít v počítači nainstalován Python a nástroj `p4`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must have around 7,000 loose objects or more than 50 packfiles for Git to fire up a real gc command.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby Git spustil skutečný příkaz gc, musíte mít kolem 7000 volných objektů nebo více než 50 balíčkových souborů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must indicate how far back you want to rewrite commits by telling the command which commit to rebase onto.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Musíte specifikovat, jak hluboko do historie se chcete vrátit a přepisovat revize. K příkazu proto musíte zadat, na jakou revizi si přejete přeskládání provést.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must look at each commit being pushed up, see if that string is in the commit message, and, if the string is absent from any of the commits, exit non-zero so the push is rejected.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Každou odesílanou revizi si musíte prohlédnout, zjistit, zda zpráva k revizi obsahuje daný řetězec, a pokud v některé z nich chybí, vrátit nenulovou hodnotu, čímž odesílanou revizi odmítnete.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must pass it the `--add` option because the file doesn’t yet exist in your staging area (you don’t even have a staging area set up yet) and `--cacheinfo` because the file you’re adding isn’t in your directory but is in your database.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>K příkazu je třeba zadat parametr `--add`, neboť tento soubor ve vaší oblasti připravených změn ještě neexistuje (dokonce ještě nemáte ani vytvořenou oblast připravených změn), a parametr `--cacheinfo`, protože soubor, který přidáváte, není ve vašem adresáři, je ale ve vaší databázi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must rewrite all the commits downstream from `6df76` to fully remove this file from your Git history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Chcete-li tento soubor kompletně odstranit z historie Git, budete muset přepsat všechny revize od `6df76` směrem dolů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You must run two commands: `git submodule init` to initialize your local configuration file, and `git submodule update` to fetch all the data from that project and check out the appropriate commit listed in your superproject:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete muset použít dva příkazy: `git submodule init` k inicializaci lokálního konfiguračního souboru a `git submodule update` k vyzvednutí všech dat z tohoto projektu a checkoutu příslušné revize uvedené ve vašem superprojektu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need a file in which you can store the SHA-1 value under a simple name so you can use that pointer rather than the raw SHA-1 value.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hodil by se soubor, do nějž budete pod jednoduchým názvem ukládat hodnotu SHA-1. Tento ukazatel pro vás bude srozumitelnější než nevlídná hodnota SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need an account on a Unix server of some kind.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete potřebovat účet na nějakém unixovém serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need the signer’s public key in your keyring for this to work properly:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Aby příkaz správně fungoval, musíte mít ve své klíčence veřejný klíč podepisujícího (signer).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to be careful to change only the e-mail addresses that are yours, so you use `--commit-filter`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli byste být opatrní, abyste změnili jen e-mailové adresy, které jsou opravdu vaše. Použijte proto parametr `--commit-filter`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to be careful with this technique because amending changes the SHA-1 of the commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tady byste měli být opatrní, protože oprava revize změní také její hodnotu SHA-1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to be sure your working directory is clean when you run this, though.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nezapomeňte však, že když příkaz spouštíte, je třeba, abyste měli čistý pracovní adresář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to check out the `master` branch when you’ve completed the process.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po dokončení procesu tedy budete muset přepnout na větev `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to do a bit of `post-import` cleanup.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po importu bude nutné data trochu vyčistit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to edit the script so that it stops at the commit you want to edit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Skript je třeba upravit tak, aby zastavil na revizi, v níž chcete provést změny.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to find the latest commit SHA and then add a branch that points to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete muset najít hodnotu SHA nejnovější revize a přidat větev, která na ni bude ukazovat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to get rid of anything that has a pointer to those old commits before you repack:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Před novým zabalením je třeba odstranit vše, co na tyto staré revize ukazuje:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to make some changes and commit snapshots of those changes into your repository each time the project reaches a state you want to record.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Řekněme, že potřebujete udělat pár změn a zapsat snímky těchto změn do svého repozitáře pokaždé, kdy se projekt dostane do stavu, který chcete zaznamenat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You need to push your work up to it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do něj teď musíte odeslat svou práci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You no longer have to manually create a bare repository for new projects on the server — Gitosis creates them automatically when it sees the first push:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Od této chvíle už nebudete muset ručně vytvářet holé repozitáře pro nové projekty na serveru. Gitosis je vytvoří automaticky, jakmile zjistí první odeslání dat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You now have a nice tarball and a zip archive of your project release that you can upload to your website or e-mail to people.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní máte vytvořen tarball a archiv zip k vydání svého projektu, které můžete nahrát na svou webovou stránku nebo rozeslat e-mailem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You open it again and make that change, and you’re ready to commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor znovu otevřete, provedete změnu a chcete jej zapsat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You preface everything with that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Takto začínají všechny příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You regularly push both of these branches to the public repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Obě tyto větve pravidelně odesíláte do veřejného repozitáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You reuse the `export_data` method you defined earlier, because it’s the same as the way you specified your commit message data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znovu tu využijete metodu `export_data`, kterou jste aplikovali před chvílí. Jedná se totiž o stejný způsob, jakým jste specifikovali data zprávy k revizi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You run `print_export` inside each directory, which takes the manifest and mark of the previous snapshot and returns the manifest and mark of this one; that way, you can link them properly.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V každém adresáři spustíte soubor `print_export`, který vezme manifest a známku předchozího snímku a poskytne manifest a označovač tohoto snímku. Tímto způsobem je lze řádně spojit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You run your test again and find that this commit is broken, so you tell Git that with `git bisect bad`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Znovu provedete svůj test a zjistíte, že tato revize vykazuje chybu. Systému Git to tedy sdělíte příkazem `git bisect bad`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You saw some simple Git configuration details in the first chapter, but I’ll go over them again quickly here.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V první kapitole jste se seznámili s několika detaily konfigurace, ještě jednou bych se k nim ale rád v rychlosti vrátil.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You saw this in the last section with the `iss53` and `hotfix` branches you created.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Viděli jste to v předchozí části, kdy jste si vytvořili větve `iss53` a `hotfix`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You see how easy it is to take a Git repository, create a bare version, and place it on a server to which you and your collaborators have SSH access.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vidíte, jak je jednoduché vzít repozitář Git, vytvořit jeho holou verzi a umístit ji na server, k níž máte vy i vaši spolupracovníci SSH přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You set up the information in that project; and when you push it, Gitosis reconfigures the server based on that, which is cool.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto projektu nastavíte všechny informace, a až ho odešlete, Gitosis překonfiguruje server, který je na něm založen. To je jistě příjemné řešení.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should also be able to share your branches by pushing them to a shared server, working with others on shared branches and rebasing your branches before they are shared.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Měli byste také umět odeslat své větve ke sdílení na server, spolupracovat s ostatními na sdílených větvích a před odesláním větve přeskládat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should also now have a working version of Git on your system that’s set up with your personal identity.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Také byste nyní měli mít nainstalovanou fungující verzi systému Git, nastavenou na vaše osobní údaje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should also realize that this is a dangerous command: any changes you made to that file are gone — you just copied another file over it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Všimněte si také, že se jedná o nebezpečný příkaz. Veškeré změny, které jste v souboru provedli, jsou ztraceny, soubor jste právě překopírovali jiným souborem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should also run this command to pull in changes from the Subversion server, even if you’re not ready to commit yourself.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz byste proto měli používat ke stažení změn ze serveru Subversion i v případě, že ještě sami nehodláte zapsat vlastní revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should consider it crippled Git, however, or you’ll hit issues in translation that may confuse you and your collaborators.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mějte však stále na paměti, že v tomto případě nelze používat systém Git v celé jeho šíři. Mohlo by se stát, že způsobíte chyby v překladu, které znepříjemní život vám i vašim kolegům.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should feel comfortable creating and switching to new branches, switching between branches and merging local branches together.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Neměli byste teď mít problém s vytvářením větví, přepínáním na nové i existující větve ani se slučováním lokálních větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should feel comfortable using Git with Subversion or importing nearly any existing repository into a new Git one without losing data.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po přečtení této kapitoly byste měli hravě zvládat používání systému Git v kombinaci se systémem Subversion a import téměř jakéhokoli existujícího repozitáře do repozitáře Git, aniž by došlo ke ztrátě dat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should feel fairly comfortable contributing to a project in Git as well as maintaining your own project or integrating other users’ contributions.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V tomto okamžiku byste tedy už měli hravě zvládat přispívání do projektů v systému Git, správu vlastního projektu i integraci příspěvků jiných uživatelů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should have a basic understanding of what Git is and how it’s different from the CVCS you may have been using.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní byste měli mít základní představu o tom, co je to Git a v čem se liší od systému CVCS, který jste možná dosud používali.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should have a pretty good understanding of what Git does in the background and, to some degree, how it’s implemented.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jak doufám, udělali jste si v této kapitole názorný obrázek o tom, jak Git pracuje v pozadí, a do určité míry také o jeho implementaci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should have to do these things only once; they’ll stick around between upgrades.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nastavení stačí provést pouze jednou — zůstanou zachována i po případných aktualizacích.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should know two important things about `git svn log`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>O příkazu `git svn log` byste měli vědět dvě důležité věci.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should now be able to make Git fit nearly any workflow you can dream up.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní byste měli systém Git bez potíží nastavit téměř na jakýkoli pracovní postup, který si vysníte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should now have a copy of the Git directory data in your `my_project.git` directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V adresáři `my_project.git` byste nyní měli mít kopii dat z adresáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should only have to use `git apply` for legacy patches and things like that.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git apply` je dobré používat jen pro starší záplaty a podobně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You should see something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Mělo by se zobrazit asi následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You solve this issue much the same way — edit the file to resolve the conflict, stage the new file, and then run `git am --resolved` to continue to the next patch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Problém se také řeší stejným způsobem. Úpravou souboru odstraňte konflikt, připravte nový soubor k zapsání a spusťte příkaz `git am --resolved`, jímž se přesunete k následující záplatě:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You stage the changes you want by editing a file and running `git add` on it or `git rm` to a tracked file, and the subsequent `git commit --amend` takes your current staging area and makes it the snapshot for the new commit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Změny, které chcete zapsat, připravíte tím způsobem, že upravíte příslušné soubory a použijete na ně příkaz `git add`, resp. `git rm`. Příkaz `git commit --amend` poté vezme vaši oblast připravených změn v aktuální podobě a vytvoří snímek nové revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You stage the files, adding snapshots of them to your staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>Soubory připravíte k uložení tak, že vložíte jejich snímky do oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You start a new branch based off the current `origin/master` branch, squash the `featureB` changes there, resolve any conflicts, make the implementation change, and then push that up as a new branch:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začnete vytvořením nové větve z aktuální větve `origin/master`, zkomprimujete do ní změny z větve `featureB`, vyřešíte všechny konflikty, provedete změnu v implementaci a to vše odešlete jako novou větev:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You stick the bare repository copy somewhere everyone has shared access to and set the read/write permissions as you would for any other shared directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Kopii holého repozitáře umístíte někam, kam mají všichni sdílený přístup, a nastavíte oprávnění ke čtení/zápisu stejně jako u jakéhokoli jiného sdíleného adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You still get the advantages of things like offline committing and vastly simpler branching and merging, but the workflow can be very similar; the main difference is that merges happen client-side rather than on the server at commit time.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Se systémem Git ale budete stále ještě ve výhodě v takových ohledech, jako je zapisování revizí offline a podstatně snazší větvení a slučování. Pracovní postup však bude velmi podobný. Hlavním rozdílem je to, že slučování probíhá na straně klienta, ne během zapisování revize na straně serveru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You then fetch from that server, bringing down the new commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy poté znovu vyzvednete data ze serveru a stáhnete nové revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You then need to add in this new repository URL as a second remote, in this case named `myfork`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poté bude třeba, abyste tuto novou adresu URL repozitáře přidali jako druhý vzdálený repozitář, v tomto případě pojmenovaný `myfork`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You use `git format-patch` to generate the mbox-formatted files that you can e-mail to the list — it turns each commit into an e-mail message with the first line of the commit message as the subject and the rest of the message plus the patch that the commit introduces as the body.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro vygenerování emailových zpráv ve formátu mbox použijte příkaz `git format-patch`. Každá revize se přetransformuje na e-mailovou zprávu, jejíž předmět bude tvořit první řádek zprávy k revizi a tělo e-mailu bude tvořeno zbytkem zprávy a samotnou záplatou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You use this command to artificially add the earlier version of the test.txt file to a new staging area.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tento příkaz lze použít, jestliže chcete uměle přidat starší verzi souboru test.txt do nové oblasti připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You want to pull the Rack project into your `master` project as a subdirectory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Projekt Rack chcete do projektu `master` natáhnout jako podadresář.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You want to see what is in your experiment branch that hasn’t yet been merged into your master branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy chcete vidět, co všechno obsahuje vaše experimentální větev, kterou jste ještě nezačlenili do hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You want to work on this project with your friends, so you’ll have to re-add their public keys.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na tomto projektu chcete spolupracovat s přáteli, a proto budete muset znovu přidat jejich veřejné klíče.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You will have to explicitly push tags to a shared server after you have created them.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pokud jste vytvořili značku, budete ji muset na sdílený server poslat explicitně.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You will see these hash values all over the place in Git because it uses them so much.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151011T193101Z" creationid="progitSync" creationdate="20151011T193101Z">
        <seg>S těmito otisky se budete setkávat ve všech úložištích systému Git, protože je používá opravdu často.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You work for a while, generally in a topic branch, and merge into your `master` branch when it’s ready to be integrated.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Po určitou dobu pracujete, obvykle na nějaké tematické větvi, a když je připravena k integraci, začleníte ji do své větve `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You work on your web site and do some commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pracujete na webových stránkách a zapíšete několik revizí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš gitovský repozitář nyní obsahuje pět objektů: jeden blob pro obsah každého ze tří vašich souborů, jeden strom, který zaznamenává obsah adresáře a udává, které názvy souborů jsou uloženy jako který blob, a jeden objekt revize s ukazatelem na kořenový strom a se všemi metadaty revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your Subversion import looks like it has a remote named tags with branches under it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Import ze systému Subversion vypadá, jako by měl vzdálený repozitář s názvem „tags“, v němž se nacházejí jednotlivé větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your `inline_data` method looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Metoda `inline_data` má tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your basic main loop looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Základní smyčka bude mít tuto podobu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your branch will contain only work from that commit down:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše větev bude obsahovat pouze práci od této revize níže:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your change is now in the snapshot of the commit pointed to by the `master` branch, and you can deploy your change (see Figure 3-14).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše změna je nyní obsažena ve snímku revize, na niž ukazuje hlavní větev `master`, a vy můžete pokračovat v provádění změn (viz obrázek 3-14).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your commit history looks like Figure 3-36.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše historie revizí bude vypadat jako na obrázku 3-36.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your commit history will look something like Figure 3-20.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie revizí bude vypadat zhruba jako na obrázku 3-20.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your commit history with multiple topic branches.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Historie revizí s několika tematickými větvemi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your database contains the two new versions of the file as well as the first content you stored there:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše databáze obsahuje dvě nové verze souboru a počáteční obsah, který jste do ní vložili:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your directory structure looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš adresář má tuto strukturu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your file contains a section that looks something like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Jedna část vašeho souboru bude vypadat zhruba takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your first challenge is to enforce that each commit message must adhere to a particular format.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaším prvním úkolem bude zajistit, aby všechny zprávy k revizím splňovaly předepsaný formát.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your first line starts with 005b, which is 91 in decimal, meaning that 91 bytes remain on that line.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš první řádek začíná hodnotou 005b, tedy 91 v hexadecimální soustavě, což znamená, že na tomto řádku zbývá 91 bytů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your fork of a project.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše rozštěpení projektu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your history after merging in dumbidea and iss91v2.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše historie po začlenění větví „dumbidea“ a „iss91v2“</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your history no longer contains a reference to that file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše historie už neobsahuje referenci na problémový soubor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your history then looks like Figure 3-21.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaši historii v tomto stavu znázorňuje obrázek 3-21.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your import is ready to push up to your new Git server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš import je připraven k odeslání na nový server Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your initial diverged commit history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše původně rozdělená historie revizí</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your iss53 branch can move forward independently.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev iss53 může nezávisle postupovat vpřed.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your local branches aren’t automatically synchronized to the remotes you write to — you have to explicitly push the branches you want to share.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše lokální větve nejsou automaticky synchronizovány se vzdálenými servery, na něž zapisujete – ty, které chcete sdílet, musíte explicitně odeslat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your master branch points to the same place as your hotfix branch after the merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Hlavní větev ukazuje po sloučení na stejné místo jako větev „hotfix“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your method looks like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Celý postup vypadá takto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your mileage may vary.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Je to případ od případu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your object is there, so go ahead and get the whole packfile:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš objekt se v tomto souboru nachází, a proto neváhejte a stáhněte celý balíčkový soubor:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104939Z" creationid="Prikryl" creationdate="20151023T104939Z">
        <seg>Your public key has been saved in /Users/schacon/.ssh/id_rsa.pub.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your staging area now has the new version of test.txt as well as the new file new.txt.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V oblasti připravených změn nyní máte jak novou verzi souboru test.txt, tak nový soubor new.txt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your strategy will be to go through the snapshots one at a time and create commits with the contents of each directory, linking each commit back to the previous one.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vaše strategie tedy bude spočívat v tom, že postupně projdete jednotlivé snímky a vytvoříte revize s obsahem každého adresáře, přičemž každá revize bude odkazovat na revizi předchozí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>Your working directory is clean:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Váš pracovní adresář se vyčistil:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll add a new section called `mobile` where you’ll list the developers on your mobile team and projects that those developers need access to.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přidáte novou část s názvem `mobile`, která bude obsahovat seznam vývojářů vašeho mobilního týmu a projektů, k nimž tito vývojáři potřebují přístup.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll add some larger content to the repository to demonstrate an interesting feature of Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Do repozitáře tak nyní přidáme větší objem dat, na němž si budeme moci ukázat jednu zajímavou funkci systému Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll also need to set the Unix user group of the `/opt/git` directories to `www-data` so your web server can read-access the repositories, because the Apache instance running the CGI script will (by default) be running as that user:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete také muset nastavit uživatelskou skupinu adresáře `/opt/git` na `www-data`. Váš webový server tak získá přístup pro čtení k repozitářům, protože instance Apache, která spouští CGI skript, bude (standardně) spuštěna s tímto uživatelem:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll also take this opportunity to move the work to be based off the project’s current `master` branch.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vy tuto příležitost využijete zároveň k tomu, abyste práci přesunuli tak, aby byla založena na aktuálním stavu projektu ve větvi `master`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll be able to watch Git rewriting trees and commits and then move the branch pointer at the end.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvidíte, jak Git přepisuje stromy a revize a poté přemístí ukazatel větve na konec.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll build client scripts that help the developer know if their push will be rejected and server scripts that actually enforce the policies.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této části vytvoříte skripty pro klienta, které vývojářům pomohou zjistit, zda budou jejich revize odmítnuty, a skripty na server, které si specifikované požadavky přímo vynutí.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll change into each subdirectory and print the commands necessary to export it.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přejdete do každého podadresáře a zadáte příkazy potřebné k jeho exportu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll determine the path of the object you want to write out (the first two characters of the SHA-1 value being the subdirectory name, and the last 38 characters being the filename within that directory).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Musíte tu určit cestu k objektu, který chcete zapsat (první dva znaky hodnoty SHA-1 budou název podadresáře, zbývajících 38 znaků bude tvořit název souboru v tomto adresáři).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll do the following:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uděláte následující:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll do this by creating an array of directories and using the index value as the mark, because a mark must be an integer.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Provedete to tak, že vytvoříte skupinu adresářů a jako označovač použijete hodnotu indexu, neboť označovač musí být celé číslo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll follow these steps:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Budete provádět tyto kroky:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll have the `update` hook look at those rules, see what files are being introduced for all the commits being pushed, and determine whether the user doing the push has access to update all those files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zásuvný modul `update` se podívá na tato pravidla, zjistí, jaké soubory byly ve všech odesílaných revizích doručeny, a určí, zda má odesílatel oprávnění aktualizovat všechny tyto soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll have to pull down their work first and incorporate it into yours before you’ll be allowed to push.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nejprve musíte stáhnout práci ostatních a začlenit ji do své, teprve potom vám server umožní odeslání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll learn a few of the common uses so you can get an idea of some of the things it’s capable of.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dále poznáte několik běžných situací, v nichž ho lze použít, a získáte tak představu, co všechno příkaz dovede.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll learn how to be a benevolent dictator or integration manager.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Dozvíte se, jak být benevolentním diktátorem nebo integračním manažerem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll learn how to import data from two of the bigger professionally used SCM systems — Subversion and Perforce — both because they make up the majority of users I hear of who are currently switching, and because high-quality tools for both systems are distributed with Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní se naučíte, jak importovat data ze dvou větších, profesionálně používaných systémů SCM -- Subversion a Perforce. Oba tyto systémy jsem zvolil proto, že podle mých informací přechází na Git nejvíce uživatelů právě z nich, a také proto, že Git obsahuje vysoce kvalitní nástroje právě pro oba tyto systémy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll learn how to work in an environment where small groups collaborate on features and then those team-based contributions are integrated by another party.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Naučíte se, jak pracovat v prostředí, v němž na jednotlivých úkolech spolupracují malé skupiny a tyto týmové příspěvky jsou poté integrovány druhou stranou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll learn more about `read-tree` and its friends in Chapter 9, but for now know that it reads the root tree of one branch into your current staging area and working directory.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>O příkazu `read-tree` a jeho příbuzných se více dočtete v kapitole 9, nyní však vězte, že načte kořenový strom jedné větve do vaší aktuální oblasti připravených změn a do pracovního adresáře.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll learn more about what this means in a bit.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Tomu, co tato definice znamená, se budeme věnovat za chvíli.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll likely need to change that to whatever your stable, published branch is.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravděpodobně ho budete muset změnit na název stabilní, zveřejněné větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll notice the phrase "Fast-forward" in that merge.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při sloučení jste si možná všimli spojení „Fast forward“ (rychle vpřed).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll now create a new tree with the second version of test.txt and a new file as well:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nyní vytvoříte nový strom s druhou verzí souboru test.txt a jedním novým souborem (new.txt):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll now look at each of these sections in detail to see how Git operates.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na každou z těchto částí se teď podíváme podrobněji, abyste pochopili, jak Git pracuje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll often want to do two basic things to your last commit: change the commit message, or change the snapshot you just recorded by adding, changing and removing files.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Na poslední revizi budete často chtít měnit dvě věci: zprávu k revizi nebo čerstvě zapsaný snímek, v němž budete chtít přidat, změnit nebo odstranit soubory.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll rarely want `color.ui = always`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Možnost `color.ui = always` využijete zřídka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll see a remote rejected message for each reference that your hook declined, and it tells you that it was declined specifically because of a hook failure.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pro každou referenci, kterou váš zásuvný modul odmítne, se zobrazí jedna zpráva o odmítnutí vzdálené reference. Ze zprávy vyčtete, že byla reference odmítnuta kvůli chybě zásuvného modulu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll see how to store a blob object — in this case, the string "what is up, doc?" — interactively in the Ruby scripting language.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Uvidíte, jak lze uložit objekt blobu – v našem případě řetězec „what is up, doc?“ – interaktivně v skriptovacím jazyce Ruby.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll spend the first part of this chapter learning about `git svn`, the bidirectional Subversion gateway tool in Git.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>První část této kapitoly proto věnujeme nástroji `git svn`, obousměrné bráně k systému Subversion.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll start with the `git svn clone` command, which imports an entire Subversion repository into a local Git repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Začneme příkazem `git svn clone`, který importuje celý repozitář Subversion do lokálního repozitáře Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ll use a Perl expression to clean that up on commit:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Při operaci clean během zapsání pak budete používat výraz Perlu:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re also unlikely to want to have hundreds of remotes, each for someone who contributes only a patch or two.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravděpodobně také nebudete chtít mít nastaveny stovky vzdálených serverů, z nichž byste dostávali po jednom nebo dvou záplatách.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re likely to have to either include this code from a shared library like a CPAN install or Ruby gem, or copy the source code into your own project tree.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Pravděpodobně budete muset použít tento kód ze sdílené knihovny, jako CPAN install nebo Ruby gem, nebo zkopírovat zdrojový kód do vlastního stromu projektu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re looking for a pair of files named something and something.pub, where the something is usually `id_dsa` or `id_rsa`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zobrazí se několik souborů s názvem `xxx` a `xxx.pub`, kde `xxx` je většinou `id_dsa` nebo `id_rsa`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re looking for any commit that is reachable from the last commit on the remote and that isn’t reachable from any parent of any of the SHAs you’re trying to push up — meaning it’s a fast-forward.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vyhledáváte všechny revize, které jsou dostupné z poslední revize na vzdáleném serveru a nejsou dostupné z žádného rodiče jakékoli hodnoty SHA, kterou se pokoušíte odeslat. Tímto způsobem lze označit odeslání „rychle vpřed“.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re ready to go — nothing else needed.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Vše je připraveno, nic dalšího se od vás nevyžaduje.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re ready to roll.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Teď to můžete rozjet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’re taken to the Create a New Repository form (see Figure 4-5).</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Přejdete tím na formulář „Create a New Repository“ (viz obrázek 4-5).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve accomplished the basic tasks of tracking and committing files, and you’ve harnessed the power of the staging area and lightweight topic branching and merging.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zvládli jste základní úkony sledování a zapisování souborů a pochopili jste přednosti přípravy souborů k zapsání i snadného vytváření a začleňování větví.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve covered most of the major ways that you can customize your Git client and server to best fit your workflow and projects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Už jsme se seznámili s většinou hlavních způsobů přizpůsobení klienta a serveru systému Git tak, aby co nejlépe odpovídali potřebám vašeho pracovního postupu a vašich projektů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve decided that you’re going to work on issue #53 in whatever issue-tracking system your company uses.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Rozhodli jste se, že budete pracovat na chybě č. 53, ať už vaše společnost používá jakýkoli systém sledování chyb.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve effectively lost the top two commits — you have no branch from which those commits are reachable.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Účinně jsme se zbavili horních dvou revizí. Neexistuje žádná větev, z níž by byly tyto revize dostupné.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve halved your disk usage by packing your objects.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Zabalením objektů jste zredukovali nároky na místo na polovinu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve just done the low-level operations to build up a Git history without using any of the front ends.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Právě jste vytvořili historii Git jen na základě nízkoúrovňových operací, bez použití front-endů.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve just gone over Git’s three main object types, but there is a fourth.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Už jsme se seznámili se třemi základními typy objektů. Jenže existuje ještě čtvrtý.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve learned about all sorts of configuration settings, file-based attributes, and event hooks, and you’ve built an example policy-enforcing server.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Poznali jste všechny druhy konfiguračního nastavení, atributy nastavované pomocí souborů a dokonce i zásuvné moduly. V neposlední řadě jste sestavili ukázkový server, který si sám dokáže vynutit vámi předepsané standardy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve partially staged this file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Soubor je částečně připraven k zapsání.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve seen a number of advanced tools that allow you to manipulate your commits and staging area more precisely.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>V této kapitole jste poznali několik pokročilých nástrojů umožňujících preciznější manipulaci s revizemi a oblastí připravených změn.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>You’ve seen one such option already — the `-2` option, which shows only the last two commits.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>My už jsme se s jedním takovým parametrem setkali. Byl to parametr `-2`, který zobrazí pouze dvě poslední revize.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[Jessica Smith &lt;jessica@example.com&gt;]
	Emails will be sent from: Jessica Smith &lt;jessica@example.com&gt;
	Who should the emails be sent to?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221027Z" creationid="Prikryl" creationdate="20151023T221027Z">
        <seg>[Jessica Smith &lt;jessica@example.com&gt;]
	Emails will be sent from: Jessica Smith &lt;jessica@example.com&gt;
	Who should the emails be sent to?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[POLICY] Cannot push a non fast-forward reference
	error: hooks/update exited with error code 1
	error: hook declined to update refs/heads/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090901Z" creationid="Prikryl" creationdate="20151024T090901Z">
        <seg>[POLICY] Cannot push a non fast-forward reference
	error: hooks/update exited with error code 1
	error: hook declined to update refs/heads/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[POLICY] You do not have access to push to lib/test.rb</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090906Z" creationid="Prikryl" creationdate="20151024T090906Z">
        <seg>[POLICY] You do not have access to push to lib/test.rb</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[POLICY] Your message is not formatted correctly</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090904Z" creationid="Prikryl" creationdate="20151024T090904Z">
        <seg>[POLICY] Your message is not formatted correctly</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[Roberto Tyley](https://github.com/rtyley) has written a similar tool to `filter-branch` called the BFG.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>[Roberto Tyley](https://github.com/rtyley) vytvořil nástroj, který se funkčností podobá `filter-branch` a nazval jej BFG. (Celý název lze doslova přeložit jako Velký, přátelský, obří čistič repozitáře -- představte si pod tím, co chcete.)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[diff "odt"]
		binary = true
		textconv = /usr/local/bin/odt-to-txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090715Z" creationid="Prikryl" creationdate="20151024T090715Z">
        <seg>[diff "odt"]
		binary = true
		textconv = /usr/local/bin/odt-to-txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[diff "word"]
		textconv = catdoc</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090356Z" creationid="Prikryl" creationdate="20151024T090356Z">
        <seg>[diff "word"]
		textconv = catdoc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[git-p4: depot-paths = "//public/jam/src/": change = 3108]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091440Z" creationid="Prikryl" creationdate="20151024T091440Z">
        <seg>[git-p4: depot-paths = "//public/jam/src/": change = 3108]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[git-p4: depot-paths = "//public/jam/src/": change = 4409]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091436Z" creationid="Prikryl" creationdate="20151024T091436Z">
        <seg>[git-p4: depot-paths = "//public/jam/src/": change = 4409]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[gldpg]: http://sitaramc.github.com/gitolite/progit.html
[gltoc]: http://sitaramc.github.com/gitolite/master-toc.html</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105432Z" creationid="Prikryl" creationdate="20151023T105432Z">
        <seg>[gldpg]: http://sitaramc.github.com/gitolite/progit.html
[gltoc]: http://sitaramc.github.com/gitolite/master-toc.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group gitosis-admin]
	members = scott
	writable = gitosis-admin</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105404Z" creationid="Prikryl" creationdate="20151023T105404Z">
        <seg>[group gitosis-admin]
	members = scott
	writable = gitosis-admin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group mobile]
	members   = @mobile_committers
	writable  = iphone_project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105429Z" creationid="Prikryl" creationdate="20151023T105429Z">
        <seg>[group mobile]
	members   = @mobile_committers
	writable  = iphone_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group mobile]
	members = scott
	writable = iphone_project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105405Z" creationid="Prikryl" creationdate="20151023T105405Z">
        <seg>[group mobile]
	members = scott
	writable = iphone_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group mobile]
	members = scott john josie jessica
	writable = iphone_project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105423Z" creationid="Prikryl" creationdate="20151023T105423Z">
        <seg>[group mobile]
	members = scott john josie jessica
	writable = iphone_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group mobile]
	members = scott josie jessica
	writable = iphone_project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105424Z" creationid="Prikryl" creationdate="20151023T105424Z">
        <seg>[group mobile]
	members = scott josie jessica
	writable = iphone_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group mobile_2]
	members   = @mobile_committers john
	writable  = another_iphone_project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105430Z" creationid="Prikryl" creationdate="20151023T105430Z">
        <seg>[group mobile_2]
	members   = @mobile_committers john
	writable  = another_iphone_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group mobile_committers]
	members = scott josie jessica</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105427Z" creationid="Prikryl" creationdate="20151023T105427Z">
        <seg>[group mobile_committers]
	members = scott josie jessica</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[group mobile_ro]
	members = john
	readonly = iphone_project</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105426Z" creationid="Prikryl" creationdate="20151023T105426Z">
        <seg>[group mobile_ro]
	members = john
	readonly = iphone_project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[imap]
	  folder = "[Gmail]/Drafts"
	  host = imaps://imap.gmail.com
	  user = user@gmail.com
	  pass = p4ssw0rd
	  port = 993
	  sslverify = false</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221021Z" creationid="Prikryl" creationdate="20151023T221021Z">
        <seg>[imap]
	  folder = "[Gmail]/Drafts"
	  host = imaps://imap.gmail.com
	  user = user@gmail.com
	  pass = p4ssw0rd
	  port = 993
	  sslverify = false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[master]: created a0a41a9: "More friendly message when locking the index fails."
	 3 files changed, 17 insertions(+), 3 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221447Z" creationid="Prikryl" creationdate="20151023T221447Z">
        <seg>[master]: created a0a41a9: "More friendly message when locking the index fails."
	 3 files changed, 17 insertions(+), 3 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[merge]
	  tool = extMerge
	[mergetool "extMerge"]
	  cmd = extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
	  trustExitCode = false
	[diff]
	  external = extDiff</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090307Z" creationid="Prikryl" creationdate="20151024T090307Z">
        <seg>[merge]
	  tool = extMerge
	[mergetool "extMerge"]
	  cmd = extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
	  trustExitCode = false
	[diff]
	  external = extDiff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[rejected]        master     -&gt; origin/mymaster  (non fast forward)
	 * [new branch]      topic      -&gt; origin/topic</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091741Z" creationid="Prikryl" creationdate="20151024T091741Z">
        <seg>[rejected]        master     -&gt; origin/mymaster  (non fast forward)
	 * [new branch]      topic      -&gt; origin/topic</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[rejected]        master -&gt; master (non-fast forward)
	error: failed to push some refs to 'john@githost:simplegit.git'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220416Z" creationid="Prikryl" creationdate="20151023T220416Z">
        <seg>[rejected]        master -&gt; master (non-fast forward)
	error: failed to push some refs to 'john@githost:simplegit.git'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/*:refs/remotes/origin/*</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091735Z" creationid="Prikryl" creationdate="20151024T091735Z">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/*:refs/remotes/origin/*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/*:refs/remotes/origin/*
	       push = refs/heads/master:refs/heads/qa/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091746Z" creationid="Prikryl" creationdate="20151024T091746Z">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/*:refs/remotes/origin/*
	       push = refs/heads/master:refs/heads/qa/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/master:refs/remotes/origin/master
	       fetch = +refs/heads/experiment:refs/remotes/origin/experiment</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091742Z" creationid="Prikryl" creationdate="20151024T091742Z">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/master:refs/remotes/origin/master
	       fetch = +refs/heads/experiment:refs/remotes/origin/experiment</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/master:refs/remotes/origin/master
	       fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091744Z" creationid="Prikryl" creationdate="20151024T091744Z">
        <seg>[remote "origin"]
	       url = git@github.com:schacon/simplegit-progit.git
	       fetch = +refs/heads/master:refs/remotes/origin/master
	       fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[remote rejected] master -&gt; master (hook declined)
	error: failed to push some refs to 'git@gitserver:project.git'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090859Z" creationid="Prikryl" creationdate="20151024T090859Z">
        <seg>[remote rejected] master -&gt; master (hook declined)
	error: failed to push some refs to 'git@gitserver:project.git'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[repo iphone_project]
	daemon = yes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105520Z" creationid="Prikryl" creationdate="20151023T105520Z">
        <seg>[repo iphone_project]
	daemon = yes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[repo iphone_project]
	daemon = yes
	gitweb = yes</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105523Z" creationid="Prikryl" creationdate="20151023T105523Z">
        <seg>[repo iphone_project]
	daemon = yes
	gitweb = yes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[sendemail]
	  smtpencryption = tls
	  smtpserver = smtp.gmail.com
	  smtpuser = user@gmail.com
	  smtpserverport = 587</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221025Z" creationid="Prikryl" creationdate="20151023T221025Z">
        <seg>[sendemail]
	  smtpencryption = tls
	  smtpserver = smtp.gmail.com
	  smtpuser = user@gmail.com
	  smtpserverport = 587</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[ticket: X]</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T172612Z" creationid="Prikryl" creationdate="20151023T223151Z">
        <seg>[tiket: X]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[ticket: X]
	# Please enter the commit message for your changes.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T172650Z" creationid="Prikryl" creationdate="20151023T223156Z">
        <seg>[tiket: X]
	# Please enter the commit message for your changes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>[y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221323Z" creationid="Prikryl" creationdate="20151023T221323Z">
        <seg>[y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`--reuseaddr` allows the server to restart without waiting for old connections to time out, the `--base-path` option allows people to clone projects without specifying the entire path, and the path at the end tells the Git daemon where to look for repositories to export.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>`--reuseaddr` umožňuje serveru restartování bez nutnosti čekat na vypršení časového limitu pro stará spojení, parametr `--base-path` umožňuje uživatelům klonovat projekty, aniž by museli zadávat celou cestu, a cesta na konci příkazu říká démonovi Git, kde má hledat repozitáře určené k exportu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`--stdin` tells the command to read the content from stdin; if you don’t specify this, `hash-object` expects the path to a file.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Parametr `--stdin` zase příkazu sděluje, aby načetl obsah ze standardního vstupu. Pokud byste parametr nezadali, příkaz `hash-object` by očekával, že zadáte cestu k souboru.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`HEAD~2` means "the first parent of the first parent," or "the grandparent" — it traverses the first parents the number of times you specify.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>`HEAD~2` označuje „prvního rodiče prvního rodiče“, tedy „prarodiče“. Příkaz překročí prvního rodiče tolikrát, kolikrát udává číselná hodnota.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`experiment..master` shows you everything in `master` not reachable from `experiment`:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Výraz `experiment..master` zobrazí vše ve větvi `master`, co není dostupné ve větvi `experiment`:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`filter-branch` is the tool you probably want to use to scrub your entire history.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástrojem, který hledáte k opravení celé historie, je `filter-branch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`git apply` is overall much more paranoid than `patch`.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Příkaz `git apply` je tedy celkově víc paranoidní než příkaz `patch`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>`git svn` has two commands to help with this issue.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nástroj `git svn` vám k řešení tohoto problému nabízí dva příkazy.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>access = get_acl_access_data('.git/acl')</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090919Z" creationid="Prikryl" creationdate="20151024T090919Z">
        <seg>access = get_acl_access_data('.git/acl')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>access = get_acl_access_data('acl')</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090918Z" creationid="Prikryl" creationdate="20151024T090918Z">
        <seg>access = get_acl_access_data('acl')</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>add limit to log function</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221114Z" creationid="Prikryl" creationdate="20151023T221114Z">
        <seg>add limit to log function</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>added a submodule reference I will never make public.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223103Z" creationid="Prikryl" creationdate="20151023T223103Z">
        <seg>added a submodule reference I will never make public.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>added cat-file</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222928Z" creationid="Prikryl" creationdate="20151023T222928Z">
        <seg>added cat-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>added some blame and merge stuff</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221528Z" creationid="Prikryl" creationdate="20151023T221528Z">
        <seg>added some blame and merge stuff</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>and `git diff --cached` to see what you’ve staged so far:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>A příkaz `git diff --cached` ukáže změny, které už připraveny jsou:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>and it works fine.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>a vše funguje na výbornou.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>are available in the git repository at:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220920Z" creationid="Prikryl" creationdate="20151023T220920Z">
        <seg>are available in the git repository at:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>autogen change</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091349Z" creationid="Prikryl" creationdate="20151024T091349Z">
        <seg>autogen change</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>avail|nickh,pjhyett,defunkt,tpw
	avail|usinclair,cdickens,ebronte|doc
	avail|schacon|lib
	avail|schacon|tests</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090838Z" creationid="Prikryl" creationdate="20151024T090838Z">
        <seg>avail|nickh,pjhyett,defunkt,tpw
	avail|usinclair,cdickens,ebronte|doc
	avail|schacon|lib
	avail|schacon|tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>back to this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>zpět na</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>bak/test.txt |    1 +
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091615Z" creationid="Prikryl" creationdate="20151024T091615Z">
        <seg>bak/test.txt |    1 +
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>base_branch = ARGV[0]
	if ARGV[1]
	  topic_branch = ARGV[1]
	else
	  topic_branch = "HEAD"
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090923Z" creationid="Prikryl" creationdate="20151024T090923Z">
        <seg>base_branch = ARGV[0]
	if ARGV[1]
	  topic_branch = ARGV[1]
	else
	  topic_branch = "HEAD"
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>changed log output to 30 from 25</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220732Z" creationid="Prikryl" creationdate="20151023T220732Z">
        <seg>changed log output to 30 from 25</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>changed the version number</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205800Z" creationid="Prikryl" creationdate="20151022T205800Z">
        <seg>changed the version number</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>check_directory_perms</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090849Z" creationid="Prikryl" creationdate="20151024T090849Z">
        <seg>check_directory_perms</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>check_fast_forward</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090853Z" creationid="Prikryl" creationdate="20151024T090853Z">
        <seg>check_fast_forward</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>chmod +x /usr/local/bin/odt-to-txt</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090727Z" creationid="Prikryl" creationdate="20151024T090727Z">
        <seg>chmod +x /usr/local/bin/odt-to-txt</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>color.branch
	color.diff
	color.interactive
	color.status</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090237Z" creationid="Prikryl" creationdate="20151024T090237Z">
        <seg>color.branch
	color.diff
	color.interactive
	color.status</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090234Z" creationid="Prikryl" creationdate="20151024T090234Z">
        <seg>commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
	Author: Scott Chacon &lt;schacon@geemail.com&gt;
	Date:   Sun May 3 00:12:22 2009 +0000</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091420Z" creationid="Prikryl" creationdate="20151024T091420Z">
        <seg>commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
	Author: Scott Chacon &lt;schacon@geemail.com&gt;
	Date:   Sun May 3 00:12:22 2009 +0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sat Mar 15 16:40:33 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205801Z" creationid="Prikryl" creationdate="20151022T205801Z">
        <seg>commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sat Mar 15 16:40:33 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 15027957951b64cf874c3557a0f3547bd83b3ff6
	Merge: 4a447f7... a6b4c97...
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sun Feb 8 19:02:46 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101851Z" creationid="Prikryl" creationdate="20151023T101851Z">
        <seg>commit 15027957951b64cf874c3557a0f3547bd83b3ff6
	Merge: 4a447f7... a6b4c97...
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sun Feb 8 19:02:46 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 14:58:32 2008 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221527Z" creationid="Prikryl" creationdate="20151023T221527Z">
        <seg>commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 14:58:32 2008 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 2b6c6db311dd76c34c66ec1c40a49405e6b527b2
	Author: Richard Geiger &lt;rmg@perforce.com&gt;
	Date:   Tue Apr 22 20:51:34 2003 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091443Z" creationid="Prikryl" creationdate="20151024T091443Z">
        <seg>commit 2b6c6db311dd76c34c66ec1c40a49405e6b527b2
	Author: Richard Geiger &lt;rmg@perforce.com&gt;
	Date:   Tue Apr 22 20:51:34 2003 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 37efa680e8473b615de980fa935944215428a35a
	Author: schacon &lt;schacon@4c93b258-373f-11de-be05-5f7a86268029&gt;
	Date:   Sun May 3 00:12:22 2009 +0000</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091417Z" creationid="Prikryl" creationdate="20151024T091417Z">
        <seg>commit 37efa680e8473b615de980fa935944215428a35a
	Author: schacon &lt;schacon@4c93b258-373f-11de-be05-5f7a86268029&gt;
	Date:   Sun May 3 00:12:22 2009 +0000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Mon Oct 22 19:38:36 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221401Z" creationid="Prikryl" creationdate="20151023T221401Z">
        <seg>commit 7482e0d16d04bea79d0dba8988cc78df655f16a0
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Mon Oct 22 19:38:36 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit 7e519590de754d079dd73b44d695a42c9d2df452
	Author: Scott Chacon &lt;schacon@example.com&gt;
	Date:   Tue Feb 3 01:00:00 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091521Z" creationid="Prikryl" creationdate="20151024T091521Z">
        <seg>commit 7e519590de754d079dd73b44d695a42c9d2df452
	Author: Scott Chacon &lt;schacon@example.com&gt;
	Date:   Tue Feb 3 01:00:00 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit a11bef06a3f659402fe7563abf99ad00de2209e6
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sat Mar 15 10:31:28 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205805Z" creationid="Prikryl" creationdate="20151022T205805Z">
        <seg>commit a11bef06a3f659402fe7563abf99ad00de2209e6
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sat Mar 15 10:31:28 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit ab1afef80fac8e34258ff41fc1b867c702daa24b
	Reflog: HEAD@{1} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: updating HEAD
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:15:24 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091815Z" creationid="Prikryl" creationdate="20151024T091815Z">
        <seg>commit ab1afef80fac8e34258ff41fc1b867c702daa24b
	Reflog: HEAD@{1} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: updating HEAD
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:15:24 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit ca8870db541a23ed867f38847eda65bf4363371d
	Author: Richard Geiger &lt;rmg@perforce.com&gt;
	Date:   Tue Apr 22 20:51:34 2003 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091437Z" creationid="Prikryl" creationdate="20151024T091437Z">
        <seg>commit ca8870db541a23ed867f38847eda65bf4363371d
	Author: Richard Geiger &lt;rmg@perforce.com&gt;
	Date:   Tue Apr 22 20:51:34 2003 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit cac0cab538b970a37ea1e769cbbde608743bc96d
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:14:29 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091616Z" creationid="Prikryl" creationdate="20151024T091616Z">
        <seg>commit cac0cab538b970a37ea1e769cbbde608743bc96d
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:14:29 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit d921970aadf03b3cf0e71becdaab3147ba71cdef
	Merge: 1c002dd... 35cfb2b...
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 15:08:43 2008 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221524Z" creationid="Prikryl" creationdate="20151023T221524Z">
        <seg>commit d921970aadf03b3cf0e71becdaab3147ba71cdef
	Merge: 1c002dd... 35cfb2b...
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Thu Dec 11 15:08:43 2008 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit d921970aadf03b3cf0e71becdaab3147ba71cdef
	Reflog: master@{1} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: merge phedders/rdocs: Merge made by recursive.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221545Z" creationid="Prikryl" creationdate="20151023T221545Z">
        <seg>commit d921970aadf03b3cf0e71becdaab3147ba71cdef
	Reflog: master@{1} (Scott Chacon &lt;schacon@gmail.com&gt;)
	Reflog message: merge phedders/rdocs: Merge made by recursive.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit de7c201a10857e5d424dbd8db880a6f24ba250f9</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T111959Z" creationid="Prikryl" creationdate="20151023T111959Z">
        <seg>commit de7c201a10857e5d424dbd8db880a6f24ba250f9</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:09:34 2009 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091620Z" creationid="Prikryl" creationdate="20151024T091620Z">
        <seg>commit fdf4fc3344e67ab068f836878b6c4951e3b15f3d
	Author: Scott Chacon &lt;schacon@gmail.com&gt;
	Date:   Fri May 22 18:09:34 2009 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>configuration variables in git-completion.bash, but failed to notice</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112048Z" creationid="Prikryl" creationdate="20151023T112048Z">
        <seg>configuration variables in git-completion.bash, but failed to notice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>data (size)\n(contents)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091454Z" creationid="Prikryl" creationdate="20151024T091454Z">
        <seg>data (size)\n(contents)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>database.xml merge=ours</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090816Z" creationid="Prikryl" creationdate="20151024T090816Z">
        <seg>database.xml merge=ours</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>date = convert_dir_to_date(dir)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091450Z" creationid="Prikryl" creationdate="20151024T091450Z">
        <seg>date = convert_dir_to_date(dir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def blame(path)
	Stage this hunk [y,n,a,d,/,j,J,g,e,?]?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221832Z" creationid="Prikryl" creationdate="20151023T221832Z">
        <seg>def blame(path)
	Stage this hunk [y,n,a,d,/,j,J,g,e,?]?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def convert_dir_to_date(dir)
	  if dir == 'current'
	    return Time.now().to_i
	  else
	    dir = dir.gsub('back_', '')
	    (year, month, day) = dir.split('_')
	    return Time.local(year, month, day).to_i
	  end
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091451Z" creationid="Prikryl" creationdate="20151024T091451Z">
        <seg>def convert_dir_to_date(dir)
	  if dir == 'current'
	    return Time.now().to_i
	  else
	    dir = dir.gsub('back_', '')
	    (year, month, day) = dir.split('_')
	    return Time.local(year, month, day).to_i
	  end
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def export_data(string)
	  print "data #{string.size}\n#{string}"
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091455Z" creationid="Prikryl" creationdate="20151024T091455Z">
        <seg>def export_data(string)
	  print "data #{string.size}\n#{string}"
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def get_acl_access_data(acl_file)
	  # read in ACL data
	  acl_file = File.read(acl_file).split("\n").reject { |line| line == '' }
	  access = {}
	  acl_file.each do |line|
	    avail, users, path = line.split('|')
	    next unless avail == 'avail'
	    users.split(',').each do |user|
	      access[user] ||= []
	      access[user] &lt;&lt; path
	    end
	  end
	  access
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090839Z" creationid="Prikryl" creationdate="20151024T090839Z">
        <seg>def get_acl_access_data(acl_file)
	  # read in ACL data
	  acl_file = File.read(acl_file).split("\n").reject { |line| line == '' }
	  access = {}
	  acl_file.each do |line|
	    avail, users, path = line.split('|')
	    next unless avail == 'avail'
	    users.split(',').each do |user|
	      access[user] ||= []
	      access[user] &lt;&lt; path
	    end
	  end
	  access
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def inline_data(file, code = 'M', mode = '644')
	  content = File.read(file)
	  puts "#{code} #{mode} inline #{file}"
	  export_data(content)
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091458Z" creationid="Prikryl" creationdate="20151024T091458Z">
        <seg>def inline_data(file, code = 'M', mode = '644')
	  content = File.read(file)
	  puts "#{code} #{mode} inline #{file}"
	  export_data(content)
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def log(treeish = 'master')
	-    command("git log #{treeish}")
	+    command("git log -n 20 #{treeish}")
	   end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221018Z" creationid="Prikryl" creationdate="20151023T221018Z">
        <seg>def log(treeish = 'master')
	-    command("git log #{treeish}")
	+    command("git log -n 20 #{treeish}")
	   end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def log(treeish = 'master')
	-    command("git log -n 25 #{treeish}")
	+    command("git log -n 30 #{treeish}")
	   end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221831Z" creationid="Prikryl" creationdate="20151023T221831Z">
        <seg>def log(treeish = 'master')
	-    command("git log -n 25 #{treeish}")
	+    command("git log -n 30 #{treeish}")
	   end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>def ls_tree(treeish = 'master')
	--
	1.6.2.rc1.20.g8c5b.dirty</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221019Z" creationid="Prikryl" creationdate="20151023T221019Z">
        <seg>def ls_tree(treeish = 'master')
	--
	1.6.2.rc1.20.g8c5b.dirty</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>defined($ARGV[0])) {
		print STDERR "No filename given!\n";
		print STDERR "Usage: $0 filename\n";
		exit 1;
	}</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090724Z" creationid="Prikryl" creationdate="20151024T090724Z">
        <seg>defined($ARGV[0])) {
		print STDERR "No filename given!\n";
		print STDERR "Usage: $0 filename\n";
		exit 1;
	}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>df44483a (diff --stat: add config option to limit graph width,</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112005Z" creationid="Prikryl" creationdate="20151023T112005Z">
        <seg>df44483a (diff --stat: add config option to limit graph width,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/Rakefile b/Rakefile
	index a874b73..8f94139 100644
	--- a/Rakefile
	+++ b/Rakefile
	@@ -5,5 +5,5 @@ require 'rake/gempackagetask'
	 spec = Gem::Specification.new do |s|
	     s.name      =   "simplegit"
	-    s.version   =   "0.1.0"
	+    s.version   =   "0.1.1"
	     s.author    =   "Scott Chacon"
	     s.email     =   "schacon@gee-mail.com</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205816Z" creationid="Prikryl" creationdate="20151022T205816Z">
        <seg>diff --git a/Rakefile b/Rakefile
	index a874b73..8f94139 100644
	--- a/Rakefile
	+++ b/Rakefile
	@@ -5,5 +5,5 @@ require 'rake/gempackagetask'
	 spec = Gem::Specification.new do |s|
	     s.name      =   "simplegit"
	-    s.version   =   "0.1.0"
	+    s.version   =   "0.1.1"
	     s.author    =   "Scott Chacon"
	     s.email     =   "schacon@gee-mail.com</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/Rakefile b/Rakefile
	index a874b73..8f94139 100644
	--- a/Rakefile
	+++ b/Rakefile
	@@ -7,3 +7,3 @@ spec = Gem::Specification.new do |s|
	    s.name      =   "simplegit"
	    s.version   =   [-"0.1.0"-]{+"0.1.1"+}
	    s.author    =   "Scott Chacon"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205835Z" creationid="Prikryl" creationdate="20151022T205835Z">
        <seg>diff --git a/Rakefile b/Rakefile
	index a874b73..8f94139 100644
	--- a/Rakefile
	+++ b/Rakefile
	@@ -7,3 +7,3 @@ spec = Gem::Specification.new do |s|
	    s.name      =   "simplegit"
	    s.version   =   [-"0.1.0"-]{+"0.1.1"+}
	    s.author    =   "Scott Chacon"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/image.png b/image.png
	index 88839c4..4afcb7c 100644
	--- a/image.png
	+++ b/image.png
	@@ -1,12 +1,12 @@
	 ExifTool Version Number         : 7.74
	-File Size                       : 70 kB
	-File Modification Date/Time     : 2009:04:17 10:12:35-07:00
	+File Size                       : 94 kB
	+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
	 File Type                       : PNG
	 MIME Type                       : image/png
	-Image Width                     : 1058
	-Image Height                    : 889
	+Image Width                     : 1056
	+Image Height                    : 827
	 Bit Depth                       : 8
	 Color Type                      : RGB with Alpha</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090736Z" creationid="Prikryl" creationdate="20151024T090736Z">
        <seg>diff --git a/image.png b/image.png
	index 88839c4..4afcb7c 100644
	--- a/image.png
	+++ b/image.png
	@@ -1,12 +1,12 @@
	 ExifTool Version Number         : 7.74
	-File Size                       : 70 kB
	-File Modification Date/Time     : 2009:04:17 10:12:35-07:00
	+File Size                       : 94 kB
	+File Modification Date/Time     : 2009:04:21 07:02:43-07:00
	 File Type                       : PNG
	 MIME Type                       : image/png
	-Image Width                     : 1058
	-Image Height                    : 889
	+Image Width                     : 1056
	+Image Height                    : 827
	 Bit Depth                       : 8
	 Color Type                      : RGB with Alpha</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
	index 76f47bc..f9815f1 100644
	--- a/lib/simplegit.rb
	+++ b/lib/simplegit.rb
	@@ -14,7 +14,7 @@ class SimpleGit
	   end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221016Z" creationid="Prikryl" creationdate="20151023T221016Z">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
	index 76f47bc..f9815f1 100644
	--- a/lib/simplegit.rb
	+++ b/lib/simplegit.rb
	@@ -14,7 +14,7 @@ class SimpleGit
	   end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
	index a0a60ae..47c6340 100644
	--- a/lib/simplegit.rb
	+++ b/lib/simplegit.rb
	@@ -18,8 +18,3 @@ class SimpleGit
	     end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205817Z" creationid="Prikryl" creationdate="20151022T205817Z">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
	index a0a60ae..47c6340 100644
	--- a/lib/simplegit.rb
	+++ b/lib/simplegit.rb
	@@ -18,8 +18,3 @@ class SimpleGit
	     end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
	index dd5ecc4..57399e0 100644
	--- a/lib/simplegit.rb
	+++ b/lib/simplegit.rb
	@@ -22,7 +22,7 @@ class SimpleGit
	   end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221830Z" creationid="Prikryl" creationdate="20151023T221830Z">
        <seg>diff --git a/lib/simplegit.rb b/lib/simplegit.rb
	index dd5ecc4..57399e0 100644
	--- a/lib/simplegit.rb
	+++ b/lib/simplegit.rb
	@@ -22,7 +22,7 @@ class SimpleGit
	   end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>edit f7f3f6d changed my name a bit
	pick 310154e updated README formatting and added blame
	pick a5f4a0d added cat-file</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222648Z" creationid="Prikryl" creationdate="20151023T222648Z">
        <seg>edit f7f3f6d changed my name a bit
	pick 310154e updated README formatting and added blame
	pick a5f4a0d added cat-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>else</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091409Z" creationid="Prikryl" creationdate="20151024T091409Z">
        <seg>else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>end
	-
	-if $0 == __FILE__
	-  git = SimpleGit.new
	-  puts git.show
	-end
	\ No newline at end of file</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205819Z" creationid="Prikryl" creationdate="20151022T205819Z">
        <seg>end
	-
	-if $0 == __FILE__
	-  git = SimpleGit.new
	-  puts git.show
	-end
	\ No newline at end of file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fetch = +refs/heads/master:refs/remotes/origin/master</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091737Z" creationid="Prikryl" creationdate="20151024T091737Z">
        <seg>fetch = +refs/heads/master:refs/remotes/origin/master</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fetch = +refs/heads/qa*:refs/remotes/origin/qa*</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091743Z" creationid="Prikryl" creationdate="20151024T091743Z">
        <seg>fetch = +refs/heads/qa*:refs/remotes/origin/qa*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fi</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091411Z" creationid="Prikryl" creationdate="20151024T091411Z">
        <seg>fi</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>files_modified = `git diff-index --cached --name-only HEAD`</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090922Z" creationid="Prikryl" creationdate="20151024T090922Z">
        <seg>files_modified = `git diff-index --cached --name-only HEAD`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>files_modified = `git diff-index --cached --name-only HEAD`.split("\n")
	  files_modified.each do |path|
	    next if path.size == 0
	    has_file_access = false
	    access[$user].each do |access_path|
	    if !access_path || (path.index(access_path) == 0)
	      has_file_access = true
	    end
	    if !has_file_access
	      puts "[POLICY] You do not have access to push to #{path}"
	      exit 1
	    end
	  end
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090917Z" creationid="Prikryl" creationdate="20151024T090917Z">
        <seg>files_modified = `git diff-index --cached --name-only HEAD`.split("\n")
	  files_modified.each do |path|
	    next if path.size == 0
	    has_file_access = false
	    access[$user].each do |access_path|
	    if !access_path || (path.index(access_path) == 0)
	      has_file_access = true
	    end
	    if !has_file_access
	      puts "[POLICY] You do not have access to push to #{path}"
	      exit 1
	    end
	  end
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>files_modified = `git log -1 --name-only --pretty=format:'' #{ref}`</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090921Z" creationid="Prikryl" creationdate="20151024T090921Z">
        <seg>files_modified = `git log -1 --name-only --pretty=format:'' #{ref}`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>first commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205808Z" creationid="Prikryl" creationdate="20151022T205808Z">
        <seg>first commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>first commit with submodule rack
	$ cd rack/
	$ git log -1
	commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433
	Author: Christian Neukirchen &lt;chneukirchen@gmail.com&gt;
	Date:   Wed Mar 25 14:49:04 2009 +0100</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223028Z" creationid="Prikryl" creationdate="20151023T223028Z">
        <seg>first commit with submodule rack
	$ cd rack/
	$ git log -1
	commit 08d709f78b8c5b0fbeb7821e37fa53e69afcf433
	Author: Christian Neukirchen &lt;chneukirchen@gmail.com&gt;
	Date:   Wed Mar 25 14:49:04 2009 +0100</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fixed install - go to trunk</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091418Z" creationid="Prikryl" creationdate="20151024T091418Z">
        <seg>fixed install - go to trunk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>fixed refs handling, added gc auto, updated tests</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221523Z" creationid="Prikryl" creationdate="20151023T221523Z">
        <seg>fixed refs handling, added gc auto, updated tests</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git clone git://github.com/schacon/simplegit-progit.git</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205756Z" creationid="Prikryl" creationdate="20151022T205756Z">
        <seg>git clone git://github.com/schacon/simplegit-progit.git</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git commit --amend</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222707Z" creationid="Prikryl" creationdate="20151023T222707Z">
        <seg>git commit --amend</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git config --global merge.ours.driver true</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090818Z" creationid="Prikryl" creationdate="20151024T090818Z">
        <seg>git config --global merge.ours.driver true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git daemon --reuseaddr --base-path=/opt/git/ /opt/git/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105513Z" creationid="Prikryl" creationdate="20151023T105513Z">
        <seg>git daemon --reuseaddr --base-path=/opt/git/ /opt/git/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git rebase --continue</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222756Z" creationid="Prikryl" creationdate="20151023T222756Z">
        <seg>git rebase --continue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090926Z" creationid="Prikryl" creationdate="20151024T090926Z">
        <seg>git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git svn info</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091407Z" creationid="Prikryl" creationdate="20151024T091407Z">
        <seg>git svn info</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git-completion.bash: lexical sorting for diff.statGraphWidth</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112004Z" creationid="Prikryl" creationdate="20151023T112004Z">
        <seg>git-completion.bash: lexical sorting for diff.statGraphWidth</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git-svn-id: file:///tmp/test-svn/trunk@79 4c93b258-373f-11de-be05-5f7a86268029</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091334Z" creationid="Prikryl" creationdate="20151024T091334Z">
        <seg>git-svn-id: file:///tmp/test-svn/trunk@79 4c93b258-373f-11de-be05-5f7a86268029</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
	    be05-5f7a86268029
they look like this:</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091419Z" creationid="Prikryl" creationdate="20151024T091419Z">
        <seg>git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
	    be05-5f7a86268029
they look like this:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git://githost/simplegit.git featureA</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220922Z" creationid="Prikryl" creationdate="20151023T220922Z">
        <seg>git://githost/simplegit.git featureA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git:x:1000:1000::/home/git:/bin/sh</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105005Z" creationid="Prikryl" creationdate="20151023T105005Z">
        <seg>git:x:1000:1000::/home/git:/bin/sh</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>git:x:1000:1000::/home/git:/usr/bin/git-shell</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105006Z" creationid="Prikryl" creationdate="20151023T105006Z">
        <seg>git:x:1000:1000::/home/git:/usr/bin/git-shell</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
	gpg: Can't check signature: public key not found
	error: could not verify the tag 'v1.4.2.1'</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102228Z" creationid="Prikryl" creationdate="20151023T102228Z">
        <seg>gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
	gpg: Can't check signature: public key not found
	error: could not verify the tag 'v1.4.2.1'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
	gpg: Good signature from "Junio C Hamano &lt;junkio@cox.net&gt;"
	gpg:                 aka "[jpeg image of size 1513]"
	Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102226Z" creationid="Prikryl" creationdate="20151023T102226Z">
        <seg>gpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID F3119B9A
	gpg: Good signature from "Junio C Hamano &lt;junkio@cox.net&gt;"
	gpg:                 aka "[jpeg image of size 1513]"
	Primary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>hahahahaha!</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223108Z" creationid="Prikryl" creationdate="20151023T223108Z">
        <seg>hahahahaha!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>hello scott, this is git@git running gitolite3 v3.01-18-g9609868 on git 1.7.4.4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105505Z" creationid="Prikryl" creationdate="20151023T105505Z">
        <seg>hello scott, this is git@git running gitolite3 v3.01-18-g9609868 on git 1.7.4.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>hotfix branch based back at your master branch point.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Větev „hotfix“ začleněná zpět v místě hlavní větve.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>http://git-scm.com/download</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204748Z" creationid="Prikryl" creationdate="20151022T204748Z">
        <seg>http://git-scm.com/download</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>http://msysgit.github.io</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204848Z" creationid="Prikryl" creationdate="20151022T204848Z">
        <seg>http://msysgit.github.io</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>http://sourceforge.net/projects/git-osx-installer/</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T204833Z" creationid="Prikryl" creationdate="20151022T204833Z">
        <seg>http://sourceforge.net/projects/git-osx-installer/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090240Z" creationid="Prikryl" creationdate="20151024T090240Z">
        <seg>http://www.perforce.com/product/components/perforce-visual-merge-and-diff-tools</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>https://git.wiki.kernel.org/index.php/GitHosting</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105524Z" creationid="Prikryl" creationdate="20151023T105524Z">
        <seg>https://git.wiki.kernel.org/index.php/GitHosting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN
	Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/
	=WryJ
	-----END PGP SIGNATURE-----
	commit 15027957951b64cf874c3557a0f3547bd83b3ff6
	Merge: 4a447f7... a6b4c97...
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sun Feb 8 19:02:46 2009 -0800</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101906Z" creationid="Prikryl" creationdate="20151023T101906Z">
        <seg>iEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN
	Ki0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/
	=WryJ
	-----END PGP SIGNATURE-----
	commit 15027957951b64cf874c3557a0f3547bd83b3ff6
	Merge: 4a447f7... a6b4c97...
	Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
	Date:   Sun Feb 8 19:02:46 2009 -0800</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>if !$regex.match(message)
	  puts "[POLICY] Your message is not formatted correctly"
	  exit 1
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090910Z" creationid="Prikryl" creationdate="20151024T090910Z">
        <seg>if !$regex.match(message)
	  puts "[POLICY] Your message is not formatted correctly"
	  exit 1
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>if (!</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090723Z" creationid="Prikryl" creationdate="20151024T090723Z">
        <seg>if (!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>if git rev-parse --git-dir &gt; /dev/null 2&gt;&amp;1 &amp;&amp; [[ $1 == "info" ]] ; then</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091406Z" creationid="Prikryl" creationdate="20151024T091406Z">
        <seg>if git rev-parse --git-dir &gt; /dev/null 2&gt;&amp;1 &amp;&amp; [[ $1 == "info" ]] ; then</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>ignore *.gem</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221601Z" creationid="Prikryl" creationdate="20151023T221601Z">
        <seg>ignore *.gem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>imported from back_2009_02_03</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091522Z" creationid="Prikryl" creationdate="20151024T091522Z">
        <seg>imported from back_2009_02_03</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>imported from current</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091520Z" creationid="Prikryl" creationdate="20151024T091520Z">
        <seg>imported from current</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>in the Git source code repository.</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>spuštěným ve zdrojovém kódu Git.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>in the list.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112056Z" creationid="Prikryl" creationdate="20151023T112056Z">
        <seg>in the list.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>initctl start local-git-daemon</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105518Z" creationid="Prikryl" creationdate="20151023T105518Z">
        <seg>initctl start local-git-daemon</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>jessica@example.com
	Message-ID to be used as In-Reply-To for the first email?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221034Z" creationid="Prikryl" creationdate="20151023T221034Z">
        <seg>jessica@example.com
	Message-ID to be used as In-Reply-To for the first email?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>last_mark = nil</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091445Z" creationid="Prikryl" creationdate="20151024T091445Z">
        <seg>last_mark = nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |    2 +-
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220613Z" creationid="Prikryl" creationdate="20151023T220613Z">
        <seg>lib/simplegit.rb |    2 +-
	 1 files changed, 1 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |    4 ++++
	 1 files changed, 4 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220724Z" creationid="Prikryl" creationdate="20151023T220724Z">
        <seg>lib/simplegit.rb |    4 ++++
	 1 files changed, 4 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |    5 -----
	 1 file changed, 5 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205839Z" creationid="Prikryl" creationdate="20151022T205839Z">
        <seg>lib/simplegit.rb |    5 -----
	 1 file changed, 5 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>lib/simplegit.rb |   10 +++++++++-
	 1 files changed, 9 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220926Z" creationid="Prikryl" creationdate="20151023T220926Z">
        <seg>lib/simplegit.rb |   10 +++++++++-
	 1 files changed, 9 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>mark = convert_dir_to_mark(dir)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091448Z" creationid="Prikryl" creationdate="20151024T091448Z">
        <seg>mark = convert_dir_to_mark(dir)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>modified repo a bit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091816Z" creationid="Prikryl" creationdate="20151024T091816Z">
        <seg>modified repo a bit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my $content = '';
	open my $fh, '-|', 'unzip', '-qq', '-p', $ARGV[0], 'content.xml' or die $!;
	{
		local $/ = undef;  # slurp mode
		$content = &lt;$fh&gt;;
	}
	close $fh;
	$_ = $content;
	s/&lt;text:span\b[^&gt;]*&gt;//g;           # remove spans
	s/&lt;text:h\b[^&gt;]*&gt;/\n\n*****  /g;   # headers
	s/&lt;text:list-item\b[^&gt;]*&gt;\s*&lt;text:p\b[^&gt;]*&gt;/\n    --  /g;  # list items
	s/&lt;text:list\b[^&gt;]*&gt;/\n\n/g;       # lists
	s/&lt;text:p\b[^&gt;]*&gt;/\n  /g;          # paragraphs
	s/&lt;[^&gt;]+&gt;//g;                      # remove all XML tags
	s/\n{2,}/\n\n/g;                   # remove multiple blank lines
	s/\A\n+//;                         # remove leading blank lines
	print "\n", $_, "\n\n";</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090725Z" creationid="Prikryl" creationdate="20151024T090725Z">
        <seg>my $content = '';
	open my $fh, '-|', 'unzip', '-qq', '-p', $ARGV[0], 'content.xml' or die $!;
	{
		local $/ = undef;  # slurp mode
		$content = &lt;$fh&gt;;
	}
	close $fh;
	$_ = $content;
	s/&lt;text:span\b[^&gt;]*&gt;//g;           # remove spans
	s/&lt;text:h\b[^&gt;]*&gt;/\n\n*****  /g;   # headers
	s/&lt;text:list-item\b[^&gt;]*&gt;\s*&lt;text:p\b[^&gt;]*&gt;/\n    --  /g;  # list items
	s/&lt;text:list\b[^&gt;]*&gt;/\n\n/g;       # lists
	s/&lt;text:p\b[^&gt;]*&gt;/\n  /g;          # paragraphs
	s/&lt;[^&gt;]+&gt;//g;                      # remove all XML tags
	s/\n{2,}/\n\n/g;                   # remove multiple blank lines
	s/\A\n+//;                         # remove leading blank lines
	print "\n", $_, "\n\n";</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my signed 1.5 tag
	-----BEGIN PGP SIGNATURE-----
	Version: GnuPG v1.4.8 (Darwin)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101904Z" creationid="Prikryl" creationdate="20151023T101904Z">
        <seg>my signed 1.5 tag
	-----BEGIN PGP SIGNATURE-----
	Version: GnuPG v1.4.8 (Darwin)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>my version 1.4</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101847Z" creationid="Prikryl" creationdate="20151023T101847Z">
        <seg>my version 1.4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>new.txt  |    1 +
	 test.txt |    2 +-
	 2 files changed, 2 insertions(+), 1 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091619Z" creationid="Prikryl" creationdate="20151024T091619Z">
        <seg>new.txt  |    1 +
	 test.txt |    2 +-
	 2 files changed, 2 insertions(+), 1 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>nothing added to commit but untracked files present (use "git add" to track)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205036Z" creationid="Prikryl" creationdate="20151022T205036Z">
        <seg>nothing added to commit but untracked files present (use "git add" to track)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>or the second version:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>Nebo do druhé verze:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>or you can edit your `~/.gitconfig` file to add these lines:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>nebo můžete upravit soubor `~/.gitconfig` a vložit následující řádky:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>path old-file old-hex old-mode new-file new-hex new-mode</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090245Z" creationid="Prikryl" creationdate="20151024T090245Z">
        <seg>path old-file old-hex old-mode new-file new-hex new-mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>pick 310154e updated README formatting and added blame
	pick f7f3f6d changed my name a bit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222759Z" creationid="Prikryl" creationdate="20151023T222759Z">
        <seg>pick 310154e updated README formatting and added blame
	pick f7f3f6d changed my name a bit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>pick f7f3f6d changed my name a bit
	edit 310154e updated README formatting and added blame
	pick a5f4a0d added cat-file</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222930Z" creationid="Prikryl" creationdate="20151023T222930Z">
        <seg>pick f7f3f6d changed my name a bit
	edit 310154e updated README formatting and added blame
	pick a5f4a0d added cat-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>pick f7f3f6d changed my name a bit
	pick 310154e updated README formatting and added blame
	pick a5f4a0d added cat-file</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222636Z" creationid="Prikryl" creationdate="20151023T222636Z">
        <seg>pick f7f3f6d changed my name a bit
	pick 310154e updated README formatting and added blame
	pick a5f4a0d added cat-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>pick f7f3f6d changed my name a bit
	squash 310154e updated README formatting and added blame
	squash a5f4a0d added cat-file</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222810Z" creationid="Prikryl" creationdate="20151023T222810Z">
        <seg>pick f7f3f6d changed my name a bit
	squash 310154e updated README formatting and added blame
	squash a5f4a0d added cat-file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>puts "Enforcing Policies... \n(#{refname}) (#{oldrev[0,6]}) (#{newrev[0,6]})"</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090825Z" creationid="Prikryl" creationdate="20151024T090825Z">
        <seg>puts "Enforcing Policies... \n(#{refname}) (#{oldrev[0,6]}) (#{newrev[0,6]})"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>puts 'deleteall'
	Dir.glob("**/*").each do |file|
	  next if !File.file?(file)
	  inline_data(file)
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091456Z" creationid="Prikryl" creationdate="20151024T091456Z">
        <seg>puts 'deleteall'
	Dir.glob("**/*").each do |file|
	  next if !File.file?(file)
	  inline_data(file)
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>refname = ARGV[0]
	oldrev  = ARGV[1]
	newrev  = ARGV[2]
	user    = ENV['USER']</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090822Z" creationid="Prikryl" creationdate="20151024T090822Z">
        <seg>refname = ARGV[0]
	oldrev  = ARGV[1]
	newrev  = ARGV[2]
	user    = ENV['USER']</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (14/14), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104633Z" creationid="Prikryl" creationdate="20151023T104633Z">
        <seg>remote: Compressing objects: 100% (14/14), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (1465/1465), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223118Z" creationid="Prikryl" creationdate="20151023T223118Z">
        <seg>remote: Compressing objects: 100% (1465/1465), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (1534/1534), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223015Z" creationid="Prikryl" creationdate="20151023T223015Z">
        <seg>remote: Compressing objects: 100% (1534/1534), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (3/3), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223057Z" creationid="Prikryl" creationdate="20151023T223057Z">
        <seg>remote: Compressing objects: 100% (3/3), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (4/4), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223040Z" creationid="Prikryl" creationdate="20151023T223040Z">
        <seg>remote: Compressing objects: 100% (4/4), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Compressing objects: 100% (41/41), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101822Z" creationid="Prikryl" creationdate="20151023T101822Z">
        <seg>remote: Compressing objects: 100% (41/41), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 15 (delta 5), reused 0 (delta 0)
	Unpacking objects: 100% (15/15), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T104634Z" creationid="Prikryl" creationdate="20151023T104634Z">
        <seg>remote: Total 15 (delta 5), reused 0 (delta 0)
	Unpacking objects: 100% (15/15), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 1857 (delta 0), reused 0 (delta 0)
	Receiving objects: 100% (1857/1857), 374.35 KiB | 193.00 KiB/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101808Z" creationid="Prikryl" creationdate="20151023T101808Z">
        <seg>remote: Total 1857 (delta 0), reused 0 (delta 0)
	Receiving objects: 100% (1857/1857), 374.35 KiB | 193.00 KiB/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 3 (delta 1), reused 2 (delta 0)
	Unpacking objects: 100% (3/3), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223058Z" creationid="Prikryl" creationdate="20151023T223058Z">
        <seg>remote: Total 3 (delta 1), reused 2 (delta 0)
	Unpacking objects: 100% (3/3), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 3181 (delta 1951), reused 2623 (delta 1603)
	Receiving objects: 100% (3181/3181), 675.42 KiB | 173 KiB/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223046Z" creationid="Prikryl" creationdate="20151023T223046Z">
        <seg>remote: Total 3181 (delta 1951), reused 2623 (delta 1603)
	Receiving objects: 100% (3181/3181), 675.42 KiB | 173 KiB/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 3181 (delta 1951), reused 2623 (delta 1603)
	Receiving objects: 100% (3181/3181), 675.42 KiB | 422 KiB/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223016Z" creationid="Prikryl" creationdate="20151023T223016Z">
        <seg>remote: Total 3181 (delta 1951), reused 2623 (delta 1603)
	Receiving objects: 100% (3181/3181), 675.42 KiB | 422 KiB/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
	Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223125Z" creationid="Prikryl" creationdate="20151023T223125Z">
        <seg>remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
	Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
	Receiving objects: 100% (3184/3184), 677.42 KiB | 88 KiB/s, done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223119Z" creationid="Prikryl" creationdate="20151023T223119Z">
        <seg>remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
	Receiving objects: 100% (3184/3184), 677.42 KiB | 88 KiB/s, done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 44 (delta 24), reused 1 (delta 0)
	Unpacking objects: 100% (44/44), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T101823Z" creationid="Prikryl" creationdate="20151023T101823Z">
        <seg>remote: Total 44 (delta 24), reused 1 (delta 0)
	Unpacking objects: 100% (44/44), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>remote: Total 6 (delta 0), reused 0 (delta 0)
	Receiving objects: 100% (6/6), done.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T223042Z" creationid="Prikryl" creationdate="20151023T223042Z">
        <seg>remote: Total 6 (delta 0), reused 0 (delta 0)
	Receiving objects: 100% (6/6), done.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>removed invalid default value</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T220604Z" creationid="Prikryl" creationdate="20151023T220604Z">
        <seg>removed invalid default value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>removed unnecessary test code</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151022T205803Z" creationid="Prikryl" creationdate="20151022T205803Z">
        <seg>removed unnecessary test code</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>repo @oss_repos
	    RW  int$                = @interns
	    RW  eng-                = @engineers
	    RW  refs/tags/rc[0-9]   = @engineers
	    RW+                     = @admins</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105445Z" creationid="Prikryl" creationdate="20151023T105445Z">
        <seg>repo @oss_repos
	    RW  int$                = @interns
	    RW  eng-                = @engineers
	    RW  refs/tags/rc[0-9]   = @engineers
	    RW+                     = @admins</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>repo foo</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105452Z" creationid="Prikryl" creationdate="20151023T105452Z">
        <seg>repo foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>repo gitolite
	    RW+                     = sitaram</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105448Z" creationid="Prikryl" creationdate="20151023T105448Z">
        <seg>repo gitolite
	    RW+                     = sitaram</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>repo gitolite-admin
	    RW+                 = scott</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105437Z" creationid="Prikryl" creationdate="20151023T105437Z">
        <seg>repo gitolite-admin
	    RW+                 = scott</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>repo testing
	    RW+                 = @all</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105438Z" creationid="Prikryl" creationdate="20151023T105438Z">
        <seg>repo testing
	    RW+                 = @all</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>return mark</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091459Z" creationid="Prikryl" creationdate="20151024T091459Z">
        <seg>return mark</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>schacon = Scott Chacon &lt;schacon@geemail.com&gt;
	selse = Someo Nelse &lt;selse@geemail.com&gt;</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091413Z" creationid="Prikryl" creationdate="20151024T091413Z">
        <seg>schacon = Scott Chacon &lt;schacon@geemail.com&gt;
	selse = Someo Nelse &lt;selse@geemail.com&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>second commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091618Z" creationid="Prikryl" creationdate="20151024T091618Z">
        <seg>second commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>secure this thing</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222946Z" creationid="Prikryl" creationdate="20151023T222946Z">
        <seg>secure this thing</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>seeing if this helps the gem</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221358Z" creationid="Prikryl" creationdate="20151023T221358Z">
        <seg>seeing if this helps the gem</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>source ~/git-completion.bash</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102255Z" creationid="Prikryl" creationdate="20151023T102255Z">
        <seg>source ~/git-completion.bash</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>start on startup
	stop on shutdown
	exec /usr/bin/git daemon \
	    --user=git --group=git \
	    --reuseaddr \
	    --base-path=/opt/git/ \
	    /opt/git/
	respawn</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T105517Z" creationid="Prikryl" creationdate="20151023T105517Z">
        <seg>start on startup
	stop on shutdown
	exec /usr/bin/git daemon \
	    --user=git --group=git \
	    --reuseaddr \
	    --base-path=/opt/git/ \
	    /opt/git/
	respawn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>subject line</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T172552Z" creationid="Prikryl" creationdate="20151023T223144Z">
        <seg>řádek předmětu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>target_shas = `git rev-list #{base_branch}..#{topic_branch}`.split("\n")
	remote_refs = `git branch -r`.split("\n").map { |r| r.strip }</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090924Z" creationid="Prikryl" creationdate="20151024T090924Z">
        <seg>target_shas = `git rev-list #{base_branch}..#{topic_branch}`.split("\n")
	remote_refs = `git branch -r`.split("\n").map { |r| r.strip }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>target_shas.each do |sha|
	  remote_refs.each do |remote_ref|
	    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
	    if shas_pushed.split("\n").include?(sha)
	      puts "[POLICY] Commit #{sha} has already been pushed to #{remote_ref}"
	      exit 1
	    end
	  end
	end</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090925Z" creationid="Prikryl" creationdate="20151024T090925Z">
        <seg>target_shas.each do |sha|
	  remote_refs.each do |remote_ref|
	    shas_pushed = `git rev-list ^#{sha}^@ refs/remotes/#{remote_ref}`
	    if shas_pushed.split("\n").include?(sha)
	      puts "[POLICY] Commit #{sha} has already been pushed to #{remote_ref}"
	      exit 1
	    end
	  end
	end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>test for current head</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102444Z" creationid="Prikryl" creationdate="20151023T102444Z">
        <seg>test for current head</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>test tag</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091707Z" creationid="Prikryl" creationdate="20151024T091707Z">
        <seg>test tag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>test.txt |    1 +
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091621Z" creationid="Prikryl" creationdate="20151024T091621Z">
        <seg>test.txt |    1 +
	 1 files changed, 1 insertions(+), 0 deletions(-)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>test/ export-ignore</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090811Z" creationid="Prikryl" creationdate="20151024T090811Z">
        <seg>test/ export-ignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>that the list is sorted alphabetically.</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T112049Z" creationid="Prikryl" creationdate="20151023T112049Z">
        <seg>that the list is sorted alphabetically.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>third commit</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091610Z" creationid="Prikryl" creationdate="20151024T091610Z">
        <seg>third commit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>to this:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>na:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>updated README formatting and added blame</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222818Z" creationid="Prikryl" creationdate="20151023T222818Z">
        <seg>updated README formatting and added blame</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>updated rakefile
	...</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102239Z" creationid="Prikryl" creationdate="20151023T102239Z">
        <seg>updated rakefile
	...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>updated the changelog</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T091357Z" creationid="Prikryl" creationdate="20151024T091357Z">
        <seg>updated the changelog</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>updated the gemspec to hopefully work better</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221402Z" creationid="Prikryl" creationdate="20151023T221402Z">
        <seg>updated the gemspec to hopefully work better</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>version 1.2
	commit 9fceb02d0ae598e95dc970b74767f19372d61af8
	Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;
	Date:   Sun Apr 27 20:43:35 2008 -0700</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T102237Z" creationid="Prikryl" creationdate="20151023T102237Z">
        <seg>version 1.2
	commit 9fceb02d0ae598e95dc970b74767f19372d61af8
	Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;
	Date:   Sun Apr 27 20:43:35 2008 -0700</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>what happened</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T172602Z" creationid="Prikryl" creationdate="20151023T223146Z">
        <seg>co bylo provedeno</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>where `convert_dir_to_date` is defined as</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>kde `convert_dir_to_date` je definováno jako:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>y</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T221036Z" creationid="Prikryl" creationdate="20151023T221036Z">
        <seg>y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>y - stage this hunk
	n - do not stage this hunk
	a - stage this and all the remaining hunks in the file
	d - do not stage this hunk nor any of the remaining hunks in the file
	g - select a hunk to go to
	/ - search for a hunk matching the given regex
	j - leave this hunk undecided, see next undecided hunk
	J - leave this hunk undecided, see next hunk
	k - leave this hunk undecided, see previous undecided hunk
	K - leave this hunk undecided, see previous hunk
	s - split the current hunk into smaller hunks
	e - manually edit the current hunk
	?</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151023T222540Z" creationid="Prikryl" creationdate="20151023T221838Z">
        <seg>y - stage this hunk
	n - do not stage this hunk
	a - stage this and all the remaining hunks in the file
	d - do not stage this hunk nor any of the remaining hunks in the file
	g - select a hunk to go to
	/ - search for a hunk matching the given regex
	j - leave this hunk undecided, see next undecided hunk
	J - leave this hunk undecided, see next hunk
	k - leave this hunk undecided, see previous undecided hunk
	K - leave this hunk undecided, see previous hunk
	s - split the current hunk into smaller hunks
	e - manually edit the current hunk
	? - print help

V českém překladu:

	Připravit tento soubor změn [y,n,a,d,/,j,J,g,e,?]? ?
	y - připravit soubor změn k zapsání
	n - nepřipravovat soubor změn k zapsání
	a - připravit tento soubor změn i všechny ostatní komplexy v souboru
	d - nepřipravovat tento soubor změn ani žádné další komplexy v souboru
	g - vybrat soubor změn, k němuž má systém přejít
	/ - najít soubor změn odpovídající danému regulárnímu výrazu
	j - nechat tento soubor změn nerozhodnutý, zobrazit další nerozhodnutý
	J - nechat tento soubor změn nerozhodnutý, zobrazit další komplex
	k - nechat tento soubor změn nerozhodnutý, zobrazit předchozí nerozhodnutý
	K - nechat tento soubor změn nerozhodnutý, zobrazit předchozí komplex
	s - rozdělit aktuální soubor změn do menších komplexů
	e - ručně editovat aktuální soubor změn
	?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>you have to use</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>budete muset použít:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>you put this script:</seg>
      </tuv>
      <tuv lang="CS" changeid="progitSync" changedate="20151012T102818Z" creationid="progitSync" creationdate="20151012T102818Z">
        <seg>vložte tento skript:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN">
        <seg>{"defunkt"=&gt;[nil],
	 "tpw"=&gt;[nil],
	 "nickh"=&gt;[nil],
	 "pjhyett"=&gt;[nil],
	 "schacon"=&gt;["lib", "tests"],
	 "cdickens"=&gt;["doc"],
	 "usinclair"=&gt;["doc"],
	 "ebronte"=&gt;["doc"]}</seg>
      </tuv>
      <tuv lang="CS" changeid="Prikryl" changedate="20151024T090841Z" creationid="Prikryl" creationdate="20151024T090841Z">
        <seg>{"defunkt"=&gt;[nil],
	 "tpw"=&gt;[nil],
	 "nickh"=&gt;[nil],
	 "pjhyett"=&gt;[nil],
	 "schacon"=&gt;["lib", "tests"],
	 "cdickens"=&gt;["doc"],
	 "usinclair"=&gt;["doc"],
	 "ebronte"=&gt;["doc"]}</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
