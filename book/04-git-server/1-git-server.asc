== Git na serveru

(((serving repositories)))
At this point, you should be able to do most of the day-to-day tasks for which you'll be using Git.
However, in order to do any collaboration in Git, you'll need to have a remote Git repository.
Although you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they're working on if you're not careful.
Furthermore, you want your collaborators to be able to access the repository even if your computer is offline – having a more reliable common repository is often useful.
Jako nejlepší metodu spolupráce s ostatními proto můžeme doporučit nastavení „neutrálního“ repozitáře, do nějž budete mít všichni přístup, budete do něj moci odesílat data a budete z něj moci stahovat.

Running a Git server is fairly straightforward.
Nejprve určíte, jakými protokoly má váš server komunikovat.
První část této kapitoly se bude věnovat možným protokolům, jejich přednostem a nevýhodám.
V dalších částech popíšeme některá typická nastavení pro použití těchto protokolů, a jak s nimi uvést server do provozu.
Last, we'll go over a few hosted options, if you don't mind hosting your code on someone else's server and don't want to go through the hassle of setting up and maintaining your own server.

Pokud víte, že nebudete chtít spravovat vlastní server, můžete přeskočit rovnou na poslední část této kapitoly a podívat se na možnosti nastavení hostovaného účtu. Pak přejděte na následující kapitolu, v níž se dočtete o detailech a záludnostech při práci v prostředí s distribuovanou správou zdrojového kódu.

A remote repository is generally a _bare repository_ – a Git repository that has no working directory.
Because the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it's just the Git data.
In the simplest terms, a bare repository is the contents of your project's `.git` directory and nothing else.

include::sections/protocols.asc[]

include::sections/git-on-a-server.asc[]

include::sections/generating-ssh-key.asc[]

include::sections/setting-up-server.asc[]

include::sections/git-daemon.asc[]

include::sections/smart-http.asc[]

include::sections/gitweb.asc[]

include::sections/gitlab.asc[]

include::sections/hosted.asc[]

=== Shrnutí

Existuje několik možností, jak vytvořit a zprovoznit vzdálený repozitář Git tak, abyste mohli spolupracovat s ostatními uživateli nebo sdílet svou práci.

Provoz vlastního serveru vám dává celou řadu možností kontroly a umožňuje provozovat server za vaším firewallem. Nastavení a správa takového serveru však obvykle bývají časově náročné.
If you place your data on a hosted server, it's easy to set up and maintain; however, you have to be able to keep your code on someone else's servers, and some organizations don't allow that.

Teď už byste se měli umět rozhodnout, které řešení nebo jaká kombinace řešení se pro vás a pro vaši organizaci hodí.
