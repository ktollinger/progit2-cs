[[_git_aliases]]
=== Git Aliases

(((aliases)))
Before we finish this chapter on basic Git, there's just one little tip that can make your Git experience simpler, easier, and more familiar: aliases.
We won't refer to them or assume you've used them later in the book, but you should probably know how to use them.

Git doesn't automatically infer your command if you type it in partially.
If you don't want to type the entire text of each of the Git commands, you can easily set up an alias for each command using `git config`.(((git commands, config)))
Here are a couple of examples you may want to set up:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

To znamená, že například místo kompletního příkazu `git commit` stačí zadat pouze zkrácené `git ci`.
As you go on using Git, you'll probably use other commands frequently as well; don't hesitate to create new aliases.

Tato metoda může být velmi užitečná také k vytváření příkazů, které by podle vás měly existovat.
Pokud jste například narazili na problém s používáním příkazu pro vrácení souboru z oblasti připravených změn, můžete ho vyřešit přidáním vlastního aliasu:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Po zadání takového příkazu budete mít k dispozici dva ekvivalentní příkazy:

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

Příkaz unstage je o něco jasnější.
It's also common to add a `last` command, like this:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Tímto způsobem snadno zobrazíte poslední revizi:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

As you can tell, Git simply replaces the new command with whatever you alias it for.
Může se však stát, že budete chtít spustit externí příkaz, a ne dílčí příkaz Git.
V takovém případě zadejte na začátek příkazu znak `!`.
Tuto možnost využijete, pokud si píšete své vlastní nástroje, které fungují s repozitářem Git.
Jako příklad můžeme uvést situaci, kdy nahradíte příkaz `git visual` aliasem `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
