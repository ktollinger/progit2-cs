=== Distribuované pracovní postupy

(((workflows)))
Unlike Centralized Version Control Systems (CVCSs), the distributed nature of Git allows you to be far more flexible in how developers collaborate on projects.
V centralizovaných systémech představuje každý vývojář samostatný uzel, pracující více či méně na stejné úrovni vůči centrálnímu úložišti.
In Git, however, every developer is potentially both a node and a hub – that is, every developer can both contribute code to other repositories and maintain a public repository on which others can base their work and which they can contribute to.
This opens a vast range of workflow possibilities for your project and/or your team, so we'll cover a few common paradigms that take advantage of this flexibility.
We'll go over the strengths and possible weaknesses of each design; you can choose a single one to use, or you can mix and match features from each.

==== Centralizovaný pracovní postup

(((workflows, centralized)))
In centralized systems, there is generally a single collaboration model–the centralized workflow.
Jedno centrální úložiště (hub) nebo repozitář přijímá zdrojový kód a každý podle něj synchronizuje svou práci.
A number of developers are nodes – consumers of that hub – and synchronize to that one place.

.Centralized workflow.
image::images/centralized_workflow.png[Centralized workflow.]

To znamená, že pokud dva vývojáři klonují z centrálního úložiště a oba provedou změny, jen první z nich, který odešle své změny, to může provést bez komplikací.
The second developer must merge in the first one's work before pushing changes up, so as not to overwrite the first developer's changes.
This concept is as true in Git as it is in Subversion(((Subversion))) (or any CVCS), and this model works perfectly well in Git.

If you are already comfortable with a centralized workflow in your company or team, you can easily continue using that workflow with Git.
Simply set up a single repository, and give everyone on your team push access; Git won't let users overwrite each other.
Say John and Jessica both start working at the same time.
John finishes his change and pushes it to the server.
Then Jessica tries to push her changes, but the server rejects them.
She is told that she's trying to push non-fast-forward changes and that she won't be able to do so until she fetches and merges.
This workflow is attractive to a lot of people because it's a paradigm that many are familiar and comfortable with.

This is also not limited to small teams. With Git's branching model, it's possible for hundreds of developers to successfully work on a single project through dozens of branches simultaneously.

[[_integration_manager]]
==== Integration-Manager Workflow

(((workflows, integration manager)))
Because Git allows you to have multiple remote repositories, it's possible to have a workflow where each developer has write access to their own public repository and read access to everyone else's.
This scenario often includes a canonical repository that represents the ``official'' project.
Chcete-li do tohoto projektu přispívat, vytvořte vlastní veřejný klon projektu a odešlete do něj změny, které jste provedli.
Poté odešlete správci hlavního projektu žádost, aby do projektu natáhl vaše změny.
The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
The process works as follows (see <<wfdiag_b>>):

1.  Správce projektu odešle data do svého veřejného repozitáře.
2.  Přispěvatel naklonuje tento repozitář a provede změny.
3.  Přispěvatel odešle změny do své vlastní veřejné kopie.
4.  Přispěvatel pošle správci e-mail s žádostí, aby natáhl změny do projektu.
5.  The maintainer adds the contributor's repo as a remote and merges locally.
6.  Správce odešle začleněné změny do hlavního repozitáře.

[[wfdiag_b]]
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]

(((forking)))
This is a very common workflow with hub-based tools like GitHub or GitLab, where it's easy to fork a project and push your changes into your fork for everyone to see.
Jednou z hlavních předností tohoto postupu je, že můžete pracovat bez přerušení a správce hlavního repozitáře může natáhnout vaše změny do projektu, kdykoli uzná za vhodné.
Contributors don't have to wait for the project to incorporate their changes – each party can work at their own pace.

==== Pracovní postup s diktátorem a poručíky

(((workflows, dictator and lieutenants)))
This is a variant of a multiple-repository workflow.
It's generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.
Various integration managers are in charge of certain parts of the repository; they're called lieutenants.
Všichni poručíci mají jednoho integračního manažera, kterému se říká „benevolentní diktátor“.
The benevolent dictator's repository serves as the reference repository from which all the collaborators need to pull.
The process works like this (see <<wfdiag_c>>):

1.  Regular developers work on their topic branch and rebase their work on top of `master`.
    The `master` branch is that of the dictator.
2.  Lieutenants merge the developers' topic branches into their `master` branch.
3.  The dictator merges the lieutenants' `master` branches into the dictator's `master` branch.
4.  The dictator pushes their `master` to the reference repository so the other developers can rebase on it.

[[wfdiag_c]]
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]

This kind of workflow isn't common, but can be useful in very big projects, or in highly hierarchical environments.
It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.

==== Workflows Summary

Toto jsou tedy některé z běžně používaných pracovních postupů, které můžete využít v distribuovaných systémech, jako je například Git. Uvidíte ale, že na pozadí vašich konkrétních potřeb v reálných situacích lze vytvořit celou řadu variací na tyto postupy.
Now that you can (hopefully) determine which workflow combination may work for you, we'll cover some more specific examples of how to accomplish the main roles that make up the different flows.
In the next section, you'll learn about a few common patterns for contributing to a project.
